{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TileProgram {\n  constructor(aShape, reps) {\n    this.variableNames = ['A'];\n    const outputShape = new Array(aShape.length);\n\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n\n}\n\nfunction getSourceCoords(aShape) {\n  const rank = aShape.length;\n\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n  const sourceCoords = [];\n\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n\n  return sourceCoords.join();\n}","map":{"version":3,"sources":["../src/tile_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAO,WAAP,CAAkB;AAMtB,EAAA,WAAA,CAAY,MAAZ,EAA8B,IAA9B,EAA4C;AAL5C,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAME,UAAM,WAAW,GAAa,IAAI,KAAJ,CAAU,MAAM,CAAC,MAAjB,CAA9B;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAAW,CAAC,MAAhC,EAAwC,CAAC,EAAzC,EAA6C;AAC3C,MAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,MAAM,CAAC,CAAD,CAAN,GAAY,IAAI,CAAC,CAAD,CAAjC;AACD;;AACD,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,IAAL,GAAY,WAAW,CAAC,MAAxB;AACA,UAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,IAAN,CAA/B;AACA,UAAM,YAAY,GAAG,eAAe,CAAC,MAAD,CAApC;AAEA,SAAK,QAAL,GAAgB;;UAEV,KAAK;yBACU,YAAY;;AAEhC,KALD;AAMD;;AAtBqB;;AAyBxB,SAAS,eAAT,CAAyB,MAAzB,EAAyC;AACvC,QAAM,IAAI,GAAG,MAAM,CAAC,MAApB;;AACA,MAAI,IAAI,GAAG,CAAX,EAAc;AACZ,UAAM,KAAK,CAAC,iBAAiB,IAAI,uBAAtB,CAAX;AACD;;AACD,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd,WAAO,eAAe,MAAM,CAAC,CAAD,CAAG,GAA/B;AACD;;AAED,QAAM,aAAa,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CAAtB;AAEA,QAAM,YAAY,GAAG,EAArB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,IAAA,YAAY,CAAC,IAAb,CAAkB,QAAQ,aAAa,CAAC,CAAD,CAAG,KAAK,MAAM,CAAC,CAAD,CAAG,GAAxD;AACD;;AACD,SAAO,YAAY,CAAC,IAAb,EAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TileProgram {\n    constructor(aShape, reps) {\n        this.variableNames = ['A'];\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[i] * reps[i];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = getCoordsDataType(this.rank);\n        const sourceCoords = getSourceCoords(aShape);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n    }\n}\nfunction getSourceCoords(aShape) {\n    const rank = aShape.length;\n    if (rank > 5) {\n        throw Error(`Tile for rank ${rank} is not yet supported`);\n    }\n    if (rank === 1) {\n        return `imod(resRC, ${aShape[0]})`;\n    }\n    const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n    const sourceCoords = [];\n    for (let i = 0; i < aShape.length; i++) {\n        sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n    }\n    return sourceCoords.join();\n}\n//# sourceMappingURL=tile_gpu.js.map"]},"metadata":{},"sourceType":"module"}