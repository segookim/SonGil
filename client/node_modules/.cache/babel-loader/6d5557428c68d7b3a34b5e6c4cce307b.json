{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { Dataset } from '../dataset';\nimport { TextLineDataset } from './text_line_dataset';\nconst CODE_QUOTE = '\"';\nconst STATE_OUT = Symbol('out');\nconst STATE_FIELD = Symbol('field');\nconst STATE_QUOTE = Symbol('quote');\nconst STATE_QUOTE_AFTER_QUOTE = Symbol('quoteafterquote');\nconst STATE_WITHIN_QUOTE_IN_QUOTE = Symbol('quoteinquote');\n/**\n * Represents a potentially large collection of delimited text records.\n *\n * The produced `TensorContainer`s each contain one key-value pair for\n * every column of the table.  When a field is empty in the incoming data, the\n * resulting value is `undefined`, or throw error if it is required.  Values\n * that can be parsed as numbers are emitted as type `number`, other values\n * are parsed as `string`.\n *\n * The results are not batched.\n *\n * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}\n */\n\nexport class CSVDataset extends Dataset {\n  /**\n   * Create a `CSVDataset`.\n   *\n   * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.\n   * @param csvConfig (Optional) A CSVConfig object that contains configurations\n   *     of reading and decoding from CSV file(s).\n   *\n   *     hasHeader: (Optional) A boolean value that indicates whether the first\n   *     row of provided CSV file is a header line with column names, and should\n   *     not be included in the data. Defaults to `true`.\n   *\n   *     columnNames: (Optional) A list of strings that corresponds to\n   *     the CSV column names, in order. If provided, it ignores the column\n   *     names inferred from the header row. If not provided, infers the column\n   *     names from the first row of the records. If hasHeader is false and\n   *     columnNames is not provided, this method throws an error.\n   *\n   *     columnConfigs: (Optional) A dictionary whose key is column names, value\n   *     is an object stating if this column is required, column's data type,\n   *     default value, and if this column is label. If provided, keys must\n   *     correspond to names provided in columnNames or inferred from the file\n   *     header lines. If isLabel is true any column, returns an array of two\n   *     items: the first item is a dict of features key/value pairs, the second\n   *     item is a dict of labels key/value pairs. If no feature is marked as\n   *     label, returns a dict of features only.\n   *\n   *     configuredColumnsOnly (Optional) If true, only columns provided in\n   *     columnConfigs will be parsed and provided during iteration.\n   *\n   *     delimiter (Optional) The string used to parse each line of the input\n   *     file. Defaults to `,`.\n   */\n  constructor(input, csvConfig) {\n    super();\n    this.input = input;\n    this.hasHeader = true;\n    this.fullColumnNames = null;\n    this.columnNamesValidated = false;\n    this.columnConfigs = null;\n    this.configuredColumnsOnly = false;\n    this.delimiter = ',';\n    this.delimWhitespace = false;\n    this.base = new TextLineDataset(input);\n\n    if (!csvConfig) {\n      csvConfig = {};\n    }\n\n    this.hasHeader = csvConfig.hasHeader === false ? false : true;\n    this.fullColumnNames = csvConfig.columnNames;\n    this.columnConfigs = csvConfig.columnConfigs;\n    this.configuredColumnsOnly = csvConfig.configuredColumnsOnly;\n\n    if (csvConfig.delimWhitespace) {\n      util.assert(csvConfig.delimiter == null, () => 'Delimiter should not be provided when delimWhitespace is true.');\n      this.delimWhitespace = true;\n      this.delimiter = ' ';\n    } else {\n      this.delimiter = csvConfig.delimiter ? csvConfig.delimiter : ',';\n    }\n  }\n  /**\n   * Returns column names of the csv dataset. If `configuredColumnsOnly` is\n   * true, return column names in `columnConfigs`. If `configuredColumnsOnly` is\n   * false and `columnNames` is provided, `columnNames`. If\n   * `configuredColumnsOnly` is false and `columnNames` is not provided, return\n   * all column names parsed from the csv file. For example usage please go to\n   * `tf.data.csv`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n\n\n  async columnNames() {\n    if (!this.columnNamesValidated) {\n      await this.setColumnNames();\n    }\n\n    return this.configuredColumnsOnly ? Object.keys(this.columnConfigs) : this.fullColumnNames;\n  }\n  /* 1) If `columnNames` is provided as string[], use this string[] as output\n   * keys in corresponding order. The length must match the number of inferred\n   * columns if `hasHeader` is true .\n   * 2) If `columnNames` is not provided, parse header line as `columnNames` if\n   * hasHeader is true. If `hasHeader` is false, throw an error.\n   * 3) If `columnConfigs` is provided, all the keys in `columnConfigs` must\n   * exist in parsed `columnNames`.\n   */\n\n\n  async setColumnNames() {\n    const columnNamesFromFile = await this.maybeReadHeaderLine();\n\n    if (!this.fullColumnNames && !columnNamesFromFile) {\n      // Throw an error if columnNames is not provided and no header line.\n      throw new Error('Column names must be provided if there is no header line.');\n    } else if (this.fullColumnNames && columnNamesFromFile) {\n      // Check provided columnNames match header line.\n      util.assert(columnNamesFromFile.length === this.fullColumnNames.length, () => 'The length of provided columnNames (' + this.fullColumnNames.length.toString() + ') does not match the length of the header line read from ' + 'file (' + columnNamesFromFile.length.toString() + ').');\n    }\n\n    if (!this.fullColumnNames) {\n      this.fullColumnNames = columnNamesFromFile;\n    } // Check if there are duplicate column names.\n\n\n    const counts = this.fullColumnNames.reduce((countAcc, name) => {\n      countAcc[name] = countAcc[name] + 1 || 1;\n      return countAcc;\n    }, {});\n    const duplicateNames = Object.keys(counts).filter(name => counts[name] > 1);\n    util.assert(duplicateNames.length === 0, () => 'Duplicate column names found: ' + duplicateNames.toString()); // Check if keys in columnConfigs match columnNames.\n\n    if (this.columnConfigs) {\n      for (const key of Object.keys(this.columnConfigs)) {\n        const index = this.fullColumnNames.indexOf(key);\n\n        if (index === -1) {\n          throw new Error('The key \"' + key + '\" provided in columnConfigs does not match any of the column ' + 'names (' + this.fullColumnNames.toString() + ').');\n        }\n      }\n    }\n\n    this.columnNamesValidated = true;\n  }\n\n  async maybeReadHeaderLine() {\n    if (this.hasHeader) {\n      const iter = await this.base.iterator();\n      const firstElement = await iter.next();\n\n      if (firstElement.done) {\n        throw new Error('No data was found for CSV parsing.');\n      }\n\n      const firstLine = firstElement.value;\n      const headers = this.parseRow(firstLine, false);\n      return headers;\n    } else {\n      return null;\n    }\n  }\n\n  async iterator() {\n    if (!this.columnNamesValidated) {\n      await this.setColumnNames();\n    }\n\n    let lines = await this.base.iterator();\n\n    if (this.hasHeader) {\n      // We previously read the first line to get the columnNames.\n      // Now that we're providing data, skip it.\n      lines = lines.skip(1);\n    }\n\n    return lines.map(x => this.makeDataElement(x));\n  }\n\n  makeDataElement(line) {\n    const values = this.parseRow(line);\n    const features = {};\n    const labels = {};\n\n    for (let i = 0; i < this.fullColumnNames.length; i++) {\n      const key = this.fullColumnNames[i];\n      const config = this.columnConfigs ? this.columnConfigs[key] : null;\n\n      if (this.configuredColumnsOnly && !config) {\n        // This column is not selected.\n        continue;\n      } else {\n        const value = values[i];\n        let parsedValue = null;\n\n        if (value === '') {\n          // If default value is provided, use it. If default value is not\n          // provided, set as undefined.\n          if (config && config.default !== undefined) {\n            parsedValue = config.default;\n          } else if (config && (config.required || config.isLabel)) {\n            throw new Error(`Required column ${key} is empty in this line: ${line}`);\n          } else {\n            parsedValue = undefined;\n          }\n        } else {\n          // A value is present, so parse it based on type\n          const valueAsNum = Number(value);\n\n          if (isNaN(valueAsNum)) {\n            // The value is a string and this column is declared as boolean\n            // in config, parse it as boolean.\n            if (config && config.dtype === 'bool') {\n              parsedValue = this.getBoolean(value);\n            } else {\n              // Set value as string\n              parsedValue = value;\n            }\n          } else if (!config || !config.dtype) {\n            // If this value is a number and no type config is provided, return\n            // it as number.\n            parsedValue = valueAsNum;\n          } else {\n            // If this value is a number and data type is provided, parse it\n            // according to provided data type.\n            switch (config.dtype) {\n              case 'float32':\n                parsedValue = valueAsNum;\n                break;\n\n              case 'int32':\n                parsedValue = Math.floor(valueAsNum);\n                break;\n\n              case 'bool':\n                parsedValue = this.getBoolean(value);\n                break;\n\n              default:\n                parsedValue = valueAsNum;\n            }\n          }\n        } // Check if this column is label.\n\n\n        config && config.isLabel ? labels[key] = parsedValue : features[key] = parsedValue;\n      }\n    } // If label exists, return an object of features and labels as {xs:features,\n    // ys:labels}, otherwise return features only.\n\n\n    if (Object.keys(labels).length === 0) {\n      return features;\n    } else {\n      return {\n        xs: features,\n        ys: labels\n      };\n    }\n  }\n\n  getBoolean(value) {\n    if (value === '1' || value.toLowerCase() === 'true') {\n      return 1;\n    } else {\n      return 0;\n    }\n  } // adapted from https://beta.observablehq.com/@mbostock/streaming-csv\n\n\n  parseRow(line, validateElementCount = true) {\n    const result = [];\n    let readOffset = 0;\n    const readLength = line.length;\n    let currentState = STATE_OUT; // Goes through the line to parse quote.\n\n    for (let i = 0; i < readLength; i++) {\n      switch (currentState) {\n        // Before enter a new field\n        case STATE_OUT:\n          switch (line.charAt(i)) {\n            // Enter a quoted field\n            case CODE_QUOTE:\n              readOffset = i + 1;\n              currentState = STATE_QUOTE;\n              break;\n            // Read an empty field\n\n            case this.delimiter:\n              readOffset = i + 1; // If delimiter is white space and configured to collapse\n              // multiple white spaces, ignore this white space.\n\n              if (this.delimiter === ' ' && this.delimWhitespace) {\n                break;\n              }\n\n              result.push('');\n              currentState = STATE_OUT;\n              break;\n            // Enter an unquoted field\n\n            default:\n              currentState = STATE_FIELD;\n              readOffset = i;\n              break;\n          }\n\n          break;\n        // In an unquoted field\n\n        case STATE_FIELD:\n          switch (line.charAt(i)) {\n            // Exit an unquoted field, add it to result\n            case this.delimiter:\n              result.push(line.substring(readOffset, i));\n              currentState = STATE_OUT;\n              readOffset = i + 1;\n              break;\n\n            default:\n          }\n\n          break;\n        // In a quoted field\n\n        case STATE_QUOTE:\n          switch (line.charAt(i)) {\n            // Read a quote after a quote\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE_AFTER_QUOTE;\n              break;\n\n            default:\n          }\n\n          break;\n        // This state means it's right after a second quote in a field\n\n        case STATE_QUOTE_AFTER_QUOTE:\n          switch (line.charAt(i)) {\n            // Finished a quoted field\n            case this.delimiter:\n              result.push(line.substring(readOffset, i - 1));\n              currentState = STATE_OUT;\n              readOffset = i + 1;\n              break;\n            // Finished a quoted part in a quoted field\n\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE;\n              break;\n            // In a quoted part in a quoted field\n\n            default:\n              currentState = STATE_WITHIN_QUOTE_IN_QUOTE;\n              break;\n          }\n\n          break;\n\n        case STATE_WITHIN_QUOTE_IN_QUOTE:\n          switch (line.charAt(i)) {\n            // Exit a quoted part in a quoted field\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE;\n              break;\n\n            default:\n          }\n\n          break;\n\n        default:\n      }\n    } // Adds last item based on if it is quoted.\n\n\n    if (currentState === STATE_QUOTE_AFTER_QUOTE) {\n      result.push(line.substring(readOffset, readLength - 1));\n    } else {\n      result.push(line.substring(readOffset));\n    } // Check if each row has the same number of elements as column names.\n\n\n    if (validateElementCount && result.length !== this.fullColumnNames.length) {\n      throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${result}`);\n    }\n\n    return result;\n  }\n\n} // TODO(soergel): add more basic datasets for parity with tf.data\n// tf.data.FixedLengthRecordDataset()\n// tf.data.TFRecordDataset()","map":{"version":3,"sources":["../../src/datasets/csv_dataset.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { Dataset } from '../dataset';\nimport { TextLineDataset } from './text_line_dataset';\nconst CODE_QUOTE = '\"';\nconst STATE_OUT = Symbol('out');\nconst STATE_FIELD = Symbol('field');\nconst STATE_QUOTE = Symbol('quote');\nconst STATE_QUOTE_AFTER_QUOTE = Symbol('quoteafterquote');\nconst STATE_WITHIN_QUOTE_IN_QUOTE = Symbol('quoteinquote');\n/**\n * Represents a potentially large collection of delimited text records.\n *\n * The produced `TensorContainer`s each contain one key-value pair for\n * every column of the table.  When a field is empty in the incoming data, the\n * resulting value is `undefined`, or throw error if it is required.  Values\n * that can be parsed as numbers are emitted as type `number`, other values\n * are parsed as `string`.\n *\n * The results are not batched.\n *\n * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}\n */\nexport class CSVDataset extends Dataset {\n    /**\n     * Create a `CSVDataset`.\n     *\n     * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.\n     * @param csvConfig (Optional) A CSVConfig object that contains configurations\n     *     of reading and decoding from CSV file(s).\n     *\n     *     hasHeader: (Optional) A boolean value that indicates whether the first\n     *     row of provided CSV file is a header line with column names, and should\n     *     not be included in the data. Defaults to `true`.\n     *\n     *     columnNames: (Optional) A list of strings that corresponds to\n     *     the CSV column names, in order. If provided, it ignores the column\n     *     names inferred from the header row. If not provided, infers the column\n     *     names from the first row of the records. If hasHeader is false and\n     *     columnNames is not provided, this method throws an error.\n     *\n     *     columnConfigs: (Optional) A dictionary whose key is column names, value\n     *     is an object stating if this column is required, column's data type,\n     *     default value, and if this column is label. If provided, keys must\n     *     correspond to names provided in columnNames or inferred from the file\n     *     header lines. If isLabel is true any column, returns an array of two\n     *     items: the first item is a dict of features key/value pairs, the second\n     *     item is a dict of labels key/value pairs. If no feature is marked as\n     *     label, returns a dict of features only.\n     *\n     *     configuredColumnsOnly (Optional) If true, only columns provided in\n     *     columnConfigs will be parsed and provided during iteration.\n     *\n     *     delimiter (Optional) The string used to parse each line of the input\n     *     file. Defaults to `,`.\n     */\n    constructor(input, csvConfig) {\n        super();\n        this.input = input;\n        this.hasHeader = true;\n        this.fullColumnNames = null;\n        this.columnNamesValidated = false;\n        this.columnConfigs = null;\n        this.configuredColumnsOnly = false;\n        this.delimiter = ',';\n        this.delimWhitespace = false;\n        this.base = new TextLineDataset(input);\n        if (!csvConfig) {\n            csvConfig = {};\n        }\n        this.hasHeader = csvConfig.hasHeader === false ? false : true;\n        this.fullColumnNames = csvConfig.columnNames;\n        this.columnConfigs = csvConfig.columnConfigs;\n        this.configuredColumnsOnly = csvConfig.configuredColumnsOnly;\n        if (csvConfig.delimWhitespace) {\n            util.assert(csvConfig.delimiter == null, () => 'Delimiter should not be provided when delimWhitespace is true.');\n            this.delimWhitespace = true;\n            this.delimiter = ' ';\n        }\n        else {\n            this.delimiter = csvConfig.delimiter ? csvConfig.delimiter : ',';\n        }\n    }\n    /**\n     * Returns column names of the csv dataset. If `configuredColumnsOnly` is\n     * true, return column names in `columnConfigs`. If `configuredColumnsOnly` is\n     * false and `columnNames` is provided, `columnNames`. If\n     * `configuredColumnsOnly` is false and `columnNames` is not provided, return\n     * all column names parsed from the csv file. For example usage please go to\n     * `tf.data.csv`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    async columnNames() {\n        if (!this.columnNamesValidated) {\n            await this.setColumnNames();\n        }\n        return this.configuredColumnsOnly ? Object.keys(this.columnConfigs) :\n            this.fullColumnNames;\n    }\n    /* 1) If `columnNames` is provided as string[], use this string[] as output\n     * keys in corresponding order. The length must match the number of inferred\n     * columns if `hasHeader` is true .\n     * 2) If `columnNames` is not provided, parse header line as `columnNames` if\n     * hasHeader is true. If `hasHeader` is false, throw an error.\n     * 3) If `columnConfigs` is provided, all the keys in `columnConfigs` must\n     * exist in parsed `columnNames`.\n     */\n    async setColumnNames() {\n        const columnNamesFromFile = await this.maybeReadHeaderLine();\n        if (!this.fullColumnNames && !columnNamesFromFile) {\n            // Throw an error if columnNames is not provided and no header line.\n            throw new Error('Column names must be provided if there is no header line.');\n        }\n        else if (this.fullColumnNames && columnNamesFromFile) {\n            // Check provided columnNames match header line.\n            util.assert(columnNamesFromFile.length === this.fullColumnNames.length, () => 'The length of provided columnNames (' +\n                this.fullColumnNames.length.toString() +\n                ') does not match the length of the header line read from ' +\n                'file (' + columnNamesFromFile.length.toString() + ').');\n        }\n        if (!this.fullColumnNames) {\n            this.fullColumnNames = columnNamesFromFile;\n        }\n        // Check if there are duplicate column names.\n        const counts = this.fullColumnNames.reduce((countAcc, name) => {\n            countAcc[name] = (countAcc[name] + 1) || 1;\n            return countAcc;\n        }, {});\n        const duplicateNames = Object.keys(counts).filter((name) => (counts[name] > 1));\n        util.assert(duplicateNames.length === 0, () => 'Duplicate column names found: ' + duplicateNames.toString());\n        // Check if keys in columnConfigs match columnNames.\n        if (this.columnConfigs) {\n            for (const key of Object.keys(this.columnConfigs)) {\n                const index = this.fullColumnNames.indexOf(key);\n                if (index === -1) {\n                    throw new Error('The key \"' + key +\n                        '\" provided in columnConfigs does not match any of the column ' +\n                        'names (' + this.fullColumnNames.toString() + ').');\n                }\n            }\n        }\n        this.columnNamesValidated = true;\n    }\n    async maybeReadHeaderLine() {\n        if (this.hasHeader) {\n            const iter = await this.base.iterator();\n            const firstElement = await iter.next();\n            if (firstElement.done) {\n                throw new Error('No data was found for CSV parsing.');\n            }\n            const firstLine = firstElement.value;\n            const headers = this.parseRow(firstLine, false);\n            return headers;\n        }\n        else {\n            return null;\n        }\n    }\n    async iterator() {\n        if (!this.columnNamesValidated) {\n            await this.setColumnNames();\n        }\n        let lines = await this.base.iterator();\n        if (this.hasHeader) {\n            // We previously read the first line to get the columnNames.\n            // Now that we're providing data, skip it.\n            lines = lines.skip(1);\n        }\n        return lines.map(x => this.makeDataElement(x));\n    }\n    makeDataElement(line) {\n        const values = this.parseRow(line);\n        const features = {};\n        const labels = {};\n        for (let i = 0; i < this.fullColumnNames.length; i++) {\n            const key = this.fullColumnNames[i];\n            const config = this.columnConfigs ? this.columnConfigs[key] : null;\n            if (this.configuredColumnsOnly && !config) {\n                // This column is not selected.\n                continue;\n            }\n            else {\n                const value = values[i];\n                let parsedValue = null;\n                if (value === '') {\n                    // If default value is provided, use it. If default value is not\n                    // provided, set as undefined.\n                    if (config && config.default !== undefined) {\n                        parsedValue = config.default;\n                    }\n                    else if (config && (config.required || config.isLabel)) {\n                        throw new Error(`Required column ${key} is empty in this line: ${line}`);\n                    }\n                    else {\n                        parsedValue = undefined;\n                    }\n                }\n                else {\n                    // A value is present, so parse it based on type\n                    const valueAsNum = Number(value);\n                    if (isNaN(valueAsNum)) {\n                        // The value is a string and this column is declared as boolean\n                        // in config, parse it as boolean.\n                        if (config && config.dtype === 'bool') {\n                            parsedValue = this.getBoolean(value);\n                        }\n                        else {\n                            // Set value as string\n                            parsedValue = value;\n                        }\n                    }\n                    else if (!config || !config.dtype) {\n                        // If this value is a number and no type config is provided, return\n                        // it as number.\n                        parsedValue = valueAsNum;\n                    }\n                    else {\n                        // If this value is a number and data type is provided, parse it\n                        // according to provided data type.\n                        switch (config.dtype) {\n                            case 'float32':\n                                parsedValue = valueAsNum;\n                                break;\n                            case 'int32':\n                                parsedValue = Math.floor(valueAsNum);\n                                break;\n                            case 'bool':\n                                parsedValue = this.getBoolean(value);\n                                break;\n                            default:\n                                parsedValue = valueAsNum;\n                        }\n                    }\n                }\n                // Check if this column is label.\n                (config && config.isLabel) ? labels[key] = parsedValue :\n                    features[key] = parsedValue;\n            }\n        }\n        // If label exists, return an object of features and labels as {xs:features,\n        // ys:labels}, otherwise return features only.\n        if (Object.keys(labels).length === 0) {\n            return features;\n        }\n        else {\n            return { xs: features, ys: labels };\n        }\n    }\n    getBoolean(value) {\n        if (value === '1' || value.toLowerCase() === 'true') {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    // adapted from https://beta.observablehq.com/@mbostock/streaming-csv\n    parseRow(line, validateElementCount = true) {\n        const result = [];\n        let readOffset = 0;\n        const readLength = line.length;\n        let currentState = STATE_OUT;\n        // Goes through the line to parse quote.\n        for (let i = 0; i < readLength; i++) {\n            switch (currentState) {\n                // Before enter a new field\n                case STATE_OUT:\n                    switch (line.charAt(i)) {\n                        // Enter a quoted field\n                        case CODE_QUOTE:\n                            readOffset = i + 1;\n                            currentState = STATE_QUOTE;\n                            break;\n                        // Read an empty field\n                        case this.delimiter:\n                            readOffset = i + 1;\n                            // If delimiter is white space and configured to collapse\n                            // multiple white spaces, ignore this white space.\n                            if (this.delimiter === ' ' && this.delimWhitespace) {\n                                break;\n                            }\n                            result.push('');\n                            currentState = STATE_OUT;\n                            break;\n                        // Enter an unquoted field\n                        default:\n                            currentState = STATE_FIELD;\n                            readOffset = i;\n                            break;\n                    }\n                    break;\n                // In an unquoted field\n                case STATE_FIELD:\n                    switch (line.charAt(i)) {\n                        // Exit an unquoted field, add it to result\n                        case this.delimiter:\n                            result.push(line.substring(readOffset, i));\n                            currentState = STATE_OUT;\n                            readOffset = i + 1;\n                            break;\n                        default:\n                    }\n                    break;\n                // In a quoted field\n                case STATE_QUOTE:\n                    switch (line.charAt(i)) {\n                        // Read a quote after a quote\n                        case CODE_QUOTE:\n                            currentState = STATE_QUOTE_AFTER_QUOTE;\n                            break;\n                        default:\n                    }\n                    break;\n                // This state means it's right after a second quote in a field\n                case STATE_QUOTE_AFTER_QUOTE:\n                    switch (line.charAt(i)) {\n                        // Finished a quoted field\n                        case this.delimiter:\n                            result.push(line.substring(readOffset, i - 1));\n                            currentState = STATE_OUT;\n                            readOffset = i + 1;\n                            break;\n                        // Finished a quoted part in a quoted field\n                        case CODE_QUOTE:\n                            currentState = STATE_QUOTE;\n                            break;\n                        // In a quoted part in a quoted field\n                        default:\n                            currentState = STATE_WITHIN_QUOTE_IN_QUOTE;\n                            break;\n                    }\n                    break;\n                case STATE_WITHIN_QUOTE_IN_QUOTE:\n                    switch (line.charAt(i)) {\n                        // Exit a quoted part in a quoted field\n                        case CODE_QUOTE:\n                            currentState = STATE_QUOTE;\n                            break;\n                        default:\n                    }\n                    break;\n                default:\n            }\n        }\n        // Adds last item based on if it is quoted.\n        if (currentState === STATE_QUOTE_AFTER_QUOTE) {\n            result.push(line.substring(readOffset, readLength - 1));\n        }\n        else {\n            result.push(line.substring(readOffset));\n        }\n        // Check if each row has the same number of elements as column names.\n        if (validateElementCount && result.length !== this.fullColumnNames.length) {\n            throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${result}`);\n        }\n        return result;\n    }\n}\n// TODO(soergel): add more basic datasets for parity with tf.data\n// tf.data.FixedLengthRecordDataset()\n// tf.data.TFRecordDataset()\n//# sourceMappingURL=csv_dataset.js.map"]},"metadata":{},"sourceType":"module"}