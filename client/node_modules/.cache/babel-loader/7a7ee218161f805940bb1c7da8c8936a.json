{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ConcatProgram } from '../concat_gpu';\nimport { ConcatPackedProgram } from '../concat_packed_gpu';\nimport { concatImplCPU } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concatImpl(inputs, axis, backend) {\n  var dtype = inputs[0].dtype;\n\n  if (dtype === 'complex64') {\n    var reals = inputs.map(function (t) {\n      return real({\n        inputs: {\n          input: t\n        },\n        backend: backend\n      });\n    });\n    var imags = inputs.map(function (t) {\n      return imag({\n        inputs: {\n          input: t\n        },\n        backend: backend\n      });\n    });\n    var realConcated = concatImpl(reals, axis, backend);\n    var imagConcated = concatImpl(imags, axis, backend);\n\n    var _result = complex({\n      inputs: {\n        real: realConcated,\n        imag: imagConcated\n      },\n      backend: backend\n    });\n\n    reals.forEach(function (r) {\n      return backend.disposeIntermediateTensorInfo(r);\n    });\n    imags.forEach(function (i) {\n      return backend.disposeIntermediateTensorInfo(i);\n    });\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n    return _result;\n  } // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n\n\n  if (dtype === 'string') {\n    var _computeTensors2D = computeTensors2D(inputs, axis, backend),\n        _tensors2D = _computeTensors2D.tensors2D,\n        _outShape = _computeTensors2D.outShape;\n\n    var inputsValShapes = _tensors2D.map(function (t) {\n      return {\n        vals: backend.readSync(t.dataId),\n        shape: t.shape\n      };\n    });\n\n    var simplyConcat = _tensors2D[0].shape[0] === 1;\n    var outVals = concatImplCPU(inputsValShapes, _outShape, dtype, simplyConcat);\n    var finalOutShape = backend_util.computeOutShape(inputs.map(function (t) {\n      return t.shape;\n    }), axis);\n    var outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    _tensors2D.forEach(function (t) {\n      return backend.disposeIntermediateTensorInfo(t);\n    });\n\n    return outInfo;\n  }\n\n  if (inputs.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    var midIndex = Math.floor(inputs.length / 2);\n    var leftSide = concatImpl(inputs.slice(0, midIndex), axis, backend);\n    var rightSide = concatImpl(inputs.slice(midIndex), axis, backend);\n\n    var _result2 = concatImpl([leftSide, rightSide], axis, backend);\n\n    backend.disposeIntermediateTensorInfo(leftSide);\n    backend.disposeIntermediateTensorInfo(rightSide);\n    return _result2;\n  }\n\n  if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && inputs[0].shape.length > 1) {\n    var _program = new ConcatPackedProgram(inputs.map(function (t) {\n      return t.shape;\n    }), axis);\n\n    return backend.runWebGLProgram(_program, inputs, dtype);\n  }\n\n  var _computeTensors2D2 = computeTensors2D(inputs, axis, backend),\n      tensors2D = _computeTensors2D2.tensors2D,\n      outShape = _computeTensors2D2.outShape;\n\n  var program = new ConcatProgram(tensors2D.map(function (t) {\n    return t.shape;\n  }));\n  var result = backend.runWebGLProgram(program, tensors2D, dtype);\n  tensors2D.forEach(function (r) {\n    return backend.disposeIntermediateTensorInfo(r);\n  });\n  var reshapedResult = reshape({\n    inputs: {\n      x: result\n    },\n    attrs: {\n      shape: outShape\n    },\n    backend: backend\n  });\n  backend.disposeIntermediateTensorInfo(result);\n  return reshapedResult;\n}\n\nfunction computeTensors2D(inputs, axis, backend) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  var outShape = backend_util.computeOutShape(inputs.map(function (t) {\n    return t.shape;\n  }), axis);\n  var tensors2D = inputs.map(function (x) {\n    return reshape({\n      inputs: {\n        x: x\n      },\n      attrs: {\n        shape: [-1, util.sizeFromShape(x.shape.slice(axis))]\n      },\n      backend: backend\n    });\n  });\n  return {\n    tensors2D: tensors2D,\n    outShape: outShape\n  };\n}","map":{"version":3,"sources":["../../src/kernels/Concat_impl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ConcatProgram } from '../concat_gpu';\nimport { ConcatPackedProgram } from '../concat_packed_gpu';\nimport { concatImplCPU } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concatImpl(inputs, axis, backend) {\n    const dtype = inputs[0].dtype;\n    if (dtype === 'complex64') {\n        const reals = inputs.map((t) => real({ inputs: { input: t }, backend }));\n        const imags = inputs.map((t) => imag({ inputs: { input: t }, backend }));\n        const realConcated = concatImpl(reals, axis, backend);\n        const imagConcated = concatImpl(imags, axis, backend);\n        const result = complex({ inputs: { real: realConcated, imag: imagConcated }, backend });\n        reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n        imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n        backend.disposeIntermediateTensorInfo(realConcated);\n        backend.disposeIntermediateTensorInfo(imagConcated);\n        return result;\n    }\n    // Run on cpu if dtype is string. For string, the backend represents it\n    // as Uint8Array[], where each Uint8Array is a character. Given that the\n    // computation is only on the outer array, uploading the whole data onto\n    // gpu is wasteful. Also, currently webgl doesn't have a design to\n    // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n    // just run the kernel on cpu if dtype is string.\n    if (dtype === 'string') {\n        const { tensors2D, outShape } = computeTensors2D(inputs, axis, backend);\n        const inputsValShapes = tensors2D.map(t => {\n            return { vals: backend.readSync(t.dataId), shape: t.shape };\n        });\n        const simplyConcat = tensors2D[0].shape[0] === 1;\n        const outVals = concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n        const finalOutShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n        const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n        tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return outInfo;\n    }\n    if (inputs.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n        const midIndex = Math.floor(inputs.length / 2);\n        const leftSide = concatImpl(inputs.slice(0, midIndex), axis, backend);\n        const rightSide = concatImpl(inputs.slice(midIndex), axis, backend);\n        const result = concatImpl([leftSide, rightSide], axis, backend);\n        backend.disposeIntermediateTensorInfo(leftSide);\n        backend.disposeIntermediateTensorInfo(rightSide);\n        return result;\n    }\n    if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n        inputs[0].shape.length > 1) {\n        const program = new ConcatPackedProgram(inputs.map(t => t.shape), axis);\n        return backend.runWebGLProgram(program, inputs, dtype);\n    }\n    const { tensors2D, outShape } = computeTensors2D(inputs, axis, backend);\n    const program = new ConcatProgram(tensors2D.map(t => t.shape));\n    const result = backend.runWebGLProgram(program, tensors2D, dtype);\n    tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    const reshapedResult = reshape({ inputs: { x: result }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(result);\n    return reshapedResult;\n}\nfunction computeTensors2D(inputs, axis, backend) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n    const tensors2D = inputs.map(x => reshape({\n        inputs: { x },\n        attrs: { shape: [-1, util.sizeFromShape(x.shape.slice(axis))] },\n        backend\n    }));\n    return { tensors2D, outShape };\n}\n//# sourceMappingURL=Concat_impl.js.map"]},"metadata":{},"sourceType":"module"}