{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  switch (node.op) {\n    case 'Max':\n      {\n        var axis = getParamValue('axis', node, tensorMap, context);\n        var keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.max(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Mean':\n      {\n        var _axis = getParamValue('axis', node, tensorMap, context);\n\n        var _keepDims = getParamValue('keepDims', node, tensorMap, context);\n\n        return [tfOps.mean(getParamValue('x', node, tensorMap, context), _axis, _keepDims)];\n      }\n\n    case 'Min':\n      {\n        var _axis2 = getParamValue('axis', node, tensorMap, context);\n\n        var _keepDims2 = getParamValue('keepDims', node, tensorMap, context);\n\n        return [tfOps.min(getParamValue('x', node, tensorMap, context), _axis2, _keepDims2)];\n      }\n\n    case 'Sum':\n      {\n        var _axis3 = getParamValue('axis', node, tensorMap, context);\n\n        var _keepDims3 = getParamValue('keepDims', node, tensorMap, context);\n\n        return [tfOps.sum(getParamValue('x', node, tensorMap, context), _axis3, _keepDims3)];\n      }\n\n    case 'All':\n      {\n        var _axis4 = getParamValue('axis', node, tensorMap, context);\n\n        var _keepDims4 = getParamValue('keepDims', node, tensorMap, context);\n\n        return [tfOps.all(getParamValue('x', node, tensorMap, context), _axis4, _keepDims4)];\n      }\n\n    case 'Any':\n      {\n        var _axis5 = getParamValue('axis', node, tensorMap, context);\n\n        var _keepDims5 = getParamValue('keepDims', node, tensorMap, context);\n\n        return [tfOps.any(getParamValue('x', node, tensorMap, context), _axis5, _keepDims5)];\n      }\n\n    case 'ArgMax':\n      {\n        var _axis6 = getParamValue('axis', node, tensorMap, context);\n\n        return [tfOps.argMax(getParamValue('x', node, tensorMap, context), _axis6)];\n      }\n\n    case 'ArgMin':\n      {\n        var _axis7 = getParamValue('axis', node, tensorMap, context);\n\n        return [tfOps.argMin(getParamValue('x', node, tensorMap, context), _axis7)];\n      }\n\n    case 'Prod':\n      {\n        var _axis8 = getParamValue('axis', node, tensorMap, context);\n\n        var _keepDims6 = getParamValue('keepDims', node, tensorMap, context);\n\n        return [tfOps.prod(getParamValue('x', node, tensorMap, context), _axis8, _keepDims6)];\n      }\n\n    case 'Cumsum':\n      {\n        var _axis9 = getParamValue('axis', node, tensorMap, context);\n\n        var exclusive = getParamValue('exclusive', node, tensorMap, context);\n        var reverse = getParamValue('reverse', node, tensorMap, context);\n        return [tfOps.cumsum(getParamValue('x', node, tensorMap, context), _axis9, exclusive, reverse)];\n      }\n\n    case 'Bincount':\n      var x = getParamValue('x', node, tensorMap, context);\n      var weights = getParamValue('weights', node, tensorMap, context);\n      var size = getParamValue('size', node, tensorMap, context);\n      return [tfOps.bincount(x, weights, size)];\n\n    case 'DenseBincount':\n      {\n        var _x = getParamValue('x', node, tensorMap, context);\n\n        var _weights = getParamValue('weights', node, tensorMap, context);\n\n        var _size = getParamValue('size', node, tensorMap, context);\n\n        var binaryOutput = getParamValue('binaryOutput', node, tensorMap, context);\n        return [tfOps.denseBincount(_x, _weights, _size, binaryOutput)];\n      }\n\n    default:\n      throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n  }\n};\nexport var CATEGORY = 'reduction';","map":{"version":3,"sources":["../../../src/operations/executors/reduction_executor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'Max': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.max(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Mean': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.mean(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Min': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.min(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Sum': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.sum(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'All': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.all(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Any': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.any(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'ArgMax': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [tfOps.argMax(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'ArgMin': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [tfOps.argMin(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'Prod': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.prod(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Cumsum': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const exclusive = getParamValue('exclusive', node, tensorMap, context);\n            const reverse = getParamValue('reverse', node, tensorMap, context);\n            return [tfOps.cumsum(getParamValue('x', node, tensorMap, context), axis, exclusive, reverse)];\n        }\n        case 'Bincount':\n            const x = getParamValue('x', node, tensorMap, context);\n            const weights = getParamValue('weights', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            return [tfOps.bincount(x, weights, size)];\n        case 'DenseBincount': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const weights = getParamValue('weights', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            const binaryOutput = getParamValue('binaryOutput', node, tensorMap, context);\n            return [tfOps.denseBincount(x, weights, size, binaryOutput)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'reduction';\n//# sourceMappingURL=reduction_executor.js.map"]},"metadata":{},"sourceType":"module"}