{"ast":null,"code":"import _toConsumableArray from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat as _concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from './tensor_utils';\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\n\nexport var TensorArray = /*#__PURE__*/function () {\n  function TensorArray(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {\n    _classCallCheck(this, TensorArray);\n\n    this.name = name;\n    this.dtype = dtype;\n    this.maxSize = maxSize;\n    this.elementShape = elementShape;\n    this.identicalElementShapes = identicalElementShapes;\n    this.dynamicSize = dynamicSize;\n    this.clearAfterRead = clearAfterRead;\n    this.tensors = [];\n    this.closed_ = false;\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n\n  _createClass(TensorArray, [{\n    key: \"id\",\n    get: function get() {\n      return this.idTensor.id;\n    }\n  }, {\n    key: \"closed\",\n    get: function get() {\n      return this.closed_;\n    }\n    /**\n     * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n     */\n\n  }, {\n    key: \"clearAndClose\",\n    value: function clearAndClose(keepIds) {\n      this.tensors.forEach(function (tensor) {\n        if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n          tensor.tensor.dispose();\n        }\n      });\n      this.tensors = [];\n      this.closed_ = true;\n      this.idTensor.dispose();\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.tensors.length;\n    }\n    /**\n     * Read the value at location index in the TensorArray.\n     * @param index Number the index to read from.\n     */\n\n  }, {\n    key: \"read\",\n    value: function read(index) {\n      if (this.closed_) {\n        throw new Error(\"TensorArray \".concat(this.name, \" has already been closed.\"));\n      }\n\n      if (index < 0 || index >= this.size()) {\n        throw new Error(\"Tried to read from index \".concat(index, \", but array size is: \").concat(this.size()));\n      }\n\n      var tensorWithState = this.tensors[index];\n\n      if (tensorWithState.cleared) {\n        throw new Error(\"TensorArray \".concat(this.name, \": Could not read index \").concat(index, \" twice because it was cleared after a previous read \") + \"(perhaps try setting clear_after_read = false?).\");\n      }\n\n      if (this.clearAfterRead) {\n        tensorWithState.cleared = true;\n      }\n\n      tensorWithState.read = true;\n      return tensorWithState.tensor;\n    }\n    /**\n     * Helper method to read multiple tensors from the specified indices.\n     */\n\n  }, {\n    key: \"readMany\",\n    value: function readMany(indices) {\n      var _this = this;\n\n      return indices.map(function (index) {\n        return _this.read(index);\n      });\n    }\n    /**\n     * Write value into the index of the TensorArray.\n     * @param index number the index to write to.\n     * @param tensor\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(index, tensor) {\n      if (this.closed_) {\n        throw new Error(\"TensorArray \".concat(this.name, \" has already been closed.\"));\n      }\n\n      if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n        throw new Error(\"Tried to write to index \".concat(index, \", but array is not resizeable and size is: \").concat(this.maxSize));\n      }\n\n      var t = this.tensors[index] || {};\n\n      if (tensor.dtype !== this.dtype) {\n        throw new Error(\"TensorArray \".concat(this.name, \": Could not write to TensorArray index \").concat(index, \",\\n          because the value dtype is \").concat(tensor.dtype, \", but TensorArray dtype is \").concat(this.dtype, \".\"));\n      } // Set the shape for the first time write to unknow shape tensor array\n\n\n      if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0)) {\n        this.elementShape = tensor.shape;\n      }\n\n      assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, \"TensorArray \".concat(this.name, \": Could not write to TensorArray index \").concat(index, \".\"));\n\n      if (t.read) {\n        throw new Error(\"TensorArray \".concat(this.name, \": Could not write to TensorArray index \").concat(index, \", because it has already been read.\"));\n      }\n\n      if (t.written) {\n        throw new Error(\"TensorArray \".concat(this.name, \": Could not write to TensorArray index \").concat(index, \", because it has already been written.\"));\n      }\n\n      t.tensor = tensor;\n      keep(tensor);\n      t.written = true;\n      this.tensors[index] = t;\n    }\n    /**\n     * Helper method to write multiple tensors to the specified indices.\n     */\n\n  }, {\n    key: \"writeMany\",\n    value: function writeMany(indices, tensors) {\n      var _this2 = this;\n\n      if (indices.length !== tensors.length) {\n        throw new Error(\"TensorArray \".concat(this.name, \": could not write multiple tensors,\") + \"because the index size: \".concat(indices.length, \" is not the same as tensors size: \").concat(tensors.length, \".\"));\n      }\n\n      indices.forEach(function (i, index) {\n        return _this2.write(i, tensors[index]);\n      });\n    }\n    /**\n     * Return selected values in the TensorArray as a packed Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n     *    TensorArray is not dynamic, max_value=size(). If not specified returns\n     *    all tensors in the original order.\n     * @param [dtype]\n     */\n\n  }, {\n    key: \"gather\",\n    value: function gather(indices, dtype) {\n      if (!!dtype && dtype !== this.dtype) {\n        throw new Error(\"TensorArray dtype is \".concat(this.dtype, \" but gather requested dtype \").concat(dtype));\n      }\n\n      if (!indices) {\n        indices = [];\n\n        for (var i = 0; i < this.size(); i++) {\n          indices.push(i);\n        }\n      } else {\n        indices = indices.slice(0, this.size());\n      }\n\n      if (indices.length === 0) {\n        return tensor([], [0].concat(this.elementShape));\n      } // Read all the PersistentTensors into a vector to keep track of\n      // their memory.\n\n\n      var tensors = this.readMany(indices);\n      assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n      return stack(tensors, 0);\n    }\n    /**\n     * Return the values in the TensorArray as a concatenated Tensor.\n     */\n\n  }, {\n    key: \"concat\",\n    value: function concat(dtype) {\n      if (!!dtype && dtype !== this.dtype) {\n        throw new Error(\"TensorArray dtype is \".concat(this.dtype, \" but concat requested dtype \").concat(dtype));\n      }\n\n      if (this.size() === 0) {\n        return tensor([], [0].concat(this.elementShape));\n      }\n\n      var indices = [];\n\n      for (var i = 0; i < this.size(); i++) {\n        indices.push(i);\n      } // Collect all the tensors from the tensors array.\n\n\n      var tensors = this.readMany(indices);\n      assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, \"TensorArray shape mismatch: tensor array shape (\".concat(this.elementShape, \") vs first tensor shape (\").concat(tensors[0].shape, \")\"));\n      return _concat(tensors, 0);\n    }\n    /**\n     * Scatter the values of a Tensor in specific indices of a TensorArray.\n     * @param indices nummber[] values in [0, max_value). If the\n     *    TensorArray is not dynamic, max_value=size().\n     * @param tensor Tensor input tensor.\n     */\n\n  }, {\n    key: \"scatter\",\n    value: function scatter(indices, tensor) {\n      if (tensor.dtype !== this.dtype) {\n        throw new Error(\"TensorArray dtype is \".concat(this.dtype, \" but tensor has dtype \").concat(tensor.dtype));\n      }\n\n      if (indices.length !== tensor.shape[0]) {\n        throw new Error(\"Expected len(indices) == tensor.shape[0], but saw: \".concat(indices.length, \" vs. \").concat(tensor.shape[0]));\n      }\n\n      var maxIndex = Math.max.apply(Math, _toConsumableArray(indices));\n\n      if (!this.dynamicSize && maxIndex >= this.maxSize) {\n        throw new Error(\"Max index must be < array size (\".concat(maxIndex, \"  vs. \").concat(this.maxSize, \")\"));\n      }\n\n      this.writeMany(indices, unstack(tensor, 0));\n    }\n    /**\n     * Split the values of a Tensor into the TensorArray.\n     * @param length number[] with the lengths to use when splitting value along\n     *    its first dimension.\n     * @param tensor Tensor, the tensor to split.\n     */\n\n  }, {\n    key: \"split\",\n    value: function split(length, tensor) {\n      var _this3 = this;\n\n      if (tensor.dtype !== this.dtype) {\n        throw new Error(\"TensorArray dtype is \".concat(this.dtype, \" but tensor has dtype \").concat(tensor.dtype));\n      }\n\n      var totalLength = 0;\n      var cumulativeLengths = length.map(function (len) {\n        totalLength += len;\n        return totalLength;\n      });\n\n      if (totalLength !== tensor.shape[0]) {\n        throw new Error(\"Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        \".concat(totalLength, \", and tensor's shape is: \").concat(tensor.shape));\n      }\n\n      if (!this.dynamicSize && length.length !== this.maxSize) {\n        throw new Error(\"TensorArray's size is not equal to the size of lengths (\".concat(this.maxSize, \" vs. \").concat(length.length, \"), \") + 'and the TensorArray is not marked as dynamically resizeable');\n      }\n\n      var elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n      var tensors = [];\n      tidy(function () {\n        tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n\n        for (var i = 0; i < length.length; ++i) {\n          var previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n          var _indices = [0, previousLength, 0];\n          var sizes = [1, length[i], elementPerRow];\n          tensors[i] = reshape(slice(tensor, _indices, sizes), _this3.elementShape);\n        }\n\n        return tensors;\n      });\n      var indices = [];\n\n      for (var i = 0; i < length.length; i++) {\n        indices[i] = i;\n      }\n\n      this.writeMany(indices, tensors);\n    }\n  }]);\n\n  return TensorArray;\n}();","map":{"version":3,"sources":["../../src/executor/tensor_array.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from './tensor_utils';\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n    constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {\n        this.name = name;\n        this.dtype = dtype;\n        this.maxSize = maxSize;\n        this.elementShape = elementShape;\n        this.identicalElementShapes = identicalElementShapes;\n        this.dynamicSize = dynamicSize;\n        this.clearAfterRead = clearAfterRead;\n        this.tensors = [];\n        this.closed_ = false;\n        this.idTensor = scalar(0);\n        keep(this.idTensor);\n    }\n    get id() {\n        return this.idTensor.id;\n    }\n    get closed() {\n        return this.closed_;\n    }\n    /**\n     * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n     */\n    clearAndClose(keepIds) {\n        this.tensors.forEach(tensor => {\n            if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n                tensor.tensor.dispose();\n            }\n        });\n        this.tensors = [];\n        this.closed_ = true;\n        this.idTensor.dispose();\n    }\n    size() {\n        return this.tensors.length;\n    }\n    /**\n     * Read the value at location index in the TensorArray.\n     * @param index Number the index to read from.\n     */\n    read(index) {\n        if (this.closed_) {\n            throw new Error(`TensorArray ${this.name} has already been closed.`);\n        }\n        if (index < 0 || index >= this.size()) {\n            throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);\n        }\n        const tensorWithState = this.tensors[index];\n        if (tensorWithState.cleared) {\n            throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` +\n                `(perhaps try setting clear_after_read = false?).`);\n        }\n        if (this.clearAfterRead) {\n            tensorWithState.cleared = true;\n        }\n        tensorWithState.read = true;\n        return tensorWithState.tensor;\n    }\n    /**\n     * Helper method to read multiple tensors from the specified indices.\n     */\n    readMany(indices) {\n        return indices.map(index => this.read(index));\n    }\n    /**\n     * Write value into the index of the TensorArray.\n     * @param index number the index to write to.\n     * @param tensor\n     */\n    write(index, tensor) {\n        if (this.closed_) {\n            throw new Error(`TensorArray ${this.name} has already been closed.`);\n        }\n        if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n            throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);\n        }\n        const t = this.tensors[index] || {};\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n        }\n        // Set the shape for the first time write to unknow shape tensor array\n        if (this.size() === 0 &&\n            (this.elementShape == null || this.elementShape.length === 0)) {\n            this.elementShape = tensor.shape;\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);\n        if (t.read) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);\n        }\n        if (t.written) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);\n        }\n        t.tensor = tensor;\n        keep(tensor);\n        t.written = true;\n        this.tensors[index] = t;\n    }\n    /**\n     * Helper method to write multiple tensors to the specified indices.\n     */\n    writeMany(indices, tensors) {\n        if (indices.length !== tensors.length) {\n            throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` +\n                `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);\n        }\n        indices.forEach((i, index) => this.write(i, tensors[index]));\n    }\n    /**\n     * Return selected values in the TensorArray as a packed Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n     *    TensorArray is not dynamic, max_value=size(). If not specified returns\n     *    all tensors in the original order.\n     * @param [dtype]\n     */\n    gather(indices, dtype) {\n        if (!!dtype && dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);\n        }\n        if (!indices) {\n            indices = [];\n            for (let i = 0; i < this.size(); i++) {\n                indices.push(i);\n            }\n        }\n        else {\n            indices = indices.slice(0, this.size());\n        }\n        if (indices.length === 0) {\n            return tensor([], [0].concat(this.elementShape));\n        }\n        // Read all the PersistentTensors into a vector to keep track of\n        // their memory.\n        const tensors = this.readMany(indices);\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n        return stack(tensors, 0);\n    }\n    /**\n     * Return the values in the TensorArray as a concatenated Tensor.\n     */\n    concat(dtype) {\n        if (!!dtype && dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);\n        }\n        if (this.size() === 0) {\n            return tensor([], [0].concat(this.elementShape));\n        }\n        const indices = [];\n        for (let i = 0; i < this.size(); i++) {\n            indices.push(i);\n        }\n        // Collect all the tensors from the tensors array.\n        const tensors = this.readMany(indices);\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n        return concat(tensors, 0);\n    }\n    /**\n     * Scatter the values of a Tensor in specific indices of a TensorArray.\n     * @param indices nummber[] values in [0, max_value). If the\n     *    TensorArray is not dynamic, max_value=size().\n     * @param tensor Tensor input tensor.\n     */\n    scatter(indices, tensor) {\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n        }\n        if (indices.length !== tensor.shape[0]) {\n            throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n        }\n        const maxIndex = Math.max(...indices);\n        if (!this.dynamicSize && maxIndex >= this.maxSize) {\n            throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n        }\n        this.writeMany(indices, unstack(tensor, 0));\n    }\n    /**\n     * Split the values of a Tensor into the TensorArray.\n     * @param length number[] with the lengths to use when splitting value along\n     *    its first dimension.\n     * @param tensor Tensor, the tensor to split.\n     */\n    split(length, tensor) {\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n        }\n        let totalLength = 0;\n        const cumulativeLengths = length.map(len => {\n            totalLength += len;\n            return totalLength;\n        });\n        if (totalLength !== tensor.shape[0]) {\n            throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n        }\n        if (!this.dynamicSize && length.length !== this.maxSize) {\n            throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` +\n                'and the TensorArray is not marked as dynamically resizeable');\n        }\n        const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n        const tensors = [];\n        tidy(() => {\n            tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n            for (let i = 0; i < length.length; ++i) {\n                const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n                const indices = [0, previousLength, 0];\n                const sizes = [1, length[i], elementPerRow];\n                tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n            }\n            return tensors;\n        });\n        const indices = [];\n        for (let i = 0; i < length.length; i++) {\n            indices[i] = i;\n        }\n        this.writeMany(indices, tensors);\n    }\n}\n//# sourceMappingURL=tensor_array.js.map"]},"metadata":{},"sourceType":"module"}