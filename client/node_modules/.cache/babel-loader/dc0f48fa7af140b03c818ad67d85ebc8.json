{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n} // Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\n\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128; // Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\n\nconst BEFORE_PAGING_CONSTANT = 600;\n\nfunction numMBBeforeWarning() {\n  if (env().global.screen == null) {\n    return 1024; // 1 GB.\n  }\n\n  return env().global.screen.height * env().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  constructor(gpgpu) {\n    super(); // Maps data ids that have a pending read operation, to list of subscribers.\n\n    this.pendingRead = new WeakMap(); // List of data ids that are scheduled for disposal, but are waiting on a\n    // pending read operation.\n\n    this.pendingDisposal = new WeakSet(); // Used to count the number of 'shallow' sliced tensors that point to the\n    // same data id.\n\n    this.dataRefCount = new WeakMap();\n    this.numBytesInGPU = 0; // Accumulated time spent (including blocking) in uploading data to webgl.\n\n    this.uploadWaitMs = 0; // Accumulated time spent (including blocking in downloading data from webgl.\n\n    this.downloadWaitMs = 0;\n    this.warnedAboutMemory = false;\n    this.warnedAboutCPUBackend = false;\n    this.pendingDeletes = 0;\n    this.disposed = false;\n\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpu = gpgpu;\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  nextDataId() {\n    return MathBackendWebGL.nextDataId++;\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() + (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) - this.pendingDeletes;\n  }\n\n  write(values, shape, dtype) {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n\n    const dataId = {\n      id: this.nextDataId()\n    };\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount: 1\n    });\n    return dataId;\n  }\n  /** Return refCount of a `TensorData`. */\n\n\n  refCount(dataId) {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n\n    return 0;\n  }\n  /** Increase refCount of a `TextureData`. */\n\n\n  incRef(dataId) {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n  /** Decrease refCount of a `TextureData`. */\n\n\n  decRef(dataId) {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  move(dataId, values, shape, dtype, refCount) {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n\n    if (dtype === 'complex64') {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount\n    });\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo) {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  readSync(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      dtype,\n      complexTensorInfos,\n      slice,\n      shape,\n      isPacked\n    } = texData; // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n\n    if (slice != null) {\n      let program;\n\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (dtype === 'string') {\n      return values;\n    }\n\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result;\n\n    if (dtype === 'complex64') {\n      const realValues = this.readSync(complexTensorInfos.real.dataId);\n      const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId) {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise(resolve => subscribers.push(resolve));\n    }\n\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      shape,\n      slice,\n      dtype,\n      complexTensorInfos,\n      isPacked\n    } = texData; // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n\n    if (slice != null) {\n      let program;\n\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && env().getNumber('WEBGL_VERSION') === 2) {\n      throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` + `WEBGL_VERSION=2 not yet supported.`);\n    }\n\n    let buffer = null;\n    let tmpDownloadTarget;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n      buffer = this.gpgpu.createBufferFromTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    } // Download the values from the GPU.\n\n\n    let vals;\n\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([this.read(complexTensorInfos.real.dataId), this.read(complexTensorInfos.imag.dataId)]);\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId); // Notify all pending reads.\n\n    subscribers.forEach(resolve => resolve(dTypeVals));\n\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n\n      this.pendingDeletes--;\n    }\n\n    return dTypeVals;\n  }\n\n  bufferSync(t) {\n    const data = this.readSync(t.dataId);\n    let decodedData = data;\n\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = data.map(d => util.decodeString(d));\n      } catch (_a) {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n\n    return buffer(t.shape, t.dtype, decodedData);\n  }\n\n  checkNumericalProblems(values) {\n    if (values == null) {\n      return;\n    }\n\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i];\n\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(`The value ${num} cannot be represented with your ` + `current settings. Consider enabling float32 rendering: ` + `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  getValuesFromTexture(dataId) {\n    const {\n      shape,\n      dtype,\n      isPacked\n    } = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu.downloadMatrixFromPackedTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape)).subarray(0, size);\n      this.disposeIntermediateTensorInfo(tmpTarget);\n      return vals;\n    }\n\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ? new EncodeFloatPackedProgram(outputShape) : new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(program, [{\n      shape: outputShape,\n      dtype,\n      dataId\n    }], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n    return vals;\n  }\n\n  timerAvailable() {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  async time(f) {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers = [];\n    let outerMostTime = false;\n\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n\n    this.activeTimers = newActiveTimers;\n    f(); // needing to split these up because util.flatten only accepts certain types\n\n    const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map(d => d.query)).filter(d => d != null);\n    const flattenedActiveTimerNames = util.flatten(this.activeTimers.map(d => d.name)).filter(d => d != null);\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null // will be filled by the engine\n\n    };\n\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n      res['kernelMs'] = util.sum(kernelMs);\n\n      res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({\n        name: flattenedActiveTimerNames[i],\n        ms: d\n      })).map(d => `${d.name}: ${d.ms}`).join(', ');\n    } else {\n      res['kernelMs'] = {\n        error: 'WebGL query timers are not supported in this environment.'\n      };\n    }\n\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n\n  memory() {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    };\n  }\n\n  startTimer() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n\n    return {\n      startMs: util.now(),\n      endMs: null\n    };\n  }\n\n  endTimer(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n\n    query.endMs = util.now();\n    return query;\n  }\n\n  async getQueryTime(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query);\n    }\n\n    const timerQuery = query;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n\n\n  disposeData(dataId, force = false) {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    } // No-op if already disposed.\n\n\n    if (!this.texData.has(dataId)) {\n      return true;\n    } // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n\n\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {\n      complexTensorInfos\n    } = this.texData.get(dataId);\n\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n    return true;\n  }\n\n  releaseGPUData(dataId) {\n    const {\n      texture,\n      dtype,\n      texShape,\n      usage,\n      isPacked,\n      slice\n    } = this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId) {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n\n\n  getDataInfo(dataId) {\n    return this.texData.get(dataId);\n  }\n\n  getCPUBackend() {\n    if (!env().getBool('WEBGL_CPU_FORWARD')) {\n      return null;\n    }\n\n    if (this.cpuBackend == null) {\n      this.cpuBackend = engine().findBackend('cpu');\n    }\n\n    return this.cpuBackend;\n  }\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n\n\n  shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n    const cpuBackend = this.getCPUBackend();\n\n    if (!env().getBool('IS_TEST') && !this.warnedAboutCPUBackend && cpuBackend == null) {\n      console.warn('Your application contains ops that are small enough to be ' + 'executed on the CPU backend, however the CPU backend cannot ' + 'be found. Consider importing the CPU backend ' + '(@tensorflow/tfjs-backend-cpu) for better performance.');\n      this.warnedAboutCPUBackend = true;\n    }\n\n    return cpuBackend != null && inputs.every(input => this.texData.get(input.dataId).texture == null && util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext() {\n    return this.gpgpu;\n  }\n\n  where(condition) {\n    backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  packedUnaryOp(x, op, dtype) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n  } // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n\n\n  abs(x) {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n  }\n\n  makeTensorInfo(shape, dtype, values) {\n    let dataId;\n\n    if (dtype === 'string' && values != null && values.length > 0 && util.isString(values[0])) {\n      const encodedValues = values.map(d => util.encodeString(d));\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {\n      dataId,\n      shape,\n      dtype\n    };\n  }\n\n  makeOutput(shape, dtype, values) {\n    const {\n      dataId\n    } = this.makeTensorInfo(shape, dtype, values);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n  }\n\n  unpackTensor(input) {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input) {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(program, [input], input.dtype, null\n    /* customSetup */\n    , preventEagerUnpackingOutput);\n  }\n\n  packedReshape(input, afterShape) {\n    const input3DShape = [webgl_util.getBatchDim(input.shape), ...webgl_util.getRowsCols(input.shape)];\n    const input3D = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = this.runWebGLProgram(program, [input3D], input.dtype, null\n    /* customSetup */\n    , preventEagerUnpackingOfOutput);\n    return {\n      dataId: output.dataId,\n      shape: afterShape,\n      dtype: output.dtype\n    };\n  }\n\n  decode(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      isPacked,\n      shape,\n      dtype\n    } = texData;\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    let program;\n\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n\n    const preventEagerUnpackingOfOutput = true;\n    const out = this.runWebGLProgram(program, [{\n      shape: shapeAs3D,\n      dtype,\n      dataId\n    }], dtype, null\n    /* customSetup */\n    , preventEagerUnpackingOfOutput);\n    return {\n      dtype,\n      shape,\n      dataId: out.dataId\n    };\n  }\n\n  runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = tex_util.getDenseTexShape(program.outputShape); // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n\n      outData.texShape = texelShape.map(d => d * 2);\n    }\n\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values = util.getTypedArrayFromDType(output.dtype, 0);\n      return output;\n    }\n\n    const dataToDispose = [];\n    const inputsData = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` + `dtypes, please separate the program into real and imaginary ` + `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs && util.sizeFromShape(input.shape) <= env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values\n          };\n        } // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n\n\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      } else if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) : this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (texData.isPacked && !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n        const savedInput = input;\n        const targetShape = input.shape;\n        input.shape = texData.shape;\n        input = this.packedReshape(input, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n        savedInput.shape = targetShape;\n      }\n\n      this.uploadToGPU(input.dataId);\n      return {\n        shape: input.shape,\n        texData,\n        isUniform: false\n      };\n    });\n    this.uploadToGPU(output.dataId);\n    const outputData = {\n      shape: output.shape,\n      texData: outData,\n      isUniform: false\n    };\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query;\n\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push({\n        name: program.constructor.name,\n        query: this.getQueryTime(query)\n      });\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n\n    return output;\n  }\n\n  compileAndRun(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  getAndSaveBinary(key, getBinary) {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n\n    return this.binaryCache[key];\n  }\n\n  getTextureManager() {\n    return this.textureManager;\n  }\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    } // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n\n\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n\n    this.textureManager.dispose();\n\n    if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n\n    this.disposed = true;\n  }\n\n  floatPrecision() {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n\n        return 16;\n      });\n    }\n\n    return this.floatPrecisionValue;\n  }\n  /** Returns the smallest representable number.  */\n\n\n  epsilon() {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      shape,\n      dtype,\n      values,\n      texture,\n      usage,\n      isPacked\n    } = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n      let program;\n      let width = texShape[1],\n          height = texShape[0];\n      const isByteArray = values instanceof Uint8Array;\n\n      if (isPacked) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n        program = new EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n      }\n\n      const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n\n      if (isByteArray) {\n        this.texData.get(tempDenseInputHandle.dataId).usage = TextureUsage.PIXELS;\n      } else {\n        this.texData.get(tempDenseInputHandle.dataId).usage = TextureUsage.UPLOAD;\n      }\n\n      this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values); // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking); // Have the original texture assume the identity of the encoded output.\n\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      this.texData.delete(encodedOutputTarget.dataId); // Once uploaded, don't store the values on cpu.\n\n      texData.values = null;\n\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  convertAndCacheOnCPU(dataId, float32Values) {\n    const texData = this.texData.get(dataId);\n    const {\n      dtype\n    } = texData;\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype);\n    }\n\n    return texData.values;\n  }\n\n  acquireTexture(texShape, texType, dtype, isPacked) {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n\n    if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(`High memory usage in GPU: ${mb} MB, ` + `most likely due to a memory leak`);\n    }\n\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  computeBytes(shape, dtype) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n}\nMathBackendWebGL.nextDataId = 0;\n\nfunction float32ToTypedArray(a, dtype) {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a;\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);\n\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n\n    return result;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}","map":{"version":3,"sources":["../src/backend_webgl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n    if (webGLVersion in binaryCaches) {\n        return binaryCaches[webGLVersion];\n    }\n    binaryCaches[webGLVersion] = {};\n    return binaryCaches[webGLVersion];\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n    if (env().global.screen == null) {\n        return 1024; // 1 GB.\n    }\n    return (env().global.screen.height * env().global.screen.width *\n        window.devicePixelRatio) *\n        BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\nexport class MathBackendWebGL extends KernelBackend {\n    constructor(gpgpu) {\n        super();\n        // Maps data ids that have a pending read operation, to list of subscribers.\n        this.pendingRead = new WeakMap();\n        // List of data ids that are scheduled for disposal, but are waiting on a\n        // pending read operation.\n        this.pendingDisposal = new WeakSet();\n        // Used to count the number of 'shallow' sliced tensors that point to the\n        // same data id.\n        this.dataRefCount = new WeakMap();\n        this.numBytesInGPU = 0;\n        // Accumulated time spent (including blocking) in uploading data to webgl.\n        this.uploadWaitMs = 0;\n        // Accumulated time spent (including blocking in downloading data from webgl.\n        this.downloadWaitMs = 0;\n        this.warnedAboutMemory = false;\n        this.warnedAboutCPUBackend = false;\n        this.pendingDeletes = 0;\n        this.disposed = false;\n        if (!env().getBool('HAS_WEBGL')) {\n            throw new Error('WebGL is not supported on this device');\n        }\n        if (gpgpu == null) {\n            const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n            this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n            this.gpgpu = new GPGPUContext(gl);\n            this.canvas = gl.canvas;\n            this.gpgpuCreatedLocally = true;\n        }\n        else {\n            this.gpgpu = gpgpu;\n            this.binaryCache = {};\n            this.gpgpuCreatedLocally = false;\n            this.canvas = gpgpu.gl.canvas;\n        }\n        this.textureManager = new TextureManager(this.gpgpu);\n        this.numMBBeforeWarning = numMBBeforeWarning();\n        this.texData = new DataStorage(this, engine());\n    }\n    nextDataId() {\n        return MathBackendWebGL.nextDataId++;\n    }\n    numDataIds() {\n        return this.texData.numDataIds() +\n            (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -\n            this.pendingDeletes;\n    }\n    write(values, shape, dtype) {\n        if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n            env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64' && values != null) {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        const dataId = { id: this.nextDataId() };\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1 });\n        return dataId;\n    }\n    /** Return refCount of a `TensorData`. */\n    refCount(dataId) {\n        if (this.texData.has(dataId)) {\n            const tensorData = this.texData.get(dataId);\n            return tensorData.refCount;\n        }\n        return 0;\n    }\n    /** Increase refCount of a `TextureData`. */\n    incRef(dataId) {\n        const texData = this.texData.get(dataId);\n        texData.refCount++;\n    }\n    /** Decrease refCount of a `TextureData`. */\n    decRef(dataId) {\n        if (this.texData.has(dataId)) {\n            const texData = this.texData.get(dataId);\n            texData.refCount--;\n        }\n    }\n    move(dataId, values, shape, dtype, refCount) {\n        if (env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount });\n    }\n    disposeIntermediateTensorInfo(tensorInfo) {\n        this.disposeData(tensorInfo.dataId);\n    }\n    readSync(dataId) {\n        const texData = this.texData.get(dataId);\n        const { values, dtype, complexTensorInfos, slice, shape, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.readSync(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (dtype === 'string') {\n            return values;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let result;\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensorInfos.real.dataId);\n            const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n            result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else {\n            result = this.getValuesFromTexture(dataId);\n        }\n        if (shouldTimeProgram) {\n            this.downloadWaitMs += util.now() - start;\n        }\n        return this.convertAndCacheOnCPU(dataId, result);\n    }\n    async read(dataId) {\n        if (this.pendingRead.has(dataId)) {\n            const subscribers = this.pendingRead.get(dataId);\n            return new Promise(resolve => subscribers.push(resolve));\n        }\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, complexTensorInfos, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.read(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n            env().getNumber('WEBGL_VERSION') === 2) {\n            throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n                `WEBGL_VERSION=2 not yet supported.`);\n        }\n        let buffer = null;\n        let tmpDownloadTarget;\n        if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n            // Possibly copy the texture into a buffer before inserting a fence.\n            tmpDownloadTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n            buffer = this.gpgpu.createBufferFromTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape));\n        }\n        this.pendingRead.set(dataId, []);\n        if (dtype !== 'complex64') {\n            // Create a fence and wait for it to resolve.\n            await this.gpgpu.createAndWaitForFence();\n        }\n        // Download the values from the GPU.\n        let vals;\n        if (dtype === 'complex64') {\n            const ps = await Promise.all([\n                this.read(complexTensorInfos.real.dataId),\n                this.read(complexTensorInfos.imag.dataId)\n            ]);\n            const realValues = ps[0];\n            const imagValues = ps[1];\n            vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else if (buffer == null) {\n            vals = this.getValuesFromTexture(dataId);\n        }\n        else {\n            const size = util.sizeFromShape(shape);\n            vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n        }\n        if (tmpDownloadTarget != null) {\n            this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n        }\n        const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n        const subscribers = this.pendingRead.get(dataId);\n        this.pendingRead.delete(dataId);\n        // Notify all pending reads.\n        subscribers.forEach(resolve => resolve(dTypeVals));\n        if (this.pendingDisposal.has(dataId)) {\n            this.pendingDisposal.delete(dataId);\n            if (this.disposeData(dataId)) {\n                engine().removeDataId(dataId, this);\n            }\n            this.pendingDeletes--;\n        }\n        return dTypeVals;\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        let decodedData = data;\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                decodedData = data.map(d => util.decodeString(d));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return buffer(t.shape, t.dtype, decodedData);\n    }\n    checkNumericalProblems(values) {\n        if (values == null) {\n            return;\n        }\n        for (let i = 0; i < values.length; i++) {\n            const num = values[i];\n            if (!webgl_util.canBeRepresented(num)) {\n                if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n                    throw Error(`The value ${num} cannot be represented with your ` +\n                        `current settings. Consider enabling float32 rendering: ` +\n                        `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n                }\n                throw Error(`The value ${num} cannot be represented on this device.`);\n            }\n        }\n    }\n    getValuesFromTexture(dataId) {\n        const { shape, dtype, isPacked } = this.texData.get(dataId);\n        const size = util.sizeFromShape(shape);\n        if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n            const tmpTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpTarget.dataId);\n            const vals = this.gpgpu\n                .downloadMatrixFromPackedTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                .subarray(0, size);\n            this.disposeIntermediateTensorInfo(tmpTarget);\n            return vals;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n        const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n        const program = shouldUsePackedProgram ?\n            new EncodeFloatPackedProgram(outputShape) :\n            new EncodeFloatProgram(outputShape);\n        const output = this.runWebGLProgram(program, [{ shape: outputShape, dtype, dataId }], 'float32');\n        const tmpData = this.texData.get(output.dataId);\n        const vals = this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n        this.disposeIntermediateTensorInfo(output);\n        return vals;\n    }\n    timerAvailable() {\n        return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n    }\n    async time(f) {\n        const oldActiveTimers = this.activeTimers;\n        const newActiveTimers = [];\n        let outerMostTime = false;\n        if (this.programTimersStack == null) {\n            this.programTimersStack = newActiveTimers;\n            outerMostTime = true;\n        }\n        else {\n            this.activeTimers.push(newActiveTimers);\n        }\n        this.activeTimers = newActiveTimers;\n        f();\n        // needing to split these up because util.flatten only accepts certain types\n        const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map((d) => d.query))\n            .filter(d => d != null);\n        const flattenedActiveTimerNames = util.flatten(this.activeTimers.map((d) => d.name))\n            .filter(d => d != null);\n        this.activeTimers = oldActiveTimers;\n        if (outerMostTime) {\n            this.programTimersStack = null;\n        }\n        const res = {\n            uploadWaitMs: this.uploadWaitMs,\n            downloadWaitMs: this.downloadWaitMs,\n            kernelMs: null,\n            wallMs: null // will be filled by the engine\n        };\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n            res['kernelMs'] = util.sum(kernelMs);\n            res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({ name: flattenedActiveTimerNames[i], ms: d }))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n        }\n        else {\n            res['kernelMs'] = {\n                error: 'WebGL query timers are not supported in this environment.'\n            };\n        }\n        this.uploadWaitMs = 0;\n        this.downloadWaitMs = 0;\n        return res;\n    }\n    memory() {\n        return {\n            unreliable: false,\n            numBytesInGPU: this.numBytesInGPU,\n            numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n            numBytesInGPUFree: this.textureManager.numBytesFree\n        };\n    }\n    startTimer() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.beginQuery();\n        }\n        return { startMs: util.now(), endMs: null };\n    }\n    endTimer(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            this.gpgpu.endQuery();\n            return query;\n        }\n        query.endMs = util.now();\n        return query;\n    }\n    async getQueryTime(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.waitForQueryAndGetTime(query);\n        }\n        const timerQuery = query;\n        return timerQuery.endMs - timerQuery.startMs;\n    }\n    /**\n     * Decrease the RefCount on the dataId and dispose the memory if the dataId\n     * has 0 refCount. If there are pending read on the data, the disposal would\n     * added to the pending delete queue. Return true if the dataId is removed\n     * from backend or the backend does not contain the dataId, false if the\n     * dataId is not removed. Memory may or may not be released even when dataId\n     * is removed, which also depends on dataRefCount, see `releaseGPU`.\n     * @param dataId\n     * @oaram force Optional, remove the data regardless of refCount\n     */\n    disposeData(dataId, force = false) {\n        if (this.pendingDisposal.has(dataId)) {\n            return false;\n        }\n        // No-op if already disposed.\n        if (!this.texData.has(dataId)) {\n            return true;\n        }\n        // if force flag is set, change refCount to 0, this would ensure disposal\n        // when added to the pendingDisposal queue. Memory may or may not be\n        // released, which also depends on dataRefCount, see `releaseGPU`.\n        if (force) {\n            this.texData.get(dataId).refCount = 0;\n        }\n        else {\n            this.texData.get(dataId).refCount--;\n        }\n        if (!force && this.texData.get(dataId).refCount > 0) {\n            return false;\n        }\n        if (this.pendingRead.has(dataId)) {\n            this.pendingDisposal.add(dataId);\n            this.pendingDeletes++;\n            return false;\n        }\n        this.releaseGPUData(dataId);\n        const { complexTensorInfos } = this.texData.get(dataId);\n        if (complexTensorInfos != null) {\n            this.disposeData(complexTensorInfos.real.dataId, force);\n            this.disposeData(complexTensorInfos.imag.dataId, force);\n        }\n        this.texData.delete(dataId);\n        return true;\n    }\n    releaseGPUData(dataId) {\n        const { texture, dtype, texShape, usage, isPacked, slice } = this.texData.get(dataId);\n        const key = slice && slice.origDataId || dataId;\n        const refCount = this.dataRefCount.get(key);\n        if (refCount > 1) {\n            this.dataRefCount.set(key, refCount - 1);\n        }\n        else {\n            this.dataRefCount.delete(key);\n            if (texture != null) {\n                this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n                this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n            }\n        }\n        const texData = this.texData.get(dataId);\n        texData.texture = null;\n        texData.texShape = null;\n        texData.isPacked = false;\n        texData.slice = null;\n    }\n    getTexture(dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId).texture;\n    }\n    /**\n     * Returns internal information for the specific data bucket. Used in unit\n     * tests.\n     */\n    getDataInfo(dataId) {\n        return this.texData.get(dataId);\n    }\n    getCPUBackend() {\n        if (!env().getBool('WEBGL_CPU_FORWARD')) {\n            return null;\n        }\n        if (this.cpuBackend == null) {\n            this.cpuBackend = engine().findBackend('cpu');\n        }\n        return this.cpuBackend;\n    }\n    /*\n    Tests whether all the inputs to an op are small and on the CPU. This heuristic\n    determines when it would be faster to execute a kernel on the CPU. WebGL\n    kernels opt into running this check and forwarding when appropriate.\n    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n    sustainable strategy for optimizing backend execution of ops.\n     */\n    shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n        const cpuBackend = this.getCPUBackend();\n        if (!env().getBool('IS_TEST') && !this.warnedAboutCPUBackend &&\n            cpuBackend == null) {\n            console.warn('Your application contains ops that are small enough to be ' +\n                'executed on the CPU backend, however the CPU backend cannot ' +\n                'be found. Consider importing the CPU backend ' +\n                '(@tensorflow/tfjs-backend-cpu) for better performance.');\n            this.warnedAboutCPUBackend = true;\n        }\n        return cpuBackend != null &&\n            inputs.every(input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n    }\n    getGPGPUContext() {\n        return this.gpgpu;\n    }\n    where(condition) {\n        backend_util.warn('tf.where() in webgl locks the UI thread. ' +\n            'Call tf.whereAsync() instead');\n        const condVals = condition.dataSync();\n        return whereImpl(condition.shape, condVals);\n    }\n    packedUnaryOp(x, op, dtype) {\n        const program = new UnaryOpPackedProgram(x.shape, op);\n        const outInfo = this.compileAndRun(program, [x], dtype);\n        return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n    // TODO(msoulanille) remove this once the backend has been modularized\n    // a copy is needed here to break a circular dependency.\n    // Also remove the op from unary_op.\n    abs(x) {\n        // TODO: handle cases when x is complex.\n        if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n            const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n            return this.makeOutput(x.shape, x.dtype, outValues);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n        const outInfo = this.compileAndRun(program, [x]);\n        return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n    makeTensorInfo(shape, dtype, values) {\n        let dataId;\n        if (dtype === 'string' && values != null && values.length > 0 &&\n            util.isString(values[0])) {\n            const encodedValues = values.map(d => util.encodeString(d));\n            dataId = this.write(encodedValues, shape, dtype);\n        }\n        else {\n            dataId = this.write(values, shape, dtype);\n        }\n        this.texData.get(dataId).usage = null;\n        return { dataId, shape, dtype };\n    }\n    makeOutput(shape, dtype, values) {\n        const { dataId } = this.makeTensorInfo(shape, dtype, values);\n        return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n    unpackTensor(input) {\n        const program = new UnpackProgram(input.shape);\n        return this.runWebGLProgram(program, [input], input.dtype);\n    }\n    packTensor(input) {\n        const program = new PackProgram(input.shape);\n        const preventEagerUnpackingOutput = true;\n        return this.runWebGLProgram(program, [input], input.dtype, null /* customSetup */, preventEagerUnpackingOutput);\n    }\n    packedReshape(input, afterShape) {\n        const input3DShape = [\n            webgl_util.getBatchDim(input.shape),\n            ...webgl_util.getRowsCols(input.shape)\n        ];\n        const input3D = {\n            dtype: input.dtype,\n            shape: input3DShape,\n            dataId: input.dataId\n        };\n        const afterShapeAs3D = [\n            webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n        ];\n        const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n        const preventEagerUnpackingOfOutput = true;\n        const output = this.runWebGLProgram(program, [input3D], input.dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n    }\n    decode(dataId) {\n        const texData = this.texData.get(dataId);\n        const { isPacked, shape, dtype } = texData;\n        const shapeAs3D = webgl_util.getShapeAs3D(shape);\n        let program;\n        if (isPacked) {\n            program = new DecodeMatrixPackedProgram(shapeAs3D);\n        }\n        else {\n            program = new DecodeMatrixProgram(shapeAs3D);\n        }\n        const preventEagerUnpackingOfOutput = true;\n        const out = this.runWebGLProgram(program, [{ shape: shapeAs3D, dtype, dataId }], dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dtype, shape, dataId: out.dataId };\n    }\n    runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        const output = this.makeTensorInfo(program.outputShape, outputDtype);\n        const outData = this.texData.get(output.dataId);\n        if (program.packedOutput) {\n            outData.isPacked = true;\n        }\n        if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n            const texelShape = tex_util.getDenseTexShape(program.outputShape);\n            // For a densely packed output, we explicitly set texShape\n            // so it doesn't get assigned later according to our typical packing\n            // scheme wherein a single texel can only contain values from adjacent\n            // rows/cols.\n            outData.texShape = texelShape.map(d => d * 2);\n        }\n        if (program.outTexUsage != null) {\n            outData.usage = program.outTexUsage;\n        }\n        if (util.sizeFromShape(output.shape) === 0) {\n            // Short-circuit the computation since the result is empty (has 0 in its\n            // shape).\n            outData.values =\n                util.getTypedArrayFromDType(output.dtype, 0);\n            return output;\n        }\n        const dataToDispose = [];\n        const inputsData = inputs.map(input => {\n            if (input.dtype === 'complex64') {\n                throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` +\n                    `dtypes, please separate the program into real and imaginary ` +\n                    `parts.`);\n            }\n            let texData = this.texData.get(input.dataId);\n            if (texData.texture == null) {\n                if (!program.packedInputs &&\n                    util.sizeFromShape(input.shape) <=\n                        env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n                    // Upload small tensors that live on the CPU as uniforms, not as\n                    // textures. Do this only when the environment supports 32bit floats\n                    // due to problems when comparing 16bit floats with 32bit floats.\n                    // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n                    // possible for packed shaders to sample from uniforms.\n                    return {\n                        shape: input.shape,\n                        texData: null,\n                        isUniform: true,\n                        uniformValues: texData.values\n                    };\n                }\n                // This ensures that if a packed program's inputs have not yet been\n                // uploaded to the GPU, they get uploaded as packed right off the bat.\n                if (program.packedInputs) {\n                    texData.isPacked = true;\n                    texData.shape = input.shape;\n                }\n            }\n            else if (!!texData.isPacked !== !!program.packedInputs) {\n                input = texData.isPacked ? this.unpackTensor(input) :\n                    this.packTensor(input);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n            }\n            else if (texData.isPacked &&\n                !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n                // This is a special case where a texture exists for a tensor\n                // but the shapes are incompatible (due to packing constraints) because\n                // the tensor did not have a chance to go through the packed reshape\n                // shader. This only happens when we reshape the *same* tensor to form\n                // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n                // case will disappear once packed uploading is the default.\n                const savedInput = input;\n                const targetShape = input.shape;\n                input.shape = texData.shape;\n                input = this.packedReshape(input, targetShape);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n                savedInput.shape = targetShape;\n            }\n            this.uploadToGPU(input.dataId);\n            return { shape: input.shape, texData, isUniform: false };\n        });\n        this.uploadToGPU(output.dataId);\n        const outputData = { shape: output.shape, texData: outData, isUniform: false };\n        const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n        const binary = this.getAndSaveBinary(key, () => {\n            return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n        });\n        const shouldTimeProgram = this.activeTimers != null;\n        let query;\n        if (shouldTimeProgram) {\n            query = this.startTimer();\n        }\n        gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);\n        dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n        if (shouldTimeProgram) {\n            query = this.endTimer(query);\n            this.activeTimers.push({ name: program.constructor.name, query: this.getQueryTime(query) });\n        }\n        if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n            preventEagerUnpackingOfOutput === false) {\n            const unpacked = this.unpackTensor(output);\n            this.disposeIntermediateTensorInfo(output);\n            return unpacked;\n        }\n        return output;\n    }\n    compileAndRun(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        outputDtype = outputDtype || inputs[0].dtype;\n        const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);\n        return outInfo;\n    }\n    getAndSaveBinary(key, getBinary) {\n        if (!(key in this.binaryCache)) {\n            this.binaryCache[key] = getBinary();\n        }\n        return this.binaryCache[key];\n    }\n    getTextureManager() {\n        return this.textureManager;\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        // Avoid disposing the compiled webgl programs during unit testing because\n        // it slows down test execution.\n        if (!env().getBool('IS_TEST')) {\n            const allKeys = Object.keys(this.binaryCache);\n            allKeys.forEach(key => {\n                this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n                delete this.binaryCache[key];\n            });\n        }\n        this.textureManager.dispose();\n        if (this.canvas != null &&\n            (typeof (HTMLCanvasElement) !== 'undefined' &&\n                this.canvas instanceof HTMLCanvasElement)) {\n            this.canvas.remove();\n        }\n        else {\n            this.canvas = null;\n        }\n        if (this.gpgpuCreatedLocally) {\n            this.gpgpu.program = null;\n            this.gpgpu.dispose();\n        }\n        this.disposed = true;\n    }\n    floatPrecision() {\n        if (this.floatPrecisionValue == null) {\n            this.floatPrecisionValue = tidy(() => {\n                if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n                    // Momentarily switching DEBUG flag to false so we don't throw an\n                    // error trying to upload a small value.\n                    const debugFlag = env().getBool('DEBUG');\n                    env().set('DEBUG', false);\n                    const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n                    env().set('DEBUG', debugFlag);\n                    if (underflowCheckValue > 0) {\n                        return 32;\n                    }\n                }\n                return 16;\n            });\n        }\n        return this.floatPrecisionValue;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    uploadToGPU(dataId) {\n        const texData = this.texData.get(dataId);\n        const { shape, dtype, values, texture, usage, isPacked } = texData;\n        if (texture != null) {\n            // Array is already on GPU. No-op.\n            return;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let texShape = texData.texShape;\n        if (texShape == null) {\n            texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n            texData.texShape = texShape;\n        }\n        if (values != null) {\n            const shapeAs3D = webgl_util.getShapeAs3D(shape);\n            let program;\n            let width = texShape[1], height = texShape[0];\n            const isByteArray = values instanceof Uint8Array;\n            if (isPacked) {\n                [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n                program = new EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            else {\n                program =\n                    new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n            if (isByteArray) {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    TextureUsage.PIXELS;\n            }\n            else {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    TextureUsage.UPLOAD;\n            }\n            this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n            // We want the output to remain packed regardless of the value of\n            // WEBGL_PACK.\n            const preventEagerUnpacking = true;\n            const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n            // Have the original texture assume the identity of the encoded output.\n            const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n            texData.texture = outputTexData.texture;\n            texData.texShape = outputTexData.texShape;\n            texData.isPacked = outputTexData.isPacked;\n            texData.usage = outputTexData.usage;\n            this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n            this.texData.delete(encodedOutputTarget.dataId);\n            // Once uploaded, don't store the values on cpu.\n            texData.values = null;\n            if (shouldTimeProgram) {\n                this.uploadWaitMs += util.now() - start;\n            }\n        }\n        else {\n            const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n            texData.texture = newTexture;\n        }\n    }\n    convertAndCacheOnCPU(dataId, float32Values) {\n        const texData = this.texData.get(dataId);\n        const { dtype } = texData;\n        this.releaseGPUData(dataId);\n        if (float32Values != null) {\n            texData.values = float32ToTypedArray(float32Values, dtype);\n        }\n        return texData.values;\n    }\n    acquireTexture(texShape, texType, dtype, isPacked) {\n        this.numBytesInGPU += this.computeBytes(texShape, dtype);\n        if (!this.warnedAboutMemory &&\n            this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n            const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n            this.warnedAboutMemory = true;\n            console.warn(`High memory usage in GPU: ${mb} MB, ` +\n                `most likely due to a memory leak`);\n        }\n        return this.textureManager.acquireTexture(texShape, texType, isPacked);\n    }\n    computeBytes(shape, dtype) {\n        return shape[0] * shape[1] * util.bytesPerElement(dtype);\n    }\n}\nMathBackendWebGL.nextDataId = 0;\nfunction float32ToTypedArray(a, dtype) {\n    if (dtype === 'float32' || dtype === 'complex64') {\n        return a;\n    }\n    else if (dtype === 'int32' || dtype === 'bool') {\n        const result = (dtype === 'int32') ? new Int32Array(a.length) :\n            new Uint8Array(a.length);\n        for (let i = 0; i < result.length; ++i) {\n            result[i] = Math.round(a[i]);\n        }\n        return result;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n//# sourceMappingURL=backend_webgl.js.map"]},"metadata":{},"sourceType":"module"}