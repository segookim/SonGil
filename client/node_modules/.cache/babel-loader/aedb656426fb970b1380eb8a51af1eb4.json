{"ast":null,"code":"import _slicedToArray from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assert } from '../../util';\nimport { greaterEqual } from '../greater_equal';\nimport { lessEqual } from '../less_equal';\nimport { logicalAnd } from '../logical_and';\nimport { op } from '../operation';\nimport { range } from '../range';\nimport { reshape } from '../reshape';\nimport { scalar } from '../scalar';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { unstack } from '../unstack';\nimport { where } from '../where';\nimport { zeros } from '../zeros';\n/**\n * Copy a tensor setting everything outside a central band in each innermost\n * matrix to zero.\n *\n * The band part is computed as follows: Assume input has `k` dimensions\n * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where\n * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.\n * The indicator function\n * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`\n * `&& (num_upper < 0 || (n-m) <= num_upper)`\n *\n * ```js\n * const x = tf.tensor2d([[ 0,  1,  2, 3],\n *                        [-1,  0,  1, 2],\n *                        [-2, -1,  0, 1],\n *                        [-3, -2, -1, 0]]);\n * let y = tf.linalg.bandPart(x, 1, -1);\n * y.print(); // [[ 0,  1,  2, 3],\n *            //  [-1,  0,  1, 2],\n *            //  [ 0, -1,  0, 1],\n *            //  [ 0, 0 , -1, 0]]\n * let z = tf.linalg.bandPart(x, 2, 1);\n * z.print(); // [[ 0,  1,  0, 0],\n *            //  [-1,  0,  1, 0],\n *            //  [-2, -1,  0, 1],\n *            //  [ 0, -2, -1, 0]]\n * ```\n *\n * @param x Rank `k` tensor\n * @param numLower Number of subdiagonals to keep.\n *   If negative, keep entire lower triangle.\n * @param numUpper Number of subdiagonals to keep.\n *   If negative, keep entire upper triangle.\n * @returns Rank `k` tensor of the same shape as input.\n *   The extracted banded tensor.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\n\nfunction bandPart_(a, numLower, numUpper) {\n  assert(numLower % 1 === 0, function () {\n    return \"bandPart(): numLower must be an integer, got \".concat(numLower, \".\");\n  });\n  assert(numUpper % 1 === 0, function () {\n    return \"bandPart(): numUpper must be an integer, got \".concat(numUpper, \".\");\n  });\n  var $a = convertToTensor(a, 'a', 'bandPart');\n  assert($a.rank >= 2, function () {\n    return \"bandPart(): Rank must be at least 2, got \".concat($a.rank, \".\");\n  });\n  var shape = $a.shape;\n\n  var _$a$shape$slice = $a.shape.slice(-2),\n      _$a$shape$slice2 = _slicedToArray(_$a$shape$slice, 2),\n      M = _$a$shape$slice2[0],\n      N = _$a$shape$slice2[1];\n\n  if (!(numLower <= M)) {\n    throw new Error(\"bandPart(): numLower (\".concat(numLower, \")\") + \" must not be greater than the number of rows (\".concat(M, \").\"));\n  }\n\n  if (!(numUpper <= N)) {\n    throw new Error(\"bandPart(): numUpper (\".concat(numUpper, \")\") + \" must not be greater than the number of columns (\".concat(N, \").\"));\n  }\n\n  if (numLower < 0) {\n    numLower = M;\n  }\n\n  if (numUpper < 0) {\n    numUpper = N;\n  }\n\n  var i = reshape(range(0, M, 1, 'int32'), [-1, 1]);\n  var j = range(0, N, 1, 'int32');\n  var ij = sub(i, j);\n  var inBand = logicalAnd(lessEqual(ij, scalar(+numLower, 'int32')), greaterEqual(ij, scalar(-numUpper, 'int32')));\n  var zero = zeros([M, N], $a.dtype);\n  return reshape(stack(unstack(reshape($a, [-1, M, N])).map(function (mat) {\n    return where(inBand, mat, zero);\n  })), shape);\n}\n\nexport var bandPart = op({\n  bandPart_: bandPart_\n});","map":{"version":3,"sources":["../../../src/ops/linalg/band_part.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assert } from '../../util';\nimport { greaterEqual } from '../greater_equal';\nimport { lessEqual } from '../less_equal';\nimport { logicalAnd } from '../logical_and';\nimport { op } from '../operation';\nimport { range } from '../range';\nimport { reshape } from '../reshape';\nimport { scalar } from '../scalar';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { unstack } from '../unstack';\nimport { where } from '../where';\nimport { zeros } from '../zeros';\n/**\n * Copy a tensor setting everything outside a central band in each innermost\n * matrix to zero.\n *\n * The band part is computed as follows: Assume input has `k` dimensions\n * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where\n * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.\n * The indicator function\n * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`\n * `&& (num_upper < 0 || (n-m) <= num_upper)`\n *\n * ```js\n * const x = tf.tensor2d([[ 0,  1,  2, 3],\n *                        [-1,  0,  1, 2],\n *                        [-2, -1,  0, 1],\n *                        [-3, -2, -1, 0]]);\n * let y = tf.linalg.bandPart(x, 1, -1);\n * y.print(); // [[ 0,  1,  2, 3],\n *            //  [-1,  0,  1, 2],\n *            //  [ 0, -1,  0, 1],\n *            //  [ 0, 0 , -1, 0]]\n * let z = tf.linalg.bandPart(x, 2, 1);\n * z.print(); // [[ 0,  1,  0, 0],\n *            //  [-1,  0,  1, 0],\n *            //  [-2, -1,  0, 1],\n *            //  [ 0, -2, -1, 0]]\n * ```\n *\n * @param x Rank `k` tensor\n * @param numLower Number of subdiagonals to keep.\n *   If negative, keep entire lower triangle.\n * @param numUpper Number of subdiagonals to keep.\n *   If negative, keep entire upper triangle.\n * @returns Rank `k` tensor of the same shape as input.\n *   The extracted banded tensor.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\nfunction bandPart_(a, numLower, numUpper) {\n    assert(numLower % 1 === 0, () => `bandPart(): numLower must be an integer, got ${numLower}.`);\n    assert(numUpper % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${numUpper}.`);\n    const $a = convertToTensor(a, 'a', 'bandPart');\n    assert($a.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${$a.rank}.`);\n    const shape = $a.shape;\n    const [M, N] = $a.shape.slice(-2);\n    if (!(numLower <= M)) {\n        throw new Error(`bandPart(): numLower (${numLower})` +\n            ` must not be greater than the number of rows (${M}).`);\n    }\n    if (!(numUpper <= N)) {\n        throw new Error(`bandPart(): numUpper (${numUpper})` +\n            ` must not be greater than the number of columns (${N}).`);\n    }\n    if (numLower < 0) {\n        numLower = M;\n    }\n    if (numUpper < 0) {\n        numUpper = N;\n    }\n    const i = reshape(range(0, M, 1, 'int32'), [-1, 1]);\n    const j = range(0, N, 1, 'int32');\n    const ij = sub(i, j);\n    const inBand = logicalAnd(lessEqual(ij, scalar(+numLower, 'int32')), greaterEqual(ij, scalar(-numUpper, 'int32')));\n    const zero = zeros([M, N], $a.dtype);\n    return reshape(stack(unstack(reshape($a, [-1, M, N]))\n        .map(mat => where(inBand, mat, zero))), shape);\n}\nexport const bandPart = op({ bandPart_ });\n//# sourceMappingURL=band_part.js.map"]},"metadata":{},"sourceType":"module"}