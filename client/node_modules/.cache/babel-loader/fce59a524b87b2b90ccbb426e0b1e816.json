{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function oneHot(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    indices\n  } = inputs;\n  const {\n    depth,\n    onValue,\n    offValue\n  } = attrs;\n  assertNotComplex(indices, 'oneHot');\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\nexport const oneHotConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot\n};","map":{"version":3,"sources":["../../src/kernels/OneHot.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,MAAlC,EAA6F,IAA7F,QAAwG,uBAAxG;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAU,MAAV,CACF,IADE,EACuE;AAE3E,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA,OAAT;AAAkB,IAAA;AAAlB,MAA2B,IAAjC;AACA,QAAM;AAAC,IAAA;AAAD,MAAY,MAAlB;AACA,QAAM;AAAC,IAAA,KAAD;AAAQ,IAAA,OAAR;AAAiB,IAAA;AAAjB,MAA6B,KAAnC;AAEA,EAAA,gBAAgB,CAAC,OAAD,EAAU,QAAV,CAAhB;AAEA,QAAM,WAAW,GAAG,IAAI,CAAC,aAAL,CAAmB,OAAO,CAAC,KAA3B,CAApB;AAEA,QAAM,GAAG,GAAG,IAAI,YAAJ,CAAiB,WAAW,GAAG,KAA/B,CAAZ;AACA,EAAA,GAAG,CAAC,IAAJ,CAAS,QAAT;AACA,QAAM,UAAU,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,OAAO,CAAC,MAAzB,EAAiC,MAApD;;AAEA,OAAK,IAAI,KAAK,GAAG,CAAjB,EAAoB,KAAK,GAAG,WAA5B,EAAyC,EAAE,KAA3C,EAAkD;AAChD,QAAI,UAAU,CAAC,KAAD,CAAV,IAAqB,CAArB,IAA0B,UAAU,CAAC,KAAD,CAAV,GAAoB,KAAlD,EAAyD;AACvD,MAAA,GAAG,CAAC,KAAK,GAAG,KAAR,GAAgB,UAAU,CAAC,KAAD,CAA3B,CAAH,GAAyC,OAAzC;AACD;AACF;;AAED,SAAO,OAAO,CAAC,cAAR,CAAuB,CAAC,GAAG,OAAO,CAAC,KAAZ,EAAmB,KAAnB,CAAvB,EAAkD,OAAlD,EAA2D,GAA3D,CAAP;AACD;AAED,OAAO,MAAM,YAAY,GAAiB;AACxC,EAAA,UAAU,EAAE,MAD4B;AAExC,EAAA,WAAW,EAAE,KAF2B;AAGxC,EAAA,UAAU,EAAE;AAH4B,CAAnC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function oneHot(args) {\n    const { inputs, backend, attrs } = args;\n    const { indices } = inputs;\n    const { depth, onValue, offValue } = attrs;\n    assertNotComplex(indices, 'oneHot');\n    const indicesSize = util.sizeFromShape(indices.shape);\n    const res = new Float32Array(indicesSize * depth);\n    res.fill(offValue);\n    const indicesVal = backend.data.get(indices.dataId).values;\n    for (let event = 0; event < indicesSize; ++event) {\n        if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n            res[event * depth + indicesVal[event]] = onValue;\n        }\n    }\n    return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\nexport const oneHotConfig = {\n    kernelName: OneHot,\n    backendName: 'cpu',\n    kernelFunc: oneHot\n};\n//# sourceMappingURL=OneHot.js.map"]},"metadata":{},"sourceType":"module"}