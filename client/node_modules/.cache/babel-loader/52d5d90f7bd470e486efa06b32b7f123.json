{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n *\n * @param inputShape Input tensor shape is of the following dimensions:\n *     `[batch, height, width, inChannels]`.\n * @param filterShape The filter shape is of the following dimensions:\n *     `[filterHeight, filterWidth, depth]`.\n * @param strides The strides of the sliding window for each dimension of the\n *     input tensor: `[strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat The data format of the input and output data.\n *     Defaults to 'NHWC'.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.\n *     Defaults to `[1, 1]`. If `dilations` is a single number, then\n *     `dilationHeight == dilationWidth`.\n */\nexport function computeDilation2DInfo(inputShape, filterShape, strides, pad, dataFormat = 'NHWC', dilations) {\n  // `computerConv2DInfo` require filterShape to be in the dimension of:\n  // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have\n  // outDepth, it should have the same depth as the input.\n  // Input shape: [batch, height, width, inChannels]\n  const inputChannels = inputShape[3];\n  const $filterShape = [...filterShape, inputChannels];\n  const $dataFormat = convertConv2DDataFormat(dataFormat);\n  return computeConv2DInfo(inputShape, $filterShape, strides, dilations, pad, null\n  /* roundingMode */\n  , null\n  /* depthWise */\n  , $dataFormat);\n}\nexport function computePool2DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'channelsLast') {\n  const [filterHeight, filterWidth] = parseTupleParam(filterSize);\n  let filterShape;\n\n  if (dataFormat === 'channelsLast') {\n    filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];\n  } else if (dataFormat === 'channelsFirst') {\n    filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);\n}\n/**\n * Computes the information for a forward pass of a pooling3D operation.\n */\n\nexport function computePool3DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'NDHWC') {\n  const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);\n  let filterShape;\n  let $dataFormat;\n\n  if (dataFormat === 'NDHWC') {\n    $dataFormat = 'channelsLast';\n    filterShape = [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];\n  } else if (dataFormat === 'NCDHW') {\n    $dataFormat = 'channelsFirst';\n    filterShape = [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  return computeConv3DInfo(inShape, filterShape, strides, dilations, pad, false, $dataFormat, roundingMode);\n}\n/**\n * Computes the information for a forward pass of a convolution/pooling\n * operation.\n */\n\nexport function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise = false, dataFormat = 'channelsLast') {\n  let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];\n\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  const [filterHeight, filterWidth,, filterChannels] = filterShape;\n  const [strideHeight, strideWidth] = parseTupleParam(strides);\n  const [dilationHeight, dilationWidth] = parseTupleParam(dilations);\n  const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {\n    padInfo,\n    outHeight,\n    outWidth\n  } = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode, dataFormat);\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n  let outShape;\n\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inHeight,\n    inWidth,\n    inChannels,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideHeight,\n    strideWidth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n/**\n * Computes the information for a forward pass of a 3D convolution/pooling\n * operation.\n */\n\nexport function computeConv3DInfo(inShape, filterShape, strides, dilations, pad, depthwise = false, dataFormat = 'channelsLast', roundingMode) {\n  let [batchSize, inDepth, inHeight, inWidth, inChannels] = [-1, -1, -1, -1, -1];\n\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  const [filterDepth, filterHeight, filterWidth,, filterChannels] = filterShape;\n  const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);\n  const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);\n  const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);\n  const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {\n    padInfo,\n    outDepth,\n    outHeight,\n    outWidth\n  } = get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth, roundingMode);\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n  let outShape;\n\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inDepth,\n    inHeight,\n    inWidth,\n    inChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideDepth,\n    strideHeight,\n    strideWidth,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterDepth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n\nfunction computeOutputShape2D(inShape, fieldSize, stride, zeroPad, roundingMode) {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n\n  const inputRows = inShape[0];\n  const inputCols = inShape[1];\n  const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  return [outputRows, outputCols];\n}\n\nfunction computeOutputShape4D(inShape, fieldSize, outChannels, stride, zeroPad, roundingMode) {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n\n  const inputDepth = inShape[0];\n  const inputRows = inShape[1];\n  const inputCols = inShape[2];\n  const outputDepths = round((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  return [outputDepths, outputRows, outputCols, outChannels];\n}\n\nexport function computeDefaultPad(inputShape, fieldSize, stride, dilation = 1) {\n  const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n  return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n}\n\nfunction parseTupleParam(param) {\n  if (typeof param === 'number') {\n    return [param, param, param];\n  }\n\n  if (param.length === 2) {\n    return [param[0], param[1], 1];\n  }\n\n  return param;\n}\n\nfunction parse3TupleParam(param) {\n  return typeof param === 'number' ? [param, param, param] : param;\n}\n/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d\n * Atrous convolution is equivalent to standard convolution with upsampled\n * filters with effective_filter_height =\n * filter_height + (filter_height - 1) * (dilation - 1)\n * and effective_filter_width =\n * filter_width + (filter_width - 1) * (dilation - 1),\n * produced by inserting dilation - 1 zeros along consecutive elements across\n * the filters' spatial dimensions.\n * When there is a dilation, this converts a filter dimension to the\n * effective filter dimension, so it can be used in a standard convolution.\n */\n\n\nfunction getEffectiveFilterSize(filterSize, dilation) {\n  if (dilation <= 1) {\n    return filterSize;\n  }\n\n  return filterSize + (filterSize - 1) * (dilation - 1);\n}\n\nfunction getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode, dataFormat) {\n  let padInfo;\n  let outHeight;\n  let outWidth;\n\n  if (typeof pad === 'number') {\n    const padType = pad === 0 ? 'VALID' : 'NUMBER';\n    padInfo = {\n      top: pad,\n      bottom: pad,\n      left: pad,\n      right: pad,\n      type: padType\n    };\n    const outShape = computeOutputShape2D([inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);\n    outHeight = outShape[0];\n    outWidth = outShape[1];\n  } else if (pad === 'same') {\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongHeight = Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);\n    const padAlongWidth = Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n    padInfo = {\n      top,\n      bottom,\n      left,\n      right,\n      type: 'SAME'\n    };\n  } else if (pad === 'valid') {\n    padInfo = {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      type: 'VALID'\n    };\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else if (typeof pad === 'object') {\n    const top = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];\n    const bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];\n    const left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];\n    const right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];\n    const padType = top === 0 && bottom === 0 && left === 0 && right === 0 ? 'VALID' : 'EXPLICIT';\n    padInfo = {\n      top,\n      bottom,\n      left,\n      right,\n      type: padType\n    };\n    outHeight = round((inHeight - filterHeight + top + bottom) / strideHeight + 1, roundingMode);\n    outWidth = round((inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n\n  return {\n    padInfo,\n    outHeight,\n    outWidth\n  };\n}\n\nfunction get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, filterDepth, filterHeight, filterWidth, roundingMode) {\n  let padInfo;\n  let outDepth;\n  let outHeight;\n  let outWidth;\n\n  if (typeof pad === 'number') {\n    const padType = pad === 0 ? 'VALID' : 'NUMBER';\n    padInfo = {\n      top: pad,\n      bottom: pad,\n      left: pad,\n      right: pad,\n      front: pad,\n      back: pad,\n      type: padType\n    };\n    const outShape = computeOutputShape4D([inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad, roundingMode);\n    outDepth = outShape[0];\n    outHeight = outShape[1];\n    outWidth = outShape[2];\n  } else if (pad === 'same') {\n    outDepth = Math.ceil(inDepth / strideDepth);\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;\n    const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;\n    const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n    const front = Math.floor(padAlongDepth / 2);\n    const back = padAlongDepth - front;\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n    padInfo = {\n      top,\n      bottom,\n      left,\n      right,\n      front,\n      back,\n      type: 'SAME'\n    };\n  } else if (pad === 'valid') {\n    padInfo = {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      front: 0,\n      back: 0,\n      type: 'VALID'\n    };\n    outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n\n  return {\n    padInfo,\n    outDepth,\n    outHeight,\n    outWidth\n  };\n}\n/**\n * Rounds a value depending on the rounding mode\n * @param value\n * @param roundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\n\n\nfunction round(value, roundingMode) {\n  if (!roundingMode) {\n    return Math.trunc(value);\n  }\n\n  switch (roundingMode) {\n    case 'round':\n      // used for Caffe Conv\n      return Math.round(value);\n\n    case 'ceil':\n      // used for Caffe Pool\n      return Math.ceil(value);\n\n    case 'floor':\n      return Math.floor(value);\n\n    default:\n      throw new Error(`Unknown roundingMode ${roundingMode}`);\n  }\n}\n\nexport function tupleValuesAreOne(param) {\n  const [dimA, dimB, dimC] = parseTupleParam(param);\n  return dimA === 1 && dimB === 1 && dimC === 1;\n}\nexport function eitherStridesOrDilationsAreOne(strides, dilations) {\n  return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\n/**\n * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to\n *    'channelsLast'|'channelsFirst'\n * @param dataFormat in 'NHWC'|'NCHW' mode\n * @return dataFormat in 'channelsLast'|'channelsFirst' mode\n * @throws unknown dataFormat\n */\n\nexport function convertConv2DDataFormat(dataFormat) {\n  if (dataFormat === 'NHWC') {\n    return 'channelsLast';\n  } else if (dataFormat === 'NCHW') {\n    return 'channelsFirst';\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n}","map":{"version":3,"sources":["../../src/ops/conv_util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n *\n * @param inputShape Input tensor shape is of the following dimensions:\n *     `[batch, height, width, inChannels]`.\n * @param filterShape The filter shape is of the following dimensions:\n *     `[filterHeight, filterWidth, depth]`.\n * @param strides The strides of the sliding window for each dimension of the\n *     input tensor: `[strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat The data format of the input and output data.\n *     Defaults to 'NHWC'.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.\n *     Defaults to `[1, 1]`. If `dilations` is a single number, then\n *     `dilationHeight == dilationWidth`.\n */\nexport function computeDilation2DInfo(inputShape, filterShape, strides, pad, dataFormat = 'NHWC', dilations) {\n    // `computerConv2DInfo` require filterShape to be in the dimension of:\n    // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have\n    // outDepth, it should have the same depth as the input.\n    // Input shape: [batch, height, width, inChannels]\n    const inputChannels = inputShape[3];\n    const $filterShape = [...filterShape, inputChannels];\n    const $dataFormat = convertConv2DDataFormat(dataFormat);\n    return computeConv2DInfo(inputShape, $filterShape, strides, dilations, pad, null /* roundingMode */, null /* depthWise */, $dataFormat);\n}\nexport function computePool2DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'channelsLast') {\n    const [filterHeight, filterWidth] = parseTupleParam(filterSize);\n    let filterShape;\n    if (dataFormat === 'channelsLast') {\n        filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];\n    }\n    else if (dataFormat === 'channelsFirst') {\n        filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n    return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);\n}\n/**\n * Computes the information for a forward pass of a pooling3D operation.\n */\nexport function computePool3DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'NDHWC') {\n    const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);\n    let filterShape;\n    let $dataFormat;\n    if (dataFormat === 'NDHWC') {\n        $dataFormat = 'channelsLast';\n        filterShape =\n            [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];\n    }\n    else if (dataFormat === 'NCDHW') {\n        $dataFormat = 'channelsFirst';\n        filterShape =\n            [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n    return computeConv3DInfo(inShape, filterShape, strides, dilations, pad, false, $dataFormat, roundingMode);\n}\n/**\n * Computes the information for a forward pass of a convolution/pooling\n * operation.\n */\nexport function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise = false, dataFormat = 'channelsLast') {\n    let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];\n    if (dataFormat === 'channelsLast') {\n        [batchSize, inHeight, inWidth, inChannels] = inShape;\n    }\n    else if (dataFormat === 'channelsFirst') {\n        [batchSize, inChannels, inHeight, inWidth] = inShape;\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n    const [filterHeight, filterWidth, , filterChannels] = filterShape;\n    const [strideHeight, strideWidth] = parseTupleParam(strides);\n    const [dilationHeight, dilationWidth] = parseTupleParam(dilations);\n    const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n    const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n    const { padInfo, outHeight, outWidth } = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode, dataFormat);\n    const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n    let outShape;\n    if (dataFormat === 'channelsFirst') {\n        outShape = [batchSize, outChannels, outHeight, outWidth];\n    }\n    else if (dataFormat === 'channelsLast') {\n        outShape = [batchSize, outHeight, outWidth, outChannels];\n    }\n    return {\n        batchSize,\n        dataFormat,\n        inHeight,\n        inWidth,\n        inChannels,\n        outHeight,\n        outWidth,\n        outChannels,\n        padInfo,\n        strideHeight,\n        strideWidth,\n        filterHeight,\n        filterWidth,\n        effectiveFilterHeight,\n        effectiveFilterWidth,\n        dilationHeight,\n        dilationWidth,\n        inShape,\n        outShape,\n        filterShape\n    };\n}\n/**\n * Computes the information for a forward pass of a 3D convolution/pooling\n * operation.\n */\nexport function computeConv3DInfo(inShape, filterShape, strides, dilations, pad, depthwise = false, dataFormat = 'channelsLast', roundingMode) {\n    let [batchSize, inDepth, inHeight, inWidth, inChannels] = [-1, -1, -1, -1, -1];\n    if (dataFormat === 'channelsLast') {\n        [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;\n    }\n    else if (dataFormat === 'channelsFirst') {\n        [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n    const [filterDepth, filterHeight, filterWidth, , filterChannels] = filterShape;\n    const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);\n    const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);\n    const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);\n    const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n    const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n    const { padInfo, outDepth, outHeight, outWidth } = get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth, roundingMode);\n    const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n    let outShape;\n    if (dataFormat === 'channelsFirst') {\n        outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];\n    }\n    else if (dataFormat === 'channelsLast') {\n        outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];\n    }\n    return {\n        batchSize,\n        dataFormat,\n        inDepth,\n        inHeight,\n        inWidth,\n        inChannels,\n        outDepth,\n        outHeight,\n        outWidth,\n        outChannels,\n        padInfo,\n        strideDepth,\n        strideHeight,\n        strideWidth,\n        filterDepth,\n        filterHeight,\n        filterWidth,\n        effectiveFilterDepth,\n        effectiveFilterHeight,\n        effectiveFilterWidth,\n        dilationDepth,\n        dilationHeight,\n        dilationWidth,\n        inShape,\n        outShape,\n        filterShape\n    };\n}\nfunction computeOutputShape2D(inShape, fieldSize, stride, zeroPad, roundingMode) {\n    if (zeroPad == null) {\n        zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n    }\n    const inputRows = inShape[0];\n    const inputCols = inShape[1];\n    const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    return [outputRows, outputCols];\n}\nfunction computeOutputShape4D(inShape, fieldSize, outChannels, stride, zeroPad, roundingMode) {\n    if (zeroPad == null) {\n        zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n    }\n    const inputDepth = inShape[0];\n    const inputRows = inShape[1];\n    const inputCols = inShape[2];\n    const outputDepths = round((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    return [outputDepths, outputRows, outputCols, outChannels];\n}\nexport function computeDefaultPad(inputShape, fieldSize, stride, dilation = 1) {\n    const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n    return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n}\nfunction parseTupleParam(param) {\n    if (typeof param === 'number') {\n        return [param, param, param];\n    }\n    if (param.length === 2) {\n        return [param[0], param[1], 1];\n    }\n    return param;\n}\nfunction parse3TupleParam(param) {\n    return typeof param === 'number' ? [param, param, param] : param;\n}\n/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d\n * Atrous convolution is equivalent to standard convolution with upsampled\n * filters with effective_filter_height =\n * filter_height + (filter_height - 1) * (dilation - 1)\n * and effective_filter_width =\n * filter_width + (filter_width - 1) * (dilation - 1),\n * produced by inserting dilation - 1 zeros along consecutive elements across\n * the filters' spatial dimensions.\n * When there is a dilation, this converts a filter dimension to the\n * effective filter dimension, so it can be used in a standard convolution.\n */\nfunction getEffectiveFilterSize(filterSize, dilation) {\n    if (dilation <= 1) {\n        return filterSize;\n    }\n    return filterSize + (filterSize - 1) * (dilation - 1);\n}\nfunction getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode, dataFormat) {\n    let padInfo;\n    let outHeight;\n    let outWidth;\n    if (typeof pad === 'number') {\n        const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n        padInfo = { top: pad, bottom: pad, left: pad, right: pad, type: padType };\n        const outShape = computeOutputShape2D([inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);\n        outHeight = outShape[0];\n        outWidth = outShape[1];\n    }\n    else if (pad === 'same') {\n        outHeight = Math.ceil(inHeight / strideHeight);\n        outWidth = Math.ceil(inWidth / strideWidth);\n        const padAlongHeight = Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);\n        const padAlongWidth = Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);\n        const top = Math.floor(padAlongHeight / 2);\n        const bottom = padAlongHeight - top;\n        const left = Math.floor(padAlongWidth / 2);\n        const right = padAlongWidth - left;\n        padInfo = { top, bottom, left, right, type: 'SAME' };\n    }\n    else if (pad === 'valid') {\n        padInfo = { top: 0, bottom: 0, left: 0, right: 0, type: 'VALID' };\n        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n    }\n    else if (typeof pad === 'object') {\n        const top = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];\n        const bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];\n        const left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];\n        const right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];\n        const padType = (top === 0 && bottom === 0 && left === 0 && right === 0) ?\n            'VALID' :\n            'EXPLICIT';\n        padInfo = { top, bottom, left, right, type: padType };\n        outHeight = round((inHeight - filterHeight + top + bottom) / strideHeight + 1, roundingMode);\n        outWidth = round((inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);\n    }\n    else {\n        throw Error(`Unknown padding parameter: ${pad}`);\n    }\n    return { padInfo, outHeight, outWidth };\n}\nfunction get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, filterDepth, filterHeight, filterWidth, roundingMode) {\n    let padInfo;\n    let outDepth;\n    let outHeight;\n    let outWidth;\n    if (typeof pad === 'number') {\n        const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n        padInfo = {\n            top: pad,\n            bottom: pad,\n            left: pad,\n            right: pad,\n            front: pad,\n            back: pad,\n            type: padType\n        };\n        const outShape = computeOutputShape4D([inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad, roundingMode);\n        outDepth = outShape[0];\n        outHeight = outShape[1];\n        outWidth = outShape[2];\n    }\n    else if (pad === 'same') {\n        outDepth = Math.ceil(inDepth / strideDepth);\n        outHeight = Math.ceil(inHeight / strideHeight);\n        outWidth = Math.ceil(inWidth / strideWidth);\n        const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;\n        const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;\n        const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n        const front = Math.floor(padAlongDepth / 2);\n        const back = padAlongDepth - front;\n        const top = Math.floor(padAlongHeight / 2);\n        const bottom = padAlongHeight - top;\n        const left = Math.floor(padAlongWidth / 2);\n        const right = padAlongWidth - left;\n        padInfo = { top, bottom, left, right, front, back, type: 'SAME' };\n    }\n    else if (pad === 'valid') {\n        padInfo = {\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            front: 0,\n            back: 0,\n            type: 'VALID'\n        };\n        outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);\n        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n    }\n    else {\n        throw Error(`Unknown padding parameter: ${pad}`);\n    }\n    return { padInfo, outDepth, outHeight, outWidth };\n}\n/**\n * Rounds a value depending on the rounding mode\n * @param value\n * @param roundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction round(value, roundingMode) {\n    if (!roundingMode) {\n        return Math.trunc(value);\n    }\n    switch (roundingMode) {\n        case 'round':\n            // used for Caffe Conv\n            return Math.round(value);\n        case 'ceil':\n            // used for Caffe Pool\n            return Math.ceil(value);\n        case 'floor':\n            return Math.floor(value);\n        default:\n            throw new Error(`Unknown roundingMode ${roundingMode}`);\n    }\n}\nexport function tupleValuesAreOne(param) {\n    const [dimA, dimB, dimC] = parseTupleParam(param);\n    return dimA === 1 && dimB === 1 && dimC === 1;\n}\nexport function eitherStridesOrDilationsAreOne(strides, dilations) {\n    return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\n/**\n * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to\n *    'channelsLast'|'channelsFirst'\n * @param dataFormat in 'NHWC'|'NCHW' mode\n * @return dataFormat in 'channelsLast'|'channelsFirst' mode\n * @throws unknown dataFormat\n */\nexport function convertConv2DDataFormat(dataFormat) {\n    if (dataFormat === 'NHWC') {\n        return 'channelsLast';\n    }\n    else if (dataFormat === 'NCHW') {\n        return 'channelsFirst';\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n}\n//# sourceMappingURL=conv_util.js.map"]},"metadata":{},"sourceType":"module"}