{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { KernelBackend } from './backends/backend';\nimport { Environment, setEnvironmentGlobal } from './environment';\nimport { getGlobalNamespace } from './global_util';\nimport { Add, Cast, Identity } from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend } from './kernel_registry';\nimport { Profiler } from './profiler';\nimport { backpropagateGradients, getFilteredNodesXToY } from './tape';\nimport { setTensorTracker, Tensor, Variable } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\nimport * as util from './util';\nimport { bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape } from './util';\n\nfunction isRegisteredKernelInvocation(kernelInvocation) {\n  return kernelInvocation.kernelName != null;\n}\n\nvar EngineState = /*#__PURE__*/function () {\n  function EngineState() {\n    _classCallCheck(this, EngineState);\n\n    // Public since optimizers will use it.\n    this.registeredVariables = {};\n    this.nextTapeNodeId = 0;\n    this.numBytes = 0;\n    this.numTensors = 0;\n    this.numStringTensors = 0;\n    this.numDataBuffers = 0; // Number of nested tf.grad() statements when computing higher-order\n    // gradients. E.g. `1` for first-order gradients and `2` for second-order\n    // gradients. Used to track if the tape should be removed after a backprop.\n\n    this.gradientDepth = 0; // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n    // off the tape.\n\n    this.kernelDepth = 0;\n    this.scopeStack = [];\n    /**\n     * Keeps track of the number of data moves during a kernel execution. We\n     * maintain a stack since kernels can call other kernels, recursively.\n     */\n\n    this.numDataMovesStack = [];\n    this.nextScopeId = 0;\n    this.tensorInfo = new WeakMap();\n    this.profiling = false;\n    this.activeProfile = {\n      newBytes: 0,\n      newTensors: 0,\n      peakBytes: 0,\n      kernels: [],\n      result: null,\n\n      get kernelNames() {\n        return Array.from(new Set(this.kernels.map(function (k) {\n          return k.name;\n        })));\n      }\n\n    };\n  }\n\n  _createClass(EngineState, [{\n    key: \"dispose\",\n    value: function dispose() {\n      for (var variableName in this.registeredVariables) {\n        this.registeredVariables[variableName].dispose();\n      }\n    }\n  }]);\n\n  return EngineState;\n}();\n\nexport var Engine = /*#__PURE__*/function () {\n  function Engine(ENV) {\n    _classCallCheck(this, Engine);\n\n    this.ENV = ENV;\n    this.registry = {};\n    this.registryFactory = {};\n    this.pendingBackendInitId = 0;\n    this.state = new EngineState();\n  }\n\n  _createClass(Engine, [{\n    key: \"ready\",\n    value: function () {\n      var _ready = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var sortedBackends, i, backendName, success;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.pendingBackendInit != null)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.pendingBackendInit.then(function () {}));\n\n              case 2:\n                if (!(this.backendInstance != null)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 4:\n                sortedBackends = this.getSortedBackends();\n                i = 0;\n\n              case 6:\n                if (!(i < sortedBackends.length)) {\n                  _context.next = 18;\n                  break;\n                }\n\n                backendName = sortedBackends[i];\n                _context.next = 10;\n                return this.initializeBackend(backendName).success;\n\n              case 10:\n                success = _context.sent;\n\n                if (!success) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _context.next = 14;\n                return this.setBackend(backendName);\n\n              case 14:\n                return _context.abrupt(\"return\");\n\n              case 15:\n                i++;\n                _context.next = 6;\n                break;\n\n              case 18:\n                throw new Error(\"Could not initialize any backends, all backend initializations \" + \"failed.\");\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function ready() {\n        return _ready.apply(this, arguments);\n      }\n\n      return ready;\n    }()\n  }, {\n    key: \"backend\",\n    get: function get() {\n      if (this.pendingBackendInit != null) {\n        throw new Error(\"Backend '\".concat(this.backendName, \"' has not yet been initialized. Make \") + \"sure to await tf.ready() or await tf.setBackend() before calling \" + \"other methods\");\n      }\n\n      if (this.backendInstance == null) {\n        var _this$initializeBacke = this.initializeBackendsAndReturnBest(),\n            name = _this$initializeBacke.name,\n            asyncInit = _this$initializeBacke.asyncInit;\n\n        if (asyncInit) {\n          throw new Error(\"The highest priority backend '\".concat(name, \"' has not yet been \") + \"initialized. Make sure to await tf.ready() or \" + \"await tf.setBackend() before calling other methods\");\n        }\n\n        this.setBackend(name);\n      }\n\n      return this.backendInstance;\n    }\n  }, {\n    key: \"backendNames\",\n    value: function backendNames() {\n      return Object.keys(this.registryFactory);\n    }\n  }, {\n    key: \"findBackend\",\n    value: function findBackend(backendName) {\n      if (!(backendName in this.registry)) {\n        // If the backend hasn't been initialized but we have a registry entry for\n        // it, initialize it and return it.\n        if (backendName in this.registryFactory) {\n          var _this$initializeBacke2 = this.initializeBackend(backendName),\n              asyncInit = _this$initializeBacke2.asyncInit;\n\n          if (asyncInit) {\n            // Backend is not ready yet.\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n\n      return this.registry[backendName];\n    }\n  }, {\n    key: \"findBackendFactory\",\n    value: function findBackendFactory(backendName) {\n      if (!(backendName in this.registryFactory)) {\n        return null;\n      }\n\n      return this.registryFactory[backendName].factory;\n    }\n  }, {\n    key: \"registerBackend\",\n    value: function registerBackend(backendName, factory) {\n      var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n      if (backendName in this.registryFactory) {\n        console.warn(\"\".concat(backendName, \" backend was already registered. \") + \"Reusing existing backend factory.\");\n        return false;\n      }\n\n      this.registryFactory[backendName] = {\n        factory: factory,\n        priority: priority\n      };\n      return true;\n    }\n  }, {\n    key: \"setBackend\",\n    value: function () {\n      var _setBackend = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(backendName) {\n        var _this$initializeBacke3, success, asyncInit, result;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.registryFactory[backendName] == null)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Backend name '\".concat(backendName, \"' not found in registry\"));\n\n              case 2:\n                this.backendName = backendName;\n\n                if (!(this.registry[backendName] == null)) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                this.backendInstance = null;\n                _this$initializeBacke3 = this.initializeBackend(backendName), success = _this$initializeBacke3.success, asyncInit = _this$initializeBacke3.asyncInit;\n\n                if (!asyncInit) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                _context2.next = 9;\n                return success;\n\n              case 9:\n                _context2.t0 = _context2.sent;\n                _context2.next = 13;\n                break;\n\n              case 12:\n                _context2.t0 = success;\n\n              case 13:\n                result = _context2.t0;\n\n                if (result) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 16:\n                this.backendInstance = this.registry[backendName];\n                this.setupRegisteredKernels(); // Reset the profiler.\n\n                this.profiler = new Profiler(this.backendInstance);\n                return _context2.abrupt(\"return\", true);\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setBackend(_x) {\n        return _setBackend.apply(this, arguments);\n      }\n\n      return setBackend;\n    }()\n  }, {\n    key: \"setupRegisteredKernels\",\n    value: function setupRegisteredKernels() {\n      var _this = this;\n\n      var kernels = getKernelsForBackend(this.backendName);\n      kernels.forEach(function (kernel) {\n        if (kernel.setupFunc != null) {\n          kernel.setupFunc(_this.backendInstance);\n        }\n      });\n    }\n  }, {\n    key: \"disposeRegisteredKernels\",\n    value: function disposeRegisteredKernels(backendName) {\n      var _this2 = this;\n\n      var kernels = getKernelsForBackend(backendName);\n      kernels.forEach(function (kernel) {\n        if (kernel.disposeFunc != null) {\n          kernel.disposeFunc(_this2.registry[backendName]);\n        }\n      });\n    }\n    /**\n     * Initializes a backend by looking up the backend name in the factory\n     * registry and calling the factory method. Returns a boolean representing\n     * whether the initialization of the backend suceeded. Throws an error if\n     * there is no backend in the factory registry.\n     */\n\n  }, {\n    key: \"initializeBackend\",\n    value: function initializeBackend(backendName) {\n      var _this3 = this;\n\n      var registryFactoryEntry = this.registryFactory[backendName];\n\n      if (registryFactoryEntry == null) {\n        throw new Error(\"Cannot initialize backend \".concat(backendName, \", no registration found.\"));\n      }\n\n      try {\n        var backend = registryFactoryEntry.factory();\n        /* Test if the factory returns a promise.\n        Done in a more liberal way than\n        previous 'Promise.resolve(backend)===backend'\n        as we needed to account for custom Promise\n        implementations (e.g. Angular) */\n\n        if (backend && !(backend instanceof KernelBackend) && typeof backend.then === 'function') {\n          var promiseId = ++this.pendingBackendInitId;\n          var success = backend.then(function (backendInstance) {\n            // Outdated promise. Another backend was set in the meantime.\n            if (promiseId < _this3.pendingBackendInitId) {\n              return false;\n            }\n\n            _this3.registry[backendName] = backendInstance;\n            _this3.pendingBackendInit = null;\n            return true;\n          }).catch(function (err) {\n            // Outdated promise. Another backend was set in the meantime.\n            if (promiseId < _this3.pendingBackendInitId) {\n              return false;\n            }\n\n            _this3.pendingBackendInit = null;\n            console.warn(\"Initialization of backend \".concat(backendName, \" failed\"));\n            console.warn(err.stack || err.message);\n            return false;\n          });\n          this.pendingBackendInit = success;\n          return {\n            success: success,\n            asyncInit: true\n          };\n        } else {\n          this.registry[backendName] = backend;\n          return {\n            success: true,\n            asyncInit: false\n          };\n        }\n      } catch (err) {\n        console.warn(\"Initialization of backend \".concat(backendName, \" failed\"));\n        console.warn(err.stack || err.message);\n        return {\n          success: false,\n          asyncInit: false\n        };\n      }\n    }\n  }, {\n    key: \"removeBackend\",\n    value: function removeBackend(backendName) {\n      if (!(backendName in this.registryFactory)) {\n        throw new Error(\"\".concat(backendName, \" backend not found in registry\"));\n      }\n\n      if (this.backendName === backendName && this.pendingBackendInit != null) {\n        // There is a pending promise of the backend we want to remove. Make it\n        // obsolete.\n        this.pendingBackendInitId++;\n      }\n\n      if (backendName in this.registry) {\n        this.disposeRegisteredKernels(backendName);\n        this.registry[backendName].dispose();\n        delete this.registry[backendName];\n      }\n\n      delete this.registryFactory[backendName]; // Unset the backend if it is active.\n\n      if (this.backendName === backendName) {\n        this.pendingBackendInit = null;\n        this.backendName = null;\n        this.backendInstance = null;\n      }\n    }\n  }, {\n    key: \"getSortedBackends\",\n    value: function getSortedBackends() {\n      var _this4 = this;\n\n      if (Object.keys(this.registryFactory).length === 0) {\n        throw new Error('No backend found in registry.');\n      }\n\n      return Object.keys(this.registryFactory).sort(function (a, b) {\n        // Highest priority comes first.\n        return _this4.registryFactory[b].priority - _this4.registryFactory[a].priority;\n      });\n    }\n  }, {\n    key: \"initializeBackendsAndReturnBest\",\n    value: function initializeBackendsAndReturnBest() {\n      var sortedBackends = this.getSortedBackends();\n\n      for (var i = 0; i < sortedBackends.length; i++) {\n        var backendName = sortedBackends[i];\n\n        var _this$initializeBacke4 = this.initializeBackend(backendName),\n            success = _this$initializeBacke4.success,\n            asyncInit = _this$initializeBacke4.asyncInit;\n\n        if (asyncInit || success) {\n          return {\n            name: backendName,\n            asyncInit: asyncInit\n          };\n        }\n      }\n\n      throw new Error(\"Could not initialize any backends, all backend initializations \" + \"failed.\");\n    }\n  }, {\n    key: \"moveData\",\n    value: function moveData(backend, dataId) {\n      var info = this.state.tensorInfo.get(dataId);\n      var srcBackend = info.backend;\n      var values = this.readSync(dataId);\n      var refCount = srcBackend.refCount(dataId); // Delete the tensor from the old backend and move it to the new\n      // backend.\n\n      srcBackend.disposeData(dataId, true);\n      info.backend = backend;\n      backend.move(dataId, values, info.shape, info.dtype, refCount);\n\n      if (this.shouldCheckForMemLeaks()) {\n        // Track the number of moves during a kernel execution to correctly\n        // detect memory leaks.\n        this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n      }\n    }\n  }, {\n    key: \"tidy\",\n    value: function tidy(nameOrFn, fn) {\n      var _this5 = this;\n\n      var name = null;\n\n      if (fn == null) {\n        // Called with only 1 argument.\n        if (typeof nameOrFn !== 'function') {\n          throw new Error('Please provide a function to tidy()');\n        }\n\n        fn = nameOrFn;\n      } else {\n        // Called with 2 arguments.\n        if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n          throw new Error('When calling with two arguments, the first argument ' + 'to tidy() must be a string');\n        }\n\n        if (typeof fn !== 'function') {\n          throw new Error('When calling with two arguments, the 2nd argument ' + 'to tidy() must be a function');\n        }\n\n        name = nameOrFn; // TODO(nsthorat,smilkov): Do operation logging and performance\n        // profiling.\n      }\n\n      var result;\n      return this.scopedRun(function () {\n        return _this5.startScope(name);\n      }, function () {\n        return _this5.endScope(result);\n      }, function () {\n        result = fn();\n\n        if (result instanceof Promise) {\n          console.error('Cannot return a Promise inside of tidy.');\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"scopedRun\",\n    value: function scopedRun(start, end, f) {\n      start();\n\n      try {\n        var res = f();\n        end();\n        return res;\n      } catch (ex) {\n        end();\n        throw ex;\n      }\n    }\n  }, {\n    key: \"nextTensorId\",\n    value: function nextTensorId() {\n      return Engine.nextTensorId++;\n    }\n  }, {\n    key: \"nextVariableId\",\n    value: function nextVariableId() {\n      return Engine.nextVariableId++;\n    }\n    /**\n     * This method is called instead of the public-facing tensor.clone() when\n     * saving a tensor for backwards pass. It makes sure to add the clone\n     * operation to the tape regardless of being called inside a kernel\n     * execution.\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone(x) {\n      var y = ENGINE.runKernel(Identity, {\n        x: x\n      });\n      var inputs = {\n        x: x\n      };\n\n      var grad = function grad(dy) {\n        return {\n          x: function x() {\n            var dtype = 'float32';\n            var gradInputs = {\n              x: dy\n            };\n            var attrs = {\n              dtype: dtype\n            };\n            return ENGINE.runKernel(Cast, gradInputs, // tslint:disable-next-line: no-unnecessary-type-assertion\n            attrs);\n          }\n        };\n      };\n\n      var saved = [];\n      this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n      return y;\n    }\n    /**\n     * Execute a kernel with the given name and return the output tensor.\n     *\n     * @param kernelName The name of the kernel to execute.\n     * @param inputs A map of input names to tensors.\n     * @param attrs A map of attribute names to their values. An attribute is a\n     *     primitive (non-tensor) input to the kernel.\n     * @param inputsToSave A list of tensors, inputs to save for the backprop\n     *     computation.\n     * @param outputsToSave A list of booleans, specifying which output to save\n     *     for the backprop computation. These are booleans since the output\n     * tensors are not visible to the user.\n     */\n\n  }, {\n    key: \"runKernel\",\n    value: function runKernel(kernelName, inputs, attrs) {\n      var hasKernel = getKernel(kernelName, this.backendName) != null;\n\n      if (!hasKernel) {\n        throw new Error(\"Kernel '\".concat(kernelName, \"' not registered for backend '\").concat(this.backendName, \"'\"));\n      }\n\n      return this.runKernelFunc({\n        kernelName: kernelName,\n        inputs: inputs,\n        attrs: attrs\n      });\n    }\n  }, {\n    key: \"shouldCheckForMemLeaks\",\n    value: function shouldCheckForMemLeaks() {\n      return this.ENV.getBool('IS_TEST');\n    }\n  }, {\n    key: \"checkKernelForMemLeak\",\n    value: function checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {\n      var numDataIdsAfter = this.backend.numDataIds(); // Count the number of data ids associated with the result of the kernel.\n\n      var numOutputDataIds = 0;\n      outInfos.forEach(function (info) {\n        // Complex numbers allocate 3 data ids, one for 'real', one for\n        // 'imaginary', and one for the container that holds the former two.\n        numOutputDataIds += info.dtype === 'complex64' ? 3 : 1;\n      }); // Account for the number of moves during kernel execution. A \"data move\"\n      // can happen in the middle of a kernel execution, placing a new (key,value)\n      // pair in the data storage. Since data moves have net zero effect (we\n      // always remove the data from the old backend), we have to cancel them out\n      // when detecting memory leaks.\n\n      var numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n      var dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n\n      if (dataIdsLeaked > 0) {\n        throw new Error(\"Backend '\".concat(this.backendName, \"' has an internal memory leak \") + \"(\".concat(dataIdsLeaked, \" data ids) after running '\").concat(kernelName, \"'\"));\n      }\n    }\n    /**\n     * Internal helper method to execute a kernel Func\n     *\n     * Use `runKernel` to execute kernels from outside of engine.\n     */\n\n  }, {\n    key: \"runKernelFunc\",\n    value: function runKernelFunc(kernelParams) {\n      var _this6 = this;\n\n      var outputs;\n      var saved = [];\n      var isTapeOn = this.isTapeOn();\n      var startingBytecount = this.state.numBytes;\n      var startingNumTensors = this.state.numTensors;\n\n      if (this.shouldCheckForMemLeaks()) {\n        this.state.numDataMovesStack.push(0);\n      }\n\n      var kernelFunc;\n\n      if (this.backendName == null) {\n        // backend has not been initialized yet (backend initialization is lazy\n        // can be deferred until an op/ kernel is run).\n        // The below getter has side effects that will try to initialize the\n        // backend and set properties like this.backendName\n        // tslint:disable-next-line: no-unused-expression\n        this.backend;\n      }\n\n      var out;\n      var kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ? kernelParams.kernelName : this.state.activeScope != null ? this.state.activeScope.name : ''; // Create the kernelFunc from either a registered kernel OR passed in\n      // forward/backward functions (used by custom grad). In this context a\n      // kernelFunc wraps a kernel implementation with some bookkeeping.\n\n      if (isRegisteredKernelInvocation(kernelParams)) {\n        var kernelName = kernelParams.kernelName,\n            _inputs = kernelParams.inputs,\n            _attrs = kernelParams.attrs;\n\n        if (this.backendName == null) {\n          // backend has not been initialized yet (backend initialization is lazy\n          // can be deferred until an op/ kernel is run).\n          // The below getter has side effects that will try to initialize the\n          // backend and set properties like this.backendName\n          // tslint:disable-next-line: no-unused-expression\n          this.backend;\n        }\n\n        var kernel = getKernel(kernelName, this.backendName);\n        util.assert(kernel != null, function () {\n          return \"Cannot find registered kernel '\".concat(kernelName, \"' for backend '\").concat(_this6.backendName, \"'\");\n        });\n\n        kernelFunc = function kernelFunc() {\n          var numDataIdsBefore = _this6.backend.numDataIds();\n\n          out = kernel.kernelFunc({\n            inputs: _inputs,\n            attrs: _attrs,\n            backend: _this6.backend\n          });\n          var outInfos = Array.isArray(out) ? out : [out];\n\n          if (_this6.shouldCheckForMemLeaks()) {\n            _this6.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n          }\n\n          var outTensors = outInfos.map(function (outInfo) {\n            // todo (yassogba) remove this option (Tensor) when node backend\n            // methods have been modularized and they all return tensorInfo.\n            // TensorInfos do not have a rank attribute.\n            if (outInfo.rank != null) {\n              return outInfo;\n            }\n\n            var dataId = outInfo.dataId,\n                shape = outInfo.shape,\n                dtype = outInfo.dtype;\n            return _this6.makeTensorFromDataId(dataId, shape, dtype);\n          }); // Save any required inputs and outputs.\n          // Do not save unless we are recording to the tape. Otherwise it would\n          // cause a mem leak since there would be no backprop for these tensors\n          // (which would otherwise dispose them).\n\n          if (isTapeOn) {\n            var tensorsToSave = _this6.getTensorsForGradient(kernelName, _inputs, outTensors);\n\n            saved = _this6.saveTensorsForBackwardMode(tensorsToSave);\n          }\n\n          return outTensors;\n        };\n      } else {\n        var forwardFunc = kernelParams.forwardFunc; // Running a customGrad op.\n\n        var saveFunc = function saveFunc(tensors) {\n          // Do not save unless we are recording to the tape. Otherwise it would\n          // cause a mem leak since we would never run backprop, which disposes\n          // the kept tensors.\n          if (!isTapeOn) {\n            return;\n          }\n\n          saved = tensors.map(function (tensor) {\n            return _this6.keep(_this6.clone(tensor));\n          });\n        };\n\n        kernelFunc = function kernelFunc() {\n          var numDataIdsBefore = _this6.backend.numDataIds();\n\n          out = _this6.tidy(function () {\n            return forwardFunc(_this6.backend, saveFunc);\n          });\n          var outs = Array.isArray(out) ? out : [out];\n\n          if (_this6.shouldCheckForMemLeaks()) {\n            // Scope name is used to print a more helpful error message if needed.\n            _this6.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n          }\n\n          return outs;\n        };\n      } //\n      // Run the kernelFunc. Optionally profiling it.\n      //\n\n\n      var inputs = kernelParams.inputs,\n          attrs = kernelParams.attrs;\n      var backwardsFunc = isRegisteredKernelInvocation(kernelParams) ? null : kernelParams.backwardsFunc;\n      var kernelProfile;\n      this.scopedRun( // Stop recording to a tape when running a kernel.\n      function () {\n        return _this6.state.kernelDepth++;\n      }, function () {\n        return _this6.state.kernelDepth--;\n      }, function () {\n        if (!_this6.ENV.getBool('DEBUG') && !_this6.state.profiling) {\n          outputs = kernelFunc();\n        } else {\n          kernelProfile = _this6.profiler.profileKernel(kernelOrScopeName, inputs, function () {\n            return kernelFunc();\n          });\n\n          if (_this6.ENV.getBool('DEBUG')) {\n            _this6.profiler.logKernelProfile(kernelProfile);\n          }\n\n          outputs = kernelProfile.outputs;\n        }\n      });\n\n      if (isTapeOn) {\n        this.addTapeNode(kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n      }\n\n      if (this.state.profiling) {\n        this.state.activeProfile.kernels.push({\n          name: kernelOrScopeName,\n          bytesAdded: this.state.numBytes - startingBytecount,\n          totalBytesSnapshot: this.state.numBytes,\n          tensorsAdded: this.state.numTensors - startingNumTensors,\n          totalTensorsSnapshot: this.state.numTensors,\n          inputShapes: Object.keys(inputs).map(function (key) {\n            return inputs[key] != null ? inputs[key].shape : null;\n          }),\n          outputShapes: outputs.map(function (item) {\n            return item.shape;\n          }),\n          kernelTimeMs: kernelProfile.timeMs,\n          extraInfo: kernelProfile.extraInfo\n        });\n      }\n\n      return Array.isArray(out) ? outputs : outputs[0];\n    }\n    /**\n     * Saves tensors used in forward mode for use in backward mode.\n     *\n     * @param tensors the list of tensors to save.\n     */\n\n  }, {\n    key: \"saveTensorsForBackwardMode\",\n    value: function saveTensorsForBackwardMode(tensors) {\n      var _this7 = this;\n\n      var saved = tensors.map(function (tensor) {\n        return _this7.keep(_this7.clone(tensor));\n      });\n      return saved;\n    }\n    /**\n     * Returns a list of tensors to save for a given gradient calculation.\n     *\n     * @param kernelName name of kernel to look up gradient for.\n     * @param inputs a map of input tensors.\n     * @param outputs an array of output tensors from forward mode of kernel.\n     */\n\n  }, {\n    key: \"getTensorsForGradient\",\n    value: function getTensorsForGradient(kernelName, inputs, outputs) {\n      var gradConfig = getGradient(kernelName);\n\n      if (gradConfig != null) {\n        var inputsToSave = gradConfig.inputsToSave || [];\n        var outputsToSave = gradConfig.outputsToSave || []; // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n        // specified in inputsToSave will be saved.\n\n        var inputTensorsToSave;\n\n        if (gradConfig.saveAllInputs) {\n          util.assert(Array.isArray(inputs), function () {\n            return 'saveAllInputs is true, expected inputs to be an array.';\n          });\n          inputTensorsToSave = Object.keys(inputs).map(function (key) {\n            return inputs[key];\n          });\n        } else {\n          inputTensorsToSave = inputsToSave.map(function (inputName) {\n            return inputs[inputName];\n          });\n        }\n\n        var outputTensorsToSave = outputs.filter(function (_, i) {\n          return outputsToSave[i];\n        });\n        return inputTensorsToSave.concat(outputTensorsToSave);\n      } // We return an empty list rather than throw an error because the kernel we\n      // are looking up may not actually be relevant to backproping through the\n      // overall function\n      //\n      // See 'does not error if irrelevant (pruned) ops are missing grads' test\n      // in gradients_test.ts for an example.\n\n\n      return [];\n    }\n    /**\n     * Internal method used by public APIs for tensor creation. Makes a new\n     * tensor with the provided shape, dtype and values. It always\n     * creates a new data id and writes the values to the underlying backend.\n     */\n\n  }, {\n    key: \"makeTensor\",\n    value: function makeTensor(values, shape, dtype, backend) {\n      if (values == null) {\n        throw new Error('Values passed to engine.makeTensor() are null');\n      }\n\n      dtype = dtype || 'float32';\n      backend = backend || this.backend;\n      var backendVals = values;\n\n      if (dtype === 'string' && util.isString(values[0])) {\n        backendVals = values.map(function (d) {\n          return util.encodeString(d);\n        });\n      }\n\n      var dataId = backend.write(backendVals, shape, dtype);\n      var t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n      this.trackTensor(t, backend); // Count bytes for string tensors.\n\n      if (dtype === 'string') {\n        var info = this.state.tensorInfo.get(dataId);\n        var newBytes = bytesFromStringArray(backendVals);\n        this.state.numBytes += newBytes - info.bytes;\n        info.bytes = newBytes;\n      }\n\n      return t;\n    }\n    /**\n     * Internal method used by backends. Makes a new tensor\n     * that is a wrapper around an existing data id. It doesn't create\n     * a new data id, only increments the ref count used in memory tracking.\n     */\n\n  }, {\n    key: \"makeTensorFromDataId\",\n    value: function makeTensorFromDataId(dataId, shape, dtype, backend) {\n      dtype = dtype || 'float32';\n      var t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n      this.trackTensor(t, backend);\n      return t;\n    }\n  }, {\n    key: \"makeVariable\",\n    value: function makeVariable(initialValue) {\n      var trainable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var name = arguments.length > 2 ? arguments[2] : undefined;\n      var dtype = arguments.length > 3 ? arguments[3] : undefined;\n      name = name || this.nextVariableId().toString();\n\n      if (dtype != null && dtype !== initialValue.dtype) {\n        initialValue = initialValue.cast(dtype);\n      }\n\n      var v = new Variable(initialValue, trainable, name, this.nextTensorId());\n\n      if (this.state.registeredVariables[v.name] != null) {\n        throw new Error(\"Variable with name \".concat(v.name, \" was already registered\"));\n      }\n\n      this.state.registeredVariables[v.name] = v;\n      this.incRef(v, this.backend);\n      return v;\n    }\n  }, {\n    key: \"trackTensor\",\n    value: function trackTensor(a, backend) {\n      this.state.numTensors++;\n\n      if (a.dtype === 'string') {\n        this.state.numStringTensors++;\n      } // Bytes for complex numbers are counted by their components. Bytes for\n      // string tensors are counted when writing values.\n\n\n      var bytes = 0;\n\n      if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n        bytes = a.size * util.bytesPerElement(a.dtype);\n      }\n\n      this.state.numBytes += bytes;\n\n      if (!this.state.tensorInfo.has(a.dataId)) {\n        this.state.numDataBuffers++;\n        this.state.tensorInfo.set(a.dataId, {\n          backend: backend || this.backend,\n          dtype: a.dtype,\n          shape: a.shape,\n          bytes: bytes\n        });\n      }\n\n      if (!(a instanceof Variable)) {\n        this.track(a);\n      }\n    } // Track the tensor by dataId and increase the refCount for the dataId in the\n    // backend.\n    // TODO(pyu10055): This is currently used by makeVariable method, to increase\n    // refCount on the backend for the dataId. It can potentially be replaced with\n    // Identity op indead of calling backend directly.\n\n  }, {\n    key: \"incRef\",\n    value: function incRef(a, backend) {\n      this.trackTensor(a, backend);\n      this.backend.incRef(a.dataId);\n    }\n  }, {\n    key: \"removeDataId\",\n    value: function removeDataId(dataId, backend) {\n      if (this.state.tensorInfo.has(dataId) && this.state.tensorInfo.get(dataId).backend === backend) {\n        this.state.tensorInfo.delete(dataId);\n        this.state.numDataBuffers--;\n      }\n    }\n  }, {\n    key: \"disposeTensor\",\n    value: function disposeTensor(a) {\n      if (!this.state.tensorInfo.has(a.dataId)) {\n        return;\n      }\n\n      var info = this.state.tensorInfo.get(a.dataId);\n      this.state.numTensors--;\n\n      if (a.dtype === 'string') {\n        this.state.numStringTensors--;\n        this.state.numBytes -= info.bytes;\n      } // Don't count bytes for complex numbers as they are counted by their\n      // components.\n\n\n      if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n        var bytes = a.size * util.bytesPerElement(a.dtype);\n        this.state.numBytes -= bytes;\n      } // Remove the reference to dataId if backend dispose the data successfully\n\n\n      if (info.backend.disposeData(a.dataId)) {\n        this.removeDataId(a.dataId, info.backend);\n      } // TODO(nsthorat): Construct an error and save the stack trace for\n      // debugging when in debug mode. Creating a stack trace is too expensive\n      // to do unconditionally.\n\n    }\n  }, {\n    key: \"disposeVariables\",\n    value: function disposeVariables() {\n      for (var varName in this.state.registeredVariables) {\n        var v = this.state.registeredVariables[varName];\n        this.disposeVariable(v);\n      }\n    }\n  }, {\n    key: \"disposeVariable\",\n    value: function disposeVariable(v) {\n      this.disposeTensor(v);\n\n      if (this.state.registeredVariables[v.name] != null) {\n        delete this.state.registeredVariables[v.name];\n      }\n    }\n  }, {\n    key: \"memory\",\n    value: function memory() {\n      var info = this.backend.memory();\n      info.numTensors = this.state.numTensors;\n      info.numDataBuffers = this.state.numDataBuffers;\n      info.numBytes = this.state.numBytes;\n\n      if (this.state.numStringTensors > 0) {\n        info.unreliable = true;\n\n        if (info.reasons == null) {\n          info.reasons = [];\n        }\n\n        info.reasons.push('Memory usage by string tensors is approximate ' + '(2 bytes per character)');\n      }\n\n      return info;\n    }\n  }, {\n    key: \"profile\",\n    value: function () {\n      var _profile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(query) {\n        var startBytes, startNumTensors, _iterator, _step, kernel;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.state.profiling = true;\n                startBytes = this.state.numBytes;\n                startNumTensors = this.state.numTensors;\n                this.state.activeProfile.kernels = [];\n                _context3.next = 6;\n                return query();\n\n              case 6:\n                this.state.activeProfile.result = _context3.sent;\n                this.state.profiling = false;\n                this.state.activeProfile.peakBytes = Math.max.apply(Math, _toConsumableArray(this.state.activeProfile.kernels.map(function (d) {\n                  return d.totalBytesSnapshot;\n                })));\n                this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n                this.state.activeProfile.newTensors = this.state.numTensors - startNumTensors;\n                _iterator = _createForOfIteratorHelper(this.state.activeProfile.kernels);\n                _context3.prev = 12;\n\n                _iterator.s();\n\n              case 14:\n                if ((_step = _iterator.n()).done) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                kernel = _step.value;\n                _context3.next = 18;\n                return kernel.kernelTimeMs;\n\n              case 18:\n                kernel.kernelTimeMs = _context3.sent;\n                _context3.next = 21;\n                return kernel.extraInfo;\n\n              case 21:\n                kernel.extraInfo = _context3.sent;\n\n              case 22:\n                _context3.next = 14;\n                break;\n\n              case 24:\n                _context3.next = 29;\n                break;\n\n              case 26:\n                _context3.prev = 26;\n                _context3.t0 = _context3[\"catch\"](12);\n\n                _iterator.e(_context3.t0);\n\n              case 29:\n                _context3.prev = 29;\n\n                _iterator.f();\n\n                return _context3.finish(29);\n\n              case 32:\n                return _context3.abrupt(\"return\", this.state.activeProfile);\n\n              case 33:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[12, 26, 29, 32]]);\n      }));\n\n      function profile(_x2) {\n        return _profile.apply(this, arguments);\n      }\n\n      return profile;\n    }()\n  }, {\n    key: \"isTapeOn\",\n    value: function isTapeOn() {\n      return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n    }\n  }, {\n    key: \"addTapeNode\",\n    value: function addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {\n      var _this8 = this;\n\n      var tapeNode = {\n        id: this.state.nextTapeNodeId++,\n        kernelName: kernelName,\n        inputs: inputs,\n        outputs: outputs,\n        saved: saved\n      };\n      var gradConfig = getGradient(kernelName);\n\n      if (gradConfig != null) {\n        gradientsFunc = gradConfig.gradFunc;\n      }\n\n      if (gradientsFunc != null) {\n        tapeNode.gradient = function (dys) {\n          // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n          // the backprop graph to the user as null instead of zeros\n          dys = dys.map(function (dy, i) {\n            if (dy == null) {\n              var output = outputs[i];\n              var vals = util.makeZerosTypedArray(output.size, output.dtype);\n              return _this8.makeTensor(vals, output.shape, output.dtype);\n            }\n\n            return dy;\n          }); // Grad functions of ops with single outputs expect a dy, while ops\n          // with multiple outputs expect dys (array of dy).\n\n          return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n        };\n      }\n\n      this.state.activeTape.push(tapeNode);\n    }\n  }, {\n    key: \"keep\",\n    value: function keep(result) {\n      result.kept = true;\n      return result;\n    }\n  }, {\n    key: \"startTape\",\n    value: function startTape() {\n      if (this.state.gradientDepth === 0) {\n        this.state.activeTape = [];\n      }\n\n      this.state.gradientDepth++;\n    }\n  }, {\n    key: \"endTape\",\n    value: function endTape() {\n      this.state.gradientDepth--;\n    }\n    /**\n     * Start a scope. Use this with endScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n\n  }, {\n    key: \"startScope\",\n    value: function startScope(name) {\n      var scopeInfo = {\n        track: [],\n        name: 'unnamed scope',\n        id: this.state.nextScopeId++\n      };\n\n      if (name) {\n        scopeInfo.name = name;\n      }\n\n      this.state.scopeStack.push(scopeInfo);\n      this.state.activeScope = scopeInfo;\n    }\n    /**\n     * End a scope. Use this with startScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n\n  }, {\n    key: \"endScope\",\n    value: function endScope(result) {\n      var _this9 = this;\n\n      var tensorsToTrackInParent = getTensorsInContainer(result);\n      var tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(function (t) {\n        return t.id;\n      })); // Dispose the arrays tracked in this scope.\n\n      for (var i = 0; i < this.state.activeScope.track.length; i++) {\n        var tensor = this.state.activeScope.track[i];\n\n        if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n          tensor.dispose();\n        }\n      }\n\n      var oldScope = this.state.scopeStack.pop();\n      this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1]; // Track the current result in the parent scope.\n\n      tensorsToTrackInParent.forEach(function (tensor) {\n        // Only track the tensor if was allocated in the inner scope and is not\n        // globally kept.\n        if (!tensor.kept && tensor.scopeId === oldScope.id) {\n          _this9.track(tensor);\n        }\n      });\n    }\n    /**\n     * Returns gradients of `f` with respect to each of the `xs`. The gradients\n     * returned are of the same length as `xs`, but some might be null if `f`\n     * was not a function of that `x`. It also takes optional dy to multiply the\n     * gradient, which defaults to `1`.\n     */\n\n  }, {\n    key: \"gradients\",\n    value: function gradients(f, xs, dy) {\n      var _this10 = this;\n\n      var allowNoGradients = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      util.assert(xs.length > 0, function () {\n        return 'gradients() received an empty list of xs.';\n      });\n\n      if (dy != null && dy.dtype !== 'float32') {\n        throw new Error(\"dy must have 'float32' dtype, but has '\".concat(dy.dtype, \"'\"));\n      }\n\n      var y = this.scopedRun(function () {\n        return _this10.startTape();\n      }, function () {\n        return _this10.endTape();\n      }, function () {\n        return _this10.tidy('forward', f);\n      });\n      util.assert(y instanceof Tensor, function () {\n        return 'The result y returned by f() must be a tensor.';\n      }); // Filter out the nodes that don't connect x => y.\n\n      var filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n\n      if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n        throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' + 'that the f you passed encloses all operations that lead from x ' + 'to y.');\n      }\n\n      return this.tidy('backward', function () {\n        var accumulatedGradientMap = {};\n        accumulatedGradientMap[y.id] = dy == null ? ones(y.shape) : dy; // Backprop gradients through the filtered nodes.\n\n        backpropagateGradients(accumulatedGradientMap, filteredTape, // Pass the tidy function to avoid circular dep with `tape.ts`.\n        function (f) {\n          return _this10.tidy(f);\n        }, // Pass an add function to avoide a circular dep with `tape.ts`.\n        add);\n        var grads = xs.map(function (x) {\n          return accumulatedGradientMap[x.id];\n        });\n\n        if (_this10.state.gradientDepth === 0) {\n          // This means that we are not computing higher-order gradients\n          // and can clean up the tape.\n          _this10.state.activeTape.forEach(function (node) {\n            var _iterator2 = _createForOfIteratorHelper(node.saved),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var tensor = _step2.value;\n                tensor.dispose();\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          });\n\n          _this10.state.activeTape = null;\n        }\n\n        return {\n          value: y,\n          grads: grads\n        };\n      });\n    }\n  }, {\n    key: \"customGrad\",\n    value: function customGrad(f) {\n      var _this11 = this;\n\n      util.assert(util.isFunction(f), function () {\n        return 'The f passed in customGrad(f) must be a function.';\n      });\n      return function () {\n        for (var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++) {\n          inputs[_key] = arguments[_key];\n        }\n\n        util.assert(inputs.every(function (t) {\n          return t instanceof Tensor;\n        }), function () {\n          return 'The args passed in customGrad(f)(x1, x2,...) must all be ' + 'tensors';\n        });\n        var res;\n        var inputMap = {};\n        inputs.forEach(function (input, i) {\n          inputMap[i] = input;\n        });\n\n        var forwardFunc = function forwardFunc(_, save) {\n          res = f.apply(void 0, [].concat(inputs, [save]));\n          util.assert(res.value instanceof Tensor, function () {\n            return 'The function f passed in customGrad(f) must return an ' + 'object where `obj.value` is a tensor';\n          });\n          util.assert(util.isFunction(res.gradFunc), function () {\n            return 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function.';\n          });\n          return res.value;\n        };\n\n        var backwardsFunc = function backwardsFunc(dy, saved) {\n          var gradRes = res.gradFunc(dy, saved);\n          var grads = Array.isArray(gradRes) ? gradRes : [gradRes];\n          util.assert(grads.length === inputs.length, function () {\n            return 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function that returns ' + 'the same number of tensors as inputs passed to f(...).';\n          });\n          util.assert(grads.every(function (t) {\n            return t instanceof Tensor;\n          }), function () {\n            return 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function that returns ' + 'a list of only tensors.';\n          });\n          var gradMap = {};\n          grads.forEach(function (grad, i) {\n            gradMap[i] = function () {\n              return grad;\n            };\n          });\n          return gradMap;\n        };\n\n        return _this11.runKernelFunc({\n          forwardFunc: forwardFunc,\n          backwardsFunc: backwardsFunc,\n          inputs: inputMap\n        });\n      };\n    }\n  }, {\n    key: \"readSync\",\n    value: function readSync(dataId) {\n      // Route the read to the correct backend.\n      var info = this.state.tensorInfo.get(dataId);\n      return info.backend.readSync(dataId);\n    }\n  }, {\n    key: \"read\",\n    value: function read(dataId) {\n      // Route the read to the correct backend.\n      var info = this.state.tensorInfo.get(dataId);\n      return info.backend.read(dataId);\n    }\n  }, {\n    key: \"time\",\n    value: function () {\n      var _time = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(query) {\n        var start, timingInfo;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                start = now();\n                _context4.next = 3;\n                return this.backend.time(query);\n\n              case 3:\n                timingInfo = _context4.sent;\n                timingInfo.wallMs = now() - start;\n                return _context4.abrupt(\"return\", timingInfo);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function time(_x3) {\n        return _time.apply(this, arguments);\n      }\n\n      return time;\n    }()\n    /**\n     * Tracks a Tensor in the current scope to be automatically cleaned up\n     * when the current scope ends, and returns the value.\n     *\n     * @param result The Tensor to track in the current scope.\n     */\n\n  }, {\n    key: \"track\",\n    value: function track(result) {\n      if (this.state.activeScope != null) {\n        result.scopeId = this.state.activeScope.id;\n        this.state.activeScope.track.push(result);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"registeredVariables\",\n    get: function get() {\n      return this.state.registeredVariables;\n    }\n    /**\n     * Resets the engine state. Removes all backends but does not remove\n     * registered backend factories.\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      // Make any pending promise obsolete.\n      this.pendingBackendInitId++;\n      this.state.dispose();\n      this.ENV.reset();\n      this.state = new EngineState();\n\n      for (var backendName in this.registry) {\n        this.disposeRegisteredKernels(backendName);\n        this.registry[backendName].dispose();\n        delete this.registry[backendName];\n      }\n\n      this.backendName = null;\n      this.backendInstance = null;\n      this.pendingBackendInit = null;\n    }\n  }]);\n\n  return Engine;\n}();\nEngine.nextTensorId = 0;\nEngine.nextVariableId = 0;\n\nfunction ones(shape) {\n  var values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n  return ENGINE.makeTensor(values, shape, 'float32');\n}\n\nexport function getOrMakeEngine() {\n  var ns = getGlobalNamespace();\n\n  if (ns._tfengine == null) {\n    var environment = new Environment(ns);\n    ns._tfengine = new Engine(environment);\n  }\n\n  setEnvironmentGlobal(ns._tfengine.ENV); // Tell the current tensor interface that the global engine is responsible\n  // for tracking.\n\n  setTensorTracker(function () {\n    return ns._tfengine;\n  });\n  return ns._tfengine;\n}\nexport var ENGINE = getOrMakeEngine();\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\n\nexport function add(a, b) {\n  // We duplicate Add here to avoid a circular dependency with add.ts.\n  var inputs = {\n    a: a,\n    b: b\n  };\n  return ENGINE.runKernel(Add, inputs);\n}","map":{"version":3,"sources":["../src/engine.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { KernelBackend } from './backends/backend';\nimport { Environment, setEnvironmentGlobal } from './environment';\nimport { getGlobalNamespace } from './global_util';\nimport { Add, Cast, Identity } from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend } from './kernel_registry';\nimport { Profiler } from './profiler';\nimport { backpropagateGradients, getFilteredNodesXToY } from './tape';\nimport { setTensorTracker, Tensor, Variable } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\nimport * as util from './util';\nimport { bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape } from './util';\nfunction isRegisteredKernelInvocation(kernelInvocation) {\n    return kernelInvocation.kernelName != null;\n}\nclass EngineState {\n    constructor() {\n        // Public since optimizers will use it.\n        this.registeredVariables = {};\n        this.nextTapeNodeId = 0;\n        this.numBytes = 0;\n        this.numTensors = 0;\n        this.numStringTensors = 0;\n        this.numDataBuffers = 0;\n        // Number of nested tf.grad() statements when computing higher-order\n        // gradients. E.g. `1` for first-order gradients and `2` for second-order\n        // gradients. Used to track if the tape should be removed after a backprop.\n        this.gradientDepth = 0;\n        // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n        // off the tape.\n        this.kernelDepth = 0;\n        this.scopeStack = [];\n        /**\n         * Keeps track of the number of data moves during a kernel execution. We\n         * maintain a stack since kernels can call other kernels, recursively.\n         */\n        this.numDataMovesStack = [];\n        this.nextScopeId = 0;\n        this.tensorInfo = new WeakMap();\n        this.profiling = false;\n        this.activeProfile = {\n            newBytes: 0,\n            newTensors: 0,\n            peakBytes: 0,\n            kernels: [],\n            result: null,\n            get kernelNames() {\n                return Array.from(new Set(this.kernels.map(k => k.name)));\n            }\n        };\n    }\n    dispose() {\n        for (const variableName in this.registeredVariables) {\n            this.registeredVariables[variableName].dispose();\n        }\n    }\n}\nexport class Engine {\n    constructor(ENV) {\n        this.ENV = ENV;\n        this.registry = {};\n        this.registryFactory = {};\n        this.pendingBackendInitId = 0;\n        this.state = new EngineState();\n    }\n    async ready() {\n        if (this.pendingBackendInit != null) {\n            return this.pendingBackendInit.then(() => { });\n        }\n        if (this.backendInstance != null) {\n            return;\n        }\n        const sortedBackends = this.getSortedBackends();\n        for (let i = 0; i < sortedBackends.length; i++) {\n            const backendName = sortedBackends[i];\n            const success = await this.initializeBackend(backendName).success;\n            if (success) {\n                await this.setBackend(backendName);\n                return;\n            }\n        }\n        throw new Error(`Could not initialize any backends, all backend initializations ` +\n            `failed.`);\n    }\n    get backend() {\n        if (this.pendingBackendInit != null) {\n            throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` +\n                `sure to await tf.ready() or await tf.setBackend() before calling ` +\n                `other methods`);\n        }\n        if (this.backendInstance == null) {\n            const { name, asyncInit } = this.initializeBackendsAndReturnBest();\n            if (asyncInit) {\n                throw new Error(`The highest priority backend '${name}' has not yet been ` +\n                    `initialized. Make sure to await tf.ready() or ` +\n                    `await tf.setBackend() before calling other methods`);\n            }\n            this.setBackend(name);\n        }\n        return this.backendInstance;\n    }\n    backendNames() {\n        return Object.keys(this.registryFactory);\n    }\n    findBackend(backendName) {\n        if (!(backendName in this.registry)) {\n            // If the backend hasn't been initialized but we have a registry entry for\n            // it, initialize it and return it.\n            if (backendName in this.registryFactory) {\n                const { asyncInit } = this.initializeBackend(backendName);\n                if (asyncInit) {\n                    // Backend is not ready yet.\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        return this.registry[backendName];\n    }\n    findBackendFactory(backendName) {\n        if (!(backendName in this.registryFactory)) {\n            return null;\n        }\n        return this.registryFactory[backendName].factory;\n    }\n    registerBackend(backendName, factory, priority = 1) {\n        if (backendName in this.registryFactory) {\n            console.warn(`${backendName} backend was already registered. ` +\n                `Reusing existing backend factory.`);\n            return false;\n        }\n        this.registryFactory[backendName] = { factory, priority };\n        return true;\n    }\n    async setBackend(backendName) {\n        if (this.registryFactory[backendName] == null) {\n            throw new Error(`Backend name '${backendName}' not found in registry`);\n        }\n        this.backendName = backendName;\n        if (this.registry[backendName] == null) {\n            this.backendInstance = null;\n            const { success, asyncInit } = this.initializeBackend(backendName);\n            const result = asyncInit ? await success : success;\n            if (!result) {\n                return false;\n            }\n        }\n        this.backendInstance = this.registry[backendName];\n        this.setupRegisteredKernels();\n        // Reset the profiler.\n        this.profiler = new Profiler(this.backendInstance);\n        return true;\n    }\n    setupRegisteredKernels() {\n        const kernels = getKernelsForBackend(this.backendName);\n        kernels.forEach(kernel => {\n            if (kernel.setupFunc != null) {\n                kernel.setupFunc(this.backendInstance);\n            }\n        });\n    }\n    disposeRegisteredKernels(backendName) {\n        const kernels = getKernelsForBackend(backendName);\n        kernels.forEach(kernel => {\n            if (kernel.disposeFunc != null) {\n                kernel.disposeFunc(this.registry[backendName]);\n            }\n        });\n    }\n    /**\n     * Initializes a backend by looking up the backend name in the factory\n     * registry and calling the factory method. Returns a boolean representing\n     * whether the initialization of the backend suceeded. Throws an error if\n     * there is no backend in the factory registry.\n     */\n    initializeBackend(backendName) {\n        const registryFactoryEntry = this.registryFactory[backendName];\n        if (registryFactoryEntry == null) {\n            throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);\n        }\n        try {\n            const backend = registryFactoryEntry.factory();\n            /* Test if the factory returns a promise.\n            Done in a more liberal way than\n            previous 'Promise.resolve(backend)===backend'\n            as we needed to account for custom Promise\n            implementations (e.g. Angular) */\n            if (backend && !(backend instanceof KernelBackend) &&\n                typeof backend.then === 'function') {\n                const promiseId = ++this.pendingBackendInitId;\n                const success = backend\n                    .then(backendInstance => {\n                    // Outdated promise. Another backend was set in the meantime.\n                    if (promiseId < this.pendingBackendInitId) {\n                        return false;\n                    }\n                    this.registry[backendName] = backendInstance;\n                    this.pendingBackendInit = null;\n                    return true;\n                })\n                    .catch(err => {\n                    // Outdated promise. Another backend was set in the meantime.\n                    if (promiseId < this.pendingBackendInitId) {\n                        return false;\n                    }\n                    this.pendingBackendInit = null;\n                    console.warn(`Initialization of backend ${backendName} failed`);\n                    console.warn(err.stack || err.message);\n                    return false;\n                });\n                this.pendingBackendInit = success;\n                return { success, asyncInit: true };\n            }\n            else {\n                this.registry[backendName] = backend;\n                return { success: true, asyncInit: false };\n            }\n        }\n        catch (err) {\n            console.warn(`Initialization of backend ${backendName} failed`);\n            console.warn(err.stack || err.message);\n            return { success: false, asyncInit: false };\n        }\n    }\n    removeBackend(backendName) {\n        if (!(backendName in this.registryFactory)) {\n            throw new Error(`${backendName} backend not found in registry`);\n        }\n        if (this.backendName === backendName && this.pendingBackendInit != null) {\n            // There is a pending promise of the backend we want to remove. Make it\n            // obsolete.\n            this.pendingBackendInitId++;\n        }\n        if (backendName in this.registry) {\n            this.disposeRegisteredKernels(backendName);\n            this.registry[backendName].dispose();\n            delete this.registry[backendName];\n        }\n        delete this.registryFactory[backendName];\n        // Unset the backend if it is active.\n        if (this.backendName === backendName) {\n            this.pendingBackendInit = null;\n            this.backendName = null;\n            this.backendInstance = null;\n        }\n    }\n    getSortedBackends() {\n        if (Object.keys(this.registryFactory).length === 0) {\n            throw new Error('No backend found in registry.');\n        }\n        return Object.keys(this.registryFactory).sort((a, b) => {\n            // Highest priority comes first.\n            return this.registryFactory[b].priority -\n                this.registryFactory[a].priority;\n        });\n    }\n    initializeBackendsAndReturnBest() {\n        const sortedBackends = this.getSortedBackends();\n        for (let i = 0; i < sortedBackends.length; i++) {\n            const backendName = sortedBackends[i];\n            const { success, asyncInit } = this.initializeBackend(backendName);\n            if (asyncInit || success) {\n                return { name: backendName, asyncInit };\n            }\n        }\n        throw new Error(`Could not initialize any backends, all backend initializations ` +\n            `failed.`);\n    }\n    moveData(backend, dataId) {\n        const info = this.state.tensorInfo.get(dataId);\n        const srcBackend = info.backend;\n        const values = this.readSync(dataId);\n        const refCount = srcBackend.refCount(dataId);\n        // Delete the tensor from the old backend and move it to the new\n        // backend.\n        srcBackend.disposeData(dataId, true);\n        info.backend = backend;\n        backend.move(dataId, values, info.shape, info.dtype, refCount);\n        if (this.shouldCheckForMemLeaks()) {\n            // Track the number of moves during a kernel execution to correctly\n            // detect memory leaks.\n            this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n        }\n    }\n    tidy(nameOrFn, fn) {\n        let name = null;\n        if (fn == null) {\n            // Called with only 1 argument.\n            if (typeof nameOrFn !== 'function') {\n                throw new Error('Please provide a function to tidy()');\n            }\n            fn = nameOrFn;\n        }\n        else {\n            // Called with 2 arguments.\n            if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n                throw new Error('When calling with two arguments, the first argument ' +\n                    'to tidy() must be a string');\n            }\n            if (typeof fn !== 'function') {\n                throw new Error('When calling with two arguments, the 2nd argument ' +\n                    'to tidy() must be a function');\n            }\n            name = nameOrFn;\n            // TODO(nsthorat,smilkov): Do operation logging and performance\n            // profiling.\n        }\n        let result;\n        return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {\n            result = fn();\n            if (result instanceof Promise) {\n                console.error('Cannot return a Promise inside of tidy.');\n            }\n            return result;\n        });\n    }\n    scopedRun(start, end, f) {\n        start();\n        try {\n            const res = f();\n            end();\n            return res;\n        }\n        catch (ex) {\n            end();\n            throw ex;\n        }\n    }\n    nextTensorId() {\n        return Engine.nextTensorId++;\n    }\n    nextVariableId() {\n        return Engine.nextVariableId++;\n    }\n    /**\n     * This method is called instead of the public-facing tensor.clone() when\n     * saving a tensor for backwards pass. It makes sure to add the clone\n     * operation to the tape regardless of being called inside a kernel\n     * execution.\n     */\n    clone(x) {\n        const y = ENGINE.runKernel(Identity, { x });\n        const inputs = { x };\n        const grad = (dy) => ({\n            x: () => {\n                const dtype = 'float32';\n                const gradInputs = { x: dy };\n                const attrs = { dtype };\n                return ENGINE.runKernel(Cast, gradInputs, \n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                attrs);\n            }\n        });\n        const saved = [];\n        this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n        return y;\n    }\n    /**\n     * Execute a kernel with the given name and return the output tensor.\n     *\n     * @param kernelName The name of the kernel to execute.\n     * @param inputs A map of input names to tensors.\n     * @param attrs A map of attribute names to their values. An attribute is a\n     *     primitive (non-tensor) input to the kernel.\n     * @param inputsToSave A list of tensors, inputs to save for the backprop\n     *     computation.\n     * @param outputsToSave A list of booleans, specifying which output to save\n     *     for the backprop computation. These are booleans since the output\n     * tensors are not visible to the user.\n     */\n    runKernel(kernelName, inputs, attrs) {\n        const hasKernel = getKernel(kernelName, this.backendName) != null;\n        if (!hasKernel) {\n            throw new Error(`Kernel '${kernelName}' not registered for backend '${this.backendName}'`);\n        }\n        return this.runKernelFunc({ kernelName, inputs, attrs });\n    }\n    shouldCheckForMemLeaks() {\n        return this.ENV.getBool('IS_TEST');\n    }\n    checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {\n        const numDataIdsAfter = this.backend.numDataIds();\n        // Count the number of data ids associated with the result of the kernel.\n        let numOutputDataIds = 0;\n        outInfos.forEach(info => {\n            // Complex numbers allocate 3 data ids, one for 'real', one for\n            // 'imaginary', and one for the container that holds the former two.\n            numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);\n        });\n        // Account for the number of moves during kernel execution. A \"data move\"\n        // can happen in the middle of a kernel execution, placing a new (key,value)\n        // pair in the data storage. Since data moves have net zero effect (we\n        // always remove the data from the old backend), we have to cancel them out\n        // when detecting memory leaks.\n        const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n        const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n        if (dataIdsLeaked > 0) {\n            throw new Error(`Backend '${this.backendName}' has an internal memory leak ` +\n                `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n        }\n    }\n    /**\n     * Internal helper method to execute a kernel Func\n     *\n     * Use `runKernel` to execute kernels from outside of engine.\n     */\n    runKernelFunc(kernelParams) {\n        let outputs;\n        let saved = [];\n        const isTapeOn = this.isTapeOn();\n        const startingBytecount = this.state.numBytes;\n        const startingNumTensors = this.state.numTensors;\n        if (this.shouldCheckForMemLeaks()) {\n            this.state.numDataMovesStack.push(0);\n        }\n        let kernelFunc;\n        if (this.backendName == null) {\n            // backend has not been initialized yet (backend initialization is lazy\n            // can be deferred until an op/ kernel is run).\n            // The below getter has side effects that will try to initialize the\n            // backend and set properties like this.backendName\n            // tslint:disable-next-line: no-unused-expression\n            this.backend;\n        }\n        let out;\n        const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ?\n            kernelParams.kernelName :\n            this.state.activeScope != null ? this.state.activeScope.name : '';\n        // Create the kernelFunc from either a registered kernel OR passed in\n        // forward/backward functions (used by custom grad). In this context a\n        // kernelFunc wraps a kernel implementation with some bookkeeping.\n        if (isRegisteredKernelInvocation(kernelParams)) {\n            const { kernelName, inputs, attrs } = kernelParams;\n            if (this.backendName == null) {\n                // backend has not been initialized yet (backend initialization is lazy\n                // can be deferred until an op/ kernel is run).\n                // The below getter has side effects that will try to initialize the\n                // backend and set properties like this.backendName\n                // tslint:disable-next-line: no-unused-expression\n                this.backend;\n            }\n            const kernel = getKernel(kernelName, this.backendName);\n            util.assert(kernel != null, () => `Cannot find registered kernel '${kernelName}' for backend '${this.backendName}'`);\n            kernelFunc = () => {\n                const numDataIdsBefore = this.backend.numDataIds();\n                out = kernel.kernelFunc({ inputs, attrs, backend: this.backend });\n                const outInfos = Array.isArray(out) ? out : [out];\n                if (this.shouldCheckForMemLeaks()) {\n                    this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n                }\n                const outTensors = outInfos.map((outInfo) => {\n                    // todo (yassogba) remove this option (Tensor) when node backend\n                    // methods have been modularized and they all return tensorInfo.\n                    // TensorInfos do not have a rank attribute.\n                    if (outInfo.rank != null) {\n                        return outInfo;\n                    }\n                    const { dataId, shape, dtype } = outInfo;\n                    return this.makeTensorFromDataId(dataId, shape, dtype);\n                });\n                // Save any required inputs and outputs.\n                // Do not save unless we are recording to the tape. Otherwise it would\n                // cause a mem leak since there would be no backprop for these tensors\n                // (which would otherwise dispose them).\n                if (isTapeOn) {\n                    const tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);\n                    saved = this.saveTensorsForBackwardMode(tensorsToSave);\n                }\n                return outTensors;\n            };\n        }\n        else {\n            const { forwardFunc } = kernelParams;\n            // Running a customGrad op.\n            const saveFunc = (tensors) => {\n                // Do not save unless we are recording to the tape. Otherwise it would\n                // cause a mem leak since we would never run backprop, which disposes\n                // the kept tensors.\n                if (!isTapeOn) {\n                    return;\n                }\n                saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n            };\n            kernelFunc = () => {\n                const numDataIdsBefore = this.backend.numDataIds();\n                out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n                const outs = (Array.isArray(out) ? out : [out]);\n                if (this.shouldCheckForMemLeaks()) {\n                    // Scope name is used to print a more helpful error message if needed.\n                    this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n                }\n                return outs;\n            };\n        }\n        //\n        // Run the kernelFunc. Optionally profiling it.\n        //\n        const { inputs, attrs } = kernelParams;\n        const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ?\n            null :\n            kernelParams.backwardsFunc;\n        let kernelProfile;\n        this.scopedRun(\n        // Stop recording to a tape when running a kernel.\n        () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n            if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {\n                outputs = kernelFunc();\n            }\n            else {\n                kernelProfile = this.profiler.profileKernel(kernelOrScopeName, inputs, () => kernelFunc());\n                if (this.ENV.getBool('DEBUG')) {\n                    this.profiler.logKernelProfile(kernelProfile);\n                }\n                outputs = kernelProfile.outputs;\n            }\n        });\n        if (isTapeOn) {\n            this.addTapeNode(kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n        }\n        if (this.state.profiling) {\n            this.state.activeProfile.kernels.push({\n                name: kernelOrScopeName,\n                bytesAdded: this.state.numBytes - startingBytecount,\n                totalBytesSnapshot: this.state.numBytes,\n                tensorsAdded: this.state.numTensors - startingNumTensors,\n                totalTensorsSnapshot: this.state.numTensors,\n                inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),\n                outputShapes: outputs.map(item => item.shape),\n                kernelTimeMs: kernelProfile.timeMs,\n                extraInfo: kernelProfile.extraInfo\n            });\n        }\n        return (Array.isArray(out) ? outputs : outputs[0]);\n    }\n    /**\n     * Saves tensors used in forward mode for use in backward mode.\n     *\n     * @param tensors the list of tensors to save.\n     */\n    saveTensorsForBackwardMode(tensors) {\n        const saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n        return saved;\n    }\n    /**\n     * Returns a list of tensors to save for a given gradient calculation.\n     *\n     * @param kernelName name of kernel to look up gradient for.\n     * @param inputs a map of input tensors.\n     * @param outputs an array of output tensors from forward mode of kernel.\n     */\n    getTensorsForGradient(kernelName, inputs, outputs) {\n        const gradConfig = getGradient(kernelName);\n        if (gradConfig != null) {\n            const inputsToSave = gradConfig.inputsToSave || [];\n            const outputsToSave = gradConfig.outputsToSave || [];\n            // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n            // specified in inputsToSave will be saved.\n            let inputTensorsToSave;\n            if (gradConfig.saveAllInputs) {\n                util.assert(Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');\n                inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);\n            }\n            else {\n                inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);\n            }\n            const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);\n            return inputTensorsToSave.concat(outputTensorsToSave);\n        }\n        // We return an empty list rather than throw an error because the kernel we\n        // are looking up may not actually be relevant to backproping through the\n        // overall function\n        //\n        // See 'does not error if irrelevant (pruned) ops are missing grads' test\n        // in gradients_test.ts for an example.\n        return [];\n    }\n    /**\n     * Internal method used by public APIs for tensor creation. Makes a new\n     * tensor with the provided shape, dtype and values. It always\n     * creates a new data id and writes the values to the underlying backend.\n     */\n    makeTensor(values, shape, dtype, backend) {\n        if (values == null) {\n            throw new Error('Values passed to engine.makeTensor() are null');\n        }\n        dtype = dtype || 'float32';\n        backend = backend || this.backend;\n        let backendVals = values;\n        if (dtype === 'string' && util.isString(values[0])) {\n            backendVals = values.map(d => util.encodeString(d));\n        }\n        const dataId = backend.write(backendVals, shape, dtype);\n        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n        this.trackTensor(t, backend);\n        // Count bytes for string tensors.\n        if (dtype === 'string') {\n            const info = this.state.tensorInfo.get(dataId);\n            const newBytes = bytesFromStringArray(backendVals);\n            this.state.numBytes += newBytes - info.bytes;\n            info.bytes = newBytes;\n        }\n        return t;\n    }\n    /**\n     * Internal method used by backends. Makes a new tensor\n     * that is a wrapper around an existing data id. It doesn't create\n     * a new data id, only increments the ref count used in memory tracking.\n     */\n    makeTensorFromDataId(dataId, shape, dtype, backend) {\n        dtype = dtype || 'float32';\n        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n        this.trackTensor(t, backend);\n        return t;\n    }\n    makeVariable(initialValue, trainable = true, name, dtype) {\n        name = name || this.nextVariableId().toString();\n        if (dtype != null && dtype !== initialValue.dtype) {\n            initialValue = initialValue.cast(dtype);\n        }\n        const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n        if (this.state.registeredVariables[v.name] != null) {\n            throw new Error(`Variable with name ${v.name} was already registered`);\n        }\n        this.state.registeredVariables[v.name] = v;\n        this.incRef(v, this.backend);\n        return v;\n    }\n    trackTensor(a, backend) {\n        this.state.numTensors++;\n        if (a.dtype === 'string') {\n            this.state.numStringTensors++;\n        }\n        // Bytes for complex numbers are counted by their components. Bytes for\n        // string tensors are counted when writing values.\n        let bytes = 0;\n        if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n            bytes = a.size * util.bytesPerElement(a.dtype);\n        }\n        this.state.numBytes += bytes;\n        if (!this.state.tensorInfo.has(a.dataId)) {\n            this.state.numDataBuffers++;\n            this.state.tensorInfo.set(a.dataId, {\n                backend: backend || this.backend,\n                dtype: a.dtype,\n                shape: a.shape,\n                bytes\n            });\n        }\n        if (!(a instanceof Variable)) {\n            this.track(a);\n        }\n    }\n    // Track the tensor by dataId and increase the refCount for the dataId in the\n    // backend.\n    // TODO(pyu10055): This is currently used by makeVariable method, to increase\n    // refCount on the backend for the dataId. It can potentially be replaced with\n    // Identity op indead of calling backend directly.\n    incRef(a, backend) {\n        this.trackTensor(a, backend);\n        this.backend.incRef(a.dataId);\n    }\n    removeDataId(dataId, backend) {\n        if (this.state.tensorInfo.has(dataId) &&\n            this.state.tensorInfo.get(dataId).backend === backend) {\n            this.state.tensorInfo.delete(dataId);\n            this.state.numDataBuffers--;\n        }\n    }\n    disposeTensor(a) {\n        if (!this.state.tensorInfo.has(a.dataId)) {\n            return;\n        }\n        const info = this.state.tensorInfo.get(a.dataId);\n        this.state.numTensors--;\n        if (a.dtype === 'string') {\n            this.state.numStringTensors--;\n            this.state.numBytes -= info.bytes;\n        }\n        // Don't count bytes for complex numbers as they are counted by their\n        // components.\n        if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n            const bytes = a.size * util.bytesPerElement(a.dtype);\n            this.state.numBytes -= bytes;\n        }\n        // Remove the reference to dataId if backend dispose the data successfully\n        if (info.backend.disposeData(a.dataId)) {\n            this.removeDataId(a.dataId, info.backend);\n        }\n        // TODO(nsthorat): Construct an error and save the stack trace for\n        // debugging when in debug mode. Creating a stack trace is too expensive\n        // to do unconditionally.\n    }\n    disposeVariables() {\n        for (const varName in this.state.registeredVariables) {\n            const v = this.state.registeredVariables[varName];\n            this.disposeVariable(v);\n        }\n    }\n    disposeVariable(v) {\n        this.disposeTensor(v);\n        if (this.state.registeredVariables[v.name] != null) {\n            delete this.state.registeredVariables[v.name];\n        }\n    }\n    memory() {\n        const info = this.backend.memory();\n        info.numTensors = this.state.numTensors;\n        info.numDataBuffers = this.state.numDataBuffers;\n        info.numBytes = this.state.numBytes;\n        if (this.state.numStringTensors > 0) {\n            info.unreliable = true;\n            if (info.reasons == null) {\n                info.reasons = [];\n            }\n            info.reasons.push('Memory usage by string tensors is approximate ' +\n                '(2 bytes per character)');\n        }\n        return info;\n    }\n    async profile(query) {\n        this.state.profiling = true;\n        const startBytes = this.state.numBytes;\n        const startNumTensors = this.state.numTensors;\n        this.state.activeProfile.kernels = [];\n        this.state.activeProfile.result = await query();\n        this.state.profiling = false;\n        this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n        this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n        this.state.activeProfile.newTensors =\n            this.state.numTensors - startNumTensors;\n        for (const kernel of this.state.activeProfile.kernels) {\n            kernel.kernelTimeMs = await kernel.kernelTimeMs;\n            kernel.extraInfo = await kernel.extraInfo;\n        }\n        return this.state.activeProfile;\n    }\n    isTapeOn() {\n        return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n    }\n    addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {\n        const tapeNode = { id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved };\n        const gradConfig = getGradient(kernelName);\n        if (gradConfig != null) {\n            gradientsFunc = gradConfig.gradFunc;\n        }\n        if (gradientsFunc != null) {\n            tapeNode.gradient = (dys) => {\n                // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n                // the backprop graph to the user as null instead of zeros\n                dys = dys.map((dy, i) => {\n                    if (dy == null) {\n                        const output = outputs[i];\n                        const vals = util.makeZerosTypedArray(output.size, output.dtype);\n                        return this.makeTensor(vals, output.shape, output.dtype);\n                    }\n                    return dy;\n                });\n                // Grad functions of ops with single outputs expect a dy, while ops\n                // with multiple outputs expect dys (array of dy).\n                return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n            };\n        }\n        this.state.activeTape.push(tapeNode);\n    }\n    keep(result) {\n        result.kept = true;\n        return result;\n    }\n    startTape() {\n        if (this.state.gradientDepth === 0) {\n            this.state.activeTape = [];\n        }\n        this.state.gradientDepth++;\n    }\n    endTape() {\n        this.state.gradientDepth--;\n    }\n    /**\n     * Start a scope. Use this with endScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n    startScope(name) {\n        const scopeInfo = {\n            track: [],\n            name: 'unnamed scope',\n            id: this.state.nextScopeId++\n        };\n        if (name) {\n            scopeInfo.name = name;\n        }\n        this.state.scopeStack.push(scopeInfo);\n        this.state.activeScope = scopeInfo;\n    }\n    /**\n     * End a scope. Use this with startScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n    endScope(result) {\n        const tensorsToTrackInParent = getTensorsInContainer(result);\n        const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id));\n        // Dispose the arrays tracked in this scope.\n        for (let i = 0; i < this.state.activeScope.track.length; i++) {\n            const tensor = this.state.activeScope.track[i];\n            if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n                tensor.dispose();\n            }\n        }\n        const oldScope = this.state.scopeStack.pop();\n        this.state.activeScope = this.state.scopeStack.length === 0 ?\n            null :\n            this.state.scopeStack[this.state.scopeStack.length - 1];\n        // Track the current result in the parent scope.\n        tensorsToTrackInParent.forEach(tensor => {\n            // Only track the tensor if was allocated in the inner scope and is not\n            // globally kept.\n            if (!tensor.kept && tensor.scopeId === oldScope.id) {\n                this.track(tensor);\n            }\n        });\n    }\n    /**\n     * Returns gradients of `f` with respect to each of the `xs`. The gradients\n     * returned are of the same length as `xs`, but some might be null if `f`\n     * was not a function of that `x`. It also takes optional dy to multiply the\n     * gradient, which defaults to `1`.\n     */\n    gradients(f, xs, dy, allowNoGradients = false) {\n        util.assert(xs.length > 0, () => 'gradients() received an empty list of xs.');\n        if (dy != null && dy.dtype !== 'float32') {\n            throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n        }\n        const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));\n        util.assert(y instanceof Tensor, () => 'The result y returned by f() must be a tensor.');\n        // Filter out the nodes that don't connect x => y.\n        const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n        if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n            throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' +\n                'that the f you passed encloses all operations that lead from x ' +\n                'to y.');\n        }\n        return this.tidy('backward', () => {\n            const accumulatedGradientMap = {};\n            accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;\n            // Backprop gradients through the filtered nodes.\n            backpropagateGradients(accumulatedGradientMap, filteredTape, \n            // Pass the tidy function to avoid circular dep with `tape.ts`.\n            f => this.tidy(f), \n            // Pass an add function to avoide a circular dep with `tape.ts`.\n            add);\n            const grads = xs.map(x => accumulatedGradientMap[x.id]);\n            if (this.state.gradientDepth === 0) {\n                // This means that we are not computing higher-order gradients\n                // and can clean up the tape.\n                this.state.activeTape.forEach(node => {\n                    for (const tensor of node.saved) {\n                        tensor.dispose();\n                    }\n                });\n                this.state.activeTape = null;\n            }\n            return { value: y, grads };\n        });\n    }\n    customGrad(f) {\n        util.assert(util.isFunction(f), () => 'The f passed in customGrad(f) must be a function.');\n        return (...inputs) => {\n            util.assert(inputs.every(t => t instanceof Tensor), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +\n                'tensors');\n            let res;\n            const inputMap = {};\n            inputs.forEach((input, i) => {\n                inputMap[i] = input;\n            });\n            const forwardFunc = (_, save) => {\n                res = f(...[...inputs, save]);\n                util.assert(res.value instanceof Tensor, () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.value` is a tensor');\n                util.assert(util.isFunction(res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function.');\n                return res.value;\n            };\n            const backwardsFunc = (dy, saved) => {\n                const gradRes = res.gradFunc(dy, saved);\n                const grads = Array.isArray(gradRes) ? gradRes : [gradRes];\n                util.assert(grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'the same number of tensors as inputs passed to f(...).');\n                util.assert(grads.every(t => t instanceof Tensor), () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'a list of only tensors.');\n                const gradMap = {};\n                grads.forEach((grad, i) => {\n                    gradMap[i] = () => grad;\n                });\n                return gradMap;\n            };\n            return this.runKernelFunc({\n                forwardFunc,\n                backwardsFunc,\n                inputs: inputMap,\n            });\n        };\n    }\n    readSync(dataId) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.readSync(dataId);\n    }\n    read(dataId) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.read(dataId);\n    }\n    async time(query) {\n        const start = now();\n        const timingInfo = await this.backend.time(query);\n        timingInfo.wallMs = now() - start;\n        return timingInfo;\n    }\n    /**\n     * Tracks a Tensor in the current scope to be automatically cleaned up\n     * when the current scope ends, and returns the value.\n     *\n     * @param result The Tensor to track in the current scope.\n     */\n    track(result) {\n        if (this.state.activeScope != null) {\n            result.scopeId = this.state.activeScope.id;\n            this.state.activeScope.track.push(result);\n        }\n        return result;\n    }\n    get registeredVariables() {\n        return this.state.registeredVariables;\n    }\n    /**\n     * Resets the engine state. Removes all backends but does not remove\n     * registered backend factories.\n     */\n    reset() {\n        // Make any pending promise obsolete.\n        this.pendingBackendInitId++;\n        this.state.dispose();\n        this.ENV.reset();\n        this.state = new EngineState();\n        for (const backendName in this.registry) {\n            this.disposeRegisteredKernels(backendName);\n            this.registry[backendName].dispose();\n            delete this.registry[backendName];\n        }\n        this.backendName = null;\n        this.backendInstance = null;\n        this.pendingBackendInit = null;\n    }\n}\nEngine.nextTensorId = 0;\nEngine.nextVariableId = 0;\nfunction ones(shape) {\n    const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n    return ENGINE.makeTensor(values, shape, 'float32');\n}\nexport function getOrMakeEngine() {\n    const ns = getGlobalNamespace();\n    if (ns._tfengine == null) {\n        const environment = new Environment(ns);\n        ns._tfengine = new Engine(environment);\n    }\n    setEnvironmentGlobal(ns._tfengine.ENV);\n    // Tell the current tensor interface that the global engine is responsible\n    // for tracking.\n    setTensorTracker(() => ns._tfengine);\n    return ns._tfengine;\n}\nexport const ENGINE = getOrMakeEngine();\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\nexport function add(a, b) {\n    // We duplicate Add here to avoid a circular dependency with add.ts.\n    const inputs = { a, b };\n    return ENGINE.runKernel(Add, inputs);\n}\n//# sourceMappingURL=engine.js.map"]},"metadata":{},"sourceType":"module"}