{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Softmax, util } from '@tensorflow/tfjs-core';\nimport { exp } from './Exp';\nimport { max } from './Max';\nimport { realDiv } from './RealDiv';\nimport { reshape } from './Reshape';\nimport { sub } from './Sub';\nimport { sum } from './Sum';\nexport function softmax(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var logits = inputs.logits;\n  var dim = attrs.dim;\n  var axes = util.parseAxisParam([dim], logits.shape);\n  var maxLogit = max({\n    inputs: {\n      x: logits\n    },\n    backend: backend,\n    attrs: {\n      reductionIndices: axes,\n      keepDims: false\n    }\n  });\n  var expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n  var maxLogitsReshaped = reshape({\n    inputs: {\n      x: maxLogit\n    },\n    backend: backend,\n    attrs: {\n      shape: expandedShape\n    }\n  });\n  var a = sub({\n    inputs: {\n      a: logits,\n      b: maxLogitsReshaped\n    },\n    backend: backend\n  });\n  var b = exp({\n    inputs: {\n      x: a\n    },\n    backend: backend\n  });\n  var sumExp = sum({\n    inputs: {\n      x: b\n    },\n    backend: backend,\n    attrs: {\n      axis: axes,\n      keepDims: false\n    }\n  });\n  var sumExpReshaped = reshape({\n    inputs: {\n      x: sumExp\n    },\n    backend: backend,\n    attrs: {\n      shape: expandedShape\n    }\n  });\n  var res = realDiv({\n    inputs: {\n      a: b,\n      b: sumExpReshaped\n    },\n    backend: backend\n  });\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n  return res;\n}\nexport var softmaxConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax\n};","map":{"version":3,"sources":["../../src/kernels/Softmax.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Softmax, util } from '@tensorflow/tfjs-core';\nimport { exp } from './Exp';\nimport { max } from './Max';\nimport { realDiv } from './RealDiv';\nimport { reshape } from './Reshape';\nimport { sub } from './Sub';\nimport { sum } from './Sum';\nexport function softmax(args) {\n    const { inputs, backend, attrs } = args;\n    const { logits } = inputs;\n    const { dim } = attrs;\n    const axes = util.parseAxisParam([dim], logits.shape);\n    const maxLogit = max({\n        inputs: { x: logits },\n        backend,\n        attrs: { reductionIndices: axes, keepDims: false }\n    });\n    const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n    const maxLogitsReshaped = reshape({ inputs: { x: maxLogit }, backend, attrs: { shape: expandedShape } });\n    const a = sub({ inputs: { a: logits, b: maxLogitsReshaped }, backend });\n    const b = exp({ inputs: { x: a }, backend });\n    const sumExp = sum({ inputs: { x: b }, backend, attrs: { axis: axes, keepDims: false } });\n    const sumExpReshaped = reshape({ inputs: { x: sumExp }, backend, attrs: { shape: expandedShape } });\n    const res = realDiv({ inputs: { a: b, b: sumExpReshaped }, backend });\n    backend.disposeIntermediateTensorInfo(maxLogit);\n    backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n    backend.disposeIntermediateTensorInfo(a);\n    backend.disposeIntermediateTensorInfo(b);\n    backend.disposeIntermediateTensorInfo(sumExp);\n    backend.disposeIntermediateTensorInfo(sumExpReshaped);\n    return res;\n}\nexport const softmaxConfig = {\n    kernelName: Softmax,\n    backendName: 'webgl',\n    kernelFunc: softmax\n};\n//# sourceMappingURL=Softmax.js.map"]},"metadata":{},"sourceType":"module"}