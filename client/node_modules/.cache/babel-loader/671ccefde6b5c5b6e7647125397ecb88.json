{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as seedrandom from 'seedrandom';\nimport { expectNumbersClose, testEpsilon } from '../test_util'; // https://en.wikipedia.org/wiki/Marsaglia_polar_method\n\nexport class MPRandGauss {\n  constructor(mean, stdDeviation, dtype, truncated, seed) {\n    this.mean = mean;\n    this.stdDev = stdDeviation;\n    this.dtype = dtype;\n    this.nextVal = NaN;\n    this.truncated = truncated;\n\n    if (this.truncated) {\n      this.upper = this.mean + this.stdDev * 2;\n      this.lower = this.mean - this.stdDev * 2;\n    }\n\n    const seedValue = seed ? seed : Math.random();\n    this.random = seedrandom.alea(seedValue.toString());\n  }\n  /** Returns next sample from a Gaussian distribution. */\n\n\n  nextValue() {\n    if (!isNaN(this.nextVal)) {\n      const value = this.nextVal;\n      this.nextVal = NaN;\n      return value;\n    }\n\n    let resultX, resultY;\n    let isValid = false;\n\n    while (!isValid) {\n      let v1, v2, s;\n\n      do {\n        v1 = 2 * this.random() - 1;\n        v2 = 2 * this.random() - 1;\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n\n      const mul = Math.sqrt(-2.0 * Math.log(s) / s);\n      resultX = this.mean + this.stdDev * v1 * mul;\n      resultY = this.mean + this.stdDev * v2 * mul;\n\n      if (!this.truncated || this.isValidTruncated(resultX)) {\n        isValid = true;\n      }\n    }\n\n    if (!this.truncated || this.isValidTruncated(resultY)) {\n      this.nextVal = this.convertValue(resultY);\n    }\n\n    return this.convertValue(resultX);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n\n\n  convertValue(value) {\n    if (this.dtype == null || this.dtype === 'float32') {\n      return value;\n    }\n\n    return Math.round(value);\n  }\n  /** Returns true if less than 2-standard-deviations from the mean. */\n\n\n  isValidTruncated(value) {\n    return value <= this.upper && value >= this.lower;\n  }\n\n} // Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\n\nexport class RandGamma {\n  constructor(alpha, beta, dtype, seed) {\n    this.alpha = alpha;\n    this.beta = 1 / beta; // convert rate to scale parameter\n\n    this.dtype = dtype;\n    const seedValue = seed ? seed : Math.random();\n    this.randu = seedrandom.alea(seedValue.toString());\n    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n\n    if (alpha < 1) {\n      this.d = alpha + 2 / 3;\n    } else {\n      this.d = alpha - 1 / 3;\n    }\n\n    this.c = 1 / Math.sqrt(9 * this.d);\n  }\n  /** Returns next sample from a gamma distribution. */\n\n\n  nextValue() {\n    let x2, v0, v1, x, u, v;\n\n    while (true) {\n      do {\n        x = this.randn.nextValue();\n        v = 1 + this.c * x;\n      } while (v <= 0);\n\n      v *= v * v;\n      x2 = x * x;\n      v0 = 1 - 0.331 * x2 * x2;\n      v1 = 0.5 * x2 + this.d * (1 - v + Math.log(v));\n      u = this.randu();\n\n      if (u < v0 || Math.log(u) < v1) {\n        break;\n      }\n    }\n\n    v = 1 / this.beta * this.d * v;\n\n    if (this.alpha < 1) {\n      v *= Math.pow(this.randu(), 1 / this.alpha);\n    }\n\n    return this.convertValue(v);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n\n\n  convertValue(value) {\n    if (this.dtype === 'float32') {\n      return value;\n    }\n\n    return Math.round(value);\n  }\n\n}\nexport class UniformRandom {\n  constructor(min = 0, max = 1, dtype, seed) {\n    /** Handles proper rounding for non floating point numbers. */\n    this.canReturnFloat = () => this.dtype == null || this.dtype === 'float32';\n\n    this.min = min;\n    this.range = max - min;\n    this.dtype = dtype;\n\n    if (seed == null) {\n      seed = Math.random();\n    }\n\n    if (typeof seed === 'number') {\n      seed = seed.toString();\n    }\n\n    if (!this.canReturnFloat() && this.range <= 1) {\n      throw new Error(`The difference between ${min} - ${max} <= 1 and dtype is not float`);\n    }\n\n    this.random = seedrandom.alea(seed);\n  }\n\n  convertValue(value) {\n    if (this.canReturnFloat()) {\n      return value;\n    }\n\n    return Math.round(value);\n  }\n\n  nextValue() {\n    return this.convertValue(this.min + this.range * this.random());\n  }\n\n}\nexport function jarqueBeraNormalityTest(values) {\n  // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\n  const n = values.length;\n  const s = skewness(values);\n  const k = kurtosis(values);\n  const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2)); // JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n  // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n\n  const CHI_SQUARE_2DEG = 5.991;\n\n  if (jb > CHI_SQUARE_2DEG) {\n    throw new Error(`Invalid p-value for JB: ${jb}`);\n  }\n}\nexport function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n\n  const actualMean = mean(actual);\n  expectNumbersClose(actualMean, expectedMean, epsilon);\n  expectNumbersClose(standardDeviation(actual, actualMean), expectedStdDev, epsilon);\n}\n\nfunction mean(values) {\n  let sum = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    sum += values[i];\n  }\n\n  return sum / values.length;\n}\n\nfunction standardDeviation(values, mean) {\n  let squareDiffSum = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    const diff = values[i] - mean;\n    squareDiffSum += diff * diff;\n  }\n\n  return Math.sqrt(squareDiffSum / values.length);\n}\n\nfunction kurtosis(values) {\n  // https://en.wikipedia.org/wiki/Kurtosis\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum4 = 0;\n\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum4 += Math.pow(v, 4);\n  }\n\n  return 1 / n * sum4 / Math.pow(1 / n * sum2, 2);\n}\n\nfunction skewness(values) {\n  // https://en.wikipedia.org/wiki/Skewness\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum3 = 0;\n\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum3 += Math.pow(v, 3);\n  }\n\n  return 1 / n * sum3 / Math.pow(1 / (n - 1) * sum2, 3 / 2);\n}","map":{"version":3,"sources":["../../src/ops/rand_util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as seedrandom from 'seedrandom';\nimport { expectNumbersClose, testEpsilon } from '../test_util';\n// https://en.wikipedia.org/wiki/Marsaglia_polar_method\nexport class MPRandGauss {\n    constructor(mean, stdDeviation, dtype, truncated, seed) {\n        this.mean = mean;\n        this.stdDev = stdDeviation;\n        this.dtype = dtype;\n        this.nextVal = NaN;\n        this.truncated = truncated;\n        if (this.truncated) {\n            this.upper = this.mean + this.stdDev * 2;\n            this.lower = this.mean - this.stdDev * 2;\n        }\n        const seedValue = seed ? seed : Math.random();\n        this.random = seedrandom.alea(seedValue.toString());\n    }\n    /** Returns next sample from a Gaussian distribution. */\n    nextValue() {\n        if (!isNaN(this.nextVal)) {\n            const value = this.nextVal;\n            this.nextVal = NaN;\n            return value;\n        }\n        let resultX, resultY;\n        let isValid = false;\n        while (!isValid) {\n            let v1, v2, s;\n            do {\n                v1 = 2 * this.random() - 1;\n                v2 = 2 * this.random() - 1;\n                s = v1 * v1 + v2 * v2;\n            } while (s >= 1 || s === 0);\n            const mul = Math.sqrt(-2.0 * Math.log(s) / s);\n            resultX = this.mean + this.stdDev * v1 * mul;\n            resultY = this.mean + this.stdDev * v2 * mul;\n            if (!this.truncated || this.isValidTruncated(resultX)) {\n                isValid = true;\n            }\n        }\n        if (!this.truncated || this.isValidTruncated(resultY)) {\n            this.nextVal = this.convertValue(resultY);\n        }\n        return this.convertValue(resultX);\n    }\n    /** Handles proper rounding for non-floating-point numbers. */\n    convertValue(value) {\n        if (this.dtype == null || this.dtype === 'float32') {\n            return value;\n        }\n        return Math.round(value);\n    }\n    /** Returns true if less than 2-standard-deviations from the mean. */\n    isValidTruncated(value) {\n        return value <= this.upper && value >= this.lower;\n    }\n}\n// Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\nexport class RandGamma {\n    constructor(alpha, beta, dtype, seed) {\n        this.alpha = alpha;\n        this.beta = 1 / beta; // convert rate to scale parameter\n        this.dtype = dtype;\n        const seedValue = seed ? seed : Math.random();\n        this.randu = seedrandom.alea(seedValue.toString());\n        this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n        if (alpha < 1) {\n            this.d = alpha + (2 / 3);\n        }\n        else {\n            this.d = alpha - (1 / 3);\n        }\n        this.c = 1 / Math.sqrt(9 * this.d);\n    }\n    /** Returns next sample from a gamma distribution. */\n    nextValue() {\n        let x2, v0, v1, x, u, v;\n        while (true) {\n            do {\n                x = this.randn.nextValue();\n                v = 1 + (this.c * x);\n            } while (v <= 0);\n            v *= v * v;\n            x2 = x * x;\n            v0 = 1 - (0.331 * x2 * x2);\n            v1 = (0.5 * x2) + (this.d * (1 - v + Math.log(v)));\n            u = this.randu();\n            if (u < v0 || Math.log(u) < v1) {\n                break;\n            }\n        }\n        v = (1 / this.beta) * this.d * v;\n        if (this.alpha < 1) {\n            v *= Math.pow(this.randu(), 1 / this.alpha);\n        }\n        return this.convertValue(v);\n    }\n    /** Handles proper rounding for non-floating-point numbers. */\n    convertValue(value) {\n        if (this.dtype === 'float32') {\n            return value;\n        }\n        return Math.round(value);\n    }\n}\nexport class UniformRandom {\n    constructor(min = 0, max = 1, dtype, seed) {\n        /** Handles proper rounding for non floating point numbers. */\n        this.canReturnFloat = () => (this.dtype == null || this.dtype === 'float32');\n        this.min = min;\n        this.range = max - min;\n        this.dtype = dtype;\n        if (seed == null) {\n            seed = Math.random();\n        }\n        if (typeof seed === 'number') {\n            seed = seed.toString();\n        }\n        if (!this.canReturnFloat() && this.range <= 1) {\n            throw new Error(`The difference between ${min} - ${max} <= 1 and dtype is not float`);\n        }\n        this.random = seedrandom.alea(seed);\n    }\n    convertValue(value) {\n        if (this.canReturnFloat()) {\n            return value;\n        }\n        return Math.round(value);\n    }\n    nextValue() {\n        return this.convertValue(this.min + this.range * this.random());\n    }\n}\nexport function jarqueBeraNormalityTest(values) {\n    // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\n    const n = values.length;\n    const s = skewness(values);\n    const k = kurtosis(values);\n    const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2));\n    // JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n    // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n    const CHI_SQUARE_2DEG = 5.991;\n    if (jb > CHI_SQUARE_2DEG) {\n        throw new Error(`Invalid p-value for JB: ${jb}`);\n    }\n}\nexport function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {\n    if (epsilon == null) {\n        epsilon = testEpsilon();\n    }\n    const actualMean = mean(actual);\n    expectNumbersClose(actualMean, expectedMean, epsilon);\n    expectNumbersClose(standardDeviation(actual, actualMean), expectedStdDev, epsilon);\n}\nfunction mean(values) {\n    let sum = 0;\n    for (let i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum / values.length;\n}\nfunction standardDeviation(values, mean) {\n    let squareDiffSum = 0;\n    for (let i = 0; i < values.length; i++) {\n        const diff = values[i] - mean;\n        squareDiffSum += diff * diff;\n    }\n    return Math.sqrt(squareDiffSum / values.length);\n}\nfunction kurtosis(values) {\n    // https://en.wikipedia.org/wiki/Kurtosis\n    const valuesMean = mean(values);\n    const n = values.length;\n    let sum2 = 0;\n    let sum4 = 0;\n    for (let i = 0; i < n; i++) {\n        const v = values[i] - valuesMean;\n        sum2 += Math.pow(v, 2);\n        sum4 += Math.pow(v, 4);\n    }\n    return (1 / n) * sum4 / Math.pow((1 / n) * sum2, 2);\n}\nfunction skewness(values) {\n    // https://en.wikipedia.org/wiki/Skewness\n    const valuesMean = mean(values);\n    const n = values.length;\n    let sum2 = 0;\n    let sum3 = 0;\n    for (let i = 0; i < n; i++) {\n        const v = values[i] - valuesMean;\n        sum2 += Math.pow(v, 2);\n        sum3 += Math.pow(v, 3);\n    }\n    return (1 / n) * sum3 / Math.pow((1 / (n - 1)) * sum2, 3 / 2);\n}\n//# sourceMappingURL=rand_util.js.map"]},"metadata":{},"sourceType":"module"}