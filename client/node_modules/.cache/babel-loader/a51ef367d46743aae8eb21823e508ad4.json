{"ast":null,"code":"/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n  constructor(hashTableNameToHandle = {}, hashTableMap = {}) {\n    this.hashTableNameToHandle = hashTableNameToHandle;\n    this.hashTableMap = hashTableMap;\n  }\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n\n\n  addHashTable(name, hashTable) {\n    this.hashTableNameToHandle[name] = hashTable.handle;\n    this.hashTableMap[hashTable.id] = hashTable;\n  }\n  /**\n   * Get the table handle by node name.\n   * @param name Op node name that creates the `HashTable`. This name is also\n   *     used in the inputs list of lookup and import `HashTable` ops.\n   */\n\n\n  getHashTableHandleByName(name) {\n    return this.hashTableNameToHandle[name];\n  }\n  /**\n   * Get the actual `HashTable` by its handle tensor's id.\n   * @param id The id of the handle tensor.\n   */\n\n\n  getHashTableById(id) {\n    return this.hashTableMap[id];\n  }\n  /**\n   * Dispose `ResourceManager`, including its hashTables and tensors in them.\n   */\n\n\n  dispose() {\n    for (const key in this.hashTableMap) {\n      this.hashTableMap[key].clearAndClose();\n      delete this.hashTableMap[key];\n    }\n\n    for (const name in this.hashTableNameToHandle) {\n      this.hashTableNameToHandle[name].dispose();\n      delete this.hashTableNameToHandle[name];\n    }\n  }\n\n}","map":{"version":3,"sources":["../../src/executor/resource_manager.ts"],"names":[],"mappings":"AAmBA;;AAEG;AACH,OAAM,MAAO,eAAP,CAAsB;AAC1B,EAAA,WAAA,CACa,qBAAA,GAAwC,EADrD,EAEa,YAAA,GAA6B,EAF1C,EAE4C;AAD/B,SAAA,qBAAA,GAAA,qBAAA;AACA,SAAA,YAAA,GAAA,YAAA;AAAmC;AAEhD;;;;;;;;AAQG;;;AACH,EAAA,YAAY,CAAC,IAAD,EAAe,SAAf,EAAmC;AAC7C,SAAK,qBAAL,CAA2B,IAA3B,IAAmC,SAAS,CAAC,MAA7C;AACA,SAAK,YAAL,CAAkB,SAAS,CAAC,EAA5B,IAAkC,SAAlC;AACD;AAED;;;;AAIG;;;AACH,EAAA,wBAAwB,CAAC,IAAD,EAAa;AACnC,WAAO,KAAK,qBAAL,CAA2B,IAA3B,CAAP;AACD;AAED;;;AAGG;;;AACH,EAAA,gBAAgB,CAAC,EAAD,EAAW;AACzB,WAAO,KAAK,YAAL,CAAkB,EAAlB,CAAP;AACD;AAED;;AAEG;;;AACH,EAAA,OAAO,GAAA;AACL,SAAK,MAAM,GAAX,IAAkB,KAAK,YAAvB,EAAqC;AACnC,WAAK,YAAL,CAAkB,GAAlB,EAAuB,aAAvB;AACA,aAAO,KAAK,YAAL,CAAkB,GAAlB,CAAP;AACD;;AAED,SAAK,MAAM,IAAX,IAAmB,KAAK,qBAAxB,EAA+C;AAC7C,WAAK,qBAAL,CAA2B,IAA3B,EAAiC,OAAjC;AACA,aAAO,KAAK,qBAAL,CAA2B,IAA3B,CAAP;AACD;AACF;;AAjDyB","sourceRoot":"","sourcesContent":["/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n    constructor(hashTableNameToHandle = {}, hashTableMap = {}) {\n        this.hashTableNameToHandle = hashTableNameToHandle;\n        this.hashTableMap = hashTableMap;\n    }\n    /**\n     * Register a `HashTable` in the resource manager.\n     *\n     * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n     * where id is the table handle tensor's id.\n     *\n     * @param name Op node name that creates the `HashTable`.\n     * @param hashTable The `HashTable` to be added to resource manager.\n     */\n    addHashTable(name, hashTable) {\n        this.hashTableNameToHandle[name] = hashTable.handle;\n        this.hashTableMap[hashTable.id] = hashTable;\n    }\n    /**\n     * Get the table handle by node name.\n     * @param name Op node name that creates the `HashTable`. This name is also\n     *     used in the inputs list of lookup and import `HashTable` ops.\n     */\n    getHashTableHandleByName(name) {\n        return this.hashTableNameToHandle[name];\n    }\n    /**\n     * Get the actual `HashTable` by its handle tensor's id.\n     * @param id The id of the handle tensor.\n     */\n    getHashTableById(id) {\n        return this.hashTableMap[id];\n    }\n    /**\n     * Dispose `ResourceManager`, including its hashTables and tensors in them.\n     */\n    dispose() {\n        for (const key in this.hashTableMap) {\n            this.hashTableMap[key].clearAndClose();\n            delete this.hashTableMap[key];\n        }\n        for (const name in this.hashTableNameToHandle) {\n            this.hashTableNameToHandle[name].dispose();\n            delete this.hashTableNameToHandle[name];\n        }\n    }\n}\n//# sourceMappingURL=resource_manager.js.map"]},"metadata":{},"sourceType":"module"}