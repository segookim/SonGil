{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedConv2D, util } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function fusedConv2d(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      filter = inputs.filter,\n      bias = inputs.bias,\n      preluActivationWeights = inputs.preluActivationWeights;\n  var strides = attrs.strides,\n      pad = attrs.pad,\n      dataFormat = attrs.dataFormat,\n      dilations = attrs.dilations,\n      dimRoundingMode = attrs.dimRoundingMode,\n      activation = attrs.activation,\n      leakyreluAlpha = attrs.leakyreluAlpha;\n  var $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  var convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false\n  /* depthwise */\n  , $dataFormat);\n  var out;\n  var intermediates = [];\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x: x,\n      filter: filter,\n      convInfo: convInfo,\n      backend: backend,\n      bias: bias,\n      activation: activation,\n      preluActivationWeights: preluActivationWeights,\n      leakyreluAlpha: leakyreluAlpha\n    });\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({\n      x: x,\n      filter: filter,\n      convInfo: convInfo,\n      backend: backend,\n      bias: bias,\n      activation: activation,\n      preluActivationWeights: preluActivationWeights,\n      leakyreluAlpha: leakyreluAlpha\n    });\n  } else {\n    var hasBias = bias != null;\n    var hasPreluActivationWeights = preluActivationWeights != null;\n    var hasLeakyreluAlpha = activation === 'leakyrelu';\n    var fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;\n    var program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    var _inputs = [x, filter];\n\n    if (bias) {\n      _inputs.push(bias);\n    }\n\n    if (preluActivationWeights) {\n      _inputs.push(preluActivationWeights);\n    }\n\n    if (hasLeakyreluAlpha) {\n      var $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n\n      _inputs.push($leakyreluAlpha);\n\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, _inputs, 'float32');\n  }\n\n  var outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend: backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  intermediates.push(out);\n  intermediates.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return outReshaped;\n}\nexport var fusedConv2DConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d\n};","map":{"version":3,"sources":["../../src/kernels/FusedConv2D.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedConv2D, util } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function fusedConv2d(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    let out;\n    const intermediates = [];\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n        out = conv2dByMatMul({\n            x,\n            filter,\n            convInfo,\n            backend,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n    }\n    else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n        out = conv2dWithIm2Row({\n            x,\n            filter,\n            convInfo,\n            backend,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n    }\n    else {\n        const hasBias = bias != null;\n        const hasPreluActivationWeights = preluActivationWeights != null;\n        const hasLeakyreluAlpha = activation === 'leakyrelu';\n        const fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;\n        const program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n        const inputs = [x, filter];\n        if (bias) {\n            inputs.push(bias);\n        }\n        if (preluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        if (hasLeakyreluAlpha) {\n            const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n            inputs.push($leakyreluAlpha);\n            intermediates.push($leakyreluAlpha);\n        }\n        out = backend.runWebGLProgram(program, inputs, 'float32');\n    }\n    const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });\n    intermediates.push(out);\n    intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return outReshaped;\n}\nexport const fusedConv2DConfig = {\n    kernelName: FusedConv2D,\n    backendName: 'webgl',\n    kernelFunc: fusedConv2d,\n};\n//# sourceMappingURL=FusedConv2D.js.map"]},"metadata":{},"sourceType":"module"}