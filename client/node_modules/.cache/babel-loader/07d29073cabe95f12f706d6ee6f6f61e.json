{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concat(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var axis = attrs.axis;\n  var $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  var outShape = backend_util.computeOutShape(inputs.map(function (t) {\n    return t.shape;\n  }), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  } // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n\n\n  var $inputs = inputs.filter(function (t) {\n    return util.sizeFromShape(t.shape) > 0;\n  });\n\n  if ($inputs.length === 1) {\n    return identity({\n      inputs: {\n        x: $inputs[0]\n      },\n      backend: backend\n    });\n  }\n\n  var shapes = $inputs.map(function (t) {\n    return t.shape;\n  });\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  if ($inputs[0].dtype === 'complex64') {\n    var reals = $inputs.map(function (t) {\n      return real({\n        inputs: {\n          input: t\n        },\n        backend: backend\n      });\n    });\n    var imags = $inputs.map(function (t) {\n      return imag({\n        inputs: {\n          input: t\n        },\n        backend: backend\n      });\n    });\n    var realConcated = concat({\n      inputs: reals,\n      backend: backend,\n      attrs: {\n        axis: $axis\n      }\n    });\n    var imagConcated = concat({\n      inputs: imags,\n      backend: backend,\n      attrs: {\n        axis: $axis\n      }\n    });\n    var result = complex({\n      inputs: {\n        real: realConcated,\n        imag: imagConcated\n      },\n      backend: backend\n    });\n    reals.forEach(function (r) {\n      return backend.disposeIntermediateTensorInfo(r);\n    });\n    imags.forEach(function (i) {\n      return backend.disposeIntermediateTensorInfo(i);\n    });\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n    return result;\n  } // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n\n\n  var inputs2D = $inputs.map(function (t) {\n    var innerSize = util.sizeFromShape(t.shape.slice($axis));\n    var shape = [-1, innerSize];\n    return reshape({\n      inputs: {\n        x: t\n      },\n      backend: backend,\n      attrs: {\n        shape: shape\n      }\n    });\n  });\n  var inputsValShapes = inputs2D.map(function (t) {\n    return {\n      vals: backend.data.get(t.dataId).values,\n      shape: t.shape\n    };\n  }); // Concats 2d tensors along axis=1.\n\n  outShape = backend_util.computeOutShape(inputs2D.map(function (t) {\n    return t.shape;\n  }), 1\n  /* axis */\n  );\n  var simplyConcat = inputs2D[0].shape[0] === 1;\n  var outVals = concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n  var finalOutShape = backend_util.computeOutShape($inputs.map(function (t) {\n    return t.shape;\n  }), $axis);\n  var outInfo = backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n  inputs2D.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return outInfo;\n}\nexport var concatConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat\n};","map":{"version":3,"sources":["../../src/kernels/Concat.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concat(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n    let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n    if (util.sizeFromShape(outShape) === 0) {\n        return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n    }\n    // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n    const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n    if ($inputs.length === 1) {\n        return identity({ inputs: { x: $inputs[0] }, backend });\n    }\n    const shapes = $inputs.map(t => t.shape);\n    backend_util.assertParamsConsistent(shapes, $axis);\n    if ($inputs[0].dtype === 'complex64') {\n        const reals = $inputs.map((t) => real({ inputs: { input: t }, backend }));\n        const imags = $inputs.map((t) => imag({ inputs: { input: t }, backend }));\n        const realConcated = concat({ inputs: reals, backend, attrs: { axis: $axis } });\n        const imagConcated = concat({ inputs: imags, backend, attrs: { axis: $axis } });\n        const result = complex({ inputs: { real: realConcated, imag: imagConcated }, backend });\n        reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n        imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n        backend.disposeIntermediateTensorInfo(realConcated);\n        backend.disposeIntermediateTensorInfo(imagConcated);\n        return result;\n    }\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const inputs2D = $inputs.map(t => {\n        const innerSize = util.sizeFromShape(t.shape.slice($axis));\n        const shape = [-1, innerSize];\n        return reshape({ inputs: { x: t }, backend, attrs: { shape } });\n    });\n    const inputsValShapes = inputs2D.map(t => {\n        return { vals: backend.data.get(t.dataId).values, shape: t.shape };\n    });\n    // Concats 2d tensors along axis=1.\n    outShape =\n        backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = inputs2D[0].shape[0] === 1;\n    const outVals = concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n    const finalOutShape = backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n    const outInfo = backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n    inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return outInfo;\n}\nexport const concatConfig = {\n    kernelName: Concat,\n    backendName: 'cpu',\n    kernelFunc: concat\n};\n//# sourceMappingURL=Concat.js.map"]},"metadata":{},"sourceType":"module"}