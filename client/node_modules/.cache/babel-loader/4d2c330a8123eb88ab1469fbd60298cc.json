{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FFT, util } from '@tensorflow/tfjs-core';\nimport { fftBatch } from '../utils/fft_utils';\nimport { reshape } from './Reshape';\nexport function fft(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var input = inputs.input;\n  var inputSize = util.sizeFromShape(input.shape); // Collapse all outer dimensions to a single batch dimension.\n\n  var innerDimensionSize = input.shape[input.shape.length - 1];\n  var batch = inputSize / innerDimensionSize;\n  var input2D = reshape({\n    inputs: {\n      x: input\n    },\n    backend: backend,\n    attrs: {\n      shape: [batch, innerDimensionSize]\n    }\n  });\n  var result = fftBatch(input2D, false, backend);\n  var resultReshaped = reshape({\n    inputs: {\n      x: result\n    },\n    backend: backend,\n    attrs: {\n      shape: input.shape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n  return resultReshaped;\n}\nexport var fftConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft\n};","map":{"version":3,"sources":["../../src/kernels/FFT.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,GAAR,EAA8D,IAA9D,QAAyE,uBAAzE;AAGA,SAAQ,QAAR,QAAuB,oBAAvB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAU,GAAV,CAAc,IAAd,EAAgE;AAAA,MAE7D,MAF6D,GAE1C,IAF0C,CAE7D,MAF6D;AAAA,MAErD,OAFqD,GAE1C,IAF0C,CAErD,OAFqD;AAAA,MAG7D,KAH6D,GAGpD,MAHoD,CAG7D,KAH6D;AAKpE,MAAM,SAAS,GAAG,IAAI,CAAC,aAAL,CAAmB,KAAK,CAAC,KAAzB,CAAlB,CALoE,CAOpE;;AACA,MAAM,kBAAkB,GAAG,KAAK,CAAC,KAAN,CAAY,KAAK,CAAC,KAAN,CAAY,MAAZ,GAAqB,CAAjC,CAA3B;AACA,MAAM,KAAK,GAAG,SAAS,GAAG,kBAA1B;AAEA,MAAM,OAAO,GAAG,OAAO,CAAC;AACtB,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KADc;AAEtB,IAAA,OAAO,EAAP,OAFsB;AAGtB,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,kBAAR;AAAR;AAHe,GAAD,CAAvB;AAMA,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAD,EAAU,KAAV,EAAiB,OAAjB,CAAvB;AAEA,MAAM,cAAc,GAChB,OAAO,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAsB,IAAA,OAAO,EAAP,OAAtB;AAA+B,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE,KAAK,CAAC;AAAd;AAAtC,GAAD,CADX;AAGA,EAAA,OAAO,CAAC,6BAAR,CAAsC,OAAtC;AACA,EAAA,OAAO,CAAC,6BAAR,CAAsC,MAAtC;AAEA,SAAO,cAAP;AACD;AAED,OAAO,IAAM,SAAS,GAAiB;AACrC,EAAA,UAAU,EAAE,GADyB;AAErC,EAAA,WAAW,EAAE,KAFwB;AAGrC,EAAA,UAAU,EAAE;AAHyB,CAAhC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FFT, util } from '@tensorflow/tfjs-core';\nimport { fftBatch } from '../utils/fft_utils';\nimport { reshape } from './Reshape';\nexport function fft(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const inputSize = util.sizeFromShape(input.shape);\n    // Collapse all outer dimensions to a single batch dimension.\n    const innerDimensionSize = input.shape[input.shape.length - 1];\n    const batch = inputSize / innerDimensionSize;\n    const input2D = reshape({\n        inputs: { x: input },\n        backend,\n        attrs: { shape: [batch, innerDimensionSize] }\n    });\n    const result = fftBatch(input2D, false, backend);\n    const resultReshaped = reshape({ inputs: { x: result }, backend, attrs: { shape: input.shape } });\n    backend.disposeIntermediateTensorInfo(input2D);\n    backend.disposeIntermediateTensorInfo(result);\n    return resultReshaped;\n}\nexport const fftConfig = {\n    kernelName: FFT,\n    backendName: 'cpu',\n    kernelFunc: fft\n};\n//# sourceMappingURL=FFT.js.map"]},"metadata":{},"sourceType":"module"}