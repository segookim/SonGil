{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Cumsum } from '@tensorflow/tfjs-core';\nimport { CumSumProgram } from '../cumsum_gpu';\nimport { identity } from './Identity';\nimport { transpose } from './Transpose';\nexport function cumsum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    exclusive,\n    reverse\n  } = attrs;\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n  }\n\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(`WebGL cumsum shader expects an inner-most axis=${x.shape.length - 1} ` + `but got axis=${axis}`);\n  }\n\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({\n    inputs: {\n      x: permutedX\n    },\n    backend\n  }); // Use cumsum parallel algorithm, ref:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumSumProgram(permutedX.shape, false, reverse);\n    const customSetup = program.getCustomSetupFunc(i);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype, customSetup);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  } // For exclusive cumsum, shift the end result in the direction of sum\n  // and add 0 to the front index.\n\n\n  if (exclusive) {\n    const program = new CumSumProgram(permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        perm: reversePermutation\n      }\n    });\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\nexport const cumsumConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgl',\n  kernelFunc: cumsum\n};","map":{"version":3,"sources":["../../src/kernels/Cumsum.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Cumsum } from '@tensorflow/tfjs-core';\nimport { CumSumProgram } from '../cumsum_gpu';\nimport { identity } from './Identity';\nimport { transpose } from './Transpose';\nexport function cumsum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, exclusive, reverse } = attrs;\n    const xRank = x.shape.length;\n    const permutation = backend_util.getAxesPermutation([axis], xRank);\n    let permutedX = x;\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n    }\n    const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n    if (permutedAxis !== xRank - 1) {\n        throw new Error(`WebGL cumsum shader expects an inner-most axis=${x.shape.length - 1} ` +\n            `but got axis=${axis}`);\n    }\n    const size = permutedX.shape[permutedAxis];\n    let result = identity({ inputs: { x: permutedX }, backend });\n    // Use cumsum parallel algorithm, ref:\n    // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n    for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n        const program = new CumSumProgram(permutedX.shape, false, reverse);\n        const customSetup = program.getCustomSetupFunc(i);\n        const prevResult = result;\n        result =\n            backend.runWebGLProgram(program, [result], result.dtype, customSetup);\n        backend.disposeIntermediateTensorInfo(prevResult);\n    }\n    // For exclusive cumsum, shift the end result in the direction of sum\n    // and add 0 to the front index.\n    if (exclusive) {\n        const program = new CumSumProgram(permutedX.shape, exclusive, reverse);\n        const prevResult = result;\n        result = backend.runWebGLProgram(program, [result], result.dtype);\n        backend.disposeIntermediateTensorInfo(prevResult);\n    }\n    if (permutation != null) {\n        const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n        const reverseTransposedResult = transpose({ inputs: { x: result }, backend, attrs: { perm: reversePermutation } });\n        backend.disposeIntermediateTensorInfo(result);\n        backend.disposeIntermediateTensorInfo(permutedX);\n        return reverseTransposedResult;\n    }\n    return result;\n}\nexport const cumsumConfig = {\n    kernelName: Cumsum,\n    backendName: 'webgl',\n    kernelFunc: cumsum\n};\n//# sourceMappingURL=Cumsum.js.map"]},"metadata":{},"sourceType":"module"}