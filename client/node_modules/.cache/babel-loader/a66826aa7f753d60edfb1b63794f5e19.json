{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Merge Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { l2Normalize } from '../losses';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as mathUtils from '../utils/math_utils';\nimport { getExactlyOneShape } from '../utils/types_utils';\n/**\n * Generic Merge layer for element-wise merge functions.\n *\n * Used to implement `Sum`, `Average`, `Concatenate`, etc.\n */\n\nexport class Merge extends Layer {\n  constructor(args) {\n    super(args || {});\n    this.supportsMasking = true;\n  }\n  /**\n   * Logic for merging multiple tensors, to be overridden by subclasses.\n   * @param inputs\n   */\n\n\n  mergeFunction(inputs) {\n    throw new NotImplementedError();\n  }\n  /**\n   * Computes the shape of the result of an elementwise operation.\n   *\n   * @param shape1: Shape of the first tensor.\n   * @param shape2: Shape of the second tensor.\n   * @returns Expected output shape when an elementwise operation is carried\n   *   out on 2 tensors with shapes `shape1` and `shape2`.\n   * @throws ValueError: If `shape1` and `shape2` are not compatible for\n   *   element-wise operations.\n   */\n\n\n  computeElementwiseOpOutputShape(shape1, shape2) {\n    if (shape1 == null || shape2 == null) {\n      return null;\n    } else if (shape1.length < shape2.length) {\n      return this.computeElementwiseOpOutputShape(shape2, shape1);\n    } else if (shape2.length === 0) {\n      return shape1;\n    }\n\n    const outputShape = shape1.slice(0, shape1.length - shape2.length);\n\n    for (let k = 0; k < shape2.length; ++k) {\n      const i = shape1[shape1.length - shape2.length + k];\n      const j = shape2[k];\n\n      if (i == null || j == null || i < 0 || j < 0) {\n        outputShape.push(null);\n      } else if (i === 1) {\n        outputShape.push(j);\n      } else if (j === 1) {\n        outputShape.push(i);\n      } else {\n        if (i !== j) {\n          throw new ValueError('Operands could not be broadcast together with shapes ' + JSON.stringify(shape1) + ' ' + JSON.stringify(shape2));\n        }\n\n        outputShape.push(i);\n      }\n    }\n\n    return outputShape;\n  }\n\n  build(inputShape) {\n    // Used purely for shape validation.\n    if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {\n      // Make sure that inputShape is an Array of shape.\n      inputShape = [getExactlyOneShape(inputShape)];\n    }\n\n    inputShape = inputShape;\n\n    if (inputShape.length < 2) {\n      throw new ValueError('A merge layer should be called on an Array of at least 2 inputs.' + ` Got ${inputShape.length} input(s).`);\n    } // Make sure that there is at most one unique batch size among the input\n    // shapes.\n\n\n    let batchSizes = [];\n\n    for (const shape of inputShape) {\n      if (shape != null && shape[0] !== null) {\n        batchSizes.push(shape[0]);\n      }\n    }\n\n    batchSizes = generic_utils.unique(batchSizes);\n\n    if (batchSizes.length > 1) {\n      throw new ValueError(`Can not merge tensors with different batch sizes. ` + `Got tensors with shapes: ${JSON.stringify(inputShape)}.`);\n    }\n\n    let outputShape = inputShape[0] == null ? null : inputShape[0].slice(1);\n\n    for (let i = 1; i < inputShape.length; ++i) {\n      const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n      outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n    } // If the inputs have different ranks, we have to reshape them to make them\n    // broadcastable.\n\n\n    const allRanks = inputShape.map(shape => shape.length);\n\n    if (inputShape.indexOf(null) === -1 && generic_utils.unique(allRanks).length === 1) {\n      this.reshapeRequired = false;\n    } else {\n      this.reshapeRequired = true;\n    }\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = inputs;\n\n      if (this.reshapeRequired) {\n        const reshapedInputs = [];\n        const inputDims = inputs.map(input => input.rank);\n\n        if (inputDims.indexOf(null) === -1) {\n          // If ranks of all inputs are available, we simply expand each of them\n          // at axis=1 until all of them have the same rank.\n          const maxNDim = mathUtils.max(inputDims);\n\n          for (let x of inputs) {\n            const xNDim = x.rank;\n\n            for (let k = 0; k < maxNDim - xNDim; ++k) {\n              x = K.expandDims(x, 1);\n            }\n\n            reshapedInputs.push(x);\n          }\n\n          return this.mergeFunction(reshapedInputs);\n        } else {\n          // Transpose all inputs so that batch size is the last dimension.\n          // [batchSize, dim1, dim2, ...] -> [dim1, dim2, ..., batchSize]\n          let transposed = false;\n\n          for (const x of inputs) {\n            const xNDim = x.rank;\n\n            if (xNDim == null) {\n              const xShape = x.shape;\n              const batchSize = xShape[0];\n              const newShape = xShape.slice(1).concat([batchSize]);\n              let xTransposed = x.reshape([batchSize].concat(mathUtils.arrayProd(xShape.slice(1))));\n              xTransposed = tfc.transpose(xTransposed, [1, 0]);\n              xTransposed = xTransposed.reshape(newShape);\n              reshapedInputs.push(xTransposed);\n              transposed = true;\n            } else if (xNDim > 1) {\n              const dims = mathUtils.range(1, xNDim).concat([0]);\n              reshapedInputs.push(tfc.transpose(x, dims));\n              transposed = true;\n            } else {\n              // We don't transpose inputs if they are 1D vectors or scalars.\n              reshapedInputs.push(x);\n            }\n          }\n\n          let y = this.mergeFunction(reshapedInputs);\n          const yNDim = y.rank;\n\n          if (transposed) {\n            // If inputs have been transposed, we have to transpose the output\n            // too.\n            if (yNDim == null) {\n              const yShape = y.shape;\n              const yNDim = yShape.length;\n              const batchSize = yShape[yNDim - 1];\n              const newShape = [batchSize].concat(yShape.slice(0, yShape.length - 1));\n              y = tfc.transpose(y.reshape([-1, batchSize]), [1, 0]).reshape(newShape);\n            } else if (yNDim > 1) {\n              const dims = [yNDim - 1].concat(mathUtils.range(0, yNDim - 1));\n              y = tfc.transpose(y, dims);\n            }\n          }\n\n          return y;\n        }\n      } else {\n        return this.mergeFunction(inputs);\n      }\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = inputShape;\n    let outputShape;\n\n    if (inputShape[0] == null) {\n      outputShape = null;\n    } else {\n      outputShape = inputShape[0].slice(1);\n    }\n\n    for (let i = 1; i < inputShape.length; ++i) {\n      const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n      outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n    }\n\n    let batchSizes = [];\n\n    for (const shape of inputShape) {\n      if (shape != null && shape[0] !== null) {\n        batchSizes.push(shape[0]);\n      }\n    }\n\n    batchSizes = generic_utils.unique(batchSizes);\n\n    if (batchSizes.length === 1) {\n      outputShape = batchSizes.concat(outputShape);\n    } else {\n      outputShape = [null].concat(outputShape);\n    }\n\n    return outputShape;\n  }\n\n  computeMask(inputs, mask) {\n    return tfc.tidy(() => {\n      if (mask == null) {\n        return null;\n      }\n\n      if (!Array.isArray(mask)) {\n        throw new ValueError('`mask` should be an Array');\n      }\n\n      if (!Array.isArray(inputs)) {\n        throw new ValueError('`inputs` should be an Array');\n      }\n\n      if (mask.length !== inputs.length) {\n        throw new ValueError(`The Array 'inputs' and 'mask' are expected to have the same ` + `length, but have different lengths ` + `(${inputs.length} vs ${mask.length})`);\n      }\n\n      if (mask.every(m => m == null)) {\n        return null;\n      }\n\n      mask = mask.map(m => m == null ? m : tfc.expandDims(m, 0));\n      let output = mask[0];\n\n      for (let i = 1; i < mask.length - 1; ++i) {\n        output = tfc.logicalAnd(output, mask[i]);\n      }\n\n      return output;\n    });\n  }\n\n}\nexport class Add extends Merge {\n  constructor(args) {\n    super(args);\n  }\n\n  mergeFunction(inputs) {\n    return tidy(() => {\n      let output = inputs[0].clone();\n\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.add(output, inputs[i]);\n      }\n\n      return output;\n    });\n  }\n\n}\n/** @nocollapse */\n\nAdd.className = 'Add';\nserialization.registerClass(Add);\n/**\n * Calculate the element-wise sum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Add` layer, by using no input argument\n *    or a single configuration argument. The resultant `Add` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const addLayer = tf.layers.add();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = addLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.add([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.add([input1, input2]).print();\n * // Gives [[11, 22], [33, 44]].\n *\n */\n\nexport function add(config) {\n  if (Array.isArray(config)) {\n    const layer = new Add({});\n    return layer.apply(config);\n  } else {\n    return new Add(config);\n  }\n}\nexport class Multiply extends Merge {\n  constructor(args) {\n    super(args);\n  }\n\n  mergeFunction(inputs) {\n    return tidy(() => {\n      let output = inputs[0].clone();\n\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.mul(output, inputs[i]);\n      }\n\n      return output;\n    });\n  }\n\n}\n/** @nocollapse */\n\nMultiply.className = 'Multiply';\nserialization.registerClass(Multiply);\n/**\n * Calculate the element-wise product of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Multiply` layer, by using no input argument\n *    or a single configuration argument. The resultant `Multiply` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const multiplyLayer = tf.layers.multiply();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = multiplyLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.multiply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.multiply([input1, input2]).print();\n * // Gives [[10, 40], [90, 160]].\n *\n */\n\nexport function multiply(config) {\n  if (Array.isArray(config)) {\n    const layer = new Multiply({});\n    return layer.apply(config);\n  } else {\n    return new Multiply(config);\n  }\n}\nexport class Average extends Merge {\n  constructor(args) {\n    super(args);\n  }\n\n  mergeFunction(inputs) {\n    return tidy(() => {\n      let output = inputs[0].clone();\n\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.add(output, inputs[i]);\n      }\n\n      return tfc.mul(1 / inputs.length, output);\n    });\n  }\n\n}\n/** @nocollapse */\n\nAverage.className = 'Average';\nserialization.registerClass(Average);\n/**\n * Calculate the element-wise arithmetic mean of inputs, which all have the same\n * shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Average` layer, by using no input argument\n *    or a single configuration argument. The resultant `Average` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const averageLayer = tf.layers.average();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = averageLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.average([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.average([input1, input2]).print();\n * // Gives [[5.5, 11], [16.5, 22]].\n *\n */\n\nexport function average(config) {\n  if (Array.isArray(config)) {\n    const layer = new Average({});\n    return layer.apply(config);\n  } else {\n    return new Average(config);\n  }\n}\nexport class Maximum extends Merge {\n  constructor(args) {\n    super(args);\n  }\n\n  mergeFunction(inputs) {\n    return tidy(() => {\n      let output = inputs[0];\n\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.maximum(output, inputs[i]);\n      }\n\n      return output;\n    });\n  }\n\n}\n/** @nocollapse */\n\nMaximum.className = 'Maximum';\nserialization.registerClass(Maximum);\n/**\n * Calculate the element-wise maximum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Maximum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Maximum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const maximumLayer = tf.layers.maximum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = maximumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.maximum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.maximum([input1, input2]).print();\n * // Gives [[10, 20], [30, 40]].\n *\n */\n\nexport function maximum(config) {\n  if (Array.isArray(config)) {\n    const layer = new Maximum({});\n    return layer.apply(config);\n  } else {\n    return new Maximum(config);\n  }\n}\nexport class Minimum extends Merge {\n  constructor(args) {\n    super(args);\n  }\n\n  mergeFunction(inputs) {\n    return tidy(() => {\n      let output = inputs[0];\n\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.minimum(output, inputs[i]);\n      }\n\n      return output;\n    });\n  }\n\n}\n/** @nocollapse */\n\nMinimum.className = 'Minimum';\nserialization.registerClass(Minimum);\n/**\n * Calculate the element-wise minimum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Minimum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Minimum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const minimumLayer = tf.layers.minimum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = minimumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.minimum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.minimum([input1, input2]).print();\n * // Gives [[1, 2], [3, 4]].\n *\n */\n\nexport function minimum(config) {\n  if (Array.isArray(config)) {\n    const layer = new Minimum({});\n    return layer.apply(config);\n  } else {\n    return new Minimum(config);\n  }\n}\nexport class Concatenate extends Merge {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_AXIS = -1;\n\n    if (args == null) {\n      args = {};\n    }\n\n    this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n    this.supportsMasking = true;\n    this.reshapeRequired = false;\n  }\n\n  build(inputShape) {\n    // Used purely for shape validation.]\n    if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) || inputShape.length === 1) {\n      throw new ValueError('A `Concatenate` layer should be called on a list of at least 2 ' + 'inputs');\n    }\n\n    inputShape = inputShape;\n    let allNoneShape = true;\n\n    for (const shape of inputShape) {\n      if (shape != null) {\n        allNoneShape = false;\n        break;\n      }\n    }\n\n    if (allNoneShape) {\n      return;\n    }\n\n    const shapeSet = [];\n\n    for (let i = 0; i < inputShape.length; ++i) {\n      const shapeWithoutConcatAxis = inputShape[i].slice();\n      shapeWithoutConcatAxis.splice(this.axis, 1);\n      let exists = false;\n\n      for (const shape of shapeSet) {\n        if (util.arraysEqual(shape, shapeWithoutConcatAxis)) {\n          exists = true;\n          break;\n        }\n      }\n\n      if (!exists) {\n        shapeSet.push(shapeWithoutConcatAxis);\n      }\n    }\n\n    if (shapeSet.length > 1) {\n      throw new ValueError('A `Concatenate` layer requires inputs with matching shapes ' + 'except for the concat axis. Got input shapes: ' + JSON.stringify(inputShape));\n    }\n  }\n\n  mergeFunction(inputs) {\n    return tidy(() => {\n      return K.concatenate(inputs, this.axis);\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {\n      throw new ValueError('A `Concatenate` layer should be called on a list of inputs.');\n    }\n\n    const inputShapes = inputShape;\n    const outputShape = inputShapes[0].slice();\n    const axis = this.axis < 0 ? outputShape.length + this.axis : this.axis; // Porting Note: the line above is because TypeScript doesn't support\n    //   negative indices.\n\n    for (const shape of inputShapes.slice(1)) {\n      if (outputShape[axis] == null || shape[axis] == null) {\n        outputShape[axis] = null;\n        break;\n      }\n\n      outputShape[axis] += shape[axis];\n    }\n\n    return outputShape;\n  }\n\n  computeMask(inputs, mask) {\n    if (mask == null) {\n      return null;\n    }\n\n    if (!Array.isArray(mask)) {\n      throw new ValueError('`mask` should be an array for Concatenate');\n    }\n\n    if (!Array.isArray(inputs)) {\n      throw new ValueError('`inputs` should be an array for Concatenate');\n    }\n\n    if (mask.length !== inputs.length) {\n      throw new ValueError(`Mismatch in the length of mask (${mask.length}) ` + `and the legnth of inputs (${inputs.length})`);\n    }\n\n    return tfc.tidy(() => {\n      let allNullMasks = true;\n      mask.forEach(m => {\n        if (m != null) {\n          allNullMasks = false;\n          return;\n        }\n      });\n\n      if (allNullMasks) {\n        return null;\n      }\n\n      const outputMasks = [];\n\n      for (let i = 0; i < inputs.length; ++i) {\n        if (mask[i] == null) {\n          // Input is unmasked. Append all 1's to masks.\n          outputMasks.push(tfc.onesLike(inputs[i]).asType('bool'));\n        } else if (mask[i].rank < inputs[i].rank) {\n          // Mask is smaller than the input, expand it.\n          outputMasks.push(tfc.expandDims(mask[i], -1));\n        } else {\n          outputMasks.push(mask[i]);\n        }\n      }\n\n      const concatenatedMasks = tfc.concat(outputMasks, this.axis);\n      return tfc.all(concatenatedMasks, -1, false);\n    });\n  }\n\n  getConfig() {\n    const config = {\n      'axis': this.axis\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nConcatenate.className = 'Concatenate';\nserialization.registerClass(Concatenate);\n/**\n * Concatenate an `Array` of inputs.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Concatenate` layer, by using no input argument\n *    or a single configuration argument. The resultant `Concatenate` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const concatLayer = tf.layers.concatenate();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = concatLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 7], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = tf.layers.concatenate([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\n * const input2 = tf.tensor2d([[10, 20], [30, 40]], [2, 2]);\n * tf.layers.concatenate([input1, input2]).print();\n * // Gives [[1, 2, 10, 20], [3, 4, 30, 40]].\n *\n */\n\nexport function concatenate(config) {\n  if (Array.isArray(config)) {\n    const layer = new Concatenate({});\n    return layer.apply(config);\n  } else {\n    return new Concatenate(config);\n  }\n}\n/**\n * Interpretable potentially negative axis index.\n *\n * For example, given axis = -1, and dim = 3, this function will return 2.\n *\n * @param axis The axis index, may be a positive, zero or negative integer.\n * @param dim Total number of dimensions, a positive integer.\n * @returns A non-negative axis index equivalent to the input `axis`.\n */\n\nfunction interpretAxis(axis, dim) {\n  while (axis < 0) {\n    axis += dim;\n  }\n\n  return axis;\n}\n\nfunction batchDot(x, y, axes) {\n  if (x.shape.length > 3 || y.shape.length > 3) {\n    throw new NotImplementedError('batchDot is not implemented for tensors of 4D or higher rank yet');\n  }\n\n  tfc.util.assert(x.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, ` + `but got ${x.shape.length}`);\n  tfc.util.assert(x.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, ` + `but got ${y.shape.length}`);\n\n  if (typeof axes === 'number') {\n    axes = [axes, axes];\n  }\n\n  if (x.dtype === 'complex64' || y.dtype === 'complex64') {\n    throw new NotImplementedError('batchDot is not implemented for complex64-type Tensors yet.');\n  }\n\n  const xNDim = x.shape.length;\n  const yNDim = y.shape.length;\n\n  if (axes == null) {\n    // Behave like batchMatmul by default.\n    axes = [xNDim - 1, yNDim - 2];\n  }\n\n  const axesArray = axes;\n  return tfc.tidy(() => {\n    let diff;\n\n    if (xNDim > yNDim) {\n      diff = xNDim - yNDim;\n      const diffShape = [];\n\n      for (let i = 0; i < diff; ++i) {\n        diffShape.push(1);\n      }\n\n      y = y.reshape(y.shape.concat(diffShape));\n    } else if (yNDim > xNDim) {\n      diff = yNDim - xNDim;\n      const diffShape = [];\n\n      for (let i = 0; i < diff; ++i) {\n        diffShape.push(1);\n      }\n\n      x = x.reshape(x.shape.concat(diffShape));\n    } else {\n      diff = 0;\n    }\n\n    let out;\n\n    if (x.shape.length === 2 && y.shape.length === 2) {\n      if (axesArray[0] === axesArray[1]) {\n        out = x.mul(y).sum(axesArray[0]);\n      } else {\n        out = x.transpose([1, 0]).mul(y).sum(axesArray[1]);\n      }\n    } else {\n      const adjX = axesArray[0] !== x.shape.length - 1;\n      const adjY = axesArray[1] === y.shape.length - 1;\n      out = x.matMul(y, adjX, adjY);\n    }\n\n    if (diff > 0) {\n      let idx;\n\n      if (xNDim > yNDim) {\n        idx = xNDim + yNDim - 3;\n      } else {\n        idx = xNDim - 1;\n      }\n\n      const squeezeAxes = [];\n\n      for (let i = idx; i < idx + diff; ++i) {\n        squeezeAxes.push(i);\n      }\n\n      out = out.squeeze(squeezeAxes);\n    }\n\n    if (out.shape.length === 1) {\n      out = out.expandDims(1);\n    }\n\n    return out;\n  });\n}\n\nexport class Dot extends Merge {\n  constructor(args) {\n    super(args);\n    this.axes = args.axes;\n    this.normalize = args.normalize == null ? false : args.normalize;\n    this.supportsMasking = true;\n    this.reshapeRequired = false;\n  }\n\n  build(inputShape) {\n    tfc.util.assert(Array.isArray(inputShape) && inputShape.length === 2 && Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');\n    const shape1 = inputShape[0];\n    const shape2 = inputShape[1];\n\n    if (shape1.length > 3 || shape2.length > 3) {\n      throw new NotImplementedError('Dot layer does not support tensors of 4D or higher rank yet.');\n    }\n\n    const axes = this.interpretAxes(shape1, shape2);\n\n    if (shape1[axes[0]] !== shape2[axes[1]]) {\n      throw new ValueError(`Dimension incompatibility: ` + `${shape1[axes[0]]} !== ${shape2[axes[1]]}`);\n    }\n  }\n\n  mergeFunction(inputs) {\n    if (inputs.length !== 2) {\n      throw new ValueError('A `Dot` layer must be called on exactly 2 inputs, ' + `but received ${inputs.length} input(s).`);\n    }\n\n    let x1 = inputs[0];\n    let x2 = inputs[1];\n    let axes;\n\n    if (!Array.isArray(this.axes)) {\n      axes = [interpretAxis(this.axes, x1.shape.length), interpretAxis(this.axes, x2.shape.length)];\n    } else {\n      axes = this.axes.map((axis, i) => interpretAxis(axis, inputs[i].shape.length));\n    }\n\n    if (this.normalize) {\n      x1 = l2Normalize(x1, axes[0]);\n      x2 = l2Normalize(x2, axes[1]);\n    }\n\n    return batchDot(x1, x2, axes);\n  }\n\n  interpretAxes(shape1, shape2) {\n    let axes;\n\n    if (!Array.isArray(this.axes)) {\n      // `this.axes` is a single integer.\n      axes = [interpretAxis(this.axes, shape1.length), interpretAxis(this.axes, shape2.length)];\n    } else {\n      // `this.axes` is an Array of integers.\n      axes = this.axes;\n    }\n\n    return axes;\n  }\n\n  computeOutputShape(inputShape) {\n    tfc.util.assert(Array.isArray(inputShape) && inputShape.length === 2 && Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');\n    const shape1 = inputShape[0].slice();\n    const shape2 = inputShape[1].slice();\n\n    if (shape1.length > 3 || shape2.length > 3) {\n      throw new NotImplementedError('Dot layer does not support tensors of 4D or higher rank yet.');\n    }\n\n    const axes = this.interpretAxes(shape1, shape2);\n    shape1.splice(axes[0], 1);\n    shape2.splice(axes[1], 1);\n    shape2.splice(0, 1);\n    const outputShape = shape1.concat(shape2);\n\n    if (outputShape.length === 1) {\n      outputShape.push(1);\n    }\n\n    return outputShape;\n  }\n\n  computeMask(inputs, mask) {\n    return null;\n  }\n\n  getConfig() {\n    const config = {\n      'axes': this.axes,\n      'normalize': this.normalize\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nDot.className = 'Dot';\nserialization.registerClass(Dot); // TODO(cais): Add functional interfaces for the merge layers.","map":{"version":3,"sources":["../../src/layers/merge.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Merge Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { l2Normalize } from '../losses';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as mathUtils from '../utils/math_utils';\nimport { getExactlyOneShape } from '../utils/types_utils';\n/**\n * Generic Merge layer for element-wise merge functions.\n *\n * Used to implement `Sum`, `Average`, `Concatenate`, etc.\n */\nexport class Merge extends Layer {\n    constructor(args) {\n        super(args || {});\n        this.supportsMasking = true;\n    }\n    /**\n     * Logic for merging multiple tensors, to be overridden by subclasses.\n     * @param inputs\n     */\n    mergeFunction(inputs) {\n        throw new NotImplementedError();\n    }\n    /**\n     * Computes the shape of the result of an elementwise operation.\n     *\n     * @param shape1: Shape of the first tensor.\n     * @param shape2: Shape of the second tensor.\n     * @returns Expected output shape when an elementwise operation is carried\n     *   out on 2 tensors with shapes `shape1` and `shape2`.\n     * @throws ValueError: If `shape1` and `shape2` are not compatible for\n     *   element-wise operations.\n     */\n    computeElementwiseOpOutputShape(shape1, shape2) {\n        if (shape1 == null || shape2 == null) {\n            return null;\n        }\n        else if (shape1.length < shape2.length) {\n            return this.computeElementwiseOpOutputShape(shape2, shape1);\n        }\n        else if (shape2.length === 0) {\n            return shape1;\n        }\n        const outputShape = shape1.slice(0, shape1.length - shape2.length);\n        for (let k = 0; k < shape2.length; ++k) {\n            const i = shape1[shape1.length - shape2.length + k];\n            const j = shape2[k];\n            if (i == null || j == null || i < 0 || j < 0) {\n                outputShape.push(null);\n            }\n            else if (i === 1) {\n                outputShape.push(j);\n            }\n            else if (j === 1) {\n                outputShape.push(i);\n            }\n            else {\n                if (i !== j) {\n                    throw new ValueError('Operands could not be broadcast together with shapes ' +\n                        JSON.stringify(shape1) + ' ' + JSON.stringify(shape2));\n                }\n                outputShape.push(i);\n            }\n        }\n        return outputShape;\n    }\n    build(inputShape) {\n        // Used purely for shape validation.\n        if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {\n            // Make sure that inputShape is an Array of shape.\n            inputShape = [getExactlyOneShape(inputShape)];\n        }\n        inputShape = inputShape;\n        if (inputShape.length < 2) {\n            throw new ValueError('A merge layer should be called on an Array of at least 2 inputs.' +\n                ` Got ${inputShape.length} input(s).`);\n        }\n        // Make sure that there is at most one unique batch size among the input\n        // shapes.\n        let batchSizes = [];\n        for (const shape of inputShape) {\n            if (shape != null && shape[0] !== null) {\n                batchSizes.push(shape[0]);\n            }\n        }\n        batchSizes = generic_utils.unique(batchSizes);\n        if (batchSizes.length > 1) {\n            throw new ValueError(`Can not merge tensors with different batch sizes. ` +\n                `Got tensors with shapes: ${JSON.stringify(inputShape)}.`);\n        }\n        let outputShape = inputShape[0] == null ? null : inputShape[0].slice(1);\n        for (let i = 1; i < inputShape.length; ++i) {\n            const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n        }\n        // If the inputs have different ranks, we have to reshape them to make them\n        // broadcastable.\n        const allRanks = inputShape.map(shape => shape.length);\n        if (inputShape.indexOf(null) === -1 &&\n            generic_utils.unique(allRanks).length === 1) {\n            this.reshapeRequired = false;\n        }\n        else {\n            this.reshapeRequired = true;\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = inputs;\n            if (this.reshapeRequired) {\n                const reshapedInputs = [];\n                const inputDims = inputs.map(input => input.rank);\n                if (inputDims.indexOf(null) === -1) {\n                    // If ranks of all inputs are available, we simply expand each of them\n                    // at axis=1 until all of them have the same rank.\n                    const maxNDim = mathUtils.max(inputDims);\n                    for (let x of inputs) {\n                        const xNDim = x.rank;\n                        for (let k = 0; k < maxNDim - xNDim; ++k) {\n                            x = K.expandDims(x, 1);\n                        }\n                        reshapedInputs.push(x);\n                    }\n                    return this.mergeFunction(reshapedInputs);\n                }\n                else {\n                    // Transpose all inputs so that batch size is the last dimension.\n                    // [batchSize, dim1, dim2, ...] -> [dim1, dim2, ..., batchSize]\n                    let transposed = false;\n                    for (const x of inputs) {\n                        const xNDim = x.rank;\n                        if (xNDim == null) {\n                            const xShape = x.shape;\n                            const batchSize = xShape[0];\n                            const newShape = xShape.slice(1).concat([batchSize]);\n                            let xTransposed = x.reshape([batchSize].concat(mathUtils.arrayProd(xShape.slice(1))));\n                            xTransposed = tfc.transpose(xTransposed, [1, 0]);\n                            xTransposed = xTransposed.reshape(newShape);\n                            reshapedInputs.push(xTransposed);\n                            transposed = true;\n                        }\n                        else if (xNDim > 1) {\n                            const dims = mathUtils.range(1, xNDim).concat([0]);\n                            reshapedInputs.push(tfc.transpose(x, dims));\n                            transposed = true;\n                        }\n                        else {\n                            // We don't transpose inputs if they are 1D vectors or scalars.\n                            reshapedInputs.push(x);\n                        }\n                    }\n                    let y = this.mergeFunction(reshapedInputs);\n                    const yNDim = y.rank;\n                    if (transposed) {\n                        // If inputs have been transposed, we have to transpose the output\n                        // too.\n                        if (yNDim == null) {\n                            const yShape = y.shape;\n                            const yNDim = yShape.length;\n                            const batchSize = yShape[yNDim - 1];\n                            const newShape = [batchSize].concat(yShape.slice(0, yShape.length - 1));\n                            y = tfc.transpose(y.reshape([-1, batchSize]), [1, 0])\n                                .reshape(newShape);\n                        }\n                        else if (yNDim > 1) {\n                            const dims = [yNDim - 1].concat(mathUtils.range(0, yNDim - 1));\n                            y = tfc.transpose(y, dims);\n                        }\n                    }\n                    return y;\n                }\n            }\n            else {\n                return this.mergeFunction(inputs);\n            }\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = inputShape;\n        let outputShape;\n        if (inputShape[0] == null) {\n            outputShape = null;\n        }\n        else {\n            outputShape = inputShape[0].slice(1);\n        }\n        for (let i = 1; i < inputShape.length; ++i) {\n            const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n        }\n        let batchSizes = [];\n        for (const shape of inputShape) {\n            if (shape != null && shape[0] !== null) {\n                batchSizes.push(shape[0]);\n            }\n        }\n        batchSizes = generic_utils.unique(batchSizes);\n        if (batchSizes.length === 1) {\n            outputShape = batchSizes.concat(outputShape);\n        }\n        else {\n            outputShape = [null].concat(outputShape);\n        }\n        return outputShape;\n    }\n    computeMask(inputs, mask) {\n        return tfc.tidy(() => {\n            if (mask == null) {\n                return null;\n            }\n            if (!Array.isArray(mask)) {\n                throw new ValueError('`mask` should be an Array');\n            }\n            if (!Array.isArray(inputs)) {\n                throw new ValueError('`inputs` should be an Array');\n            }\n            if (mask.length !== inputs.length) {\n                throw new ValueError(`The Array 'inputs' and 'mask' are expected to have the same ` +\n                    `length, but have different lengths ` +\n                    `(${inputs.length} vs ${mask.length})`);\n            }\n            if (mask.every(m => m == null)) {\n                return null;\n            }\n            mask = mask.map(m => m == null ? m : tfc.expandDims(m, 0));\n            let output = mask[0];\n            for (let i = 1; i < mask.length - 1; ++i) {\n                output = tfc.logicalAnd(output, mask[i]);\n            }\n            return output;\n        });\n    }\n}\nexport class Add extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0].clone();\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.add(output, inputs[i]);\n            }\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nAdd.className = 'Add';\nserialization.registerClass(Add);\n/**\n * Calculate the element-wise sum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Add` layer, by using no input argument\n *    or a single configuration argument. The resultant `Add` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const addLayer = tf.layers.add();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = addLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.add([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.add([input1, input2]).print();\n * // Gives [[11, 22], [33, 44]].\n *\n */\nexport function add(config) {\n    if (Array.isArray(config)) {\n        const layer = new Add({});\n        return layer.apply(config);\n    }\n    else {\n        return new Add(config);\n    }\n}\nexport class Multiply extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0].clone();\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.mul(output, inputs[i]);\n            }\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nMultiply.className = 'Multiply';\nserialization.registerClass(Multiply);\n/**\n * Calculate the element-wise product of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Multiply` layer, by using no input argument\n *    or a single configuration argument. The resultant `Multiply` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const multiplyLayer = tf.layers.multiply();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = multiplyLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.multiply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.multiply([input1, input2]).print();\n * // Gives [[10, 40], [90, 160]].\n *\n */\nexport function multiply(config) {\n    if (Array.isArray(config)) {\n        const layer = new Multiply({});\n        return layer.apply(config);\n    }\n    else {\n        return new Multiply(config);\n    }\n}\nexport class Average extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0].clone();\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.add(output, inputs[i]);\n            }\n            return tfc.mul(1 / inputs.length, output);\n        });\n    }\n}\n/** @nocollapse */\nAverage.className = 'Average';\nserialization.registerClass(Average);\n/**\n * Calculate the element-wise arithmetic mean of inputs, which all have the same\n * shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Average` layer, by using no input argument\n *    or a single configuration argument. The resultant `Average` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const averageLayer = tf.layers.average();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = averageLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.average([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.average([input1, input2]).print();\n * // Gives [[5.5, 11], [16.5, 22]].\n *\n */\nexport function average(config) {\n    if (Array.isArray(config)) {\n        const layer = new Average({});\n        return layer.apply(config);\n    }\n    else {\n        return new Average(config);\n    }\n}\nexport class Maximum extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0];\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.maximum(output, inputs[i]);\n            }\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nMaximum.className = 'Maximum';\nserialization.registerClass(Maximum);\n/**\n * Calculate the element-wise maximum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Maximum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Maximum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const maximumLayer = tf.layers.maximum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = maximumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.maximum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.maximum([input1, input2]).print();\n * // Gives [[10, 20], [30, 40]].\n *\n */\nexport function maximum(config) {\n    if (Array.isArray(config)) {\n        const layer = new Maximum({});\n        return layer.apply(config);\n    }\n    else {\n        return new Maximum(config);\n    }\n}\nexport class Minimum extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0];\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.minimum(output, inputs[i]);\n            }\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nMinimum.className = 'Minimum';\nserialization.registerClass(Minimum);\n/**\n * Calculate the element-wise minimum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Minimum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Minimum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const minimumLayer = tf.layers.minimum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = minimumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.minimum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.minimum([input1, input2]).print();\n * // Gives [[1, 2], [3, 4]].\n *\n */\nexport function minimum(config) {\n    if (Array.isArray(config)) {\n        const layer = new Minimum({});\n        return layer.apply(config);\n    }\n    else {\n        return new Minimum(config);\n    }\n}\nexport class Concatenate extends Merge {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_AXIS = -1;\n        if (args == null) {\n            args = {};\n        }\n        this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n        this.supportsMasking = true;\n        this.reshapeRequired = false;\n    }\n    build(inputShape) {\n        // Used purely for shape validation.]\n        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) ||\n            inputShape.length === 1) {\n            throw new ValueError('A `Concatenate` layer should be called on a list of at least 2 ' +\n                'inputs');\n        }\n        inputShape = inputShape;\n        let allNoneShape = true;\n        for (const shape of inputShape) {\n            if (shape != null) {\n                allNoneShape = false;\n                break;\n            }\n        }\n        if (allNoneShape) {\n            return;\n        }\n        const shapeSet = [];\n        for (let i = 0; i < inputShape.length; ++i) {\n            const shapeWithoutConcatAxis = inputShape[i].slice();\n            shapeWithoutConcatAxis.splice(this.axis, 1);\n            let exists = false;\n            for (const shape of shapeSet) {\n                if (util.arraysEqual(shape, shapeWithoutConcatAxis)) {\n                    exists = true;\n                    break;\n                }\n            }\n            if (!exists) {\n                shapeSet.push(shapeWithoutConcatAxis);\n            }\n        }\n        if (shapeSet.length > 1) {\n            throw new ValueError('A `Concatenate` layer requires inputs with matching shapes ' +\n                'except for the concat axis. Got input shapes: ' +\n                JSON.stringify(inputShape));\n        }\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            return K.concatenate(inputs, this.axis);\n        });\n    }\n    computeOutputShape(inputShape) {\n        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {\n            throw new ValueError('A `Concatenate` layer should be called on a list of inputs.');\n        }\n        const inputShapes = inputShape;\n        const outputShape = inputShapes[0].slice();\n        const axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;\n        // Porting Note: the line above is because TypeScript doesn't support\n        //   negative indices.\n        for (const shape of inputShapes.slice(1)) {\n            if (outputShape[axis] == null || shape[axis] == null) {\n                outputShape[axis] = null;\n                break;\n            }\n            outputShape[axis] += shape[axis];\n        }\n        return outputShape;\n    }\n    computeMask(inputs, mask) {\n        if (mask == null) {\n            return null;\n        }\n        if (!Array.isArray(mask)) {\n            throw new ValueError('`mask` should be an array for Concatenate');\n        }\n        if (!Array.isArray(inputs)) {\n            throw new ValueError('`inputs` should be an array for Concatenate');\n        }\n        if (mask.length !== inputs.length) {\n            throw new ValueError(`Mismatch in the length of mask (${mask.length}) ` +\n                `and the legnth of inputs (${inputs.length})`);\n        }\n        return tfc.tidy(() => {\n            let allNullMasks = true;\n            mask.forEach(m => {\n                if (m != null) {\n                    allNullMasks = false;\n                    return;\n                }\n            });\n            if (allNullMasks) {\n                return null;\n            }\n            const outputMasks = [];\n            for (let i = 0; i < inputs.length; ++i) {\n                if (mask[i] == null) {\n                    // Input is unmasked. Append all 1's to masks.\n                    outputMasks.push(tfc.onesLike(inputs[i]).asType('bool'));\n                }\n                else if (mask[i].rank < inputs[i].rank) {\n                    // Mask is smaller than the input, expand it.\n                    outputMasks.push(tfc.expandDims(mask[i], -1));\n                }\n                else {\n                    outputMasks.push(mask[i]);\n                }\n            }\n            const concatenatedMasks = tfc.concat(outputMasks, this.axis);\n            return tfc.all(concatenatedMasks, -1, false);\n        });\n    }\n    getConfig() {\n        const config = {\n            'axis': this.axis,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nConcatenate.className = 'Concatenate';\nserialization.registerClass(Concatenate);\n/**\n * Concatenate an `Array` of inputs.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Concatenate` layer, by using no input argument\n *    or a single configuration argument. The resultant `Concatenate` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const concatLayer = tf.layers.concatenate();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = concatLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 7], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = tf.layers.concatenate([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\n * const input2 = tf.tensor2d([[10, 20], [30, 40]], [2, 2]);\n * tf.layers.concatenate([input1, input2]).print();\n * // Gives [[1, 2, 10, 20], [3, 4, 30, 40]].\n *\n */\nexport function concatenate(config) {\n    if (Array.isArray(config)) {\n        const layer = new Concatenate({});\n        return layer.apply(config);\n    }\n    else {\n        return new Concatenate(config);\n    }\n}\n/**\n * Interpretable potentially negative axis index.\n *\n * For example, given axis = -1, and dim = 3, this function will return 2.\n *\n * @param axis The axis index, may be a positive, zero or negative integer.\n * @param dim Total number of dimensions, a positive integer.\n * @returns A non-negative axis index equivalent to the input `axis`.\n */\nfunction interpretAxis(axis, dim) {\n    while (axis < 0) {\n        axis += dim;\n    }\n    return axis;\n}\nfunction batchDot(x, y, axes) {\n    if (x.shape.length > 3 || y.shape.length > 3) {\n        throw new NotImplementedError('batchDot is not implemented for tensors of 4D or higher rank yet');\n    }\n    tfc.util.assert(x.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, ` +\n        `but got ${x.shape.length}`);\n    tfc.util.assert(x.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, ` +\n        `but got ${y.shape.length}`);\n    if (typeof axes === 'number') {\n        axes = [axes, axes];\n    }\n    if (x.dtype === 'complex64' || y.dtype === 'complex64') {\n        throw new NotImplementedError('batchDot is not implemented for complex64-type Tensors yet.');\n    }\n    const xNDim = x.shape.length;\n    const yNDim = y.shape.length;\n    if (axes == null) {\n        // Behave like batchMatmul by default.\n        axes = [xNDim - 1, yNDim - 2];\n    }\n    const axesArray = axes;\n    return tfc.tidy(() => {\n        let diff;\n        if (xNDim > yNDim) {\n            diff = xNDim - yNDim;\n            const diffShape = [];\n            for (let i = 0; i < diff; ++i) {\n                diffShape.push(1);\n            }\n            y = y.reshape(y.shape.concat(diffShape));\n        }\n        else if (yNDim > xNDim) {\n            diff = yNDim - xNDim;\n            const diffShape = [];\n            for (let i = 0; i < diff; ++i) {\n                diffShape.push(1);\n            }\n            x = x.reshape(x.shape.concat(diffShape));\n        }\n        else {\n            diff = 0;\n        }\n        let out;\n        if (x.shape.length === 2 && y.shape.length === 2) {\n            if (axesArray[0] === axesArray[1]) {\n                out = x.mul(y).sum(axesArray[0]);\n            }\n            else {\n                out = x.transpose([1, 0]).mul(y).sum(axesArray[1]);\n            }\n        }\n        else {\n            const adjX = axesArray[0] !== x.shape.length - 1;\n            const adjY = axesArray[1] === y.shape.length - 1;\n            out = x.matMul(y, adjX, adjY);\n        }\n        if (diff > 0) {\n            let idx;\n            if (xNDim > yNDim) {\n                idx = xNDim + yNDim - 3;\n            }\n            else {\n                idx = xNDim - 1;\n            }\n            const squeezeAxes = [];\n            for (let i = idx; i < idx + diff; ++i) {\n                squeezeAxes.push(i);\n            }\n            out = out.squeeze(squeezeAxes);\n        }\n        if (out.shape.length === 1) {\n            out = out.expandDims(1);\n        }\n        return out;\n    });\n}\nexport class Dot extends Merge {\n    constructor(args) {\n        super(args);\n        this.axes = args.axes;\n        this.normalize = args.normalize == null ? false : args.normalize;\n        this.supportsMasking = true;\n        this.reshapeRequired = false;\n    }\n    build(inputShape) {\n        tfc.util.assert(Array.isArray(inputShape) && inputShape.length === 2 &&\n            Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');\n        const shape1 = inputShape[0];\n        const shape2 = inputShape[1];\n        if (shape1.length > 3 || shape2.length > 3) {\n            throw new NotImplementedError('Dot layer does not support tensors of 4D or higher rank yet.');\n        }\n        const axes = this.interpretAxes(shape1, shape2);\n        if (shape1[axes[0]] !== shape2[axes[1]]) {\n            throw new ValueError(`Dimension incompatibility: ` +\n                `${shape1[axes[0]]} !== ${shape2[axes[1]]}`);\n        }\n    }\n    mergeFunction(inputs) {\n        if (inputs.length !== 2) {\n            throw new ValueError('A `Dot` layer must be called on exactly 2 inputs, ' +\n                `but received ${inputs.length} input(s).`);\n        }\n        let x1 = inputs[0];\n        let x2 = inputs[1];\n        let axes;\n        if (!Array.isArray(this.axes)) {\n            axes = [\n                interpretAxis(this.axes, x1.shape.length),\n                interpretAxis(this.axes, x2.shape.length)\n            ];\n        }\n        else {\n            axes = this.axes.map((axis, i) => interpretAxis(axis, inputs[i].shape.length));\n        }\n        if (this.normalize) {\n            x1 = l2Normalize(x1, axes[0]);\n            x2 = l2Normalize(x2, axes[1]);\n        }\n        return batchDot(x1, x2, axes);\n    }\n    interpretAxes(shape1, shape2) {\n        let axes;\n        if (!Array.isArray(this.axes)) {\n            // `this.axes` is a single integer.\n            axes = [\n                interpretAxis(this.axes, shape1.length),\n                interpretAxis(this.axes, shape2.length)\n            ];\n        }\n        else {\n            // `this.axes` is an Array of integers.\n            axes = this.axes;\n        }\n        return axes;\n    }\n    computeOutputShape(inputShape) {\n        tfc.util.assert(Array.isArray(inputShape) && inputShape.length === 2 &&\n            Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');\n        const shape1 = inputShape[0].slice();\n        const shape2 = inputShape[1].slice();\n        if (shape1.length > 3 || shape2.length > 3) {\n            throw new NotImplementedError('Dot layer does not support tensors of 4D or higher rank yet.');\n        }\n        const axes = this.interpretAxes(shape1, shape2);\n        shape1.splice(axes[0], 1);\n        shape2.splice(axes[1], 1);\n        shape2.splice(0, 1);\n        const outputShape = shape1.concat(shape2);\n        if (outputShape.length === 1) {\n            outputShape.push(1);\n        }\n        return outputShape;\n    }\n    computeMask(inputs, mask) {\n        return null;\n    }\n    getConfig() {\n        const config = {\n            'axes': this.axes,\n            'normalize': this.normalize\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nDot.className = 'Dot';\nserialization.registerClass(Dot);\n// TODO(cais): Add functional interfaces for the merge layers.\n//# sourceMappingURL=merge.js.map"]},"metadata":{},"sourceType":"module"}