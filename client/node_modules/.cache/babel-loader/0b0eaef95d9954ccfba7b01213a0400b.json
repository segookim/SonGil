{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropFilter, TensorBuffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2DBackpropFilter(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      dy = inputs.dy;\n  var strides = attrs.strides,\n      pad = attrs.pad,\n      dataFormat = attrs.dataFormat,\n      dimRoundingMode = attrs.dimRoundingMode,\n      filterShape = attrs.filterShape;\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n  var $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  var convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode, false\n  /* depthwise */\n  , $dataFormat);\n  var strideHeight = convInfo.strideHeight,\n      strideWidth = convInfo.strideWidth,\n      filterHeight = convInfo.filterHeight,\n      filterWidth = convInfo.filterWidth;\n  var isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  var dW = new TensorBuffer(convInfo.filterShape, 'float32');\n  var leftPad = convInfo.padInfo.left;\n  var topPad = convInfo.padInfo.top;\n  var xVals = backend.data.get(x.dataId).values;\n  var dyVals = backend.data.get(dy.dataId).values;\n  var xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  var dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (var wR = 0; wR < filterHeight; ++wR) {\n    var yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    var yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (var wC = 0; wC < filterWidth; ++wC) {\n      var yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      var yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          var dotProd = 0;\n\n          for (var b = 0; b < convInfo.batchSize; ++b) {\n            for (var yR = yRMin; yR < yRMax; ++yR) {\n              var xR = wR + yR * strideHeight - topPad;\n\n              for (var yC = yCMin; yC < yCMax; ++yC) {\n                var xC = wC + yC * strideWidth - leftPad;\n\n                if (isChannelsLast) {\n                  dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                } else {\n                  dotProd += xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);\n                }\n              }\n            }\n          }\n\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\nexport var conv2DBackpropFilterConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter\n};","map":{"version":3,"sources":["../../src/kernels/Conv2DBackpropFilter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropFilter, TensorBuffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2DBackpropFilter(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, pad, dataFormat, dimRoundingMode, filterShape } = attrs;\n    assertNotComplex([x, dy], 'conv2dBackpropFilter');\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    const { strideHeight, strideWidth, filterHeight, filterWidth } = convInfo;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    const xVals = backend.data.get(x.dataId).values;\n    const dyVals = backend.data.get(dy.dataId).values;\n    const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n    const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n    for (let wR = 0; wR < filterHeight; ++wR) {\n        const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n        const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n        for (let wC = 0; wC < filterWidth; ++wC) {\n            const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n            const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    let dotProd = 0;\n                    for (let b = 0; b < convInfo.batchSize; ++b) {\n                        for (let yR = yRMin; yR < yRMax; ++yR) {\n                            const xR = wR + yR * strideHeight - topPad;\n                            for (let yC = yCMin; yC < yCMax; ++yC) {\n                                const xC = wC + yC * strideWidth - leftPad;\n                                if (isChannelsLast) {\n                                    dotProd += xBuf.get(b, xR, xC, d1) *\n                                        dyBuf.get(b, yR, yC, d2);\n                                }\n                                else {\n                                    dotProd += xBuf.get(b, d1, xR, xC) *\n                                        dyBuf.get(b, d2, yR, yC);\n                                }\n                            }\n                        }\n                    }\n                    dW.set(dotProd, wR, wC, d1, d2);\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\nexport const conv2DBackpropFilterConfig = {\n    kernelName: Conv2DBackpropFilter,\n    backendName: 'cpu',\n    kernelFunc: conv2DBackpropFilter\n};\n//# sourceMappingURL=Conv2DBackpropFilter.js.map"]},"metadata":{},"sourceType":"module"}