{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Padding Layers.\n */\n// Porting Note: In Python Keras, the padding layers are in convolutional.py,\n//   but we decided to put them in a separate file (padding.ts) for clarity.\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Pads the middle dimension of a 3D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of 2 integers, how many zeros to add at the start and\n *   end of the middle dimension (i.e., dimension 1).\n * @return A padded 3D `tf.Tensor`.\n */\n\nexport function temporalPadding(x, padding) {\n  return tidy(() => {\n    if (x.rank !== 3) {\n      throw new ValueError(`temporalPadding expects input tensor to be 3-D, but received a ` + `${x.rank}-D tensor.`);\n    }\n\n    if (padding == null) {\n      padding = [1, 1];\n    }\n\n    if (padding.length !== 2) {\n      throw new ValueError(`temporalPadding expects input padding pattern to be a length-2 ` + `array, but received a length-${padding.length} array.`);\n    }\n\n    const pattern = [[0, 0], padding, [0, 0]];\n    return tfc.pad(x, pattern);\n  });\n}\n/**\n * Pads the 2nd and 3rd dimensions of a 4D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of two `Array`s, each of which is an `Array` of two\n *   integers. The amount of padding at the beginning and end of the 2nd and 3rd\n *   dimensions, respectively.\n * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.\n * @return Padded 4D `tf.Tensor`.\n */\n\nexport function spatial2dPadding(x, padding, dataFormat) {\n  return tidy(() => {\n    if (x.rank !== 4) {\n      throw new ValueError(`temporalPadding expects input tensor to be 4-D, but received a ` + `${x.rank}-D tensor.`);\n    }\n\n    if (padding == null) {\n      padding = [[1, 1], [1, 1]];\n    }\n\n    if (padding.length !== 2 || padding[0].length !== 2 || padding[1].length !== 2) {\n      throw new ValueError('spatial2dPadding expects `padding` to be an Array of two Arrays, ' + 'each of which is an Array of two integers.');\n    }\n\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    if (dataFormat !== 'channelsLast' && dataFormat !== 'channelsFirst') {\n      throw new ValueError(`Unknown data format: ${dataFormat}. ` + `Supported data formats are 'channelsLast' and 'channelsFirst.`);\n    }\n\n    let pattern;\n\n    if (dataFormat === 'channelsFirst') {\n      pattern = [[0, 0], [0, 0], padding[0], padding[1]];\n    } else {\n      pattern = [[0, 0], padding[0], padding[1], [0, 0]];\n    }\n\n    return tfc.pad(x, pattern);\n  });\n}\nexport class ZeroPadding2D extends Layer {\n  constructor(args) {\n    if (args == null) {\n      args = {};\n    }\n\n    super(args);\n    this.dataFormat = args.dataFormat == null ? imageDataFormat() : args.dataFormat; // TODO(cais): Maybe refactor the following logic surrounding `padding`\n    //   into a helper method.\n\n    if (args.padding == null) {\n      this.padding = [[1, 1], [1, 1]];\n    } else if (typeof args.padding === 'number') {\n      this.padding = [[args.padding, args.padding], [args.padding, args.padding]];\n    } else {\n      args.padding = args.padding;\n\n      if (args.padding.length !== 2) {\n        throw new ValueError(`ZeroPadding2D expects padding to be a length-2 array, but ` + `received a length-${args.padding.length} array.`);\n      }\n\n      let heightPadding;\n      let widthPadding;\n\n      if (typeof args.padding[0] === 'number') {\n        heightPadding = [args.padding[0], args.padding[0]];\n        widthPadding = [args.padding[1], args.padding[1]];\n      } else {\n        args.padding = args.padding;\n\n        if (args.padding[0].length !== 2) {\n          throw new ValueError(`ZeroPadding2D expects height padding to be a length-2 array, ` + `but received a length-${args.padding[0].length} array.`);\n        }\n\n        heightPadding = args.padding[0];\n\n        if (args.padding[1].length !== 2) {\n          throw new ValueError(`ZeroPadding2D expects width padding to be a length-2 array, ` + `but received a length-${args.padding[1].length} array.`);\n        }\n\n        widthPadding = args.padding[1];\n      }\n\n      this.padding = [heightPadding, widthPadding];\n    }\n\n    this.inputSpec = [new InputSpec({\n      ndim: 4\n    })];\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    let rows;\n    let cols;\n\n    if (this.dataFormat === 'channelsFirst') {\n      if (inputShape[2] != null && inputShape[2] >= 0) {\n        rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];\n      } else {\n        rows = null;\n      }\n\n      if (inputShape[3] != null && inputShape[3] >= 0) {\n        cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];\n      } else {\n        cols = null;\n      }\n\n      return [inputShape[0], inputShape[1], rows, cols];\n    } else {\n      if (inputShape[1] != null && inputShape[1] >= 0) {\n        rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];\n      } else {\n        rows = null;\n      }\n\n      if (inputShape[2] != null && inputShape[2] >= 0) {\n        cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];\n      } else {\n        cols = null;\n      }\n\n      return [inputShape[0], rows, cols, inputShape[3]];\n    }\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => spatial2dPadding(getExactlyOneTensor(inputs), this.padding, this.dataFormat));\n  }\n\n  getConfig() {\n    const config = {\n      padding: this.padding,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nZeroPadding2D.className = 'ZeroPadding2D';\nserialization.registerClass(ZeroPadding2D);","map":{"version":3,"sources":["../../src/layers/padding.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Padding Layers.\n */\n// Porting Note: In Python Keras, the padding layers are in convolutional.py,\n//   but we decided to put them in a separate file (padding.ts) for clarity.\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Pads the middle dimension of a 3D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of 2 integers, how many zeros to add at the start and\n *   end of the middle dimension (i.e., dimension 1).\n * @return A padded 3D `tf.Tensor`.\n */\nexport function temporalPadding(x, padding) {\n    return tidy(() => {\n        if (x.rank !== 3) {\n            throw new ValueError(`temporalPadding expects input tensor to be 3-D, but received a ` +\n                `${x.rank}-D tensor.`);\n        }\n        if (padding == null) {\n            padding = [1, 1];\n        }\n        if (padding.length !== 2) {\n            throw new ValueError(`temporalPadding expects input padding pattern to be a length-2 ` +\n                `array, but received a length-${padding.length} array.`);\n        }\n        const pattern = [[0, 0], padding, [0, 0]];\n        return tfc.pad(x, pattern);\n    });\n}\n/**\n * Pads the 2nd and 3rd dimensions of a 4D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of two `Array`s, each of which is an `Array` of two\n *   integers. The amount of padding at the beginning and end of the 2nd and 3rd\n *   dimensions, respectively.\n * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.\n * @return Padded 4D `tf.Tensor`.\n */\nexport function spatial2dPadding(x, padding, dataFormat) {\n    return tidy(() => {\n        if (x.rank !== 4) {\n            throw new ValueError(`temporalPadding expects input tensor to be 4-D, but received a ` +\n                `${x.rank}-D tensor.`);\n        }\n        if (padding == null) {\n            padding = [[1, 1], [1, 1]];\n        }\n        if (padding.length !== 2 || padding[0].length !== 2 ||\n            padding[1].length !== 2) {\n            throw new ValueError('spatial2dPadding expects `padding` to be an Array of two Arrays, ' +\n                'each of which is an Array of two integers.');\n        }\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        if (dataFormat !== 'channelsLast' && dataFormat !== 'channelsFirst') {\n            throw new ValueError(`Unknown data format: ${dataFormat}. ` +\n                `Supported data formats are 'channelsLast' and 'channelsFirst.`);\n        }\n        let pattern;\n        if (dataFormat === 'channelsFirst') {\n            pattern = [[0, 0], [0, 0], padding[0], padding[1]];\n        }\n        else {\n            pattern = [[0, 0], padding[0], padding[1], [0, 0]];\n        }\n        return tfc.pad(x, pattern);\n    });\n}\nexport class ZeroPadding2D extends Layer {\n    constructor(args) {\n        if (args == null) {\n            args = {};\n        }\n        super(args);\n        this.dataFormat =\n            args.dataFormat == null ? imageDataFormat() : args.dataFormat;\n        // TODO(cais): Maybe refactor the following logic surrounding `padding`\n        //   into a helper method.\n        if (args.padding == null) {\n            this.padding = [[1, 1], [1, 1]];\n        }\n        else if (typeof args.padding === 'number') {\n            this.padding =\n                [[args.padding, args.padding], [args.padding, args.padding]];\n        }\n        else {\n            args.padding = args.padding;\n            if (args.padding.length !== 2) {\n                throw new ValueError(`ZeroPadding2D expects padding to be a length-2 array, but ` +\n                    `received a length-${args.padding.length} array.`);\n            }\n            let heightPadding;\n            let widthPadding;\n            if (typeof args.padding[0] === 'number') {\n                heightPadding = [args.padding[0], args.padding[0]];\n                widthPadding = [args.padding[1], args.padding[1]];\n            }\n            else {\n                args.padding = args.padding;\n                if (args.padding[0].length !== 2) {\n                    throw new ValueError(`ZeroPadding2D expects height padding to be a length-2 array, ` +\n                        `but received a length-${args.padding[0].length} array.`);\n                }\n                heightPadding = args.padding[0];\n                if (args.padding[1].length !== 2) {\n                    throw new ValueError(`ZeroPadding2D expects width padding to be a length-2 array, ` +\n                        `but received a length-${args.padding[1].length} array.`);\n                }\n                widthPadding = args.padding[1];\n            }\n            this.padding = [heightPadding, widthPadding];\n        }\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        let rows;\n        let cols;\n        if (this.dataFormat === 'channelsFirst') {\n            if (inputShape[2] != null && inputShape[2] >= 0) {\n                rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];\n            }\n            else {\n                rows = null;\n            }\n            if (inputShape[3] != null && inputShape[3] >= 0) {\n                cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];\n            }\n            else {\n                cols = null;\n            }\n            return [inputShape[0], inputShape[1], rows, cols];\n        }\n        else {\n            if (inputShape[1] != null && inputShape[1] >= 0) {\n                rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];\n            }\n            else {\n                rows = null;\n            }\n            if (inputShape[2] != null && inputShape[2] >= 0) {\n                cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];\n            }\n            else {\n                cols = null;\n            }\n            return [inputShape[0], rows, cols, inputShape[3]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => spatial2dPadding(getExactlyOneTensor(inputs), this.padding, this.dataFormat));\n    }\n    getConfig() {\n        const config = {\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nZeroPadding2D.className = 'ZeroPadding2D';\nserialization.registerClass(ZeroPadding2D);\n//# sourceMappingURL=padding.js.map"]},"metadata":{},"sourceType":"module"}