{"ast":null,"code":"import _classCallCheck from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as util from './util';\nexport var Profiler = /*#__PURE__*/function () {\n  function Profiler(backendTimer, logger) {\n    _classCallCheck(this, Profiler);\n\n    this.backendTimer = backendTimer;\n    this.logger = logger;\n\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  _createClass(Profiler, [{\n    key: \"profileKernel\",\n    value: function profileKernel(kernelName, inputs, f) {\n      var outputs;\n\n      var holdResultWrapperFn = function holdResultWrapperFn() {\n        outputs = f();\n      };\n\n      var timer;\n      var start = util.now();\n\n      if (this.backendTimer.timerAvailable()) {\n        timer = this.backendTimer.time(holdResultWrapperFn);\n      } else {\n        holdResultWrapperFn();\n        outputs.map(function (output) {\n          return output.dataSync();\n        });\n        timer = Promise.resolve({\n          kernelMs: util.now() - start\n        });\n      }\n\n      if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n        var _loop = function _loop(i) {\n          var output = outputs[i]; // Dangling promise here because we don't want to propagate up\n          // asynchronicity.\n\n          output.data().then(function (tensorVals) {\n            checkComputationForErrors(tensorVals, output.dtype, kernelName);\n          });\n        };\n\n        for (var i = 0; i < outputs.length; i++) {\n          _loop(i);\n        }\n      }\n\n      var kernelProfile = {\n        kernelName: kernelName,\n        outputs: outputs,\n        inputs: inputs,\n        timeMs: timer.then(function (timing) {\n          return timing.kernelMs;\n        }),\n        extraInfo: timer.then(function (timing) {\n          return timing.getExtraProfileInfo != null ? timing.getExtraProfileInfo() : '';\n        })\n      };\n      return kernelProfile;\n    }\n  }, {\n    key: \"logKernelProfile\",\n    value: function logKernelProfile(kernelProfile) {\n      var _this = this;\n\n      var kernelName = kernelProfile.kernelName,\n          outputs = kernelProfile.outputs,\n          timeMs = kernelProfile.timeMs,\n          inputs = kernelProfile.inputs,\n          extraInfo = kernelProfile.extraInfo;\n      outputs.forEach(function (result) {\n        Promise.all([result.data(), timeMs, extraInfo]).then(function (valueContainer) {\n          _this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n        });\n      });\n    }\n  }]);\n\n  return Profiler;\n}();\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n\n  for (var i = 0; i < vals.length; i++) {\n    var num = vals[i];\n\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(\"Found \".concat(num, \" in the result of '\").concat(kernelName, \"'\"));\n      return true;\n    }\n  }\n\n  return false;\n}\nexport var Logger = /*#__PURE__*/function () {\n  function Logger() {\n    _classCallCheck(this, Logger);\n  }\n\n  _createClass(Logger, [{\n    key: \"logKernelProfile\",\n    value: function logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n      var time = typeof timeMs === 'number' ? util.rightPad(\"\".concat(timeMs, \"ms\"), 9) : timeMs['error'];\n      var paddedName = util.rightPad(name, 25);\n      var rank = result.rank;\n      var size = result.size;\n      var shape = util.rightPad(result.shape.toString(), 14);\n      var inputShapesDescription = '';\n\n      for (var _name in inputs) {\n        var input = inputs[_name];\n\n        if (input != null) {\n          // The input might be a non-tensor (e.g HTMLImageElement), in which case\n          // we claim the output shape as input shape.\n          var inputShape = input.shape || result.shape;\n          var inputRank = inputShape.length;\n          inputShapesDescription += \"\".concat(_name, \": \").concat(inputRank, \"D \").concat(inputRank > 0 ? inputShape : '', \" \");\n        }\n      }\n\n      console.log(\"%c\".concat(paddedName, \"\\t%c\").concat(time, \"\\t%c\").concat(rank, \"D \").concat(shape, \"\\t%c\").concat(size, \"\\t%c\").concat(inputShapesDescription, \"\\t%c\").concat(extraInfo), 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n    }\n  }]);\n\n  return Logger;\n}();","map":{"version":3,"sources":["../src/profiler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as util from './util';\nexport class Profiler {\n    constructor(backendTimer, logger) {\n        this.backendTimer = backendTimer;\n        this.logger = logger;\n        if (logger == null) {\n            this.logger = new Logger();\n        }\n    }\n    profileKernel(kernelName, inputs, f) {\n        let outputs;\n        const holdResultWrapperFn = () => {\n            outputs = f();\n        };\n        let timer;\n        const start = util.now();\n        if (this.backendTimer.timerAvailable()) {\n            timer = this.backendTimer.time(holdResultWrapperFn);\n        }\n        else {\n            holdResultWrapperFn();\n            outputs.map(output => output.dataSync());\n            timer = Promise.resolve({ kernelMs: util.now() - start });\n        }\n        if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n            for (let i = 0; i < outputs.length; i++) {\n                const output = outputs[i];\n                // Dangling promise here because we don't want to propagate up\n                // asynchronicity.\n                output.data().then(tensorVals => {\n                    checkComputationForErrors(tensorVals, output.dtype, kernelName);\n                });\n            }\n        }\n        const kernelProfile = {\n            kernelName,\n            outputs,\n            inputs,\n            timeMs: timer.then(timing => timing.kernelMs),\n            extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ?\n                timing.getExtraProfileInfo() :\n                '')\n        };\n        return kernelProfile;\n    }\n    logKernelProfile(kernelProfile) {\n        const { kernelName, outputs, timeMs, inputs, extraInfo } = kernelProfile;\n        outputs.forEach(result => {\n            Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n                this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n            });\n        });\n    }\n}\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n    if (dtype !== 'float32') {\n        // Only floating point computations will generate NaN values\n        return false;\n    }\n    for (let i = 0; i < vals.length; i++) {\n        const num = vals[i];\n        if (isNaN(num) || !isFinite(num)) {\n            // Throwing custom exception so behavior is testable.\n            console.warn(`Found ${num} in the result of '${kernelName}'`);\n            return true;\n        }\n    }\n    return false;\n}\nexport class Logger {\n    logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n        const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\n            timeMs['error'];\n        const paddedName = util.rightPad(name, 25);\n        const rank = result.rank;\n        const size = result.size;\n        const shape = util.rightPad(result.shape.toString(), 14);\n        let inputShapesDescription = '';\n        for (const name in inputs) {\n            const input = inputs[name];\n            if (input != null) {\n                // The input might be a non-tensor (e.g HTMLImageElement), in which case\n                // we claim the output shape as input shape.\n                const inputShape = input.shape || result.shape;\n                const inputRank = inputShape.length;\n                inputShapesDescription +=\n                    `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n            }\n        }\n        console.log(`%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${inputShapesDescription}\\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n    }\n}\n//# sourceMappingURL=profiler.js.map"]},"metadata":{},"sourceType":"module"}