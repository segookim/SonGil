{"ast":null,"code":"import _classCallCheck from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var Dilation2DProgram = function Dilation2DProgram(convInfo) {\n  _classCallCheck(this, Dilation2DProgram);\n\n  this.variableNames = ['x', 'W'];\n  this.outputShape = convInfo.outShape;\n  var inHeight = convInfo.inHeight,\n      inWidth = convInfo.inWidth,\n      padInfo = convInfo.padInfo,\n      strideHeight = convInfo.strideHeight,\n      strideWidth = convInfo.strideWidth,\n      filterHeight = convInfo.filterHeight,\n      filterWidth = convInfo.filterWidth,\n      dilationHeight = convInfo.dilationHeight,\n      dilationWidth = convInfo.dilationWidth;\n  var padTop = padInfo.top,\n      padLeft = padInfo.left;\n  this.userCode = \"\\n      const ivec2 strides = ivec2(\".concat(strideHeight, \", \").concat(strideWidth, \");\\n      const ivec2 pads = ivec2(\").concat(padTop, \", \").concat(padLeft, \");\\n      const float neg_infinity = -3.4e38;\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d1 = coords.w;\\n        ivec2 outTopLeftCorner =\\n            coords.yz * strides - pads;\\n        int hBeg = outTopLeftCorner.x;\\n        int wBeg = outTopLeftCorner.y;\\n\\n        float curVal = neg_infinity;\\n        for (int h = 0; h < \").concat(filterHeight, \"; h++) {\\n          int hIn = hBeg + h * \").concat(dilationHeight, \";\\n\\n          if (hIn >= 0 && hIn < \").concat(inHeight, \") {\\n            for (int w = 0; w < \").concat(filterWidth, \"; w++) {\\n              int wIn = wBeg + w * \").concat(dilationWidth, \";\\n\\n              if (wIn >= 0 && wIn < \").concat(inWidth, \") {\\n                float xVal = getX(batch, hIn, wIn, d1);\\n                float wVal = getW(h, w, d1);\\n\\n                float val = xVal + wVal;\\n                if (val > curVal) {\\n                  curVal = val;\\n                }\\n              }\\n            }\\n          }\\n        }\\n\\n        float result = curVal;\\n        setOutput(result);\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/dilation_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAKH,WAAa,iBAAb,GAKE,2BAAY,QAAZ,EAA6C;AAAA;;AAJ7C,OAAA,aAAA,GAAgB,CAAC,GAAD,EAAM,GAAN,CAAhB;AAKE,OAAK,WAAL,GAAmB,QAAQ,CAAC,QAA5B;AAD2C,MAIzC,QAJyC,GAavC,QAbuC,CAIzC,QAJyC;AAAA,MAKzC,OALyC,GAavC,QAbuC,CAKzC,OALyC;AAAA,MAMzC,OANyC,GAavC,QAbuC,CAMzC,OANyC;AAAA,MAOzC,YAPyC,GAavC,QAbuC,CAOzC,YAPyC;AAAA,MAQzC,WARyC,GAavC,QAbuC,CAQzC,WARyC;AAAA,MASzC,YATyC,GAavC,QAbuC,CASzC,YATyC;AAAA,MAUzC,WAVyC,GAavC,QAbuC,CAUzC,WAVyC;AAAA,MAWzC,cAXyC,GAavC,QAbuC,CAWzC,cAXyC;AAAA,MAYzC,aAZyC,GAavC,QAbuC,CAYzC,aAZyC;AAAA,MAe/B,MAf+B,GAeN,OAfM,CAepC,GAfoC;AAAA,MAejB,OAfiB,GAeN,OAfM,CAevB,IAfuB;AAiB3C,OAAK,QAAL,iDACgC,YADhC,eACiD,WADjD,gDAE6B,MAF7B,eAEwC,OAFxC,wZAe0B,YAf1B,sDAgB6B,cAhB7B,kDAkB8B,QAlB9B,kDAmB8B,WAnB9B,0DAoBiC,aApBjC,sDAsBkC,OAtBlC;AAuCD,CA7DH","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Dilation2DProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const { inHeight, inWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth } = convInfo;\n        const { top: padTop, left: padLeft } = padInfo;\n        this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=dilation_gpu.js.map"]},"metadata":{},"sourceType":"module"}