{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FileChunkIterator } from './file_chunk_iterator';\n/**\n * Provide a stream of chunks from a URL.\n *\n * Note this class first downloads the entire file into memory before providing\n * the first element from the stream.  This is because the Fetch API does not\n * yet reliably provide a reader stream for the response body.\n */\n\nexport async function urlChunkIterator(url, options = {}) {\n  let urlString;\n  let requestInit;\n\n  if (typeof url === 'string') {\n    urlString = url;\n  } else {\n    urlString = url.url;\n    requestInit = getRequestInitFromRequest(url);\n  }\n\n  const response = await util.fetch(urlString, requestInit);\n\n  if (response.ok) {\n    const uint8Array = new Uint8Array(await response.arrayBuffer());\n    return new FileChunkIterator(uint8Array, options);\n  } else {\n    throw new Error(response.statusText);\n  }\n} // Generate RequestInit from Request to match tf.util.fetch signature.\n\nconst getRequestInitFromRequest = request => {\n  const init = {\n    method: request.method,\n    headers: request.headers,\n    body: request.body,\n    mode: request.mode,\n    credentials: request.credentials,\n    cache: request.cache,\n    redirect: request.redirect,\n    referrer: request.referrer,\n    integrity: request.integrity\n  };\n  return init;\n};","map":{"version":3,"sources":["../../src/iterators/url_chunk_iterator.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,IAAR,QAAmB,uBAAnB;AACA,SAAQ,iBAAR,QAA0D,uBAA1D;AAEA;;;;;;AAMG;;AACH,OAAO,eAAe,gBAAf,CACH,GADG,EACe,OAAA,GAAoC,EADnD,EACqD;AAC1D,MAAI,SAAJ;AACA,MAAI,WAAJ;;AACA,MAAK,OAAO,GAAR,KAAiB,QAArB,EAA+B;AAC7B,IAAA,SAAS,GAAG,GAAZ;AACD,GAFD,MAEO;AACL,IAAA,SAAS,GAAI,GAAe,CAAC,GAA7B;AACA,IAAA,WAAW,GAAG,yBAAyB,CAAC,GAAD,CAAvC;AACD;;AACD,QAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAL,CAAW,SAAX,EAAsB,WAAtB,CAAvB;;AACA,MAAI,QAAQ,CAAC,EAAb,EAAiB;AACf,UAAM,UAAU,GAAG,IAAI,UAAJ,CAAe,MAAM,QAAQ,CAAC,WAAT,EAArB,CAAnB;AACA,WAAO,IAAI,iBAAJ,CAAsB,UAAtB,EAAkC,OAAlC,CAAP;AACD,GAHD,MAGO;AACL,UAAM,IAAI,KAAJ,CAAU,QAAQ,CAAC,UAAnB,CAAN;AACD;AACF,C,CAED;;AACA,MAAM,yBAAyB,GAAI,OAAD,IAAqB;AACrD,QAAM,IAAI,GAAG;AACX,IAAA,MAAM,EAAE,OAAO,CAAC,MADL;AAEX,IAAA,OAAO,EAAE,OAAO,CAAC,OAFN;AAGX,IAAA,IAAI,EAAE,OAAO,CAAC,IAHH;AAIX,IAAA,IAAI,EAAE,OAAO,CAAC,IAJH;AAKX,IAAA,WAAW,EAAE,OAAO,CAAC,WALV;AAMX,IAAA,KAAK,EAAE,OAAO,CAAC,KANJ;AAOX,IAAA,QAAQ,EAAE,OAAO,CAAC,QAPP;AAQX,IAAA,QAAQ,EAAE,OAAO,CAAC,QARP;AASX,IAAA,SAAS,EAAE,OAAO,CAAC;AATR,GAAb;AAWA,SAAO,IAAP;AACD,CAbD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FileChunkIterator } from './file_chunk_iterator';\n/**\n * Provide a stream of chunks from a URL.\n *\n * Note this class first downloads the entire file into memory before providing\n * the first element from the stream.  This is because the Fetch API does not\n * yet reliably provide a reader stream for the response body.\n */\nexport async function urlChunkIterator(url, options = {}) {\n    let urlString;\n    let requestInit;\n    if ((typeof url) === 'string') {\n        urlString = url;\n    }\n    else {\n        urlString = url.url;\n        requestInit = getRequestInitFromRequest(url);\n    }\n    const response = await util.fetch(urlString, requestInit);\n    if (response.ok) {\n        const uint8Array = new Uint8Array(await response.arrayBuffer());\n        return new FileChunkIterator(uint8Array, options);\n    }\n    else {\n        throw new Error(response.statusText);\n    }\n}\n// Generate RequestInit from Request to match tf.util.fetch signature.\nconst getRequestInitFromRequest = (request) => {\n    const init = {\n        method: request.method,\n        headers: request.headers,\n        body: request.body,\n        mode: request.mode,\n        credentials: request.credentials,\n        cache: request.cache,\n        redirect: request.redirect,\n        referrer: request.referrer,\n        integrity: request.integrity,\n    };\n    return init;\n};\n//# sourceMappingURL=url_chunk_iterator.js.map"]},"metadata":{},"sourceType":"module"}