{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { device_util, env } from '@tensorflow/tfjs-core';\nimport { getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled } from './webgl_util';\nvar ENV = env();\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\n\nENV.registerFlag('HAS_WEBGL', function () {\n  return ENV.getNumber('WEBGL_VERSION') > 0;\n});\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\n\nENV.registerFlag('WEBGL_VERSION', function () {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n\n  return 0;\n});\n/** Whether to check for numerical representation problems. */\n\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', function () {\n  return false;\n});\nENV.registerFlag('WEBGL_BUFFER_SUPPORTED', function () {\n  return ENV.get('WEBGL_VERSION') === 2;\n});\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\n\nENV.registerFlag('WEBGL_CPU_FORWARD', function () {\n  return true;\n});\n/** Whether the WebGL backend will always use f16 textures for rendering. */\n\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', function () {\n  return false;\n});\n/** Whether to turn all packing related flags on. */\n\nENV.registerFlag('WEBGL_PACK', function () {\n  return ENV.getBool('HAS_WEBGL');\n});\n/** Whether we will pack the batchnormalization op. */\n\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** Whether we will pack the clip op. */\n\nENV.registerFlag('WEBGL_PACK_CLIP', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** Whether we will pack the depthwise conv op. */\n// TODO: https://github.com/tensorflow/tfjs/issues/1679\n\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', function () {\n  return false;\n});\n/** Whether we will pack binary ops. */\n\nENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** Whether we will pack unary ops. */\n\nENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** Whether we will pack array ops. */\n\nENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** Whether we will pack image ops. */\n\nENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** Whether we will pack reduce ops. */\n\nENV.registerFlag('WEBGL_PACK_REDUCE', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** Whether packed WebGL kernels lazily unpack their outputs. */\n\nENV.registerFlag('WEBGL_LAZILY_UNPACK', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** Whether we will use the im2col algorithm to speed up convolutions. */\n\nENV.registerFlag('WEBGL_CONV_IM2COL', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** The maximum texture dimension. */\n\nENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', function () {\n  return getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION'));\n});\n/** The maximum texture dimension. */\n\nENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', function () {\n  return getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION'));\n});\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\n\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', function () {\n  var webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\n\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', function () {\n  return ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 && !device_util.isMobile();\n});\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\n\nENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', function () {\n  return isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION'));\n});\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\n\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', function () {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ? false : ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\n\nENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', function () {\n  return isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION'));\n});\n/** Whether the fence API is available. */\n\nENV.registerFlag('WEBGL_FENCE_API_ENABLED', function () {\n  return isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION'));\n});\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\n\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', function () {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  var useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\n\nENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', function () {\n  return -1;\n}, function (threshold) {\n  if (threshold < 0 && threshold !== -1) {\n    throw new Error(\"WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never \" + \"delete) or at least 0, but got \".concat(threshold, \".\"));\n  }\n});","map":{"version":3,"sources":["../src/flags_webgl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { device_util, env } from '@tensorflow/tfjs-core';\nimport { getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled } from './webgl_util';\nconst ENV = env();\n/**\n * This file contains WebGL-specific flag registrations.\n */\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n    if (isWebGLVersionEnabled(2)) {\n        return 2;\n    }\n    else if (isWebGLVersionEnabled(1)) {\n        return 1;\n    }\n    return 0;\n});\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\nENV.registerFlag('WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the depthwise conv op. */\n// TODO: https://github.com/tensorflow/tfjs/issues/1679\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => false);\n/** Whether we will pack binary ops. */\nENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack unary ops. */\nENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack array ops. */\nENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack image ops. */\nENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n    const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n    if (webGLVersion === 0) {\n        return 0;\n    }\n    return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n    !device_util.isMobile());\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n    return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n        false :\n        ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n/** Whether the fence API is available. */\nENV.registerFlag('WEBGL_FENCE_API_ENABLED', () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n    // Use uniform uploads only when 32bit floats are supported. In\n    // 16bit\n    // environments there are problems with comparing a 16bit texture value\n    // with a 32bit uniform value.\n    const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n    return useUniforms ? 4 : 0;\n});\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', () => {\n    return -1;\n}, threshold => {\n    if (threshold < 0 && threshold !== -1) {\n        throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n    }\n});\n//# sourceMappingURL=flags_webgl.js.map"]},"metadata":{},"sourceType":"module"}