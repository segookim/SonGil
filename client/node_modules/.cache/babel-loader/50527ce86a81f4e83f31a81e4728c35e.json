{"ast":null,"code":"import _classCallCheck from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Noise Layers.\n */\nimport { greaterEqual, randomUniform, serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { Layer } from '../engine/topology';\nimport { getExactlyOneTensor } from '../utils/types_utils';\nexport var GaussianNoise = /*#__PURE__*/function (_Layer) {\n  _inherits(GaussianNoise, _Layer);\n\n  var _super = _createSuper(GaussianNoise);\n\n  function GaussianNoise(args) {\n    var _this;\n\n    _classCallCheck(this, GaussianNoise);\n\n    _this = _super.call(this, args);\n    _this.supportsMasking = true;\n    _this.stddev = args.stddev;\n    return _this;\n  }\n\n  _createClass(GaussianNoise, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      return inputShape;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var baseConfig = _get(_getPrototypeOf(GaussianNoise.prototype), \"getConfig\", this).call(this);\n\n      var config = {\n        stddev: this.stddev\n      };\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this2 = this;\n\n      return tidy(function () {\n        _this2.invokeCallHook(inputs, kwargs);\n\n        var input = getExactlyOneTensor(inputs);\n\n        var noised = function noised() {\n          return K.randomNormal(input.shape, 0, _this2.stddev).add(input);\n        };\n\n        var output = K.inTrainPhase(noised, function () {\n          return input;\n        }, kwargs['training'] || false);\n        return output;\n      });\n    }\n  }]);\n\n  return GaussianNoise;\n}(Layer);\n/** @nocollapse */\n\nGaussianNoise.className = 'GaussianNoise';\nserialization.registerClass(GaussianNoise);\nexport var GaussianDropout = /*#__PURE__*/function (_Layer2) {\n  _inherits(GaussianDropout, _Layer2);\n\n  var _super2 = _createSuper(GaussianDropout);\n\n  function GaussianDropout(args) {\n    var _this3;\n\n    _classCallCheck(this, GaussianDropout);\n\n    _this3 = _super2.call(this, args);\n    _this3.supportsMasking = true;\n    _this3.rate = args.rate;\n    return _this3;\n  }\n\n  _createClass(GaussianDropout, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      return inputShape;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var baseConfig = _get(_getPrototypeOf(GaussianDropout.prototype), \"getConfig\", this).call(this);\n\n      var config = {\n        rate: this.rate\n      };\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this4 = this;\n\n      return tidy(function () {\n        _this4.invokeCallHook(inputs, kwargs);\n\n        var input = getExactlyOneTensor(inputs);\n\n        if (_this4.rate > 0 && _this4.rate < 1) {\n          var noised = function noised() {\n            var stddev = Math.sqrt(_this4.rate / (1 - _this4.rate));\n            return input.mul(K.randomNormal(input.shape, 1, stddev));\n          };\n\n          return K.inTrainPhase(noised, function () {\n            return input;\n          }, kwargs['training'] || false);\n        }\n\n        return input;\n      });\n    }\n  }]);\n\n  return GaussianDropout;\n}(Layer);\n/** @nocollapse */\n\nGaussianDropout.className = 'GaussianDropout';\nserialization.registerClass(GaussianDropout);\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n */\n\nexport var AlphaDropout = /*#__PURE__*/function (_Layer3) {\n  _inherits(AlphaDropout, _Layer3);\n\n  var _super3 = _createSuper(AlphaDropout);\n\n  function AlphaDropout(args) {\n    var _this5;\n\n    _classCallCheck(this, AlphaDropout);\n\n    _this5 = _super3.call(this, args);\n    _this5.supportsMasking = true;\n    _this5.rate = args.rate;\n    _this5.noiseShape = args.noiseShape;\n    return _this5;\n  }\n\n  _createClass(AlphaDropout, [{\n    key: \"_getNoiseShape\",\n    value: function _getNoiseShape(inputs) {\n      return this.noiseShape || getExactlyOneTensor(inputs).shape;\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      return inputShape;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var baseConfig = _get(_getPrototypeOf(AlphaDropout.prototype), \"getConfig\", this).call(this);\n\n      var config = {\n        rate: this.rate\n      };\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this6 = this;\n\n      return tidy(function () {\n        if (_this6.rate < 1 && _this6.rate > 0) {\n          var noiseShape = _this6._getNoiseShape(inputs);\n\n          var droppedInputs = function droppedInputs() {\n            var input = getExactlyOneTensor(inputs);\n            var alpha = 1.6732632423543772848170429916717;\n            var scale = 1.0507009873554804934193349852946;\n            var alphaP = -alpha * scale;\n            var keptIdx = greaterEqual(randomUniform(noiseShape), _this6.rate);\n            keptIdx = K.cast(keptIdx, 'float32'); // get default dtype.\n            // Get affine transformation params.\n\n            var a = Math.pow((1 - _this6.rate) * (1 + _this6.rate * Math.pow(alphaP, 2)), -0.5);\n            var b = -a * alphaP * _this6.rate; // Apply mask.\n\n            var x = input.mul(keptIdx).add(keptIdx.add(-1).mul(alphaP));\n            return x.mul(a).add(b);\n          };\n\n          return K.inTrainPhase(droppedInputs, function () {\n            return getExactlyOneTensor(inputs);\n          }, kwargs['training'] || false);\n        }\n\n        return inputs;\n      });\n    }\n  }]);\n\n  return AlphaDropout;\n}(Layer);\n/** @nocollapse */\n\nAlphaDropout.className = 'AlphaDropout';\nserialization.registerClass(AlphaDropout);","map":{"version":3,"sources":["../../src/layers/noise.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Noise Layers.\n */\nimport { greaterEqual, randomUniform, serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { Layer } from '../engine/topology';\nimport { getExactlyOneTensor } from '../utils/types_utils';\nexport class GaussianNoise extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.stddev = args.stddev;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { stddev: this.stddev };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            const noised = () => K.randomNormal(input.shape, 0, this.stddev).add(input);\n            const output = K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nGaussianNoise.className = 'GaussianNoise';\nserialization.registerClass(GaussianNoise);\nexport class GaussianDropout extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.rate = args.rate;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { rate: this.rate };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            if (this.rate > 0 && this.rate < 1) {\n                const noised = () => {\n                    const stddev = Math.sqrt(this.rate / (1 - this.rate));\n                    return input.mul(K.randomNormal(input.shape, 1, stddev));\n                };\n                return K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n            }\n            return input;\n        });\n    }\n}\n/** @nocollapse */\nGaussianDropout.className = 'GaussianDropout';\nserialization.registerClass(GaussianDropout);\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n */\nexport class AlphaDropout extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.rate = args.rate;\n        this.noiseShape = args.noiseShape;\n    }\n    _getNoiseShape(inputs) {\n        return this.noiseShape || getExactlyOneTensor(inputs).shape;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { rate: this.rate };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            if (this.rate < 1 && this.rate > 0) {\n                const noiseShape = this._getNoiseShape(inputs);\n                const droppedInputs = () => {\n                    const input = getExactlyOneTensor(inputs);\n                    const alpha = 1.6732632423543772848170429916717;\n                    const scale = 1.0507009873554804934193349852946;\n                    const alphaP = -alpha * scale;\n                    let keptIdx = greaterEqual(randomUniform(noiseShape), this.rate);\n                    keptIdx = K.cast(keptIdx, 'float32'); // get default dtype.\n                    // Get affine transformation params.\n                    const a = ((1 - this.rate) * (1 + this.rate * alphaP ** 2)) ** -0.5;\n                    const b = -a * alphaP * this.rate;\n                    // Apply mask.\n                    const x = input.mul(keptIdx).add(keptIdx.add(-1).mul(alphaP));\n                    return x.mul(a).add(b);\n                };\n                return K.inTrainPhase(droppedInputs, () => getExactlyOneTensor(inputs), kwargs['training'] || false);\n            }\n            return inputs;\n        });\n    }\n}\n/** @nocollapse */\nAlphaDropout.className = 'AlphaDropout';\nserialization.registerClass(AlphaDropout);\n//# sourceMappingURL=noise.js.map"]},"metadata":{},"sourceType":"module"}