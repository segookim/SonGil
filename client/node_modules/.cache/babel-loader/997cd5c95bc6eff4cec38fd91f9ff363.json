{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function pool(xValues, xShape, dtype, strides, convInfo, poolType) {\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  var padTop = convInfo.padInfo.top;\n  var padLeft = convInfo.padInfo.left;\n  var initialValue = poolType === 'max' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  var output = buffer(convInfo.outShape, dtype);\n  var outputVals = output.values;\n  var outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  var outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  var outputColStrides = convInfo.outShape[3];\n\n  for (var b = 0; b < convInfo.batchSize; ++b) {\n    var outputBatchOffset = b * outputBatchStrides;\n    var inputBatchOffset = b * strides[0];\n\n    for (var d = 0; d < convInfo.inChannels; ++d) {\n      for (var yR = 0; yR < convInfo.outHeight; ++yR) {\n        var xRCorner = yR * strideHeight - padTop;\n        var xRMin = Math.max(0, xRCorner);\n        var xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        var outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n\n        for (var yC = 0; yC < convInfo.outWidth; ++yC) {\n          var xCCorner = yC * strideWidth - padLeft;\n          var xCMin = Math.max(0, xCCorner);\n          var xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          var minMaxValue = initialValue;\n          var avgValue = 0;\n          var count = 0;\n\n          for (var xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            var xROffset = inputBatchOffset + xR * strides[1];\n\n            for (var xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              var xCOffset = xROffset + xC * strides[2];\n              var pixel = xValues[xCOffset + d];\n\n              if (poolType === 'max' && pixel > minMaxValue) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n\n          var outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] = poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n\n  return output;\n}\nexport function maxPoolPositions(xValues, xShape, dtype, convInfo) {\n  var flattenPositions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var includeBatchInIndex = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  var maxPositions = buffer(convInfo.outShape, 'int32');\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  var padTop = convInfo.padInfo.top;\n  var padLeft = convInfo.padInfo.left;\n  var xBuf = buffer(xShape, dtype, xValues);\n\n  for (var b = 0; b < convInfo.batchSize; ++b) {\n    for (var d = 0; d < convInfo.inChannels; ++d) {\n      for (var yR = 0; yR < convInfo.outHeight; ++yR) {\n        var xRCorner = yR * strideHeight - padTop;\n        var xRMin = xRCorner;\n\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        } // const xRMin = Math.max(0, xRCorner);\n\n\n        var xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n\n        for (var yC = 0; yC < convInfo.outWidth; ++yC) {\n          var xCCorner = yC * strideWidth - padLeft;\n          var xCMin = xCCorner;\n\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n\n          var xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          var maxValue = Number.NEGATIVE_INFINITY;\n          var maxPosition = -1;\n\n          for (var xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            var wR = xR - xRCorner;\n\n            for (var xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              var wC = xC - xCCorner;\n              var pixel = xBuf.get(b, xR, xC, d);\n\n              if (pixel > maxValue) {\n                maxValue = pixel;\n\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ? ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) * convInfo.inChannels + d : (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\nexport function pool3d(xValues, xShape, dtype, strides, convInfo, poolType) {\n  var strideDepth = convInfo.strideDepth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationDepth = convInfo.dilationDepth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  var padFront = convInfo.padInfo.front;\n  var padTop = convInfo.padInfo.top;\n  var padLeft = convInfo.padInfo.left;\n  var initialValue = poolType === 'max' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  var output = buffer(convInfo.outShape, dtype);\n  var outputVals = output.values;\n  var outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  var outputDepthStrides = convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  var outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  var outputColStrides = convInfo.outShape[4];\n\n  for (var batch = 0; batch < convInfo.batchSize; ++batch) {\n    var outputBatchOffset = batch * outputBatchStrides;\n    var inputBatchOffset = batch * strides[0];\n\n    for (var channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (var yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        var xDepthCorner = yDepth * strideDepth - padFront;\n        var xDepthMin = xDepthCorner;\n\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n\n        var xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        var outputDepthOffset = outputBatchOffset + yDepth * outputDepthStrides;\n\n        for (var yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          var xRowCorner = yRow * strideHeight - padTop;\n          var xRowMin = xRowCorner;\n\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n\n          var xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          var outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n\n          for (var yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            var xColCorner = yCol * strideWidth - padLeft;\n            var xColMin = xColCorner;\n\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n\n            var xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner); // Shader code begins\n\n            var outputColOffset = outputRowOffset + yCol * outputColStrides;\n            var minMaxValue = initialValue;\n            var avgValue = 0;\n            var count = 0;\n\n            for (var xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n              var xDepthOffset = inputBatchOffset + xDepth * strides[1];\n\n              for (var xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                var xRowOffset = xDepthOffset + xRow * strides[2];\n\n                for (var xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                  var xColOffset = xRowOffset + xCol * strides[3];\n                  var pixel = xValues[xColOffset + channel];\n\n                  if (poolType === 'max' && pixel > minMaxValue) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n\n            var outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] = poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\nexport function maxPool3dPositions(xBuf, convInfo) {\n  var maxPositions = buffer(convInfo.outShape, 'int32');\n  var strideDepth = convInfo.strideDepth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationDepth = convInfo.dilationDepth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  var padFront = convInfo.padInfo.front;\n  var padTop = convInfo.padInfo.top;\n  var padLeft = convInfo.padInfo.left;\n\n  for (var batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (var channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (var yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        var xDepthCorner = yDepth * strideDepth - padFront;\n        var xDepthMin = xDepthCorner;\n\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n\n        var xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n\n        for (var yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          var xRowCorner = yRow * strideHeight - padTop;\n          var xRowMin = xRowCorner;\n\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n\n          var xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n\n          for (var yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            var xColCorner = yCol * strideWidth - padLeft;\n            var xColMin = xColCorner;\n\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n\n            var xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner); // Shader code begins\n\n            var maxValue = Number.NEGATIVE_INFINITY;\n            var maxPosition = -1;\n\n            for (var xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n              var wDepth = xDepth - xDepthCorner;\n\n              for (var xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                var wRow = xRow - xRowCorner;\n\n                for (var xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                  var wCol = xCol - xColCorner;\n                  var pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n\n                  if (pixel >= maxValue) {\n                    maxValue = pixel;\n                    maxPosition = wDepth * effectiveFilterHeight * effectiveFilterWidth + wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}","map":{"version":3,"sources":["../../src/utils/pool_utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function pool(xValues, xShape, dtype, strides, convInfo, poolType) {\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const initialValue = (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n        Number.POSITIVE_INFINITY);\n    const output = buffer(convInfo.outShape, dtype);\n    const outputVals = output.values;\n    const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n    const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n    const outputColStrides = convInfo.outShape[3];\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        const outputBatchOffset = b * outputBatchStrides;\n        const inputBatchOffset = b * strides[0];\n        for (let d = 0; d < convInfo.inChannels; ++d) {\n            for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                const xRCorner = yR * strideHeight - padTop;\n                const xRMin = Math.max(0, xRCorner);\n                const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n                const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n                for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                    const xCCorner = yC * strideWidth - padLeft;\n                    const xCMin = Math.max(0, xCCorner);\n                    const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n                    let minMaxValue = initialValue;\n                    let avgValue = 0;\n                    let count = 0;\n                    for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n                        const xROffset = inputBatchOffset + xR * strides[1];\n                        for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n                            const xCOffset = xROffset + xC * strides[2];\n                            const pixel = xValues[xCOffset + d];\n                            if ((poolType === 'max' && pixel > minMaxValue)) {\n                                minMaxValue = pixel;\n                            }\n                            else if (poolType === 'avg') {\n                                avgValue += pixel;\n                                count++;\n                            }\n                        }\n                        if (isNaN(minMaxValue)) {\n                            break;\n                        }\n                    }\n                    const outputOffset = outputRowOffset + yC * outputColStrides + d;\n                    outputVals[outputOffset] =\n                        poolType === 'avg' ? avgValue / count : minMaxValue;\n                }\n            }\n        }\n    }\n    return output;\n}\nexport function maxPoolPositions(xValues, xShape, dtype, convInfo, flattenPositions = false, includeBatchInIndex = false) {\n    const maxPositions = buffer(convInfo.outShape, 'int32');\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const xBuf = buffer(xShape, dtype, xValues);\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        for (let d = 0; d < convInfo.inChannels; ++d) {\n            for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                const xRCorner = yR * strideHeight - padTop;\n                let xRMin = xRCorner;\n                while (xRMin < 0) {\n                    xRMin += dilationHeight;\n                }\n                // const xRMin = Math.max(0, xRCorner);\n                const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n                for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                    const xCCorner = yC * strideWidth - padLeft;\n                    let xCMin = xCCorner;\n                    while (xCMin < 0) {\n                        xCMin += dilationWidth;\n                    }\n                    const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n                    let maxValue = Number.NEGATIVE_INFINITY;\n                    let maxPosition = -1;\n                    for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n                        const wR = xR - xRCorner;\n                        for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n                            const wC = xC - xCCorner;\n                            const pixel = xBuf.get(b, xR, xC, d);\n                            if (pixel > maxValue) {\n                                maxValue = pixel;\n                                if (flattenPositions) {\n                                    maxPosition = includeBatchInIndex ?\n                                        ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                                            convInfo.inChannels +\n                                            d :\n                                        (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                                }\n                                else {\n                                    maxPosition = wR * effectiveFilterWidth + wC;\n                                }\n                            }\n                        }\n                    }\n                    maxPositions.set(maxPosition, b, yR, yC, d);\n                }\n            }\n        }\n    }\n    return maxPositions;\n}\nexport function pool3d(xValues, xShape, dtype, strides, convInfo, poolType) {\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const initialValue = (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n        Number.POSITIVE_INFINITY);\n    const output = buffer(convInfo.outShape, dtype);\n    const outputVals = output.values;\n    const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n        convInfo.outShape[3] * convInfo.outShape[4];\n    const outputDepthStrides = convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n    const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n    const outputColStrides = convInfo.outShape[4];\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n        const outputBatchOffset = batch * outputBatchStrides;\n        const inputBatchOffset = batch * strides[0];\n        for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n            for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n                const xDepthCorner = yDepth * strideDepth - padFront;\n                let xDepthMin = xDepthCorner;\n                while (xDepthMin < 0) {\n                    xDepthMin += dilationDepth;\n                }\n                const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n                const outputDepthOffset = outputBatchOffset + yDepth * outputDepthStrides;\n                for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n                    const xRowCorner = yRow * strideHeight - padTop;\n                    let xRowMin = xRowCorner;\n                    while (xRowMin < 0) {\n                        xRowMin += dilationHeight;\n                    }\n                    const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n                    const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n                    for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n                        const xColCorner = yCol * strideWidth - padLeft;\n                        let xColMin = xColCorner;\n                        while (xColMin < 0) {\n                            xColMin += dilationWidth;\n                        }\n                        const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n                        // Shader code begins\n                        const outputColOffset = outputRowOffset + yCol * outputColStrides;\n                        let minMaxValue = initialValue;\n                        let avgValue = 0;\n                        let count = 0;\n                        for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n                            const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n                            for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                                const xRowOffset = xDepthOffset + xRow * strides[2];\n                                for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                                    const xColOffset = xRowOffset + xCol * strides[3];\n                                    const pixel = xValues[xColOffset + channel];\n                                    if ((poolType === 'max' && pixel > minMaxValue)) {\n                                        minMaxValue = pixel;\n                                    }\n                                    else if (poolType === 'avg') {\n                                        avgValue += pixel;\n                                        count++;\n                                    }\n                                    if (isNaN(minMaxValue)) {\n                                        break;\n                                    }\n                                }\n                                if (isNaN(minMaxValue)) {\n                                    break;\n                                }\n                            }\n                            if (isNaN(minMaxValue)) {\n                                break;\n                            }\n                        }\n                        const outputOffset = outputColOffset + channel;\n                        outputVals[outputOffset] =\n                            poolType === 'avg' ? avgValue / count : minMaxValue;\n                    }\n                }\n            }\n        }\n    }\n    return output;\n}\nexport function maxPool3dPositions(xBuf, convInfo) {\n    const maxPositions = buffer(convInfo.outShape, 'int32');\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n        for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n            for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n                const xDepthCorner = yDepth * strideDepth - padFront;\n                let xDepthMin = xDepthCorner;\n                while (xDepthMin < 0) {\n                    xDepthMin += dilationDepth;\n                }\n                const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n                for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n                    const xRowCorner = yRow * strideHeight - padTop;\n                    let xRowMin = xRowCorner;\n                    while (xRowMin < 0) {\n                        xRowMin += dilationHeight;\n                    }\n                    const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n                    for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n                        const xColCorner = yCol * strideWidth - padLeft;\n                        let xColMin = xColCorner;\n                        while (xColMin < 0) {\n                            xColMin += dilationWidth;\n                        }\n                        const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n                        // Shader code begins\n                        let maxValue = Number.NEGATIVE_INFINITY;\n                        let maxPosition = -1;\n                        for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n                            const wDepth = xDepth - xDepthCorner;\n                            for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                                const wRow = xRow - xRowCorner;\n                                for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                                    const wCol = xCol - xColCorner;\n                                    const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                                    if (pixel >= maxValue) {\n                                        maxValue = pixel;\n                                        maxPosition =\n                                            wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                                                wRow * effectiveFilterHeight + wCol;\n                                    }\n                                }\n                            }\n                        }\n                        maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n                    }\n                }\n            }\n        }\n    }\n    return maxPositions;\n}\n//# sourceMappingURL=pool_utils.js.map"]},"metadata":{},"sourceType":"module"}