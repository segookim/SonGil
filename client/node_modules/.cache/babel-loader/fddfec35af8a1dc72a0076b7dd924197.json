{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function padV2(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var paddings = attrs.paddings,\n      constantValue = attrs.constantValue;\n  assertNotComplex(x, 'pad');\n  var outShape = paddings.map(function (p, i) {\n    return p[0]\n    /* beforePad */\n    + x.shape[i] + p[1];\n  }\n  /* afterPad */\n  );\n  var start = paddings.map(function (p) {\n    return p[0];\n  });\n  var xVals = backend.data.get(x.dataId).values;\n  var xSize = util.sizeFromShape(x.shape);\n  var xRank = x.shape.length;\n  var xStrides = util.computeStrides(x.shape);\n  var resultSize = util.sizeFromShape(outShape);\n  var resultRank = outShape.length;\n  var resultStrides = util.computeStrides(outShape);\n  var resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (var i = 0; i < xSize; i++) {\n    var coords = util.indexToLoc(i, xRank, xStrides);\n    var outCoords = coords.map(function (c, i) {\n      return c + start[i];\n    });\n    var outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n    resVals[outIndex] = xVals[i];\n  }\n\n  var outId = backend.write(resVals, outShape, x.dtype);\n  return {\n    dataId: outId,\n    shape: outShape,\n    dtype: x.dtype\n  };\n}\nexport var padV2Config = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2\n};","map":{"version":3,"sources":["../../src/kernels/PadV2.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAmD,KAAnD,EAA2G,IAA3G,QAAsH,uBAAtH;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAU,KAAV,CACF,IADE,EACqE;AAAA,MAElE,MAFkE,GAExC,IAFwC,CAElE,MAFkE;AAAA,MAE1D,OAF0D,GAExC,IAFwC,CAE1D,OAF0D;AAAA,MAEjD,KAFiD,GAExC,IAFwC,CAEjD,KAFiD;AAAA,MAGlE,CAHkE,GAG7D,MAH6D,CAGlE,CAHkE;AAAA,MAIlE,QAJkE,GAIvC,KAJuC,CAIlE,QAJkE;AAAA,MAIxD,aAJwD,GAIvC,KAJuC,CAIxD,aAJwD;AAMzE,EAAA,gBAAgB,CAAC,CAAD,EAAI,KAAJ,CAAhB;AAEA,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAT,CACb,UAAC,CAAD,EAAI,CAAJ;AAAA,WAAU,CAAC,CAAC,CAAD;AAAI;AAAL,MAAuB,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAvB,GAAoC,CAAC,CAAC,CAAD,CAA/C;AAAA;AAAmD;AADtC,GAAjB;AAGA,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAT,CAAa,UAAA,CAAC;AAAA,WAAI,CAAC,CAAC,CAAD,CAAL;AAAA,GAAd,CAAd;AAEA,MAAM,KAAK,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAAzC;AACA,MAAM,KAAK,GAAG,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,CAAd;AACA,MAAM,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,MAAtB;AACA,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAL,CAAoB,CAAC,CAAC,KAAtB,CAAjB;AAEA,MAAM,UAAU,GAAG,IAAI,CAAC,aAAL,CAAmB,QAAnB,CAAnB;AACA,MAAM,UAAU,GAAG,QAAQ,CAAC,MAA5B;AACA,MAAM,aAAa,GAAG,IAAI,CAAC,cAAL,CAAoB,QAApB,CAAtB;AACA,MAAM,OAAO,GACT,IAAI,CAAC,sBAAL,CAA4B,CAAC,CAAC,KAA9B,EAAwD,UAAxD,CADJ;;AAGA,MAAI,aAAa,KAAK,CAAtB,EAAyB;AACvB,IAAA,OAAO,CAAC,IAAR,CAAa,aAAb;AACD;;AAED,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EAAgC;AAC9B,QAAM,MAAM,GAAG,IAAI,CAAC,UAAL,CAAgB,CAAhB,EAAmB,KAAnB,EAA0B,QAA1B,CAAf;AACA,QAAM,SAAS,GAAG,MAAM,CAAC,GAAP,CAAW,UAAC,CAAD,EAAI,CAAJ;AAAA,aAAU,CAAC,GAAG,KAAK,CAAC,CAAD,CAAnB;AAAA,KAAX,CAAlB;AACA,QAAM,QAAQ,GAAG,IAAI,CAAC,UAAL,CAAgB,SAAhB,EAA2B,UAA3B,EAAuC,aAAvC,CAAjB;AAEA,IAAA,OAAO,CAAC,QAAD,CAAP,GAAoB,KAAK,CAAC,CAAD,CAAzB;AACD;;AAED,MAAM,KAAK,GAAG,OAAO,CAAC,KAAR,CAAc,OAAd,EAAuB,QAAvB,EAAiC,CAAC,CAAC,KAAnC,CAAd;AAEA,SAAO;AAAC,IAAA,MAAM,EAAE,KAAT;AAAgB,IAAA,KAAK,EAAE,QAAvB;AAAiC,IAAA,KAAK,EAAE,CAAC,CAAC;AAA1C,GAAP;AACD;AAED,OAAO,IAAM,WAAW,GAAiB;AACvC,EAAA,UAAU,EAAE,KAD2B;AAEvC,EAAA,WAAW,EAAE,KAF0B;AAGvC,EAAA,UAAU,EAAE;AAH2B,CAAlC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function padV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { paddings, constantValue } = attrs;\n    assertNotComplex(x, 'pad');\n    const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    const start = paddings.map(p => p[0]);\n    const xVals = backend.data.get(x.dataId).values;\n    const xSize = util.sizeFromShape(x.shape);\n    const xRank = x.shape.length;\n    const xStrides = util.computeStrides(x.shape);\n    const resultSize = util.sizeFromShape(outShape);\n    const resultRank = outShape.length;\n    const resultStrides = util.computeStrides(outShape);\n    const resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n    if (constantValue !== 0) {\n        resVals.fill(constantValue);\n    }\n    for (let i = 0; i < xSize; i++) {\n        const coords = util.indexToLoc(i, xRank, xStrides);\n        const outCoords = coords.map((c, i) => c + start[i]);\n        const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n        resVals[outIndex] = xVals[i];\n    }\n    const outId = backend.write(resVals, outShape, x.dtype);\n    return { dataId: outId, shape: outShape, dtype: x.dtype };\n}\nexport const padV2Config = {\n    kernelName: PadV2,\n    backendName: 'cpu',\n    kernelFunc: padV2\n};\n//# sourceMappingURL=PadV2.js.map"]},"metadata":{},"sourceType":"module"}