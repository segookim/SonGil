{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype);\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\nexport function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf;\n}","map":{"version":3,"sources":["../../src/kernels/Bincount_impl.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,EAA0D,IAA1D,QAAqE,uBAArE;AAEA,OAAM,SAAU,YAAV,CACF,KADE,EACiB,WADjB,EAC0C,YAD1C,EAEF,YAFE,EAEsB,IAFtB,EAEkC;AACtC,QAAM,WAAW,GAAG,IAAI,CAAC,aAAL,CAAmB,YAAnB,CAApB;AACA,QAAM,OAAO,GAAG,IAAI,CAAC,mBAAL,CAAyB,IAAzB,EAA+B,YAA/B,CAAhB;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,UAAM,KAAK,GAAG,KAAK,CAAC,CAAD,CAAnB;;AACA,QAAI,KAAK,GAAG,CAAZ,EAAe;AACb,YAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,QAAI,KAAK,IAAI,IAAb,EAAmB;AACjB;AACD;;AAED,QAAI,WAAW,GAAG,CAAlB,EAAqB;AACnB,MAAA,OAAO,CAAC,KAAD,CAAP,IAAkB,WAAW,CAAC,CAAD,CAA7B;AACD,KAFD,MAEO;AACL,MAAA,OAAO,CAAC,KAAD,CAAP,IAAkB,CAAlB;AACD;AACF;;AAED,SAAO,OAAP;AACD;AAED,OAAM,SAAU,kBAAV,CACF,IADE,EACqB,UADrB,EACkD,IADlD,EAEF,YAAY,GAAG,KAFb,EAEkB;AACtB,QAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,CAAhB;AACA,QAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,CAAhB;AAEA,QAAM,MAAM,GAAG,MAAM,CAAC,CAAC,OAAD,EAAU,IAAV,CAAD,EAAkB,UAAU,CAAC,KAA7B,CAArB;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAApB,EAA6B,CAAC,EAA9B,EAAkC;AAChC,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAApB,EAA6B,CAAC,EAA9B,EAAkC;AAChC,YAAM,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,CAAZ,CAAd;;AACA,UAAI,KAAK,GAAG,CAAZ,EAAe;AACb,cAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,UAAI,KAAK,IAAI,IAAb,EAAmB;AACjB;AACD;;AAED,UAAI,YAAJ,EAAkB;AAChB,QAAA,MAAM,CAAC,GAAP,CAAW,CAAX,EAAc,CAAd,EAAiB,KAAjB;AACD,OAFD,MAEO;AACL,YAAI,UAAU,CAAC,IAAX,GAAkB,CAAtB,EAAyB;AACvB,UAAA,MAAM,CAAC,GAAP,CAAW,MAAM,CAAC,GAAP,CAAW,CAAX,EAAc,KAAd,IAAuB,UAAU,CAAC,GAAX,CAAe,CAAf,EAAkB,CAAlB,CAAlC,EAAwD,CAAxD,EAA2D,KAA3D;AACD,SAFD,MAEO;AACL,UAAA,MAAM,CAAC,GAAP,CAAW,MAAM,CAAC,GAAP,CAAW,CAAX,EAAc,KAAd,IAAuB,CAAlC,EAAqC,CAArC,EAAwC,KAAxC;AACD;AACF;AACF;AACF;;AAED,SAAO,MAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n    const weightsSize = util.sizeFromShape(weightsShape);\n    const outVals = util.makeZerosTypedArray(size, weightsDtype);\n    for (let i = 0; i < xVals.length; i++) {\n        const value = xVals[i];\n        if (value < 0) {\n            throw new Error('Input x must be non-negative!');\n        }\n        if (value >= size) {\n            continue;\n        }\n        if (weightsSize > 0) {\n            outVals[value] += weightsVals[i];\n        }\n        else {\n            outVals[value] += 1;\n        }\n    }\n    return outVals;\n}\nexport function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {\n    const numRows = xBuf.shape[0];\n    const numCols = xBuf.shape[1];\n    const outBuf = buffer([numRows, size], weightsBuf.dtype);\n    for (let i = 0; i < numRows; i++) {\n        for (let j = 0; j < numCols; j++) {\n            const value = xBuf.get(i, j);\n            if (value < 0) {\n                throw new Error('Input x must be non-negative!');\n            }\n            if (value >= size) {\n                continue;\n            }\n            if (binaryOutput) {\n                outBuf.set(1, i, value);\n            }\n            else {\n                if (weightsBuf.size > 0) {\n                    outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n                }\n                else {\n                    outBuf.set(outBuf.get(i, value) + 1, i, value);\n                }\n            }\n        }\n    }\n    return outBuf;\n}\n//# sourceMappingURL=Bincount_impl.js.map"]},"metadata":{},"sourceType":"module"}