{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\n\nexport function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = '') {\n  // constant shape means unknown rank\n  if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n    return;\n  }\n\n  util.assert(shapeA.length === shapeB.length, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n\n  for (let i = 0; i < shapeA.length; i++) {\n    const dim0 = shapeA[i];\n    const dim1 = shapeB[i];\n    util.assert(dim0 < 0 || dim1 < 0 || dim0 === dim1, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n}\nexport function fullDefinedShape(elementShape) {\n  if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\n\nexport function inferElementShape(listElementShape, tensors, elementShape) {\n  let partialShape = mergeElementShape(listElementShape, elementShape);\n  const notfullDefinedShape = !fullDefinedShape(partialShape);\n\n  if (notfullDefinedShape && tensors.length === 0) {\n    throw new Error(`Tried to calculate elements of an empty list` + ` with non-fully-defined elementShape: ${partialShape}`);\n  }\n\n  if (notfullDefinedShape) {\n    tensors.forEach(tensor => {\n      partialShape = mergeElementShape(tensor.shape, partialShape);\n    });\n  }\n\n  if (!fullDefinedShape(partialShape)) {\n    throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n  }\n\n  return partialShape;\n}\nexport function mergeElementShape(elementShapeA, elementShapeB) {\n  if (typeof elementShapeA === 'number') {\n    return elementShapeB;\n  }\n\n  if (typeof elementShapeB === 'number') {\n    return elementShapeA;\n  }\n\n  if (elementShapeA.length !== elementShapeB.length) {\n    throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${elementShapeB}`);\n  }\n\n  const result = [];\n\n  for (let i = 0; i < elementShapeA.length; ++i) {\n    const dim0 = elementShapeA[i];\n    const dim1 = elementShapeB[i];\n\n    if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n      throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${elementShapeB}`);\n    }\n\n    result[i] = dim0 >= 0 ? dim0 : dim1;\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../src/executor/tensor_utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\nexport function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = '') {\n    // constant shape means unknown rank\n    if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n        return;\n    }\n    util.assert(shapeA.length === shapeB.length, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n    for (let i = 0; i < shapeA.length; i++) {\n        const dim0 = shapeA[i];\n        const dim1 = shapeB[i];\n        util.assert(dim0 < 0 || dim1 < 0 || dim0 === dim1, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n    }\n}\nexport function fullDefinedShape(elementShape) {\n    if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n        return false;\n    }\n    return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\nexport function inferElementShape(listElementShape, tensors, elementShape) {\n    let partialShape = mergeElementShape(listElementShape, elementShape);\n    const notfullDefinedShape = !fullDefinedShape(partialShape);\n    if (notfullDefinedShape && tensors.length === 0) {\n        throw new Error(`Tried to calculate elements of an empty list` +\n            ` with non-fully-defined elementShape: ${partialShape}`);\n    }\n    if (notfullDefinedShape) {\n        tensors.forEach(tensor => {\n            partialShape = mergeElementShape(tensor.shape, partialShape);\n        });\n    }\n    if (!fullDefinedShape(partialShape)) {\n        throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n    }\n    return partialShape;\n}\nexport function mergeElementShape(elementShapeA, elementShapeB) {\n    if (typeof elementShapeA === 'number') {\n        return elementShapeB;\n    }\n    if (typeof elementShapeB === 'number') {\n        return elementShapeA;\n    }\n    if (elementShapeA.length !== elementShapeB.length) {\n        throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${elementShapeB}`);\n    }\n    const result = [];\n    for (let i = 0; i < elementShapeA.length; ++i) {\n        const dim0 = elementShapeA[i];\n        const dim1 = elementShapeB[i];\n        if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n            throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${elementShapeB}`);\n        }\n        result[i] = dim0 >= 0 ? dim0 : dim1;\n    }\n    return result;\n}\n//# sourceMappingURL=tensor_utils.js.map"]},"metadata":{},"sourceType":"module"}