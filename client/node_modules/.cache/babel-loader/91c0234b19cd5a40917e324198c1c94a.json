{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Utilities related to persistent state in the backend.\n */\n\n/**\n * An ID to track `tf.SymbolicTensor`s and derived classes.\n * Required in different places in engine/topology.ts to identify unique\n * tensors.\n */\nlet _nextUniqueTensorId = 0;\nexport function getNextUniqueTensorId() {\n  return _nextUniqueTensorId++;\n}\nconst _uidPrefixes = {};\n/**\n * Provides a unique UID given a string prefix.\n *\n * @param prefix\n */\n\nexport function getUid(prefix = '') {\n  if (!(prefix in _uidPrefixes)) {\n    _uidPrefixes[prefix] = 0;\n  }\n\n  _uidPrefixes[prefix] += 1;\n  return prefix + _uidPrefixes[prefix].toString();\n}","map":{"version":3,"sources":["../../src/backend/state.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAQG;;AAEH;;AAEG;;AAEH;;;;AAIG;AACH,IAAI,mBAAmB,GAAG,CAA1B;AAEA,OAAM,SAAU,qBAAV,GAA+B;AACnC,SAAO,mBAAmB,EAA1B;AACD;AAED,MAAM,YAAY,GAA+B,EAAjD;AAEA;;;;AAIG;;AACH,OAAM,SAAU,MAAV,CAAiB,MAAM,GAAG,EAA1B,EAA4B;AAChC,MAAI,EAAE,MAAM,IAAI,YAAZ,CAAJ,EAA+B;AAC7B,IAAA,YAAY,CAAC,MAAD,CAAZ,GAAuB,CAAvB;AACD;;AACD,EAAA,YAAY,CAAC,MAAD,CAAZ,IAAwB,CAAxB;AACA,SAAO,MAAM,GAAG,YAAY,CAAC,MAAD,CAAZ,CAAqB,QAArB,EAAhB;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Utilities related to persistent state in the backend.\n */\n/**\n * An ID to track `tf.SymbolicTensor`s and derived classes.\n * Required in different places in engine/topology.ts to identify unique\n * tensors.\n */\nlet _nextUniqueTensorId = 0;\nexport function getNextUniqueTensorId() {\n    return _nextUniqueTensorId++;\n}\nconst _uidPrefixes = {};\n/**\n * Provides a unique UID given a string prefix.\n *\n * @param prefix\n */\nexport function getUid(prefix = '') {\n    if (!(prefix in _uidPrefixes)) {\n        _uidPrefixes[prefix] = 0;\n    }\n    _uidPrefixes[prefix] += 1;\n    return prefix + _uidPrefixes[prefix].toString();\n}\n//# sourceMappingURL=state.js.map"]},"metadata":{},"sourceType":"module"}