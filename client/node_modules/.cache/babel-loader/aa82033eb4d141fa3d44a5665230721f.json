{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* original source: keras/regularizers.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { abs, add, serialization, sum, tidy, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\n\nfunction assertObjectArgs(args) {\n  if (args != null && typeof args !== 'object') {\n    throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an ` + `object, but received: ${args}`);\n  }\n}\n/**\n * Regularizer base class.\n */\n\n\nexport class Regularizer extends serialization.Serializable {}\nexport class L1L2 extends Regularizer {\n  constructor(args) {\n    super();\n    assertObjectArgs(args);\n    this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;\n    this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;\n    this.hasL1 = this.l1 !== 0;\n    this.hasL2 = this.l2 !== 0;\n  }\n  /**\n   * Porting note: Renamed from __call__.\n   * @param x Variable of which to calculate the regularization score.\n   */\n\n\n  apply(x) {\n    return tidy(() => {\n      let regularization = zeros([1]);\n\n      if (this.hasL1) {\n        regularization = add(regularization, sum(tfc.mul(this.l1, abs(x))));\n      }\n\n      if (this.hasL2) {\n        regularization = add(regularization, sum(tfc.mul(this.l2, K.square(x))));\n      }\n\n      return regularization.asScalar();\n    });\n  }\n\n  getConfig() {\n    return {\n      'l1': this.l1,\n      'l2': this.l2\n    };\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls({\n      l1: config['l1'],\n      l2: config['l2']\n    });\n  }\n\n}\n/** @nocollapse */\n\nL1L2.className = 'L1L2';\nserialization.registerClass(L1L2);\nexport function l1(args) {\n  assertObjectArgs(args);\n  return new L1L2({\n    l1: args != null ? args.l1 : null,\n    l2: 0\n  });\n}\nexport function l2(args) {\n  assertObjectArgs(args);\n  return new L1L2({\n    l2: args != null ? args.l2 : null,\n    l1: 0\n  });\n} // Maps the JavaScript-like identifier keys to the corresponding keras symbols.\n\nexport const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'l1l2': 'L1L2'\n};\nexport function serializeRegularizer(constraint) {\n  return serializeKerasObject(constraint);\n}\nexport function deserializeRegularizer(config, customObjects = {}) {\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'regularizer');\n}\nexport function getRegularizer(identifier) {\n  if (identifier == null) {\n    return null;\n  }\n\n  if (typeof identifier === 'string') {\n    const className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    const config = {\n      className,\n      config: {}\n    };\n    return deserializeRegularizer(config);\n  } else if (identifier instanceof Regularizer) {\n    return identifier;\n  } else {\n    return deserializeRegularizer(identifier);\n  }\n}","map":{"version":3,"sources":["../src/regularizers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* original source: keras/regularizers.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { abs, add, serialization, sum, tidy, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nfunction assertObjectArgs(args) {\n    if (args != null && typeof args !== 'object') {\n        throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an ` +\n            `object, but received: ${args}`);\n    }\n}\n/**\n * Regularizer base class.\n */\nexport class Regularizer extends serialization.Serializable {\n}\nexport class L1L2 extends Regularizer {\n    constructor(args) {\n        super();\n        assertObjectArgs(args);\n        this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;\n        this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;\n        this.hasL1 = this.l1 !== 0;\n        this.hasL2 = this.l2 !== 0;\n    }\n    /**\n     * Porting note: Renamed from __call__.\n     * @param x Variable of which to calculate the regularization score.\n     */\n    apply(x) {\n        return tidy(() => {\n            let regularization = zeros([1]);\n            if (this.hasL1) {\n                regularization = add(regularization, sum(tfc.mul(this.l1, abs(x))));\n            }\n            if (this.hasL2) {\n                regularization =\n                    add(regularization, sum(tfc.mul(this.l2, K.square(x))));\n            }\n            return regularization.asScalar();\n        });\n    }\n    getConfig() {\n        return { 'l1': this.l1, 'l2': this.l2 };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls({ l1: config['l1'], l2: config['l2'] });\n    }\n}\n/** @nocollapse */\nL1L2.className = 'L1L2';\nserialization.registerClass(L1L2);\nexport function l1(args) {\n    assertObjectArgs(args);\n    return new L1L2({ l1: args != null ? args.l1 : null, l2: 0 });\n}\nexport function l2(args) {\n    assertObjectArgs(args);\n    return new L1L2({ l2: args != null ? args.l2 : null, l1: 0 });\n}\n// Maps the JavaScript-like identifier keys to the corresponding keras symbols.\nexport const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'l1l2': 'L1L2'\n};\nexport function serializeRegularizer(constraint) {\n    return serializeKerasObject(constraint);\n}\nexport function deserializeRegularizer(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'regularizer');\n}\nexport function getRegularizer(identifier) {\n    if (identifier == null) {\n        return null;\n    }\n    if (typeof identifier === 'string') {\n        const className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        const config = { className, config: {} };\n        return deserializeRegularizer(config);\n    }\n    else if (identifier instanceof Regularizer) {\n        return identifier;\n    }\n    else {\n        return deserializeRegularizer(identifier);\n    }\n}\n//# sourceMappingURL=regularizers.js.map"]},"metadata":{},"sourceType":"module"}