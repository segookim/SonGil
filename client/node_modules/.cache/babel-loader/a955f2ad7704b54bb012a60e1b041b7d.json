{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util';\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\n\nexport function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {\n  checkPromises(promises);\n  startFraction = startFraction == null ? 0 : startFraction;\n  endFraction = endFraction == null ? 1 : endFraction;\n  checkFraction(startFraction, endFraction);\n  let resolvedPromise = 0;\n\n  const registerMonitor = promise => {\n    promise.then(value => {\n      const fraction = startFraction + ++resolvedPromise / promises.length * (endFraction - startFraction); // pass fraction as parameter to callback function.\n\n      onProgress(fraction);\n      return value;\n    });\n    return promise;\n  };\n\n  function checkPromises(promises) {\n    assert(promises != null && Array.isArray(promises) && promises.length > 0, () => 'promises must be a none empty array');\n  }\n\n  function checkFraction(startFraction, endFraction) {\n    assert(startFraction >= 0 && startFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` + `got startFraction ${startFraction}`);\n    assert(endFraction >= 0 && endFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` + `got endFraction ${endFraction}`);\n    assert(endFraction >= startFraction, () => `startFraction must be no more than endFraction, but ` + `got startFraction ${startFraction} and endFraction ` + `${endFraction}`);\n  }\n\n  return Promise.all(promises.map(registerMonitor));\n}","map":{"version":3,"sources":["../../src/io/progress.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,SAArB;AAIA;;;;;;;AAOG;;AACH,OAAM,SAAU,uBAAV,CACF,QADE,EACiC,UADjC,EAEF,aAFE,EAEsB,WAFtB,EAE0C;AAC9C,EAAA,aAAa,CAAC,QAAD,CAAb;AACA,EAAA,aAAa,GAAG,aAAa,IAAI,IAAjB,GAAwB,CAAxB,GAA4B,aAA5C;AACA,EAAA,WAAW,GAAG,WAAW,IAAI,IAAf,GAAsB,CAAtB,GAA0B,WAAxC;AACA,EAAA,aAAa,CAAC,aAAD,EAAgB,WAAhB,CAAb;AACA,MAAI,eAAe,GAAG,CAAtB;;AAEA,QAAM,eAAe,GAAI,OAAD,IAAyB;AAC/C,IAAA,OAAO,CAAC,IAAR,CAAa,KAAK,IAAG;AACnB,YAAM,QAAQ,GAAG,aAAa,GAC1B,EAAE,eAAF,GAAoB,QAAQ,CAAC,MAA7B,IAAuC,WAAW,GAAG,aAArD,CADJ,CADmB,CAGnB;;AACA,MAAA,UAAU,CAAC,QAAD,CAAV;AACA,aAAO,KAAP;AACD,KAND;AAOA,WAAO,OAAP;AACD,GATD;;AAWA,WAAS,aAAT,CAAuB,QAAvB,EAAwD;AACtD,IAAA,MAAM,CACF,QAAQ,IAAI,IAAZ,IAAoB,KAAK,CAAC,OAAN,CAAc,QAAd,CAApB,IAA+C,QAAQ,CAAC,MAAT,GAAkB,CAD/D,EAEF,MAAM,qCAFJ,CAAN;AAGD;;AAED,WAAS,aAAT,CAAuB,aAAvB,EAA8C,WAA9C,EAAiE;AAC/D,IAAA,MAAM,CACF,aAAa,IAAI,CAAjB,IAAsB,aAAa,IAAI,CADrC,EAEF,MAAM,iDAAA,GACF,qBAAqB,aAAa,EAHpC,CAAN;AAIA,IAAA,MAAM,CACF,WAAW,IAAI,CAAf,IAAoB,WAAW,IAAI,CADjC,EAEF,MAAM,iDAAA,GACF,mBAAmB,WAAW,EAHhC,CAAN;AAIA,IAAA,MAAM,CACF,WAAW,IAAI,aADb,EAEF,MAAM,sDAAA,GACF,qBAAqB,aAAa,mBADhC,GAEF,GAAG,WAAW,EAJhB,CAAN;AAKD;;AAED,SAAO,OAAO,CAAC,GAAR,CAAY,QAAQ,CAAC,GAAT,CAAa,eAAb,CAAZ,CAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util';\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\nexport function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {\n    checkPromises(promises);\n    startFraction = startFraction == null ? 0 : startFraction;\n    endFraction = endFraction == null ? 1 : endFraction;\n    checkFraction(startFraction, endFraction);\n    let resolvedPromise = 0;\n    const registerMonitor = (promise) => {\n        promise.then(value => {\n            const fraction = startFraction +\n                ++resolvedPromise / promises.length * (endFraction - startFraction);\n            // pass fraction as parameter to callback function.\n            onProgress(fraction);\n            return value;\n        });\n        return promise;\n    };\n    function checkPromises(promises) {\n        assert(promises != null && Array.isArray(promises) && promises.length > 0, () => 'promises must be a none empty array');\n    }\n    function checkFraction(startFraction, endFraction) {\n        assert(startFraction >= 0 && startFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +\n            `got startFraction ${startFraction}`);\n        assert(endFraction >= 0 && endFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +\n            `got endFraction ${endFraction}`);\n        assert(endFraction >= startFraction, () => `startFraction must be no more than endFraction, but ` +\n            `got startFraction ${startFraction} and endFraction ` +\n            `${endFraction}`);\n    }\n    return Promise.all(promises.map(registerMonitor));\n}\n//# sourceMappingURL=progress.js.map"]},"metadata":{},"sourceType":"module"}