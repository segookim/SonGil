{"ast":null,"code":"import _slicedToArray from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var ResizeNearestNeighborProgram = function ResizeNearestNeighborProgram(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n  _classCallCheck(this, ResizeNearestNeighborProgram);\n\n  this.variableNames = ['A'];\n  this.outputShape = [];\n\n  var _inputShape = _slicedToArray(inputShape, 4),\n      batch = _inputShape[0],\n      oldHeight = _inputShape[1],\n      oldWidth = _inputShape[2],\n      depth = _inputShape[3];\n\n  this.outputShape = [batch, newHeight, newWidth, depth];\n  var effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n  var effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth]; // When align corners is false, we rounds the value with floor.\n\n  var roundBase = alignCorners ? '0.5' : '0.0';\n  var sourceFracIndexRC;\n\n  if (halfPixelCenters) {\n    sourceFracIndexRC = \"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC\" + \", vec2(0.0))\";\n  } else {\n    sourceFracIndexRC = \"vec2(yRC) * effectiveInputOverOutputRatioRC\";\n  }\n\n  this.userCode = \"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \".concat(effectiveInSize[0] / effectiveOutSize[0], \",\\n          \").concat(effectiveInSize[1] / effectiveOutSize[1], \");\\n      const vec2 inputShapeRC = vec2(\").concat(oldHeight, \".0, \").concat(oldWidth, \".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = \").concat(sourceFracIndexRC, \";\\n\\n        // Compute the coordinators of nearest neighbor point.\\n        ivec2 sourceNearestRC = ivec2(\\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + \").concat(roundBase, \")));\\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\\n\\n        setOutput(newValue);\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/resize_nearest_neighbor_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAIH,WAAa,4BAAb,GAKE,sCACI,UADJ,EACkD,SADlD,EAEI,QAFJ,EAEsB,YAFtB,EAE6C,gBAF7C,EAEsE;AAAA;;AANtE,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AACA,OAAA,WAAA,GAAwB,EAAxB;;AAKsE,mCACxB,UADwB;AAAA,MAC7D,KAD6D;AAAA,MACtD,SADsD;AAAA,MAC3C,QAD2C;AAAA,MACjC,KADiC;;AAEpE,OAAK,WAAL,GAAmB,CAAC,KAAD,EAAQ,SAAR,EAAmB,QAAnB,EAA6B,KAA7B,CAAnB;AAEA,MAAM,eAAe,GAAqB,CACvC,YAAY,IAAI,SAAS,GAAG,CAA7B,GAAkC,SAAS,GAAG,CAA9C,GAAkD,SADV,EAEvC,YAAY,IAAI,QAAQ,GAAG,CAA5B,GAAiC,QAAQ,GAAG,CAA5C,GAAgD,QAFR,CAA1C;AAKA,MAAM,gBAAgB,GAAqB,CACxC,YAAY,IAAI,SAAS,GAAG,CAA7B,GAAkC,SAAS,GAAG,CAA9C,GAAkD,SADT,EAExC,YAAY,IAAI,QAAQ,GAAG,CAA5B,GAAiC,QAAQ,GAAG,CAA5C,GAAgD,QAFP,CAA3C,CAToE,CAcpE;;AACA,MAAM,SAAS,GAAG,YAAY,GAAG,KAAH,GAAW,KAAzC;AAEA,MAAI,iBAAJ;;AACA,MAAI,gBAAJ,EAAsB;AACpB,IAAA,iBAAiB,GACb,gFADJ;AAGD,GAJD,MAIO;AACL,IAAA,iBAAiB,gDAAjB;AACD;;AACD,OAAK,QAAL,mFAEQ,eAAe,CAAC,CAAD,CAAf,GAAqB,gBAAgB,CAAC,CAAD,CAF7C,0BAGQ,eAAe,CAAC,CAAD,CAAf,GAAqB,gBAAgB,CAAC,CAAD,CAH7C,sDAImC,SAJnC,iBAImD,QAJnD,qPAa+B,iBAb/B,sLAiB0D,SAjB1D;AAuBD,CAvDH","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeighborProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        this.variableNames = ['A'];\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        // When align corners is false, we rounds the value with floor.\n        const roundBase = alignCorners ? '0.5' : '0.0';\n        let sourceFracIndexRC;\n        if (halfPixelCenters) {\n            sourceFracIndexRC =\n                `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n                    `, vec2(0.0))`;\n        }\n        else {\n            sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n        }\n        this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=resize_nearest_neighbor_gpu.js.map"]},"metadata":{},"sourceType":"module"}