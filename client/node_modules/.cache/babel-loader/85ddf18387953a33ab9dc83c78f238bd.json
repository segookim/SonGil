{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { HashTable } from '../../executor/hash_table';\nimport { getParamValue } from './utils';\nexport const executeOp = async (node, tensorMap, context, resourceManager) => {\n  switch (node.op) {\n    case 'HashTable':\n    case 'HashTableV2':\n      {\n        const keyDType = getParamValue('keyDType', node, tensorMap, context);\n        const valueDType = getParamValue('valueDType', node, tensorMap, context);\n        const hashTable = new HashTable(keyDType, valueDType);\n        resourceManager.addHashTable(node.name, hashTable);\n        return [hashTable.handle];\n      }\n\n    case 'LookupTableImport':\n    case 'LookupTableImportV2':\n      {\n        const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n        const keys = getParamValue('keys', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        const hashTable = resourceManager.getHashTableById(handle.id);\n        return [await hashTable.import(keys, values)];\n      }\n\n    case 'LookupTableFind':\n    case 'LookupTableFindV2':\n      {\n        const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n        const keys = getParamValue('keys', node, tensorMap, context);\n        const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n        const hashTable = resourceManager.getHashTableById(handle.id);\n        return [await hashTable.find(keys, defaultValue)];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'hash_table';","map":{"version":3,"sources":["../../../src/operations/executors/hash_table_executor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAMH,SAAQ,SAAR,QAAwB,2BAAxB;AAIA,SAAQ,aAAR,QAA4B,SAA5B;AAEA,OAAO,MAAM,SAAS,GAA4B,OAC9C,IAD8C,EAClC,SADkC,EACN,OADM,EAE9C,eAF8C,KAES;AACzD,UAAQ,IAAI,CAAC,EAAb;AACE,SAAK,WAAL;AACA,SAAK,aAAL;AAAoB;AAClB,cAAM,QAAQ,GACV,aAAa,CAAC,UAAD,EAAa,IAAb,EAAmB,SAAnB,EAA8B,OAA9B,CADjB;AAEA,cAAM,UAAU,GACZ,aAAa,CAAC,YAAD,EAAe,IAAf,EAAqB,SAArB,EAAgC,OAAhC,CADjB;AAGA,cAAM,SAAS,GAAG,IAAI,SAAJ,CAAc,QAAd,EAAwB,UAAxB,CAAlB;AACA,QAAA,eAAe,CAAC,YAAhB,CAA6B,IAAI,CAAC,IAAlC,EAAwC,SAAxC;AACA,eAAO,CAAC,SAAS,CAAC,MAAX,CAAP;AACD;;AACD,SAAK,mBAAL;AACA,SAAK,qBAAL;AAA4B;AAC1B,cAAM,MAAM,GAAG,aAAa,CACT,aADS,EACM,IADN,EACY,SADZ,EACuB,OADvB,EAET,eAFS,CAA5B;AAGA,cAAM,IAAI,GAAG,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CAA1B;AACA,cAAM,MAAM,GACR,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;AAGA,cAAM,SAAS,GAAG,eAAe,CAAC,gBAAhB,CAAiC,MAAM,CAAC,EAAxC,CAAlB;AAEA,eAAO,CAAC,MAAM,SAAS,CAAC,MAAV,CAAiB,IAAjB,EAAuB,MAAvB,CAAP,CAAP;AACD;;AACD,SAAK,iBAAL;AACA,SAAK,mBAAL;AAA0B;AACxB,cAAM,MAAM,GAAG,aAAa,CACT,aADS,EACM,IADN,EACY,SADZ,EACuB,OADvB,EAET,eAFS,CAA5B;AAGA,cAAM,IAAI,GAAG,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CAA1B;AACA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAGA,cAAM,SAAS,GAAG,eAAe,CAAC,gBAAhB,CAAiC,MAAM,CAAC,EAAxC,CAAlB;AACA,eAAO,CAAC,MAAM,SAAS,CAAC,IAAV,CAAe,IAAf,EAAqB,YAArB,CAAP,CAAP;AACD;;AACD;AACE,YAAM,SAAS,CAAC,aAAa,IAAI,CAAC,EAAE,qBAArB,CAAf;AAtCJ;AAwCD,CA3CM;AA6CP,OAAO,MAAM,QAAQ,GAAG,YAAjB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { HashTable } from '../../executor/hash_table';\nimport { getParamValue } from './utils';\nexport const executeOp = async (node, tensorMap, context, resourceManager) => {\n    switch (node.op) {\n        case 'HashTable':\n        case 'HashTableV2': {\n            const keyDType = getParamValue('keyDType', node, tensorMap, context);\n            const valueDType = getParamValue('valueDType', node, tensorMap, context);\n            const hashTable = new HashTable(keyDType, valueDType);\n            resourceManager.addHashTable(node.name, hashTable);\n            return [hashTable.handle];\n        }\n        case 'LookupTableImport':\n        case 'LookupTableImportV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const keys = getParamValue('keys', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [await hashTable.import(keys, values)];\n        }\n        case 'LookupTableFind':\n        case 'LookupTableFindV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const keys = getParamValue('keys', node, tensorMap, context);\n            const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [await hashTable.find(keys, defaultValue)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'hash_table';\n//# sourceMappingURL=hash_table_executor.js.map"]},"metadata":{},"sourceType":"module"}