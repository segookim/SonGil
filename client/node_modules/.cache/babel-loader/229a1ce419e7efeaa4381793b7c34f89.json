{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport { notEqual, serialization, tidy, zerosLike } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport class Embedding extends Layer {\n  constructor(args) {\n    super(args);\n    this.embeddings = null;\n    this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';\n\n    if (args.batchInputShape == null && args.inputShape == null) {\n      // Porting Note: This logic is copied from Layer's constructor, since we\n      // can't do exactly what the Python constructor does for Embedding().\n      // Specifically, the super constructor can not be called after the\n      // mutation of the `config` argument.\n      let batchSize = null;\n\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n\n      if (args.inputLength == null) {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (None, )\n        this.batchInputShape = [batchSize, null];\n      } else {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (config.inputLength, )\n        this.batchInputShape = [batchSize].concat(generic_utils.toList(args.inputLength));\n      }\n    }\n\n    this.inputDim = args.inputDim;\n    generic_utils.assertPositiveInteger(this.inputDim, 'inputDim');\n    this.outputDim = args.outputDim;\n    generic_utils.assertPositiveInteger(this.outputDim, 'outputDim');\n    this.embeddingsInitializer = getInitializer(args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n    this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n    this.maskZero = args.maskZero;\n    this.supportsMasking = args.maskZero;\n    this.inputLength = args.inputLength;\n  }\n\n  build(inputShape) {\n    this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);\n    this.built = true;\n  } // Override warnOnIncompatibleInputShape because an embedding layer allows\n  // the input to have varying ranks.\n\n\n  warnOnIncompatibleInputShape(inputShape) {}\n\n  computeMask(inputs, mask) {\n    return tidy(() => {\n      if (!this.maskZero) {\n        return null;\n      } else {\n        inputs = getExactlyOneTensor(inputs);\n        return notEqual(inputs, zerosLike(inputs));\n      }\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (this.inputLength == null) {\n      return [...inputShape, this.outputDim];\n    } // inputLength can be an array if input is 3D or higher.\n\n\n    const inLens = generic_utils.toList(this.inputLength);\n\n    if (inLens.length !== inputShape.length - 1) {\n      throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` + `input shape has shape ${inputShape}`);\n    } else {\n      let i = 0;\n\n      for (let k = 0; k < inLens.length; ++k) {\n        const s1 = inLens[k];\n        const s2 = inputShape[k + 1];\n\n        if (s1 != null && s2 != null && s1 !== s2) {\n          throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` + `input shape has shape ${inputShape}`);\n        } else if (s1 == null) {\n          inLens[i] = s2;\n        }\n\n        i++;\n      }\n    }\n\n    return [inputShape[0], ...inLens, this.outputDim];\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs); // Embedding layer accepts only a single input.\n\n      let input = getExactlyOneTensor(inputs);\n\n      if (input.dtype !== 'int32') {\n        input = K.cast(input, 'int32');\n      }\n\n      const output = K.gather(this.embeddings.read(), input.as1D());\n      return output.reshape(getExactlyOneShape(this.computeOutputShape(input.shape)));\n    });\n  }\n\n  getConfig() {\n    const config = {\n      inputDim: this.inputDim,\n      outputDim: this.outputDim,\n      embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n      embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n      maskZero: this.maskZero,\n      inputLength: this.inputLength\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nEmbedding.className = 'Embedding';\nserialization.registerClass(Embedding);","map":{"version":3,"sources":["../../src/layers/embeddings.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport { notEqual, serialization, tidy, zerosLike } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport class Embedding extends Layer {\n    constructor(args) {\n        super(args);\n        this.embeddings = null;\n        this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';\n        if (args.batchInputShape == null && args.inputShape == null) {\n            // Porting Note: This logic is copied from Layer's constructor, since we\n            // can't do exactly what the Python constructor does for Embedding().\n            // Specifically, the super constructor can not be called after the\n            // mutation of the `config` argument.\n            let batchSize = null;\n            if (args.batchSize != null) {\n                batchSize = args.batchSize;\n            }\n            if (args.inputLength == null) {\n                // Fix super-constructor to what it would have done if\n                // 'config.inputShape' were (None, )\n                this.batchInputShape = [batchSize, null];\n            }\n            else {\n                // Fix super-constructor to what it would have done if\n                // 'config.inputShape' were (config.inputLength, )\n                this.batchInputShape =\n                    [batchSize].concat(generic_utils.toList(args.inputLength));\n            }\n        }\n        this.inputDim = args.inputDim;\n        generic_utils.assertPositiveInteger(this.inputDim, 'inputDim');\n        this.outputDim = args.outputDim;\n        generic_utils.assertPositiveInteger(this.outputDim, 'outputDim');\n        this.embeddingsInitializer = getInitializer(args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n        this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n        this.activityRegularizer = getRegularizer(args.activityRegularizer);\n        this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n        this.maskZero = args.maskZero;\n        this.supportsMasking = args.maskZero;\n        this.inputLength = args.inputLength;\n    }\n    build(inputShape) {\n        this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);\n        this.built = true;\n    }\n    // Override warnOnIncompatibleInputShape because an embedding layer allows\n    // the input to have varying ranks.\n    warnOnIncompatibleInputShape(inputShape) { }\n    computeMask(inputs, mask) {\n        return tidy(() => {\n            if (!this.maskZero) {\n                return null;\n            }\n            else {\n                inputs = getExactlyOneTensor(inputs);\n                return notEqual(inputs, zerosLike(inputs));\n            }\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (this.inputLength == null) {\n            return [...inputShape, this.outputDim];\n        }\n        // inputLength can be an array if input is 3D or higher.\n        const inLens = generic_utils.toList(this.inputLength);\n        if (inLens.length !== inputShape.length - 1) {\n            throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` +\n                `input shape has shape ${inputShape}`);\n        }\n        else {\n            let i = 0;\n            for (let k = 0; k < inLens.length; ++k) {\n                const s1 = inLens[k];\n                const s2 = inputShape[k + 1];\n                if ((s1 != null) && (s2 != null) && (s1 !== s2)) {\n                    throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` +\n                        `input shape has shape ${inputShape}`);\n                }\n                else if (s1 == null) {\n                    inLens[i] = s2;\n                }\n                i++;\n            }\n        }\n        return [inputShape[0], ...inLens, this.outputDim];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            // Embedding layer accepts only a single input.\n            let input = getExactlyOneTensor(inputs);\n            if (input.dtype !== 'int32') {\n                input = K.cast(input, 'int32');\n            }\n            const output = K.gather(this.embeddings.read(), input.as1D());\n            return output.reshape(getExactlyOneShape(this.computeOutputShape(input.shape)));\n        });\n    }\n    getConfig() {\n        const config = {\n            inputDim: this.inputDim,\n            outputDim: this.outputDim,\n            embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n            embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n            maskZero: this.maskZero,\n            inputLength: this.inputLength\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nEmbedding.className = 'Embedding';\nserialization.registerClass(Embedding);\n//# sourceMappingURL=embeddings.js.map"]},"metadata":{},"sourceType":"module"}