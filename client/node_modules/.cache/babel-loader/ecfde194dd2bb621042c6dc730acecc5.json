{"ast":null,"code":"import _slicedToArray from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport { getGlobal } from './global_util';\nvar kernelRegistry = getGlobal('kernelRegistry', function () {\n  return new Map();\n});\nvar gradRegistry = getGlobal('gradRegistry', function () {\n  return new Map();\n});\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\n\nexport function getKernel(kernelName, backendName) {\n  var key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\n\nexport function getGradient(kernelName) {\n  return gradRegistry.get(kernelName);\n}\nexport function getKernelsForBackend(backendName) {\n  var it = kernelRegistry.entries();\n  var result = [];\n\n  while (true) {\n    var _it$next = it.next(),\n        done = _it$next.done,\n        value = _it$next.value;\n\n    if (done) {\n      break;\n    }\n\n    var _value = _slicedToArray(value, 2),\n        key = _value[0],\n        config = _value[1];\n\n    var _key$split = key.split('_'),\n        _key$split2 = _slicedToArray(_key$split, 1),\n        backend = _key$split2[0];\n\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n\n  return result;\n}\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\n\nexport function registerKernel(config) {\n  var kernelName = config.kernelName,\n      backendName = config.backendName;\n  var key = makeKey(kernelName, backendName);\n\n  if (kernelRegistry.has(key)) {\n    console.warn(\"The kernel '\".concat(kernelName, \"' for backend \") + \"'\".concat(backendName, \"' is already registered\"));\n  }\n\n  kernelRegistry.set(key, config);\n}\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\n\nexport function registerGradient(config) {\n  var kernelName = config.kernelName;\n\n  if (gradRegistry.has(kernelName)) {\n    // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n    // to debug mode.\n    if (env().getBool('DEBUG')) {\n      console.warn(\"Overriding the gradient for '\".concat(kernelName, \"'\"));\n    }\n  }\n\n  gradRegistry.set(kernelName, config);\n}\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\n\nexport function unregisterKernel(kernelName, backendName) {\n  var key = makeKey(kernelName, backendName);\n\n  if (!kernelRegistry.has(key)) {\n    throw new Error(\"The kernel '\".concat(kernelName, \"' for backend \") + \"'\".concat(backendName, \"' is not registered\"));\n  }\n\n  kernelRegistry.delete(key);\n}\n/** Removes the registered gradient from the global registry. */\n\nexport function unregisterGradient(kernelName) {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(\"The gradient '\".concat(kernelName, \"' for backend is not registered\"));\n  }\n\n  gradRegistry.delete(kernelName);\n}\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\n\nexport function copyRegisteredKernels(registeredBackendName, newBackendName) {\n  var kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach(function (kernelConfig) {\n    var newKernelConfig = Object.assign({}, kernelConfig, {\n      backendName: newBackendName\n    });\n    registerKernel(newKernelConfig);\n  });\n}\n\nfunction makeKey(kernelName, backendName) {\n  return \"\".concat(backendName, \"_\").concat(kernelName);\n}","map":{"version":3,"sources":["../src/kernel_registry.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,GAAR,QAAkB,eAAlB;AAEA,SAAQ,SAAR,QAAwB,eAAxB;AAKA,IAAM,cAAc,GAChB,SAAS,CAAC,gBAAD,EAAmB;AAAA,SAAM,IAAI,GAAJ,EAAN;AAAA,CAAnB,CADb;AAEA,IAAM,YAAY,GACd,SAAS,CAAC,cAAD,EAAiB;AAAA,SAAM,IAAI,GAAJ,EAAN;AAAA,CAAjB,CADb;AA+DA;;;;;AAKG;;AACH,OAAM,SAAU,SAAV,CACF,UADE,EACkB,WADlB,EACqC;AACzC,MAAM,GAAG,GAAG,OAAO,CAAC,UAAD,EAAa,WAAb,CAAnB;AACA,SAAO,cAAc,CAAC,GAAf,CAAmB,GAAnB,CAAP;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,WAAV,CAAsB,UAAtB,EAAwC;AAC5C,SAAO,YAAY,CAAC,GAAb,CAAiB,UAAjB,CAAP;AACD;AAED,OAAM,SAAU,oBAAV,CAA+B,WAA/B,EAAkD;AACtD,MAAM,EAAE,GAAG,cAAc,CAAC,OAAf,EAAX;AACA,MAAM,MAAM,GAAmB,EAA/B;;AAEA,SAAO,IAAP,EAAa;AAAA,mBACW,EAAE,CAAC,IAAH,EADX;AAAA,QACJ,IADI,YACJ,IADI;AAAA,QACE,KADF,YACE,KADF;;AAEX,QAAI,IAAJ,EAAU;AACR;AACD;;AAJU,gCAKW,KALX;AAAA,QAKJ,GALI;AAAA,QAKC,MALD;;AAAA,qBAMS,GAAG,CAAC,KAAJ,CAAU,GAAV,CANT;AAAA;AAAA,QAMJ,OANI;;AAOX,QAAI,OAAO,KAAK,WAAhB,EAA6B;AAC3B,MAAA,MAAM,CAAC,IAAP,CAAY,MAAZ;AACD;AACF;;AACD,SAAO,MAAP;AACD;AAED;;;;;;;;;;AAUG;;AACH,OAAM,SAAU,cAAV,CAAyB,MAAzB,EAA6C;AAAA,MAC1C,UAD0C,GACf,MADe,CAC1C,UAD0C;AAAA,MAC9B,WAD8B,GACf,MADe,CAC9B,WAD8B;AAEjD,MAAM,GAAG,GAAG,OAAO,CAAC,UAAD,EAAa,WAAb,CAAnB;;AACA,MAAI,cAAc,CAAC,GAAf,CAAmB,GAAnB,CAAJ,EAA6B;AAC3B,IAAA,OAAO,CAAC,IAAR,CACI,sBAAe,UAAf,iCACI,WADJ,4BADJ;AAGD;;AACD,EAAA,cAAc,CAAC,GAAf,CAAmB,GAAnB,EAAwB,MAAxB;AACD;AAED;;;;;;;AAOG;;AACH,OAAM,SAAU,gBAAV,CAA2B,MAA3B,EAA6C;AAAA,MAC1C,UAD0C,GAC5B,MAD4B,CAC1C,UAD0C;;AAGjD,MAAI,YAAY,CAAC,GAAb,CAAiB,UAAjB,CAAJ,EAAkC;AAChC;AACA;AACA,QAAI,GAAG,GAAG,OAAN,CAAc,OAAd,CAAJ,EAA4B;AAC1B,MAAA,OAAO,CAAC,IAAR,wCAA6C,UAA7C;AACD;AACF;;AACD,EAAA,YAAY,CAAC,GAAb,CAAiB,UAAjB,EAA6B,MAA7B;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,gBAAV,CACF,UADE,EACkB,WADlB,EACqC;AACzC,MAAM,GAAG,GAAG,OAAO,CAAC,UAAD,EAAa,WAAb,CAAnB;;AACA,MAAI,CAAC,cAAc,CAAC,GAAf,CAAmB,GAAnB,CAAL,EAA8B;AAC5B,UAAM,IAAI,KAAJ,CACF,sBAAe,UAAf,iCACI,WADJ,wBADE,CAAN;AAGD;;AACD,EAAA,cAAc,CAAC,MAAf,CAAsB,GAAtB;AACD;AAED;;AACA,OAAM,SAAU,kBAAV,CAA6B,UAA7B,EAA+C;AACnD,MAAI,CAAC,YAAY,CAAC,GAAb,CAAiB,UAAjB,CAAL,EAAmC;AACjC,UAAM,IAAI,KAAJ,yBACe,UADf,qCAAN;AAED;;AACD,EAAA,YAAY,CAAC,MAAb,CAAoB,UAApB;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,qBAAV,CACF,qBADE,EAC6B,cAD7B,EACmD;AACvD,MAAM,OAAO,GAAG,oBAAoB,CAAC,qBAAD,CAApC;AACA,EAAA,OAAO,CAAC,OAAR,CAAgB,UAAA,YAAY,EAAG;AAC7B,QAAM,eAAe,GACjB,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,YAAlB,EAAgC;AAAC,MAAA,WAAW,EAAE;AAAd,KAAhC,CADJ;AAEA,IAAA,cAAc,CAAC,eAAD,CAAd;AACD,GAJD;AAKD;;AAED,SAAS,OAAT,CAAiB,UAAjB,EAAqC,WAArC,EAAwD;AACtD,mBAAU,WAAV,cAAyB,UAAzB;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport { getGlobal } from './global_util';\nconst kernelRegistry = getGlobal('kernelRegistry', () => new Map());\nconst gradRegistry = getGlobal('gradRegistry', () => new Map());\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\nexport function getKernel(kernelName, backendName) {\n    const key = makeKey(kernelName, backendName);\n    return kernelRegistry.get(key);\n}\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\nexport function getGradient(kernelName) {\n    return gradRegistry.get(kernelName);\n}\nexport function getKernelsForBackend(backendName) {\n    const it = kernelRegistry.entries();\n    const result = [];\n    while (true) {\n        const { done, value } = it.next();\n        if (done) {\n            break;\n        }\n        const [key, config] = value;\n        const [backend,] = key.split('_');\n        if (backend === backendName) {\n            result.push(config);\n        }\n    }\n    return result;\n}\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\nexport function registerKernel(config) {\n    const { kernelName, backendName } = config;\n    const key = makeKey(kernelName, backendName);\n    if (kernelRegistry.has(key)) {\n        console.warn(`The kernel '${kernelName}' for backend ` +\n            `'${backendName}' is already registered`);\n    }\n    kernelRegistry.set(key, config);\n}\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\nexport function registerGradient(config) {\n    const { kernelName } = config;\n    if (gradRegistry.has(kernelName)) {\n        // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n        // to debug mode.\n        if (env().getBool('DEBUG')) {\n            console.warn(`Overriding the gradient for '${kernelName}'`);\n        }\n    }\n    gradRegistry.set(kernelName, config);\n}\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\nexport function unregisterKernel(kernelName, backendName) {\n    const key = makeKey(kernelName, backendName);\n    if (!kernelRegistry.has(key)) {\n        throw new Error(`The kernel '${kernelName}' for backend ` +\n            `'${backendName}' is not registered`);\n    }\n    kernelRegistry.delete(key);\n}\n/** Removes the registered gradient from the global registry. */\nexport function unregisterGradient(kernelName) {\n    if (!gradRegistry.has(kernelName)) {\n        throw new Error(`The gradient '${kernelName}' for backend is not registered`);\n    }\n    gradRegistry.delete(kernelName);\n}\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\nexport function copyRegisteredKernels(registeredBackendName, newBackendName) {\n    const kernels = getKernelsForBackend(registeredBackendName);\n    kernels.forEach(kernelConfig => {\n        const newKernelConfig = Object.assign({}, kernelConfig, { backendName: newBackendName });\n        registerKernel(newKernelConfig);\n    });\n}\nfunction makeKey(kernelName, backendName) {\n    return `${backendName}_${kernelName}`;\n}\n//# sourceMappingURL=kernel_registry.js.map"]},"metadata":{},"sourceType":"module"}