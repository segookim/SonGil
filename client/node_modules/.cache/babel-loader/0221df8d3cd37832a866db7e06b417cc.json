{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, env, upcastType } from '@tensorflow/tfjs-core';\nimport { AddNProgram } from '../addn_gpu';\nimport { AddNPackedProgram } from '../addn_packed_gpu';\nimport { identity } from './Identity';\nexport function addN(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var tensors = inputs;\n\n  if (tensors.length === 1) {\n    return identity({\n      inputs: {\n        x: tensors[0]\n      },\n      backend: backend\n    });\n  } // Limit the number of uploaded textures for optimization.\n\n\n  if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    var midIndex = Math.floor(tensors.length / 2);\n    var leftSide = addN({\n      inputs: tensors.slice(0, midIndex),\n      backend: backend\n    });\n    var rightSide = addN({\n      inputs: tensors.slice(midIndex),\n      backend: backend\n    });\n    return addN({\n      inputs: [leftSide, rightSide],\n      backend: backend\n    });\n  }\n\n  var dtype = tensors.map(function (t) {\n    return t.dtype;\n  }).reduce(function (d1, d2) {\n    return upcastType(d1, d2);\n  });\n  var shapes = tensors.map(function (t) {\n    return t.shape;\n  }); // We can make sure shapes are identical in op level.\n\n  var usePackedOp = env().getBool('WEBGL_PACK');\n  var program = usePackedOp ? new AddNPackedProgram(tensors[0].shape, shapes) : new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\nexport var addNConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN\n};","map":{"version":3,"sources":["../../src/kernels/AddN.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,IAAR,EAA0B,GAA1B,EAAqE,UAArE,QAAsF,uBAAtF;AAEA,SAAQ,WAAR,QAA0B,aAA1B;AACA,SAAQ,iBAAR,QAAgC,oBAAhC;AAEA,SAAQ,QAAR,QAAuB,YAAvB;AAEA,OAAM,SAAU,IAAV,CAAe,IAAf,EAAoE;AAAA,MAEjE,MAFiE,GAE9C,IAF8C,CAEjE,MAFiE;AAAA,MAEzD,OAFyD,GAE9C,IAF8C,CAEzD,OAFyD;AAIxE,MAAM,OAAO,GAAG,MAAhB;;AACA,MAAI,OAAO,CAAC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,WAAO,QAAQ,CAAC;AAAC,MAAA,MAAM,EAAE;AAAC,QAAA,CAAC,EAAE,OAAO,CAAC,CAAD;AAAX,OAAT;AAA0B,MAAA,OAAO,EAAP;AAA1B,KAAD,CAAf;AACD,GAPuE,CASxE;;;AACA,MAAI,OAAO,CAAC,MAAR,GAAiB,GAAG,GAAG,GAAN,CAAU,8BAAV,CAArB,EAAgE;AAC9D,QAAM,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,MAAR,GAAiB,CAA5B,CAAjB;AACA,QAAM,QAAQ,GAAG,IAAI,CAAC;AAAC,MAAA,MAAM,EAAE,OAAO,CAAC,KAAR,CAAc,CAAd,EAAiB,QAAjB,CAAT;AAAqC,MAAA,OAAO,EAAP;AAArC,KAAD,CAArB;AACA,QAAM,SAAS,GAAG,IAAI,CAAC;AAAC,MAAA,MAAM,EAAE,OAAO,CAAC,KAAR,CAAc,QAAd,CAAT;AAAkC,MAAA,OAAO,EAAP;AAAlC,KAAD,CAAtB;AACA,WAAO,IAAI,CAAC;AAAC,MAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX,CAAT;AAAgC,MAAA,OAAO,EAAP;AAAhC,KAAD,CAAX;AACD;;AAED,MAAM,KAAK,GACP,OAAO,CAAC,GAAR,CAAY,UAAA,CAAC;AAAA,WAAI,CAAC,CAAC,KAAN;AAAA,GAAb,EAA0B,MAA1B,CAAiC,UAAC,EAAD,EAAK,EAAL;AAAA,WAAY,UAAU,CAAC,EAAD,EAAK,EAAL,CAAtB;AAAA,GAAjC,CADJ;AAEA,MAAM,MAAM,GAAG,OAAO,CAAC,GAAR,CAAY,UAAA,CAAC;AAAA,WAAI,CAAC,CAAC,KAAN;AAAA,GAAb,CAAf,CAnBwE,CAoBxE;;AACA,MAAM,WAAW,GAAG,GAAG,GAAG,OAAN,CAAc,YAAd,CAApB;AACA,MAAM,OAAO,GAAG,WAAW,GACvB,IAAI,iBAAJ,CAAsB,OAAO,CAAC,CAAD,CAAP,CAAW,KAAjC,EAAwC,MAAxC,CADuB,GAEvB,IAAI,WAAJ,CAAgB,OAAO,CAAC,CAAD,CAAP,CAAW,KAA3B,EAAkC,MAAlC,CAFJ;AAGA,SAAO,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,CAAP;AACD;AAED,OAAO,IAAM,UAAU,GAAiB;AACtC,EAAA,UAAU,EAAE,IAD0B;AAEtC,EAAA,WAAW,EAAE,OAFyB;AAGtC,EAAA,UAAU,EAAE;AAH0B,CAAjC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, env, upcastType } from '@tensorflow/tfjs-core';\nimport { AddNProgram } from '../addn_gpu';\nimport { AddNPackedProgram } from '../addn_packed_gpu';\nimport { identity } from './Identity';\nexport function addN(args) {\n    const { inputs, backend } = args;\n    const tensors = inputs;\n    if (tensors.length === 1) {\n        return identity({ inputs: { x: tensors[0] }, backend });\n    }\n    // Limit the number of uploaded textures for optimization.\n    if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n        const midIndex = Math.floor(tensors.length / 2);\n        const leftSide = addN({ inputs: tensors.slice(0, midIndex), backend });\n        const rightSide = addN({ inputs: tensors.slice(midIndex), backend });\n        return addN({ inputs: [leftSide, rightSide], backend });\n    }\n    const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n    const shapes = tensors.map(t => t.shape);\n    // We can make sure shapes are identical in op level.\n    const usePackedOp = env().getBool('WEBGL_PACK');\n    const program = usePackedOp ?\n        new AddNPackedProgram(tensors[0].shape, shapes) :\n        new AddNProgram(tensors[0].shape, shapes);\n    return backend.runWebGLProgram(program, tensors, dtype);\n}\nexport const addNConfig = {\n    kernelName: AddN,\n    backendName: 'webgl',\n    kernelFunc: addN\n};\n//# sourceMappingURL=AddN.js.map"]},"metadata":{},"sourceType":"module"}