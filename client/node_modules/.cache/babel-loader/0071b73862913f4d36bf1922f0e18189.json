{"ast":null,"code":"import _slicedToArray from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transposeImpl } from './Transpose_impl';\nexport function sumImpl(x, axis, keepDims, backend) {\n  var reductionIndices = axis;\n  var xRank = x.shape.length;\n  var origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  var axes = origAxes;\n  var permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  var sumInputIsTransposed = permutedAxes != null;\n  var sumInput = x;\n\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl(x, permutedAxes, backend);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n\n  var _backend_util$compute = backend_util.computeOutAndReduceShapes(sumInput.shape, axes),\n      _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n      sumOutShape = _backend_util$compute2[0],\n      reduceShape = _backend_util$compute2[1];\n\n  var outShape = sumOutShape;\n\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n\n  var inSize = util.sizeFromShape(reduceShape);\n  var xSize = util.sizeFromShape(x.shape);\n  var batchSize = xSize / inSize;\n  var reshapedInput = reshape({\n    inputs: {\n      x: sumInput\n    },\n    attrs: {\n      shape: [batchSize, inSize]\n    },\n    backend: backend\n  });\n  var outType = sumOutType(x.dtype);\n  var reduced = reduce(reshapedInput, outType, 'sum', backend);\n  var out = reshape({\n    inputs: {\n      x: reduced\n    },\n    attrs: {\n      shape: outShape\n    },\n    backend: backend\n  });\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (sumInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(sumInput);\n  }\n\n  return out;\n}","map":{"version":3,"sources":["../../src/kernels/Sum_impl.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsB,UAAtB,EAA8C,IAA9C,QAAyD,uBAAzD;AAGA,SAAQ,MAAR,QAAqB,wBAArB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA,SAAQ,aAAR,QAA4B,kBAA5B;AAEA,OAAM,SAAU,OAAV,CACF,CADE,EACa,IADb,EACoC,QADpC,EAEF,OAFE,EAEuB;AAC3B,MAAM,gBAAgB,GAAG,IAAzB;AAEA,MAAM,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,MAAtB;AAEA,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAL,CAAoB,gBAApB,EAAsC,CAAC,CAAC,KAAxC,CAAjB;AACA,MAAI,IAAI,GAAG,QAAX;AACA,MAAM,YAAY,GAAG,YAAY,CAAC,kBAAb,CAAgC,IAAhC,EAAsC,KAAtC,CAArB;AACA,MAAM,oBAAoB,GAAG,YAAY,IAAI,IAA7C;AAEA,MAAI,QAAQ,GAAG,CAAf;;AACA,MAAI,oBAAJ,EAA0B;AACxB,IAAA,QAAQ,GAAG,aAAa,CAAC,CAAD,EAAI,YAAJ,EAAkB,OAAlB,CAAxB;AAEA,IAAA,IAAI,GAAG,YAAY,CAAC,gBAAb,CAA8B,IAAI,CAAC,MAAnC,EAA2C,KAA3C,CAAP;AACD;;AAED,EAAA,YAAY,CAAC,0BAAb,CAAwC,KAAxC,EAA+C,IAA/C,EAAqD,KAArD;;AAjB2B,8BAmBvB,YAAY,CAAC,yBAAb,CAAuC,QAAQ,CAAC,KAAhD,EAAuD,IAAvD,CAnBuB;AAAA;AAAA,MAkBpB,WAlBoB;AAAA,MAkBP,WAlBO;;AAqB3B,MAAI,QAAQ,GAAG,WAAf;;AACA,MAAI,QAAJ,EAAc;AACZ;AACA,IAAA,QAAQ,GAAG,YAAY,CAAC,oBAAb,CAAkC,WAAlC,EAA+C,QAA/C,CAAX;AACD;;AAED,MAAM,MAAM,GAAG,IAAI,CAAC,aAAL,CAAmB,WAAnB,CAAf;AACA,MAAM,KAAK,GAAG,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,CAAd;AACA,MAAM,SAAS,GAAG,KAAK,GAAG,MAA1B;AACA,MAAM,aAAa,GAAG,OAAO,CACzB;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAwB,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE,CAAC,SAAD,EAAY,MAAZ;AAAR,KAA/B;AAA6D,IAAA,OAAO,EAAP;AAA7D,GADyB,CAA7B;AAGA,MAAM,OAAO,GAAG,UAAU,CAAC,CAAC,CAAC,KAAH,CAA1B;AAEA,MAAM,OAAO,GAAG,MAAM,CAAC,aAAD,EAAgB,OAAhB,EAAyB,KAAzB,EAAgC,OAAhC,CAAtB;AACA,MAAM,GAAG,GACL,OAAO,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAuB,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE;AAAR,KAA9B;AAAiD,IAAA,OAAO,EAAP;AAAjD,GAAD,CADX;AAGA,EAAA,OAAO,CAAC,6BAAR,CAAsC,aAAtC;AACA,EAAA,OAAO,CAAC,6BAAR,CAAsC,OAAtC;;AACA,MAAI,oBAAJ,EAA0B;AACxB,IAAA,OAAO,CAAC,6BAAR,CAAsC,QAAtC;AACD;;AAED,SAAO,GAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transposeImpl } from './Transpose_impl';\nexport function sumImpl(x, axis, keepDims, backend) {\n    const reductionIndices = axis;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const sumInputIsTransposed = permutedAxes != null;\n    let sumInput = x;\n    if (sumInputIsTransposed) {\n        sumInput = transposeImpl(x, permutedAxes, backend);\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [sumOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n    let outShape = sumOutShape;\n    if (keepDims) {\n        // rather than reshape at the end, set the target shape here.\n        outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n    }\n    const inSize = util.sizeFromShape(reduceShape);\n    const xSize = util.sizeFromShape(x.shape);\n    const batchSize = xSize / inSize;\n    const reshapedInput = reshape({ inputs: { x: sumInput }, attrs: { shape: [batchSize, inSize] }, backend });\n    const outType = sumOutType(x.dtype);\n    const reduced = reduce(reshapedInput, outType, 'sum', backend);\n    const out = reshape({ inputs: { x: reduced }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(reshapedInput);\n    backend.disposeIntermediateTensorInfo(reduced);\n    if (sumInputIsTransposed) {\n        backend.disposeIntermediateTensorInfo(sumInput);\n    }\n    return out;\n}\n//# sourceMappingURL=Sum_impl.js.map"]},"metadata":{},"sourceType":"module"}