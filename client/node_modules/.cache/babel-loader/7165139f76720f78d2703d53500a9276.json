{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { BatchNormProgram } from '../batchnorm_gpu';\nimport { BatchNormPackedProgram } from '../batchnorm_packed_gpu';\nexport const batchNorm = ({\n  inputs,\n  backend,\n  attrs\n}) => {\n  const {\n    x,\n    mean,\n    variance,\n    offset,\n    scale\n  } = inputs;\n  util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.');\n  util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.');\n  util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.');\n  let {\n    varianceEpsilon\n  } = attrs;\n\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n  let offsetShape = null;\n\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ? new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) : new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n  const output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n  return output;\n};\nexport const batchNormConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm\n};","map":{"version":3,"sources":["../../src/kernels/BatchNorm.ts"],"names":[],"mappings":"AACA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,GAAR,EAAa,cAAb,EAA8G,IAA9G,QAAyH,uBAAzH;AAGA,SAAQ,gBAAR,QAA+B,kBAA/B;AACA,SAAQ,sBAAR,QAAqC,yBAArC;AAEA,OAAO,MAAM,SAAS,GAIH,CAAC;AAAC,EAAA,MAAD;AAAS,EAAA,OAAT;AAAkB,EAAA;AAAlB,CAAD,KAA6B;AAC9C,QAAM;AAAC,IAAA,CAAD;AAAI,IAAA,IAAJ;AAAU,IAAA,QAAV;AAAoB,IAAA,MAApB;AAA4B,IAAA;AAA5B,MAAqC,MAA3C;AAEA,EAAA,IAAI,CAAC,MAAL,CACI,IAAI,CAAC,KAAL,CAAW,MAAX,KAAsB,QAAQ,CAAC,KAAT,CAAe,MADzC,EAEI,MAAM,qEACF,cAHR;AAIA,EAAA,IAAI,CAAC,MAAL,CACI,MAAM,IAAI,IAAV,IAAkB,IAAI,CAAC,KAAL,CAAW,MAAX,KAAsB,MAAM,CAAC,KAAP,CAAa,MADzD,EAEI,MAAM,mEACF,cAHR;AAIA,EAAA,IAAI,CAAC,MAAL,CACI,KAAK,IAAI,IAAT,IAAiB,IAAI,CAAC,KAAL,CAAW,MAAX,KAAsB,KAAK,CAAC,KAAN,CAAY,MADvD,EAEI,MAAM,kEACF,cAHR;AAKA,MAAI;AAAC,IAAA;AAAD,MAAoB,KAAxB;;AACA,MAAI,eAAe,IAAI,IAAvB,EAA6B;AAC3B,IAAA,eAAe,GAAG,KAAlB;AACD;;AAED,QAAM,WAAW,GAAG,CAAC,CAAD,EAAI,IAAJ,EAAU,QAAV,CAApB;AAEA,MAAI,WAAW,GAAG,IAAlB;;AACA,MAAI,MAAM,IAAI,IAAd,EAAoB;AAClB,IAAA,WAAW,GAAG,MAAM,CAAC,KAArB;AACA,IAAA,WAAW,CAAC,IAAZ,CAAiB,MAAjB;AACD;;AAED,MAAI,UAAU,GAAG,IAAjB;;AACA,MAAI,KAAK,IAAI,IAAb,EAAmB;AACjB,IAAA,UAAU,GAAG,KAAK,CAAC,KAAnB;AACA,IAAA,WAAW,CAAC,IAAZ,CAAiB,KAAjB;AACD;;AAED,QAAM,OAAO,GAAG,GAAG,GAAG,OAAN,CAAc,0BAAd,IACZ,IAAI,sBAAJ,CACI,CAAC,CAAC,KADN,EACa,IAAI,CAAC,KADlB,EACyB,QAAQ,CAAC,KADlC,EACyC,WADzC,EACsD,UADtD,EAEI,eAFJ,CADY,GAIZ,IAAI,gBAAJ,CACI,CAAC,CAAC,KADN,EACa,IAAI,CAAC,KADlB,EACyB,QAAQ,CAAC,KADlC,EACyC,WADzC,EACsD,UADtD,EAEI,eAFJ,CAJJ;AAOA,QAAM,MAAM,GACR,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,WAAjC,EAA8C,WAAW,CAAC,CAAD,CAAX,CAAe,KAA7D,CADJ;AAGA,SAAO,MAAP;AACD,CAlDM;AAoDP,OAAO,MAAM,eAAe,GAAiB;AAC3C,EAAA,UAAU,EAAE,cAD+B;AAE3C,EAAA,WAAW,EAAE,OAF8B;AAG3C,EAAA,UAAU,EAAE;AAH+B,CAAtC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { BatchNormProgram } from '../batchnorm_gpu';\nimport { BatchNormPackedProgram } from '../batchnorm_packed_gpu';\nexport const batchNorm = ({ inputs, backend, attrs }) => {\n    const { x, mean, variance, offset, scale } = inputs;\n    util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' +\n        'equal ranks.');\n    util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' +\n        'equal ranks.');\n    util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' +\n        'equal ranks.');\n    let { varianceEpsilon } = attrs;\n    if (varianceEpsilon == null) {\n        varianceEpsilon = 0.001;\n    }\n    const finalInputs = [x, mean, variance];\n    let offsetShape = null;\n    if (offset != null) {\n        offsetShape = offset.shape;\n        finalInputs.push(offset);\n    }\n    let scaleShape = null;\n    if (scale != null) {\n        scaleShape = scale.shape;\n        finalInputs.push(scale);\n    }\n    const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n        new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) :\n        new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n    const output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n    return output;\n};\nexport const batchNormConfig = {\n    kernelName: FusedBatchNorm,\n    backendName: 'webgl',\n    kernelFunc: batchNorm,\n};\n//# sourceMappingURL=BatchNorm.js.map"]},"metadata":{},"sourceType":"module"}