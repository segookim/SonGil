{"ast":null,"code":"import _defineProperty from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkInterpolationFormat, checkPaddingMode } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength, deconvLength, normalizeArray } from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\n\nexport function preprocessConv2DInput(x, dataFormat) {\n  // TODO(cais): Cast type to float32 if not.\n  return tidy(function () {\n    checkDataFormat(dataFormat);\n\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 1]); // NCHW -> NHWC.\n    } else {\n      return x;\n    }\n  });\n}\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\n\nexport function preprocessConv3DInput(x, dataFormat) {\n  return tidy(function () {\n    checkDataFormat(dataFormat);\n\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 4, 1]); // NCDHW -> NDHWC.\n    } else {\n      return x;\n    }\n  });\n}\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\n\nexport function conv1dWithBias(x, kernel, bias) {\n  var strides = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var padding = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'valid';\n  var dataFormat = arguments.length > 5 ? arguments[5] : undefined;\n  var dilationRate = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;\n  return tidy(function () {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat); // Check the ranks of x, kernel and bias.\n\n    if (x.shape.length !== 3) {\n      throw new ValueError(\"The input of a conv1dWithBias operation should be 3, but is \" + \"\".concat(x.shape.length, \" instead.\"));\n    }\n\n    if (kernel.shape.length !== 3) {\n      throw new ValueError(\"The kernel for a conv1dWithBias operation should be 3, but is \" + \"\".concat(kernel.shape.length, \" instead\"));\n    }\n\n    if (bias != null && bias.shape.length !== 1) {\n      throw new ValueError(\"The bias for a conv1dWithBias operation should be 1, but is \" + \"\".concat(kernel.shape.length, \" instead\"));\n    } // TODO(cais): Support CAUSAL padding mode.\n\n\n    if (dataFormat === 'channelsFirst') {\n      x = tfc.transpose(x, [0, 2, 1]); // NCW -> NWC.\n    }\n\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');\n    }\n\n    var y = tfc.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n\n    return y;\n  });\n}\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\n\nexport function conv1d(x, kernel) {\n  var strides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'valid';\n  var dataFormat = arguments.length > 4 ? arguments[4] : undefined;\n  var dilationRate = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  return tidy(function () {\n    checkDataFormat(dataFormat);\n    return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\n\nexport function conv2d(x, kernel) {\n  var strides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [1, 1];\n  var padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'valid';\n  var dataFormat = arguments.length > 4 ? arguments[4] : undefined;\n  var dilationRate = arguments.length > 5 ? arguments[5] : undefined;\n  return tidy(function () {\n    checkDataFormat(dataFormat);\n    return conv2dWithBiasActivation(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\n\nexport function conv2dWithBiasActivation(x, kernel, bias) {\n  var strides = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1, 1];\n  var padding = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'valid';\n  var dataFormat = arguments.length > 5 ? arguments[5] : undefined;\n  var dilationRate = arguments.length > 6 ? arguments[6] : undefined;\n  var activation = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n  return tidy(function () {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat);\n\n    if (x.rank !== 3 && x.rank !== 4) {\n      throw new ValueError(\"conv2dWithBiasActivation expects input to be of rank 3 or 4, \" + \"but received \".concat(x.rank, \".\"));\n    }\n\n    if (kernel.rank !== 3 && kernel.rank !== 4) {\n      throw new ValueError(\"conv2dWithBiasActivation expects kernel to be of rank 3 or 4, \" + \"but received \".concat(x.rank, \".\"));\n    }\n\n    var y = preprocessConv2DInput(x, dataFormat);\n\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');\n    }\n\n    y = tfc.fused.conv2d({\n      x: y,\n      filter: kernel,\n      strides: strides,\n      pad: padding === 'same' ? 'same' : 'valid',\n      dilations: dilationRate,\n      dataFormat: 'NHWC',\n      bias: bias,\n      activation: activation\n    });\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n\n    return y;\n  });\n}\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\n\nexport function conv3d(x, kernel) {\n  var strides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [1, 1, 1];\n  var padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'valid';\n  var dataFormat = arguments.length > 4 ? arguments[4] : undefined;\n  var dilationRate = arguments.length > 5 ? arguments[5] : undefined;\n  return tidy(function () {\n    checkDataFormat(dataFormat);\n    return conv3dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\n\nexport function conv3dWithBias(x, kernel, bias) {\n  var strides = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1, 1, 1];\n  var padding = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'valid';\n  var dataFormat = arguments.length > 5 ? arguments[5] : undefined;\n  var dilationRate = arguments.length > 6 ? arguments[6] : undefined;\n  return tidy(function () {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat);\n\n    if (x.rank !== 4 && x.rank !== 5) {\n      throw new ValueError(\"conv3dWithBias expects input to be of rank 4 or 5, but received \" + \"\".concat(x.rank, \".\"));\n    }\n\n    if (kernel.rank !== 4 && kernel.rank !== 5) {\n      throw new ValueError(\"conv3dWithBias expects kernel to be of rank 4 or 5, but received \" + \"\".concat(x.rank, \".\"));\n    }\n\n    var y = preprocessConv3DInput(x, dataFormat);\n\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv3dWithBias is not ' + 'implemented yet.');\n    }\n\n    y = tfc.conv3d(y, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n    }\n\n    return y;\n  });\n}\n/**\n * Abstract convolution layer.\n */\n\nexport var BaseConv = /*#__PURE__*/function (_Layer) {\n  _inherits(BaseConv, _Layer);\n\n  var _super = _createSuper(BaseConv);\n\n  function BaseConv(rank, args) {\n    var _this;\n\n    _classCallCheck(this, BaseConv);\n\n    _this = _super.call(this, args);\n    _this.bias = null;\n    _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    BaseConv.verifyArgs(args);\n    _this.rank = rank;\n    generic_utils.assertPositiveInteger(_this.rank, 'rank');\n\n    if (_this.rank !== 1 && _this.rank !== 2 && _this.rank !== 3) {\n      throw new NotImplementedError(\"Convolution layer for rank other than 1, 2, or 3 (\".concat(_this.rank, \") is \") + \"not implemented yet.\");\n    }\n\n    _this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n    _this.strides = normalizeArray(args.strides == null ? 1 : args.strides, rank, 'strides');\n    _this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(_this.padding);\n    _this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(_this.dataFormat);\n    _this.activation = getActivation(args.activation);\n    _this.useBias = args.useBias == null ? true : args.useBias;\n    _this.biasInitializer = getInitializer(args.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n    _this.biasConstraint = getConstraint(args.biasConstraint);\n    _this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    _this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    _this.dilationRate = normalizeArray(args.dilationRate == null ? 1 : args.dilationRate, rank, 'dilationRate');\n\n    if (_this.rank === 1 && Array.isArray(_this.dilationRate) && _this.dilationRate.length !== 1) {\n      throw new ValueError(\"dilationRate must be a number or an array of a single number \" + \"for 1D convolution, but received \" + \"\".concat(JSON.stringify(_this.dilationRate)));\n    } else if (_this.rank === 2) {\n      if (typeof _this.dilationRate === 'number') {\n        _this.dilationRate = [_this.dilationRate, _this.dilationRate];\n      } else if (_this.dilationRate.length !== 2) {\n        throw new ValueError(\"dilationRate must be a number or array of two numbers for 2D \" + \"convolution, but received \".concat(JSON.stringify(_this.dilationRate)));\n      }\n    } else if (_this.rank === 3) {\n      if (typeof _this.dilationRate === 'number') {\n        _this.dilationRate = [_this.dilationRate, _this.dilationRate, _this.dilationRate];\n      } else if (_this.dilationRate.length !== 3) {\n        throw new ValueError(\"dilationRate must be a number or array of three numbers for 3D \" + \"convolution, but received \".concat(JSON.stringify(_this.dilationRate)));\n      }\n    }\n\n    return _this;\n  }\n\n  _createClass(BaseConv, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        kernelSize: this.kernelSize,\n        strides: this.strides,\n        padding: this.padding,\n        dataFormat: this.dataFormat,\n        dilationRate: this.dilationRate,\n        activation: serializeActivation(this.activation),\n        useBias: this.useBias,\n        biasInitializer: serializeInitializer(this.biasInitializer),\n        biasRegularizer: serializeRegularizer(this.biasRegularizer),\n        activityRegularizer: serializeRegularizer(this.activityRegularizer),\n        biasConstraint: serializeConstraint(this.biasConstraint)\n      };\n\n      var baseConfig = _get(_getPrototypeOf(BaseConv.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }], [{\n    key: \"verifyArgs\",\n    value: function verifyArgs(args) {\n      // Check config.kernelSize type and shape.\n      generic_utils.assert('kernelSize' in args, \"required key 'kernelSize' not in config\");\n\n      if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 3)) {\n        throw new ValueError(\"BaseConv expects config.kernelSize to be number or number[] with \" + \"length 1, 2, or 3, but received \".concat(JSON.stringify(args.kernelSize), \".\"));\n      }\n    }\n  }]);\n\n  return BaseConv;\n}(Layer);\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\n\nexport var Conv = /*#__PURE__*/function (_BaseConv) {\n  _inherits(Conv, _BaseConv);\n\n  var _super2 = _createSuper(Conv);\n\n  function Conv(rank, args) {\n    var _this2;\n\n    _classCallCheck(this, Conv);\n\n    _this2 = _super2.call(this, rank, args);\n    _this2.kernel = null;\n    Conv.verifyArgs(args);\n    _this2.filters = args.filters;\n    generic_utils.assertPositiveInteger(_this2.filters, 'filters');\n    _this2.kernelInitializer = getInitializer(args.kernelInitializer || _this2.DEFAULT_KERNEL_INITIALIZER);\n    _this2.kernelConstraint = getConstraint(args.kernelConstraint);\n    _this2.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    return _this2;\n  }\n\n  _createClass(Conv, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n      if (inputShape[channelAxis] == null) {\n        throw new ValueError(\"The channel dimension of the input should be defined. \" + \"Found \".concat(inputShape[channelAxis]));\n      }\n\n      var inputDim = inputShape[channelAxis];\n      var kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n      this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n\n      if (this.useBias) {\n        this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n      }\n\n      this.inputSpec = [{\n        ndim: this.rank + 2,\n        axes: _defineProperty({}, channelAxis, inputDim)\n      }];\n      this.built = true;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this3 = this;\n\n      return tidy(function () {\n        inputs = getExactlyOneTensor(inputs);\n        var outputs;\n        var biasValue = _this3.bias == null ? null : _this3.bias.read();\n        var fusedActivationName = generic_utils.mapActivationToFusedKernel(_this3.activation.getClassName());\n\n        if (fusedActivationName != null && _this3.rank === 2) {\n          outputs = conv2dWithBiasActivation(inputs, _this3.kernel.read(), biasValue, _this3.strides, _this3.padding, _this3.dataFormat, _this3.dilationRate, fusedActivationName);\n        } else {\n          if (_this3.rank === 1) {\n            outputs = conv1dWithBias(inputs, _this3.kernel.read(), biasValue, _this3.strides[0], _this3.padding, _this3.dataFormat, _this3.dilationRate[0]);\n          } else if (_this3.rank === 2) {\n            // TODO(cais): Move up to constructor.\n            outputs = conv2dWithBiasActivation(inputs, _this3.kernel.read(), biasValue, _this3.strides, _this3.padding, _this3.dataFormat, _this3.dilationRate);\n          } else if (_this3.rank === 3) {\n            outputs = conv3dWithBias(inputs, _this3.kernel.read(), biasValue, _this3.strides, _this3.padding, _this3.dataFormat, _this3.dilationRate);\n          } else {\n            throw new NotImplementedError('convolutions greater than 3D are not implemented yet.');\n          }\n\n          if (_this3.activation != null) {\n            outputs = _this3.activation.apply(outputs);\n          }\n        }\n\n        return outputs;\n      });\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var newSpace = [];\n      var space = this.dataFormat === 'channelsLast' ? inputShape.slice(1, inputShape.length - 1) : inputShape.slice(2);\n\n      for (var i = 0; i < space.length; ++i) {\n        var newDim = convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate : this.dilationRate[i]);\n        newSpace.push(newDim);\n      }\n\n      var outputShape = [inputShape[0]];\n\n      if (this.dataFormat === 'channelsLast') {\n        outputShape = outputShape.concat(newSpace);\n        outputShape.push(this.filters);\n      } else {\n        outputShape.push(this.filters);\n        outputShape = outputShape.concat(newSpace);\n      }\n\n      return outputShape;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        filters: this.filters,\n        kernelInitializer: serializeInitializer(this.kernelInitializer),\n        kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n        kernelConstraint: serializeConstraint(this.kernelConstraint)\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Conv.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }], [{\n    key: \"verifyArgs\",\n    value: function verifyArgs(args) {\n      // Check config.filters type, shape, and value.\n      if (!('filters' in args) || typeof args.filters !== 'number' || args.filters < 1) {\n        throw new ValueError(\"Convolution layer expected config.filters to be a 'number' > 0 \" + \"but got \".concat(JSON.stringify(args.filters)));\n      }\n    }\n  }]);\n\n  return Conv;\n}(BaseConv);\nexport var Conv2D = /*#__PURE__*/function (_Conv) {\n  _inherits(Conv2D, _Conv);\n\n  var _super3 = _createSuper(Conv2D);\n\n  function Conv2D(args) {\n    var _this4;\n\n    _classCallCheck(this, Conv2D);\n\n    _this4 = _super3.call(this, 2, args);\n    Conv2D.verifyArgs(args);\n    return _this4;\n  }\n\n  _createClass(Conv2D, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = _get(_getPrototypeOf(Conv2D.prototype), \"getConfig\", this).call(this);\n\n      delete config['rank'];\n      return config;\n    }\n  }], [{\n    key: \"verifyArgs\",\n    value: function verifyArgs(args) {\n      // config.kernelSize must be a number or array of numbers.\n      if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 2)) {\n        throw new ValueError(\"Conv2D expects config.kernelSize to be number or number[] with \" + \"length 1 or 2, but received \".concat(JSON.stringify(args.kernelSize), \".\"));\n      }\n    }\n  }]);\n\n  return Conv2D;\n}(Conv);\n/** @nocollapse */\n\nConv2D.className = 'Conv2D';\nserialization.registerClass(Conv2D);\nexport var Conv3D = /*#__PURE__*/function (_Conv2) {\n  _inherits(Conv3D, _Conv2);\n\n  var _super4 = _createSuper(Conv3D);\n\n  function Conv3D(args) {\n    var _this5;\n\n    _classCallCheck(this, Conv3D);\n\n    _this5 = _super4.call(this, 3, args);\n    Conv3D.verifyArgs(args);\n    return _this5;\n  }\n\n  _createClass(Conv3D, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = _get(_getPrototypeOf(Conv3D.prototype), \"getConfig\", this).call(this);\n\n      delete config['rank'];\n      return config;\n    }\n  }], [{\n    key: \"verifyArgs\",\n    value: function verifyArgs(args) {\n      // config.kernelSize must be a number or array of numbers.\n      if (typeof args.kernelSize !== 'number') {\n        if (!(Array.isArray(args.kernelSize) && (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n          throw new ValueError(\"Conv3D expects config.kernelSize to be number or\" + \" [number, number, number], but received \".concat(JSON.stringify(args.kernelSize), \".\"));\n        }\n      }\n    }\n  }]);\n\n  return Conv3D;\n}(Conv);\n/** @nocollapse */\n\nConv3D.className = 'Conv3D';\nserialization.registerClass(Conv3D);\nexport var Conv2DTranspose = /*#__PURE__*/function (_Conv2D) {\n  _inherits(Conv2DTranspose, _Conv2D);\n\n  var _super5 = _createSuper(Conv2DTranspose);\n\n  function Conv2DTranspose(args) {\n    var _this6;\n\n    _classCallCheck(this, Conv2DTranspose);\n\n    _this6 = _super5.call(this, args);\n    _this6.inputSpec = [new InputSpec({\n      ndim: 4\n    })];\n\n    if (_this6.padding !== 'same' && _this6.padding !== 'valid') {\n      throw new ValueError(\"Conv2DTranspose currently supports only padding modes 'same' \" + \"and 'valid', but received padding mode \".concat(_this6.padding));\n    }\n\n    return _this6;\n  }\n\n  _createClass(Conv2DTranspose, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n\n      if (inputShape.length !== 4) {\n        throw new ValueError('Input should have rank 4; Received input shape: ' + JSON.stringify(inputShape));\n      }\n\n      var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n      if (inputShape[channelAxis] == null) {\n        throw new ValueError('The channel dimension of the inputs should be defined. ' + 'Found `None`.');\n      }\n\n      var inputDim = inputShape[channelAxis];\n      var kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n      this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n\n      if (this.useBias) {\n        this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n      } // Set input spec.\n\n\n      this.inputSpec = [new InputSpec({\n        ndim: 4,\n        axes: _defineProperty({}, channelAxis, inputDim)\n      })];\n      this.built = true;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this7 = this;\n\n      return tfc.tidy(function () {\n        var input = getExactlyOneTensor(inputs);\n\n        if (input.shape.length !== 4) {\n          throw new ValueError(\"Conv2DTranspose.call() expects input tensor to be rank-4, but \" + \"received a tensor of rank-\".concat(input.shape.length));\n        }\n\n        var inputShape = input.shape;\n        var batchSize = inputShape[0];\n        var hAxis;\n        var wAxis;\n\n        if (_this7.dataFormat === 'channelsFirst') {\n          hAxis = 2;\n          wAxis = 3;\n        } else {\n          hAxis = 1;\n          wAxis = 2;\n        }\n\n        var height = inputShape[hAxis];\n        var width = inputShape[wAxis];\n        var kernelH = _this7.kernelSize[0];\n        var kernelW = _this7.kernelSize[1];\n        var strideH = _this7.strides[0];\n        var strideW = _this7.strides[1]; // Infer the dynamic output shape.\n\n        var outHeight = deconvLength(height, strideH, kernelH, _this7.padding);\n        var outWidth = deconvLength(width, strideW, kernelW, _this7.padding); // Porting Note: We don't branch based on `this.dataFormat` here,\n        // because\n        //   the tjfs-core function `conv2dTranspose` called below always\n        //   assumes channelsLast.\n\n        var outputShape = [batchSize, outHeight, outWidth, _this7.filters];\n\n        if (_this7.dataFormat !== 'channelsLast') {\n          input = tfc.transpose(input, [0, 2, 3, 1]);\n        }\n\n        var outputs = tfc.conv2dTranspose(input, _this7.kernel.read(), outputShape, _this7.strides, _this7.padding);\n\n        if (_this7.dataFormat !== 'channelsLast') {\n          outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n        }\n\n        if (_this7.bias != null) {\n          outputs = K.biasAdd(outputs, _this7.bias.read(), _this7.dataFormat);\n        }\n\n        if (_this7.activation != null) {\n          outputs = _this7.activation.apply(outputs);\n        }\n\n        return outputs;\n      });\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var outputShape = inputShape.slice();\n      var channelAxis;\n      var heightAxis;\n      var widthAxis;\n\n      if (this.dataFormat === 'channelsFirst') {\n        channelAxis = 1;\n        heightAxis = 2;\n        widthAxis = 3;\n      } else {\n        channelAxis = 3;\n        heightAxis = 1;\n        widthAxis = 2;\n      }\n\n      var kernelH = this.kernelSize[0];\n      var kernelW = this.kernelSize[1];\n      var strideH = this.strides[0];\n      var strideW = this.strides[1];\n      outputShape[channelAxis] = this.filters;\n      outputShape[heightAxis] = deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n      outputShape[widthAxis] = deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n      return outputShape;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = _get(_getPrototypeOf(Conv2DTranspose.prototype), \"getConfig\", this).call(this);\n\n      delete config['dilationRate'];\n      return config;\n    }\n  }]);\n\n  return Conv2DTranspose;\n}(Conv2D);\n/** @nocollapse */\n\nConv2DTranspose.className = 'Conv2DTranspose';\nserialization.registerClass(Conv2DTranspose);\nexport var SeparableConv = /*#__PURE__*/function (_Conv3) {\n  _inherits(SeparableConv, _Conv3);\n\n  var _super6 = _createSuper(SeparableConv);\n\n  function SeparableConv(rank, config) {\n    var _this8;\n\n    _classCallCheck(this, SeparableConv);\n\n    _this8 = _super6.call(this, rank, config);\n    _this8.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';\n    _this8.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';\n    _this8.depthwiseKernel = null;\n    _this8.pointwiseKernel = null;\n\n    if (config.filters == null) {\n      throw new ValueError('The `filters` configuration field is required by SeparableConv, ' + 'but is unspecified.');\n    }\n\n    if (config.kernelInitializer != null || config.kernelRegularizer != null || config.kernelConstraint != null) {\n      throw new ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' + 'are invalid for SeparableConv2D. Use depthwiseInitializer, ' + 'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' + 'pointwiseRegularizer and pointwiseConstraint instead.');\n    }\n\n    if (config.padding != null && config.padding !== 'same' && config.padding !== 'valid') {\n      throw new ValueError(\"SeparableConv\".concat(_this8.rank, \"D supports only padding modes: \") + \"'same' and 'valid', but received \".concat(JSON.stringify(config.padding)));\n    }\n\n    _this8.depthMultiplier = config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    _this8.depthwiseInitializer = getInitializer(config.depthwiseInitializer || _this8.DEFAULT_DEPTHWISE_INITIALIZER);\n    _this8.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n    _this8.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n    _this8.pointwiseInitializer = getInitializer(config.depthwiseInitializer || _this8.DEFAULT_POINTWISE_INITIALIZER);\n    _this8.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n    _this8.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n    return _this8;\n  }\n\n  _createClass(SeparableConv, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n\n      if (inputShape.length < this.rank + 2) {\n        throw new ValueError(\"Inputs to SeparableConv\".concat(this.rank, \"D should have rank \") + \"\".concat(this.rank + 2, \", but received input shape: \") + \"\".concat(JSON.stringify(inputShape)));\n      }\n\n      var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n      if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n        throw new ValueError(\"The channel dimension of the inputs should be defined, \" + \"but found \".concat(JSON.stringify(inputShape[channelAxis])));\n      }\n\n      var inputDim = inputShape[channelAxis];\n      var depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);\n      var pointwiseKernelShape = [];\n\n      for (var i = 0; i < this.rank; ++i) {\n        pointwiseKernelShape.push(1);\n      }\n\n      pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n      var trainable = true;\n      this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, 'float32', this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);\n      this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, 'float32', this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);\n\n      if (this.useBias) {\n        this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);\n      } else {\n        this.bias = null;\n      }\n\n      this.inputSpec = [new InputSpec({\n        ndim: this.rank + 2,\n        axes: _defineProperty({}, channelAxis, inputDim)\n      })];\n      this.built = true;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this9 = this;\n\n      return tidy(function () {\n        inputs = getExactlyOneTensor(inputs);\n        var output;\n\n        if (_this9.rank === 1) {\n          throw new NotImplementedError('1D separable convolution is not implemented yet.');\n        } else if (_this9.rank === 2) {\n          if (_this9.dataFormat === 'channelsFirst') {\n            inputs = tfc.transpose(inputs, [0, 2, 3, 1]); // NCHW -> NHWC.\n          }\n\n          output = tfc.separableConv2d(inputs, _this9.depthwiseKernel.read(), _this9.pointwiseKernel.read(), _this9.strides, _this9.padding, _this9.dilationRate, 'NHWC');\n        }\n\n        if (_this9.useBias) {\n          output = K.biasAdd(output, _this9.bias.read(), _this9.dataFormat);\n        }\n\n        if (_this9.activation != null) {\n          output = _this9.activation.apply(output);\n        }\n\n        if (_this9.dataFormat === 'channelsFirst') {\n          output = tfc.transpose(output, [0, 3, 1, 2]); // NHWC -> NCHW.\n        }\n\n        return output;\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = _get(_getPrototypeOf(SeparableConv.prototype), \"getConfig\", this).call(this);\n\n      delete config['rank'];\n      delete config['kernelInitializer'];\n      delete config['kernelRegularizer'];\n      delete config['kernelConstraint'];\n      config['depthwiseInitializer'] = serializeInitializer(this.depthwiseInitializer);\n      config['pointwiseInitializer'] = serializeInitializer(this.pointwiseInitializer);\n      config['depthwiseRegularizer'] = serializeRegularizer(this.depthwiseRegularizer);\n      config['pointwiseRegularizer'] = serializeRegularizer(this.pointwiseRegularizer);\n      config['depthwiseConstraint'] = serializeConstraint(this.depthwiseConstraint);\n      config['pointwiseConstraint'] = serializeConstraint(this.pointwiseConstraint);\n      return config;\n    }\n  }]);\n\n  return SeparableConv;\n}(Conv);\n/** @nocollapse */\n\nSeparableConv.className = 'SeparableConv';\nexport var SeparableConv2D = /*#__PURE__*/function (_SeparableConv) {\n  _inherits(SeparableConv2D, _SeparableConv);\n\n  var _super7 = _createSuper(SeparableConv2D);\n\n  function SeparableConv2D(args) {\n    _classCallCheck(this, SeparableConv2D);\n\n    return _super7.call(this, 2, args);\n  }\n\n  return SeparableConv2D;\n}(SeparableConv);\n/** @nocollapse */\n\nSeparableConv2D.className = 'SeparableConv2D';\nserialization.registerClass(SeparableConv2D);\nexport var Conv1D = /*#__PURE__*/function (_Conv4) {\n  _inherits(Conv1D, _Conv4);\n\n  var _super8 = _createSuper(Conv1D);\n\n  function Conv1D(args) {\n    var _this10;\n\n    _classCallCheck(this, Conv1D);\n\n    _this10 = _super8.call(this, 1, args);\n    Conv1D.verifyArgs(args);\n    _this10.inputSpec = [{\n      ndim: 3\n    }];\n    return _this10;\n  }\n\n  _createClass(Conv1D, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = _get(_getPrototypeOf(Conv1D.prototype), \"getConfig\", this).call(this);\n\n      delete config['rank'];\n      delete config['dataFormat'];\n      return config;\n    }\n  }], [{\n    key: \"verifyArgs\",\n    value: function verifyArgs(args) {\n      // config.kernelSize must be a number or array of numbers.\n      if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 1)) {\n        throw new ValueError(\"Conv1D expects config.kernelSize to be number or number[] with \" + \"length 1, but received \".concat(JSON.stringify(args.kernelSize), \".\"));\n      }\n    }\n  }]);\n\n  return Conv1D;\n}(Conv);\n/** @nocollapse */\n\nConv1D.className = 'Conv1D';\nserialization.registerClass(Conv1D);\nexport var Cropping2D = /*#__PURE__*/function (_Layer2) {\n  _inherits(Cropping2D, _Layer2);\n\n  var _super9 = _createSuper(Cropping2D);\n\n  function Cropping2D(args) {\n    var _this11;\n\n    _classCallCheck(this, Cropping2D);\n\n    _this11 = _super9.call(this, args);\n\n    if (typeof args.cropping === 'number') {\n      _this11.cropping = [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n    } else if (typeof args.cropping[0] === 'number') {\n      _this11.cropping = [[args.cropping[0], args.cropping[0]], [args.cropping[1], args.cropping[1]]];\n    } else {\n      _this11.cropping = args.cropping;\n    }\n\n    _this11.dataFormat = args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n    _this11.inputSpec = [{\n      ndim: 4\n    }];\n    return _this11;\n  }\n\n  _createClass(Cropping2D, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      if (this.dataFormat === 'channelsFirst') {\n        return [inputShape[0], inputShape[1], inputShape[2] - this.cropping[0][0] - this.cropping[0][1], inputShape[3] - this.cropping[1][0] - this.cropping[1][1]];\n      } else {\n        return [inputShape[0], inputShape[1] - this.cropping[0][0] - this.cropping[0][1], inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]];\n      }\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this12 = this;\n\n      return tidy(function () {\n        inputs = getExactlyOneTensor(inputs);\n\n        if (_this12.dataFormat === 'channelsLast') {\n          var hSliced = K.sliceAlongAxis(inputs, _this12.cropping[0][0], inputs.shape[1] - _this12.cropping[0][0] - _this12.cropping[0][1], 2);\n          return K.sliceAlongAxis(hSliced, _this12.cropping[1][0], inputs.shape[2] - _this12.cropping[1][1] - _this12.cropping[1][0], 3);\n        } else {\n          var _hSliced = K.sliceAlongAxis(inputs, _this12.cropping[0][0], inputs.shape[2] - _this12.cropping[0][0] - _this12.cropping[0][1], 3);\n\n          return K.sliceAlongAxis(_hSliced, _this12.cropping[1][0], inputs.shape[3] - _this12.cropping[1][1] - _this12.cropping[1][0], 4);\n        }\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        cropping: this.cropping,\n        dataFormat: this.dataFormat\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Cropping2D.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return Cropping2D;\n}(Layer);\n/** @nocollapse */\n\nCropping2D.className = 'Cropping2D';\nserialization.registerClass(Cropping2D);\nexport var UpSampling2D = /*#__PURE__*/function (_Layer3) {\n  _inherits(UpSampling2D, _Layer3);\n\n  var _super10 = _createSuper(UpSampling2D);\n\n  function UpSampling2D(args) {\n    var _this13;\n\n    _classCallCheck(this, UpSampling2D);\n\n    _this13 = _super10.call(this, args);\n    _this13.DEFAULT_SIZE = [2, 2];\n    _this13.inputSpec = [{\n      ndim: 4\n    }];\n    _this13.size = args.size == null ? _this13.DEFAULT_SIZE : args.size;\n    _this13.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(_this13.dataFormat);\n    _this13.interpolation = args.interpolation == null ? 'nearest' : args.interpolation;\n    checkInterpolationFormat(_this13.interpolation);\n    return _this13;\n  }\n\n  _createClass(UpSampling2D, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      if (this.dataFormat === 'channelsFirst') {\n        var height = inputShape[2] == null ? null : this.size[0] * inputShape[2];\n        var width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n        return [inputShape[0], inputShape[1], height, width];\n      } else {\n        var _height = inputShape[1] == null ? null : this.size[0] * inputShape[1];\n\n        var _width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n\n        return [inputShape[0], _height, _width, inputShape[3]];\n      }\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this14 = this;\n\n      return tfc.tidy(function () {\n        var input = getExactlyOneTensor(inputs);\n        var inputShape = input.shape;\n\n        if (_this14.dataFormat === 'channelsFirst') {\n          input = tfc.transpose(input, [0, 2, 3, 1]);\n          var height = _this14.size[0] * inputShape[2];\n          var width = _this14.size[1] * inputShape[3];\n          var resized = _this14.interpolation === 'nearest' ? input.resizeNearestNeighbor([height, width]) : input.resizeBilinear([height, width]);\n          return tfc.transpose(resized, [0, 3, 1, 2]);\n        } else {\n          var _height2 = _this14.size[0] * inputShape[1];\n\n          var _width2 = _this14.size[1] * inputShape[2];\n\n          return _this14.interpolation === 'nearest' ? input.resizeNearestNeighbor([_height2, _width2]) : input.resizeBilinear([_height2, _width2]);\n        }\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        size: this.size,\n        dataFormat: this.dataFormat\n      };\n\n      var baseConfig = _get(_getPrototypeOf(UpSampling2D.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return UpSampling2D;\n}(Layer);\n/** @nocollapse */\n\nUpSampling2D.className = 'UpSampling2D';\nserialization.registerClass(UpSampling2D);","map":{"version":3,"sources":["../../src/layers/convolutional.ts"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;AAQG;;AAEH;;AAEG;AAEH,OAAO,KAAK,GAAZ,MAAqB,uBAArB;AACA,SAAe,aAAf,EAA8E,IAA9E,QAAyF,uBAAzF;AAEA,SAAoB,aAApB,EAAmC,mBAAnC,QAA6D,gBAA7D;AACA,SAAQ,eAAR,QAA8B,mBAA9B;AACA,OAAO,KAAK,CAAZ,MAAmB,yBAAnB;AACA,SAAQ,eAAR,EAAyB,wBAAzB,EAAmD,gBAAnD,QAA0E,WAA1E;AACA,SAA0C,aAA1C,EAAyD,mBAAzD,QAAmF,gBAAnF;AACA,SAAQ,SAAR,EAAmB,KAAnB,QAA0C,oBAA1C;AACA,SAAQ,mBAAR,EAA6B,UAA7B,QAA8C,WAA9C;AACA,SAAQ,cAAR,EAA4D,oBAA5D,QAAuF,iBAAvF;AAGA,SAAQ,cAAR,EAA4D,oBAA5D,QAAuF,iBAAvF;AAEA,SAAQ,gBAAR,EAA0B,YAA1B,EAAwC,cAAxC,QAA6D,qBAA7D;AACA,OAAO,KAAK,aAAZ,MAA+B,wBAA/B;AACA,SAAQ,kBAAR,EAA4B,mBAA5B,QAAsD,sBAAtD;AAGA;;;;AAIG;;AACH,OAAM,SAAU,qBAAV,CACF,CADE,EACS,UADT,EAC+B;AACnC;AACA,SAAO,IAAI,CAAC,YAAK;AACf,IAAA,eAAe,CAAC,UAAD,CAAf;;AACA,QAAI,UAAU,KAAK,eAAnB,EAAoC;AAClC,aAAO,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAjB,CAAP,CADkC,CACM;AACzC,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAPU,CAAX;AAQD;AAED;;;;AAIG;;AACH,OAAM,SAAU,qBAAV,CACF,CADE,EACS,UADT,EAC+B;AACnC,SAAO,IAAI,CAAC,YAAK;AACf,IAAA,eAAe,CAAC,UAAD,CAAf;;AACA,QAAI,UAAU,KAAK,eAAnB,EAAoC;AAClC,aAAO,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAjB,CAAP,CADkC,CACS;AAC5C,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAPU,CAAX;AAQD;AAED;;;;;;;;;;;;;;;AAeG;;AACH,OAAM,SAAU,cAAV,CACF,CADE,EACS,MADT,EACyB,IADzB,EAEuC;AAAA,MADA,OACA,uEADU,CACV;AAAA,MADa,OACb,uEADuB,OACvB;AAAA,MAAzC,UAAyC;AAAA,MAAhB,YAAgB,uEAAD,CAAC;AAC3C,SAAO,IAAI,CAAC,YAAK;AACf,QAAI,UAAU,IAAI,IAAlB,EAAwB;AACtB,MAAA,UAAU,GAAG,eAAe,EAA5B;AACD;;AACD,IAAA,eAAe,CAAC,UAAD,CAAf,CAJe,CAKf;;AACA,QAAI,CAAC,CAAC,KAAF,CAAQ,MAAR,KAAmB,CAAvB,EAA0B;AACxB,YAAM,IAAI,UAAJ,CACF,2EACG,CAAC,CAAC,KAAF,CAAQ,MADX,cADE,CAAN;AAGD;;AACD,QAAI,MAAM,CAAC,KAAP,CAAa,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,YAAM,IAAI,UAAJ,CACF,6EACG,MAAM,CAAC,KAAP,CAAa,MADhB,aADE,CAAN;AAGD;;AACD,QAAI,IAAI,IAAI,IAAR,IAAgB,IAAI,CAAC,KAAL,CAAW,MAAX,KAAsB,CAA1C,EAA6C;AAC3C,YAAM,IAAI,UAAJ,CACF,2EACG,MAAM,CAAC,KAAP,CAAa,MADhB,aADE,CAAN;AAGD,KApBc,CAqBf;;;AACA,QAAI,UAAU,KAAK,eAAnB,EAAoC;AAClC,MAAA,CAAC,GAAG,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB,CAAJ,CADkC,CACA;AACnC;;AACD,QAAI,OAAO,KAAK,QAAhB,EAA0B;AACxB,YAAM,IAAI,mBAAJ,CACF,kEACA,kBAFE,CAAN;AAGD;;AACD,QAAI,CAAC,GAAW,GAAG,CAAC,MAAJ,CACZ,CADY,EACc,MADd,EACkC,OADlC,EAEZ,OAAO,KAAK,MAAZ,GAAqB,MAArB,GAA8B,OAFlB,EAE2B,KAF3B,EAEkC,YAFlC,CAAhB;;AAGA,QAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB,MAAA,CAAC,GAAG,CAAC,CAAC,OAAF,CAAU,CAAV,EAAa,IAAb,CAAJ;AACD;;AACD,WAAO,CAAP;AACD,GArCU,CAAX;AAsCD;AAED;;;;;;;;;;;AAWG;;AACH,OAAM,SAAU,MAAV,CACF,CADE,EACS,MADT,EAEuC;AAAA,MADd,OACc,uEADJ,CACI;AAAA,MADD,OACC,uEADS,OACT;AAAA,MAAzC,UAAyC;AAAA,MAAhB,YAAgB,uEAAD,CAAC;AAC3C,SAAO,IAAI,CAAC,YAAK;AACf,IAAA,eAAe,CAAC,UAAD,CAAf;AACA,WAAO,cAAc,CACjB,CADiB,EACd,MADc,EACN,IADM,EACA,OADA,EACS,OADT,EACkB,UADlB,EAC8B,YAD9B,CAArB;AAED,GAJU,CAAX;AAKD;AAED;;;;;;;;;AASG;;AACH,OAAM,SAAU,MAAV,CACF,CADE,EACS,MADT,EAEsD;AAAA,MAD7B,OAC6B,uEADnB,CAAC,CAAD,EAAI,CAAJ,CACmB;AAAA,MADX,OACW,uEADD,OACC;AAAA,MAAxD,UAAwD;AAAA,MAA/B,YAA+B;AAC1D,SAAO,IAAI,CAAC,YAAK;AACf,IAAA,eAAe,CAAC,UAAD,CAAf;AACA,WAAO,wBAAwB,CAC3B,CAD2B,EACxB,MADwB,EAChB,IADgB,EACV,OADU,EACD,OADC,EACQ,UADR,EACoB,YADpB,CAA/B;AAED,GAJU,CAAX;AAKD;AAED;;;;AAIG;;AACH,OAAM,SAAU,wBAAV,CACF,CADE,EACS,MADT,EACyB,IADzB,EAGiC;AAAA,MAFM,OAEN,uEAFgB,CAAC,CAAD,EAAI,CAAJ,CAEhB;AAAA,MADnC,OACmC,uEADzB,OACyB;AAAA,MADhB,UACgB;AAAA,MADS,YACT;AAAA,MAAnC,UAAmC,uEAAJ,IAAI;AACrC,SAAO,IAAI,CAAC,YAAK;AACf,QAAI,UAAU,IAAI,IAAlB,EAAwB;AACtB,MAAA,UAAU,GAAG,eAAe,EAA5B;AACD;;AACD,IAAA,eAAe,CAAC,UAAD,CAAf;;AACA,QAAI,CAAC,CAAC,IAAF,KAAW,CAAX,IAAgB,CAAC,CAAC,IAAF,KAAW,CAA/B,EAAkC;AAChC,YAAM,IAAI,UAAJ,CACF,yFACgB,CAAC,CAAC,IADlB,MADE,CAAN;AAGD;;AACD,QAAI,MAAM,CAAC,IAAP,KAAgB,CAAhB,IAAqB,MAAM,CAAC,IAAP,KAAgB,CAAzC,EAA4C;AAC1C,YAAM,IAAI,UAAJ,CACF,0FACgB,CAAC,CAAC,IADlB,MADE,CAAN;AAGD;;AACD,QAAI,CAAC,GAAG,qBAAqB,CAAC,CAAD,EAAI,UAAJ,CAA7B;;AACA,QAAI,OAAO,KAAK,QAAhB,EAA0B;AACxB,YAAM,IAAI,mBAAJ,CACF,kEACA,kBAFE,CAAN;AAGD;;AACD,IAAA,CAAC,GAAG,GAAG,CAAC,KAAJ,CAAU,MAAV,CAAiB;AACnB,MAAA,CAAC,EAAE,CADgB;AAEnB,MAAA,MAAM,EAAE,MAFW;AAGnB,MAAA,OAAO,EAAE,OAHU;AAInB,MAAA,GAAG,EAAE,OAAO,KAAK,MAAZ,GAAqB,MAArB,GAA8B,OAJhB;AAKnB,MAAA,SAAS,EAAE,YALQ;AAMnB,MAAA,UAAU,EAAE,MANO;AAOnB,MAAA,IAAI,EAAJ,IAPmB;AAQnB,MAAA,UAAU,EAAV;AARmB,KAAjB,CAAJ;;AAUA,QAAI,UAAU,KAAK,eAAnB,EAAoC;AAClC,MAAA,CAAC,GAAG,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAjB,CAAJ;AACD;;AACD,WAAO,CAAP;AACD,GAnCU,CAAX;AAoCD;AAED;;;;;;;;;AASG;;AACH,OAAM,SAAU,MAAV,CACF,CADE,EACS,MADT,EAE8D;AAAA,MADrC,OACqC,uEAD3B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAC2B;AAAA,MADhB,OACgB,uEADN,OACM;AAAA,MAAhE,UAAgE;AAAA,MAAvC,YAAuC;AAClE,SAAO,IAAI,CAAC,YAAK;AACf,IAAA,eAAe,CAAC,UAAD,CAAf;AACA,WAAO,cAAc,CACjB,CADiB,EACd,MADc,EACN,IADM,EACA,OADA,EACS,OADT,EACkB,UADlB,EAC8B,YAD9B,CAArB;AAED,GAJU,CAAX;AAKD;AAED;;;;AAIG;;AACH,OAAM,SAAU,cAAV,CACF,CADE,EACS,MADT,EACyB,IADzB,EAGqC;AAAA,MAFE,OAEF,uEAFY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAEZ;AAAA,MADvC,OACuC,uEAD7B,OAC6B;AAAA,MADpB,UACoB;AAAA,MAAvC,YAAuC;AACzC,SAAO,IAAI,CAAC,YAAK;AACf,QAAI,UAAU,IAAI,IAAlB,EAAwB;AACtB,MAAA,UAAU,GAAG,eAAe,EAA5B;AACD;;AACD,IAAA,eAAe,CAAC,UAAD,CAAf;;AACA,QAAI,CAAC,CAAC,IAAF,KAAW,CAAX,IAAgB,CAAC,CAAC,IAAF,KAAW,CAA/B,EAAkC;AAChC,YAAM,IAAI,UAAJ,CACF,+EACG,CAAC,CAAC,IADL,MADE,CAAN;AAGD;;AACD,QAAI,MAAM,CAAC,IAAP,KAAgB,CAAhB,IAAqB,MAAM,CAAC,IAAP,KAAgB,CAAzC,EAA4C;AAC1C,YAAM,IAAI,UAAJ,CACF,gFACG,CAAC,CAAC,IADL,MADE,CAAN;AAGD;;AACD,QAAI,CAAC,GAAG,qBAAqB,CAAC,CAAD,EAAI,UAAJ,CAA7B;;AACA,QAAI,OAAO,KAAK,QAAhB,EAA0B;AACxB,YAAM,IAAI,mBAAJ,CACF,kEACA,kBAFE,CAAN;AAGD;;AACD,IAAA,CAAC,GAAG,GAAG,CAAC,MAAJ,CACA,CADA,EAEA,MAFA,EAEmC,OAFnC,EAGA,OAAO,KAAK,MAAZ,GAAqB,MAArB,GAA8B,OAH9B,EAGuC,OAHvC,EAGgD,YAHhD,CAAJ;;AAIA,QAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB,MAAA,CAAC,GAAG,CAAC,CAAC,OAAF,CAAU,CAAV,EAAa,IAAb,CAAJ;AACD;;AACD,QAAI,UAAU,KAAK,eAAnB,EAAoC;AAClC,MAAA,CAAC,GAAG,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAjB,CAAJ;AACD;;AACD,WAAO,CAAP;AACD,GAhCU,CAAX;AAiCD;AA8GD;;AAEG;;AACH,WAAsB,QAAtB;AAAA;;AAAA;;AAwBE,oBAAY,IAAZ,EAA0B,IAA1B,EAAiD;AAAA;;AAAA;;AAC/C,8BAAM,IAAN;AANQ,UAAA,IAAA,GAAsB,IAAtB;AAED,UAAA,0BAAA,GAAoD,cAApD;AACA,UAAA,wBAAA,GAAkD,OAAlD;AAIP,IAAA,QAAQ,CAAC,UAAT,CAAoB,IAApB;AACA,UAAK,IAAL,GAAY,IAAZ;AACA,IAAA,aAAa,CAAC,qBAAd,CAAoC,MAAK,IAAzC,EAA+C,MAA/C;;AACA,QAAI,MAAK,IAAL,KAAc,CAAd,IAAmB,MAAK,IAAL,KAAc,CAAjC,IAAsC,MAAK,IAAL,KAAc,CAAxD,EAA2D;AACzD,YAAM,IAAI,mBAAJ,CACF,4DACI,MAAK,IADT,mCADE,CAAN;AAID;;AACD,UAAK,UAAL,GAAkB,cAAc,CAAC,IAAI,CAAC,UAAN,EAAkB,IAAlB,EAAwB,YAAxB,CAAhC;AACA,UAAK,OAAL,GAAe,cAAc,CACzB,IAAI,CAAC,OAAL,IAAgB,IAAhB,GAAuB,CAAvB,GAA2B,IAAI,CAAC,OADP,EACgB,IADhB,EACsB,SADtB,CAA7B;AAEA,UAAK,OAAL,GAAe,IAAI,CAAC,OAAL,IAAgB,IAAhB,GAAuB,OAAvB,GAAiC,IAAI,CAAC,OAArD;AACA,IAAA,gBAAgB,CAAC,MAAK,OAAN,CAAhB;AACA,UAAK,UAAL,GACI,IAAI,CAAC,UAAL,IAAmB,IAAnB,GAA0B,cAA1B,GAA2C,IAAI,CAAC,UADpD;AAEA,IAAA,eAAe,CAAC,MAAK,UAAN,CAAf;AACA,UAAK,UAAL,GAAkB,aAAa,CAAC,IAAI,CAAC,UAAN,CAA/B;AACA,UAAK,OAAL,GAAe,IAAI,CAAC,OAAL,IAAgB,IAAhB,GAAuB,IAAvB,GAA8B,IAAI,CAAC,OAAlD;AACA,UAAK,eAAL,GACI,cAAc,CAAC,IAAI,CAAC,eAAL,IAAwB,MAAK,wBAA9B,CADlB;AAEA,UAAK,cAAL,GAAsB,aAAa,CAAC,IAAI,CAAC,cAAN,CAAnC;AACA,UAAK,eAAL,GAAuB,cAAc,CAAC,IAAI,CAAC,eAAN,CAArC;AACA,UAAK,mBAAL,GAA2B,cAAc,CAAC,IAAI,CAAC,mBAAN,CAAzC;AACA,UAAK,YAAL,GAAoB,cAAc,CAC9B,IAAI,CAAC,YAAL,IAAqB,IAArB,GAA4B,CAA5B,GAAgC,IAAI,CAAC,YADP,EACqB,IADrB,EAE9B,cAF8B,CAAlC;;AAGA,QAAI,MAAK,IAAL,KAAc,CAAd,IACC,KAAK,CAAC,OAAN,CAAc,MAAK,YAAnB,KAAoC,MAAK,YAAL,CAAkB,MAAlB,KAA6B,CADtE,EAC0E;AACxE,YAAM,IAAI,UAAJ,CACF,kHAEG,IAAI,CAAC,SAAL,CAAe,MAAK,YAApB,CAFH,CADE,CAAN;AAID,KAND,MAMO,IAAI,MAAK,IAAL,KAAc,CAAlB,EAAqB;AAC1B,UAAI,OAAO,MAAK,YAAZ,KAA6B,QAAjC,EAA2C;AACzC,cAAK,YAAL,GAAoB,CAAC,MAAK,YAAN,EAAoB,MAAK,YAAzB,CAApB;AACD,OAFD,MAEO,IAAI,MAAK,YAAL,CAAkB,MAAlB,KAA6B,CAAjC,EAAoC;AACzC,cAAM,IAAI,UAAJ,CACF,sGAC6B,IAAI,CAAC,SAAL,CAAe,MAAK,YAApB,CAD7B,CADE,CAAN;AAGD;AACF,KARM,MAQA,IAAI,MAAK,IAAL,KAAc,CAAlB,EAAqB;AAC1B,UAAI,OAAO,MAAK,YAAZ,KAA6B,QAAjC,EAA2C;AACzC,cAAK,YAAL,GACI,CAAC,MAAK,YAAN,EAAoB,MAAK,YAAzB,EAAuC,MAAK,YAA5C,CADJ;AAED,OAHD,MAGO,IAAI,MAAK,YAAL,CAAkB,MAAlB,KAA6B,CAAjC,EAAoC;AACzC,cAAM,IAAI,UAAJ,CACF,wGAC6B,IAAI,CAAC,SAAL,CAAe,MAAK,YAApB,CAD7B,CADE,CAAN;AAGD;AACF;;AApD8C;AAqDhD;;AA7EH;AAAA;AAAA,WA6FE,qBAAS;AACP,UAAM,MAAM,GAA6B;AACvC,QAAA,UAAU,EAAE,KAAK,UADsB;AAEvC,QAAA,OAAO,EAAE,KAAK,OAFyB;AAGvC,QAAA,OAAO,EAAE,KAAK,OAHyB;AAIvC,QAAA,UAAU,EAAE,KAAK,UAJsB;AAKvC,QAAA,YAAY,EAAE,KAAK,YALoB;AAMvC,QAAA,UAAU,EAAE,mBAAmB,CAAC,KAAK,UAAN,CANQ;AAOvC,QAAA,OAAO,EAAE,KAAK,OAPyB;AAQvC,QAAA,eAAe,EAAE,oBAAoB,CAAC,KAAK,eAAN,CARE;AASvC,QAAA,eAAe,EAAE,oBAAoB,CAAC,KAAK,eAAN,CATE;AAUvC,QAAA,mBAAmB,EAAE,oBAAoB,CAAC,KAAK,mBAAN,CAVF;AAWvC,QAAA,cAAc,EAAE,mBAAmB,CAAC,KAAK,cAAN;AAXI,OAAzC;;AAaA,UAAM,UAAU,0EAAhB;;AACA,MAAA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,UAAtB;AACA,aAAO,MAAP;AACD;AA9GH;AAAA;AAAA,WA+EY,oBAAkB,IAAlB,EAAyC;AACjD;AACA,MAAA,aAAa,CAAC,MAAd,CACI,gBAAgB,IADpB;;AAEA,UAAI,OAAO,IAAI,CAAC,UAAZ,KAA2B,QAA3B,IACA,CAAC,aAAa,CAAC,uBAAd,CACG,IAAI,CAAC,UADR,EACoB,QADpB,EAC8B,CAD9B,EACiC,CADjC,CADL,EAE0C;AACxC,cAAM,IAAI,UAAJ,CACF,gHAEI,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,UAApB,CAFJ,MADE,CAAN;AAID;AACF;AA3FH;;AAAA;AAAA,EAAuC,KAAvC;AAiHA;;;AAGG;;AACH,WAAsB,IAAtB;AAAA;;AAAA;;AAcE,gBAAY,IAAZ,EAA0B,IAA1B,EAA6C;AAAA;;AAAA;;AAC3C,gCAAM,IAAN,EAAY,IAAZ;AAZQ,WAAA,MAAA,GAAwB,IAAxB;AAaR,IAAA,IAAI,CAAC,UAAL,CAAgB,IAAhB;AACA,WAAK,OAAL,GAAe,IAAI,CAAC,OAApB;AACA,IAAA,aAAa,CAAC,qBAAd,CAAoC,OAAK,OAAzC,EAAkD,SAAlD;AACA,WAAK,iBAAL,GAAyB,cAAc,CACnC,IAAI,CAAC,iBAAL,IAA0B,OAAK,0BADI,CAAvC;AAEA,WAAK,gBAAL,GAAwB,aAAa,CAAC,IAAI,CAAC,gBAAN,CAArC;AACA,WAAK,iBAAL,GAAyB,cAAc,CAAC,IAAI,CAAC,iBAAN,CAAvC;AAR2C;AAS5C;;AAvBH;AAAA;AAAA,WAyBE,eAAM,UAAN,EAA+B;AAC7B,MAAA,UAAU,GAAG,kBAAkB,CAAC,UAAD,CAA/B;AACA,UAAM,WAAW,GACb,KAAK,UAAL,KAAoB,eAApB,GAAsC,CAAtC,GAA0C,UAAU,CAAC,MAAX,GAAoB,CADlE;;AAEA,UAAI,UAAU,CAAC,WAAD,CAAV,IAA2B,IAA/B,EAAqC;AACnC,cAAM,IAAI,UAAJ,CACF,2EACS,UAAU,CAAC,WAAD,CADnB,CADE,CAAN;AAGD;;AACD,UAAM,QAAQ,GAAG,UAAU,CAAC,WAAD,CAA3B;AAEA,UAAM,WAAW,GAAG,KAAK,UAAL,CAAgB,MAAhB,CAAuB,CAAC,QAAD,EAAW,KAAK,OAAhB,CAAvB,CAApB;AAEA,WAAK,MAAL,GAAc,KAAK,SAAL,CACV,QADU,EACA,WADA,EACa,IADb,EACmB,KAAK,iBADxB,EAEV,KAAK,iBAFK,EAEc,IAFd,EAEoB,KAAK,gBAFzB,CAAd;;AAGA,UAAI,KAAK,OAAT,EAAkB;AAChB,aAAK,IAAL,GAAY,KAAK,SAAL,CACR,MADQ,EACA,CAAC,KAAK,OAAN,CADA,EACgB,IADhB,EACsB,KAAK,eAD3B,EAER,KAAK,eAFG,EAEc,IAFd,EAEoB,KAAK,cAFzB,CAAZ;AAGD;;AAED,WAAK,SAAL,GAAiB,CAAC;AAAC,QAAA,IAAI,EAAE,KAAK,IAAL,GAAY,CAAnB;AAAsB,QAAA,IAAI,sBAAI,WAAJ,EAAkB,QAAlB;AAA1B,OAAD,CAAjB;AACA,WAAK,KAAL,GAAa,IAAb;AACD;AAjDH;AAAA;AAAA,WAmDE,cAAK,MAAL,EAA8B,MAA9B,EAA4C;AAAA;;AAC1C,aAAO,IAAI,CAAC,YAAK;AACf,QAAA,MAAM,GAAG,mBAAmB,CAAC,MAAD,CAA5B;AACA,YAAI,OAAJ;AACA,YAAM,SAAS,GAAG,MAAI,CAAC,IAAL,IAAa,IAAb,GAAoB,IAApB,GAA2B,MAAI,CAAC,IAAL,CAAU,IAAV,EAA7C;AACA,YAAM,mBAAmB,GAAG,aAAa,CAAC,0BAAd,CACxB,MAAI,CAAC,UAAL,CAAgB,YAAhB,EADwB,CAA5B;;AAGA,YAAI,mBAAmB,IAAI,IAAvB,IAA+B,MAAI,CAAC,IAAL,KAAc,CAAjD,EAAoD;AAClD,UAAA,OAAO,GAAG,wBAAwB,CAC9B,MAD8B,EACtB,MAAI,CAAC,MAAL,CAAY,IAAZ,EADsB,EACF,SADE,EACS,MAAI,CAAC,OADd,EACuB,MAAI,CAAC,OAD5B,EAE9B,MAAI,CAAC,UAFyB,EAEb,MAAI,CAAC,YAFQ,EAG9B,mBAH8B,CAAlC;AAID,SALD,MAKO;AACL,cAAI,MAAI,CAAC,IAAL,KAAc,CAAlB,EAAqB;AACnB,YAAA,OAAO,GAAG,cAAc,CACpB,MADoB,EACZ,MAAI,CAAC,MAAL,CAAY,IAAZ,EADY,EACQ,SADR,EACmB,MAAI,CAAC,OAAL,CAAa,CAAb,CADnB,EAEpB,MAAI,CAAC,OAFe,EAEN,MAAI,CAAC,UAFC,EAEW,MAAI,CAAC,YAAL,CAAkB,CAAlB,CAFX,CAAxB;AAGD,WAJD,MAIO,IAAI,MAAI,CAAC,IAAL,KAAc,CAAlB,EAAqB;AAC1B;AACA,YAAA,OAAO,GAAG,wBAAwB,CAC9B,MAD8B,EACtB,MAAI,CAAC,MAAL,CAAY,IAAZ,EADsB,EACF,SADE,EACS,MAAI,CAAC,OADd,EACuB,MAAI,CAAC,OAD5B,EAE9B,MAAI,CAAC,UAFyB,EAEb,MAAI,CAAC,YAFQ,CAAlC;AAGD,WALM,MAKA,IAAI,MAAI,CAAC,IAAL,KAAc,CAAlB,EAAqB;AAC1B,YAAA,OAAO,GAAG,cAAc,CACpB,MADoB,EACZ,MAAI,CAAC,MAAL,CAAY,IAAZ,EADY,EACQ,SADR,EACmB,MAAI,CAAC,OADxB,EACiC,MAAI,CAAC,OADtC,EAEpB,MAAI,CAAC,UAFe,EAEH,MAAI,CAAC,YAFF,CAAxB;AAGD,WAJM,MAIA;AACL,kBAAM,IAAI,mBAAJ,CACF,uDADE,CAAN;AAED;;AAED,cAAI,MAAI,CAAC,UAAL,IAAmB,IAAvB,EAA6B;AAC3B,YAAA,OAAO,GAAG,MAAI,CAAC,UAAL,CAAgB,KAAhB,CAAsB,OAAtB,CAAV;AACD;AACF;;AAED,eAAO,OAAP;AACD,OArCU,CAAX;AAsCD;AA1FH;AAAA;AAAA,WA4FE,4BAAmB,UAAnB,EAA4C;AAC1C,MAAA,UAAU,GAAG,kBAAkB,CAAC,UAAD,CAA/B;AACA,UAAM,QAAQ,GAAa,EAA3B;AACA,UAAM,KAAK,GAAI,KAAK,UAAL,KAAoB,cAArB,GACV,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,UAAU,CAAC,MAAX,GAAoB,CAAxC,CADU,GAEV,UAAU,CAAC,KAAX,CAAiB,CAAjB,CAFJ;;AAGA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,EAAE,CAApC,EAAuC;AACrC,YAAM,MAAM,GAAG,gBAAgB,CAC3B,KAAK,CAAC,CAAD,CADsB,EACjB,KAAK,UAAL,CAAgB,CAAhB,CADiB,EACG,KAAK,OADR,EACiB,KAAK,OAAL,CAAa,CAAb,CADjB,EAE3B,OAAO,KAAK,YAAZ,KAA6B,QAA7B,GAAwC,KAAK,YAA7C,GACwC,KAAK,YAAL,CAAkB,CAAlB,CAHb,CAA/B;AAIA,QAAA,QAAQ,CAAC,IAAT,CAAc,MAAd;AACD;;AAED,UAAI,WAAW,GAAG,CAAC,UAAU,CAAC,CAAD,CAAX,CAAlB;;AACA,UAAI,KAAK,UAAL,KAAoB,cAAxB,EAAwC;AACtC,QAAA,WAAW,GAAG,WAAW,CAAC,MAAZ,CAAmB,QAAnB,CAAd;AACA,QAAA,WAAW,CAAC,IAAZ,CAAiB,KAAK,OAAtB;AACD,OAHD,MAGO;AACL,QAAA,WAAW,CAAC,IAAZ,CAAiB,KAAK,OAAtB;AACA,QAAA,WAAW,GAAG,WAAW,CAAC,MAAZ,CAAmB,QAAnB,CAAd;AACD;;AACD,aAAO,WAAP;AACD;AAnHH;AAAA;AAAA,WAqHE,qBAAS;AACP,UAAM,MAAM,GAAG;AACb,QAAA,OAAO,EAAE,KAAK,OADD;AAEb,QAAA,iBAAiB,EAAE,oBAAoB,CAAC,KAAK,iBAAN,CAF1B;AAGb,QAAA,iBAAiB,EAAE,oBAAoB,CAAC,KAAK,iBAAN,CAH1B;AAIb,QAAA,gBAAgB,EAAE,mBAAmB,CAAC,KAAK,gBAAN;AAJxB,OAAf;;AAMA,UAAM,UAAU,sEAAhB;;AACA,MAAA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,UAAtB;AACA,aAAO,MAAP;AACD;AA/HH;AAAA;AAAA,WAiIY,oBAAkB,IAAlB,EAAqC;AAC7C;AACA,UAAI,EAAE,aAAa,IAAf,KAAwB,OAAO,IAAI,CAAC,OAAZ,KAAwB,QAAhD,IACA,IAAI,CAAC,OAAL,GAAe,CADnB,EACsB;AACpB,cAAM,IAAI,UAAJ,CACF,sFACW,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,OAApB,CADX,CADE,CAAN;AAGD;AACF;AAzIH;;AAAA;AAAA,EAAmC,QAAnC;AA4IA,WAAa,MAAb;AAAA;;AAAA;;AAGE,kBAAY,IAAZ,EAA+B;AAAA;;AAAA;;AAC7B,gCAAM,CAAN,EAAS,IAAT;AACA,IAAA,MAAM,CAAC,UAAP,CAAkB,IAAlB;AAF6B;AAG9B;;AANH;AAAA;AAAA,WAQE,qBAAS;AACP,UAAM,MAAM,wEAAZ;;AACA,aAAO,MAAM,CAAC,MAAD,CAAb;AACA,aAAO,MAAP;AACD;AAZH;AAAA;AAAA,WAcY,oBAAkB,IAAlB,EAAqC;AAC7C;AACA,UAAK,OAAO,IAAI,CAAC,UAAZ,KAA2B,QAA5B,IACA,CAAC,aAAa,CAAC,uBAAd,CACG,IAAI,CAAC,UADR,EACoB,QADpB,EAC8B,CAD9B,EACiC,CADjC,CADL,EAE0C;AACxC,cAAM,IAAI,UAAJ,CACF,0GAC+B,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,UAApB,CAD/B,MADE,CAAN;AAGD;AACF;AAvBH;;AAAA;AAAA,EAA4B,IAA5B;AACE;;AACO,MAAA,CAAA,SAAA,GAAY,QAAZ;AAuBT,aAAa,CAAC,aAAd,CAA4B,MAA5B;AAEA,WAAa,MAAb;AAAA;;AAAA;;AAGE,kBAAY,IAAZ,EAA+B;AAAA;;AAAA;;AAC7B,gCAAM,CAAN,EAAS,IAAT;AACA,IAAA,MAAM,CAAC,UAAP,CAAkB,IAAlB;AAF6B;AAG9B;;AANH;AAAA;AAAA,WAQE,qBAAS;AACP,UAAM,MAAM,wEAAZ;;AACA,aAAO,MAAM,CAAC,MAAD,CAAb;AACA,aAAO,MAAP;AACD;AAZH;AAAA;AAAA,WAcY,oBAAkB,IAAlB,EAAqC;AAC7C;AACA,UAAI,OAAO,IAAI,CAAC,UAAZ,KAA2B,QAA/B,EAAyC;AACvC,YAAI,EAAE,KAAK,CAAC,OAAN,CAAc,IAAI,CAAC,UAAnB,MACC,IAAI,CAAC,UAAL,CAAgB,MAAhB,KAA2B,CAA3B,IAAgC,IAAI,CAAC,UAAL,CAAgB,MAAhB,KAA2B,CAD5D,CAAF,CAAJ,EACuE;AACrE,gBAAM,IAAI,UAAJ,CACF,uGAEI,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,UAApB,CAFJ,MADE,CAAN;AAID;AACF;AACF;AAzBH;;AAAA;AAAA,EAA4B,IAA5B;AACE;;AACO,MAAA,CAAA,SAAA,GAAY,QAAZ;AAyBT,aAAa,CAAC,aAAd,CAA4B,MAA5B;AAEA,WAAa,eAAb;AAAA;;AAAA;;AAKE,2BAAY,IAAZ,EAA+B;AAAA;;AAAA;;AAC7B,gCAAM,IAAN;AACA,WAAK,SAAL,GAAiB,CAAC,IAAI,SAAJ,CAAc;AAAC,MAAA,IAAI,EAAE;AAAP,KAAd,CAAD,CAAjB;;AAEA,QAAI,OAAK,OAAL,KAAiB,MAAjB,IAA2B,OAAK,OAAL,KAAiB,OAAhD,EAAyD;AACvD,YAAM,IAAI,UAAJ,CACF,mHAC0C,OAAK,OAD/C,CADE,CAAN;AAGD;;AAR4B;AAS9B;;AAdH;AAAA;AAAA,WAgBE,eAAM,UAAN,EAA+B;AAC7B,MAAA,UAAU,GAAG,kBAAkB,CAAC,UAAD,CAA/B;;AAEA,UAAI,UAAU,CAAC,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,cAAM,IAAI,UAAJ,CACF,qDACA,IAAI,CAAC,SAAL,CAAe,UAAf,CAFE,CAAN;AAGD;;AAED,UAAM,WAAW,GACb,KAAK,UAAL,KAAoB,eAApB,GAAsC,CAAtC,GAA0C,UAAU,CAAC,MAAX,GAAoB,CADlE;;AAEA,UAAI,UAAU,CAAC,WAAD,CAAV,IAA2B,IAA/B,EAAqC;AACnC,cAAM,IAAI,UAAJ,CACF,4DACA,eAFE,CAAN;AAGD;;AACD,UAAM,QAAQ,GAAG,UAAU,CAAC,WAAD,CAA3B;AACA,UAAM,WAAW,GAAG,KAAK,UAAL,CAAgB,MAAhB,CAAuB,CAAC,KAAK,OAAN,EAAe,QAAf,CAAvB,CAApB;AAEA,WAAK,MAAL,GAAc,KAAK,SAAL,CACV,QADU,EACA,WADA,EACa,SADb,EACwB,KAAK,iBAD7B,EAEV,KAAK,iBAFK,EAEc,IAFd,EAEoB,KAAK,gBAFzB,CAAd;;AAGA,UAAI,KAAK,OAAT,EAAkB;AAChB,aAAK,IAAL,GAAY,KAAK,SAAL,CACR,MADQ,EACA,CAAC,KAAK,OAAN,CADA,EACgB,SADhB,EAC2B,KAAK,eADhC,EAER,KAAK,eAFG,EAEc,IAFd,EAEoB,KAAK,cAFzB,CAAZ;AAGD,OA1B4B,CA4B7B;;;AACA,WAAK,SAAL,GACI,CAAC,IAAI,SAAJ,CAAc;AAAC,QAAA,IAAI,EAAE,CAAP;AAAU,QAAA,IAAI,sBAAI,WAAJ,EAAkB,QAAlB;AAAd,OAAd,CAAD,CADJ;AAEA,WAAK,KAAL,GAAa,IAAb;AACD;AAhDH;AAAA;AAAA,WAkDE,cAAK,MAAL,EAA8B,MAA9B,EAA4C;AAAA;;AAC1C,aAAO,GAAG,CAAC,IAAJ,CAAS,YAAK;AACnB,YAAI,KAAK,GAAG,mBAAmB,CAAC,MAAD,CAA/B;;AACA,YAAI,KAAK,CAAC,KAAN,CAAY,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,gBAAM,IAAI,UAAJ,CACF,uGAC6B,KAAK,CAAC,KAAN,CAAY,MADzC,CADE,CAAN;AAGD;;AAED,YAAM,UAAU,GAAG,KAAK,CAAC,KAAzB;AACA,YAAM,SAAS,GAAG,UAAU,CAAC,CAAD,CAA5B;AAEA,YAAI,KAAJ;AACA,YAAI,KAAJ;;AACA,YAAI,MAAI,CAAC,UAAL,KAAoB,eAAxB,EAAyC;AACvC,UAAA,KAAK,GAAG,CAAR;AACA,UAAA,KAAK,GAAG,CAAR;AACD,SAHD,MAGO;AACL,UAAA,KAAK,GAAG,CAAR;AACA,UAAA,KAAK,GAAG,CAAR;AACD;;AAED,YAAM,MAAM,GAAG,UAAU,CAAC,KAAD,CAAzB;AACA,YAAM,KAAK,GAAG,UAAU,CAAC,KAAD,CAAxB;AACA,YAAM,OAAO,GAAG,MAAI,CAAC,UAAL,CAAgB,CAAhB,CAAhB;AACA,YAAM,OAAO,GAAG,MAAI,CAAC,UAAL,CAAgB,CAAhB,CAAhB;AACA,YAAM,OAAO,GAAG,MAAI,CAAC,OAAL,CAAa,CAAb,CAAhB;AACA,YAAM,OAAO,GAAG,MAAI,CAAC,OAAL,CAAa,CAAb,CAAhB,CA1BmB,CA4BnB;;AACA,YAAM,SAAS,GAAG,YAAY,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,EAA2B,MAAI,CAAC,OAAhC,CAA9B;AACA,YAAM,QAAQ,GAAG,YAAY,CAAC,KAAD,EAAQ,OAAR,EAAiB,OAAjB,EAA0B,MAAI,CAAC,OAA/B,CAA7B,CA9BmB,CAgCnB;AACA;AACA;AACA;;AACA,YAAM,WAAW,GACb,CAAC,SAAD,EAAY,SAAZ,EAAuB,QAAvB,EAAiC,MAAI,CAAC,OAAtC,CADJ;;AAGA,YAAI,MAAI,CAAC,UAAL,KAAoB,cAAxB,EAAwC;AACtC,UAAA,KAAK,GAAG,GAAG,CAAC,SAAJ,CAAc,KAAd,EAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAArB,CAAR;AACD;;AACD,YAAI,OAAO,GAAG,GAAG,CAAC,eAAJ,CACV,KADU,EACS,MAAI,CAAC,MAAL,CAAY,IAAZ,EADT,EACyC,WADzC,EAEV,MAAI,CAAC,OAFK,EAEwB,MAAI,CAAC,OAF7B,CAAd;;AAGA,YAAI,MAAI,CAAC,UAAL,KAAoB,cAAxB,EAAwC;AACtC,UAAA,OAAO,GAAG,GAAG,CAAC,SAAJ,CAAc,OAAd,EAAuB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAvB,CAAV;AACD;;AAED,YAAI,MAAI,CAAC,IAAL,IAAa,IAAjB,EAAuB;AACrB,UAAA,OAAO,GACH,CAAC,CAAC,OAAF,CAAU,OAAV,EAAmB,MAAI,CAAC,IAAL,CAAU,IAAV,EAAnB,EAAqC,MAAI,CAAC,UAA1C,CADJ;AAED;;AACD,YAAI,MAAI,CAAC,UAAL,IAAmB,IAAvB,EAA6B;AAC3B,UAAA,OAAO,GAAG,MAAI,CAAC,UAAL,CAAgB,KAAhB,CAAsB,OAAtB,CAAV;AACD;;AACD,eAAO,OAAP;AACD,OAzDM,CAAP;AA0DD;AA7GH;AAAA;AAAA,WA+GE,4BAAmB,UAAnB,EAA4C;AAC1C,MAAA,UAAU,GAAG,kBAAkB,CAAC,UAAD,CAA/B;AACA,UAAM,WAAW,GAAG,UAAU,CAAC,KAAX,EAApB;AAEA,UAAI,WAAJ;AACA,UAAI,UAAJ;AACA,UAAI,SAAJ;;AACA,UAAI,KAAK,UAAL,KAAoB,eAAxB,EAAyC;AACvC,QAAA,WAAW,GAAG,CAAd;AACA,QAAA,UAAU,GAAG,CAAb;AACA,QAAA,SAAS,GAAG,CAAZ;AACD,OAJD,MAIO;AACL,QAAA,WAAW,GAAG,CAAd;AACA,QAAA,UAAU,GAAG,CAAb;AACA,QAAA,SAAS,GAAG,CAAZ;AACD;;AAED,UAAM,OAAO,GAAG,KAAK,UAAL,CAAgB,CAAhB,CAAhB;AACA,UAAM,OAAO,GAAG,KAAK,UAAL,CAAgB,CAAhB,CAAhB;AACA,UAAM,OAAO,GAAG,KAAK,OAAL,CAAa,CAAb,CAAhB;AACA,UAAM,OAAO,GAAG,KAAK,OAAL,CAAa,CAAb,CAAhB;AAEA,MAAA,WAAW,CAAC,WAAD,CAAX,GAA2B,KAAK,OAAhC;AACA,MAAA,WAAW,CAAC,UAAD,CAAX,GACI,YAAY,CAAC,WAAW,CAAC,UAAD,CAAZ,EAA0B,OAA1B,EAAmC,OAAnC,EAA4C,KAAK,OAAjD,CADhB;AAEA,MAAA,WAAW,CAAC,SAAD,CAAX,GACI,YAAY,CAAC,WAAW,CAAC,SAAD,CAAZ,EAAyB,OAAzB,EAAkC,OAAlC,EAA2C,KAAK,OAAhD,CADhB;AAEA,aAAO,WAAP;AACD;AA3IH;AAAA;AAAA,WA6IE,qBAAS;AACP,UAAM,MAAM,iFAAZ;;AACA,aAAO,MAAM,CAAC,cAAD,CAAb;AACA,aAAO,MAAP;AACD;AAjJH;;AAAA;AAAA,EAAqC,MAArC;AACE;;AACO,eAAA,CAAA,SAAA,GAAY,iBAAZ;AAiJT,aAAa,CAAC,aAAd,CAA4B,eAA5B;AA0CA,WAAa,aAAb;AAAA;;AAAA;;AAqBE,yBAAY,IAAZ,EAA0B,MAA1B,EAAyD;AAAA;;AAAA;;AACvD,gCAAM,IAAN,EAAY,MAAZ;AATO,WAAA,6BAAA,GACL,eADK;AAEA,WAAA,6BAAA,GACL,eADK;AAGC,WAAA,eAAA,GAAiC,IAAjC;AACA,WAAA,eAAA,GAAiC,IAAjC;;AAKR,QAAI,MAAM,CAAC,OAAP,IAAkB,IAAtB,EAA4B;AAC1B,YAAM,IAAI,UAAJ,CACF,qEACA,qBAFE,CAAN;AAGD;;AACD,QAAI,MAAM,CAAC,iBAAP,IAA4B,IAA5B,IAAoC,MAAM,CAAC,iBAAP,IAA4B,IAAhE,IACA,MAAM,CAAC,gBAAP,IAA2B,IAD/B,EACqC;AACnC,YAAM,IAAI,UAAJ,CACF,sEACA,6DADA,GAEA,mEAFA,GAGA,uDAJE,CAAN;AAKD;;AACD,QAAI,MAAM,CAAC,OAAP,IAAkB,IAAlB,IAA0B,MAAM,CAAC,OAAP,KAAmB,MAA7C,IACA,MAAM,CAAC,OAAP,KAAmB,OADvB,EACgC;AAC9B,YAAM,IAAI,UAAJ,CACF,uBAAgB,OAAK,IAArB,kFACoC,IAAI,CAAC,SAAL,CAAe,MAAM,CAAC,OAAtB,CADpC,CADE,CAAN;AAGD;;AAED,WAAK,eAAL,GACI,MAAM,CAAC,eAAP,IAA0B,IAA1B,GAAiC,CAAjC,GAAqC,MAAM,CAAC,eADhD;AAEA,WAAK,oBAAL,GAA4B,cAAc,CACtC,MAAM,CAAC,oBAAP,IAA+B,OAAK,6BADE,CAA1C;AAEA,WAAK,oBAAL,GAA4B,cAAc,CAAC,MAAM,CAAC,oBAAR,CAA1C;AACA,WAAK,mBAAL,GAA2B,aAAa,CAAC,MAAM,CAAC,mBAAR,CAAxC;AACA,WAAK,oBAAL,GAA4B,cAAc,CACtC,MAAM,CAAC,oBAAP,IAA+B,OAAK,6BADE,CAA1C;AAEA,WAAK,oBAAL,GAA4B,cAAc,CAAC,MAAM,CAAC,oBAAR,CAA1C;AACA,WAAK,mBAAL,GAA2B,aAAa,CAAC,MAAM,CAAC,mBAAR,CAAxC;AAhCuD;AAiCxD;;AAtDH;AAAA;AAAA,WAwDE,eAAM,UAAN,EAA+B;AAC7B,MAAA,UAAU,GAAG,kBAAkB,CAAC,UAAD,CAA/B;;AACA,UAAI,UAAU,CAAC,MAAX,GAAoB,KAAK,IAAL,GAAY,CAApC,EAAuC;AACrC,cAAM,IAAI,UAAJ,CACF,iCAA0B,KAAK,IAA/B,qCACG,KAAK,IAAL,GAAY,CADf,8CAEG,IAAI,CAAC,SAAL,CAAe,UAAf,CAFH,CADE,CAAN;AAID;;AACD,UAAM,WAAW,GACb,KAAK,UAAL,KAAoB,eAApB,GAAsC,CAAtC,GAA0C,UAAU,CAAC,MAAX,GAAoB,CADlE;;AAEA,UAAI,UAAU,CAAC,WAAD,CAAV,IAA2B,IAA3B,IAAmC,UAAU,CAAC,WAAD,CAAV,GAA0B,CAAjE,EAAoE;AAClE,cAAM,IAAI,UAAJ,CACF,gFACa,IAAI,CAAC,SAAL,CAAe,UAAU,CAAC,WAAD,CAAzB,CADb,CADE,CAAN;AAGD;;AAED,UAAM,QAAQ,GAAG,UAAU,CAAC,WAAD,CAA3B;AACA,UAAM,oBAAoB,GACtB,KAAK,UAAL,CAAgB,MAAhB,CAAuB,CAAC,QAAD,EAAW,KAAK,eAAhB,CAAvB,CADJ;AAEA,UAAM,oBAAoB,GAAG,EAA7B;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,IAAzB,EAA+B,EAAE,CAAjC,EAAoC;AAClC,QAAA,oBAAoB,CAAC,IAArB,CAA0B,CAA1B;AACD;;AACD,MAAA,oBAAoB,CAAC,IAArB,CAA0B,QAAQ,GAAG,KAAK,eAA1C,EAA2D,KAAK,OAAhE;AAEA,UAAM,SAAS,GAAG,IAAlB;AACA,WAAK,eAAL,GAAuB,KAAK,SAAL,CACnB,kBADmB,EACC,oBADD,EACuB,SADvB,EAEnB,KAAK,oBAFc,EAEQ,KAAK,oBAFb,EAEmC,SAFnC,EAGnB,KAAK,mBAHc,CAAvB;AAIA,WAAK,eAAL,GAAuB,KAAK,SAAL,CACnB,kBADmB,EACC,oBADD,EACuB,SADvB,EAEnB,KAAK,oBAFc,EAEQ,KAAK,oBAFb,EAEmC,SAFnC,EAGnB,KAAK,mBAHc,CAAvB;;AAIA,UAAI,KAAK,OAAT,EAAkB;AAChB,aAAK,IAAL,GAAY,KAAK,SAAL,CACR,MADQ,EACA,CAAC,KAAK,OAAN,CADA,EACgB,SADhB,EAC2B,KAAK,eADhC,EAER,KAAK,eAFG,EAEc,SAFd,EAEyB,KAAK,cAF9B,CAAZ;AAGD,OAJD,MAIO;AACL,aAAK,IAAL,GAAY,IAAZ;AACD;;AAED,WAAK,SAAL,GACI,CAAC,IAAI,SAAJ,CAAc;AAAC,QAAA,IAAI,EAAE,KAAK,IAAL,GAAY,CAAnB;AAAsB,QAAA,IAAI,sBAAI,WAAJ,EAAkB,QAAlB;AAA1B,OAAd,CAAD,CADJ;AAEA,WAAK,KAAL,GAAa,IAAb;AACD;AArGH;AAAA;AAAA,WAuGE,cAAK,MAAL,EAA8B,MAA9B,EAA4C;AAAA;;AAC1C,aAAO,IAAI,CAAC,YAAK;AACf,QAAA,MAAM,GAAG,mBAAmB,CAAC,MAAD,CAA5B;AAEA,YAAI,MAAJ;;AACA,YAAI,MAAI,CAAC,IAAL,KAAc,CAAlB,EAAqB;AACnB,gBAAM,IAAI,mBAAJ,CACF,kDADE,CAAN;AAED,SAHD,MAGO,IAAI,MAAI,CAAC,IAAL,KAAc,CAAlB,EAAqB;AAC1B,cAAI,MAAI,CAAC,UAAL,KAAoB,eAAxB,EAAyC;AACvC,YAAA,MAAM,GAAG,GAAG,CAAC,SAAJ,CAAc,MAAd,EAAsB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAtB,CAAT,CADuC,CACQ;AAChD;;AAED,UAAA,MAAM,GAAG,GAAG,CAAC,eAAJ,CACL,MADK,EACe,MAAI,CAAC,eAAL,CAAqB,IAArB,EADf,EAEL,MAAI,CAAC,eAAL,CAAqB,IAArB,EAFK,EAGL,MAAI,CAAC,OAHA,EAG6B,MAAI,CAAC,OAHlC,EAIL,MAAI,CAAC,YAJA,EAIkC,MAJlC,CAAT;AAKD;;AAED,YAAI,MAAI,CAAC,OAAT,EAAkB;AAChB,UAAA,MAAM,GAAG,CAAC,CAAC,OAAF,CAAU,MAAV,EAAkB,MAAI,CAAC,IAAL,CAAU,IAAV,EAAlB,EAAoC,MAAI,CAAC,UAAzC,CAAT;AACD;;AACD,YAAI,MAAI,CAAC,UAAL,IAAmB,IAAvB,EAA6B;AAC3B,UAAA,MAAM,GAAG,MAAI,CAAC,UAAL,CAAgB,KAAhB,CAAsB,MAAtB,CAAT;AACD;;AAED,YAAI,MAAI,CAAC,UAAL,KAAoB,eAAxB,EAAyC;AACvC,UAAA,MAAM,GAAG,GAAG,CAAC,SAAJ,CAAc,MAAd,EAAsB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAtB,CAAT,CADuC,CACQ;AAChD;;AACD,eAAO,MAAP;AACD,OA9BU,CAAX;AA+BD;AAvIH;AAAA;AAAA,WAyIE,qBAAS;AACP,UAAM,MAAM,+EAAZ;;AACA,aAAO,MAAM,CAAC,MAAD,CAAb;AACA,aAAO,MAAM,CAAC,mBAAD,CAAb;AACA,aAAO,MAAM,CAAC,mBAAD,CAAb;AACA,aAAO,MAAM,CAAC,kBAAD,CAAb;AACA,MAAA,MAAM,CAAC,sBAAD,CAAN,GACI,oBAAoB,CAAC,KAAK,oBAAN,CADxB;AAEA,MAAA,MAAM,CAAC,sBAAD,CAAN,GACI,oBAAoB,CAAC,KAAK,oBAAN,CADxB;AAEA,MAAA,MAAM,CAAC,sBAAD,CAAN,GACI,oBAAoB,CAAC,KAAK,oBAAN,CADxB;AAEA,MAAA,MAAM,CAAC,sBAAD,CAAN,GACI,oBAAoB,CAAC,KAAK,oBAAN,CADxB;AAEA,MAAA,MAAM,CAAC,qBAAD,CAAN,GACI,mBAAmB,CAAC,KAAK,mBAAN,CADvB;AAEA,MAAA,MAAM,CAAC,qBAAD,CAAN,GACI,mBAAmB,CAAC,KAAK,mBAAN,CADvB;AAEA,aAAO,MAAP;AACD;AA5JH;;AAAA;AAAA,EAAmC,IAAnC;AACE;;AACO,aAAA,CAAA,SAAA,GAAY,eAAZ;AA6JT,WAAa,eAAb;AAAA;;AAAA;;AAGE,2BAAY,IAAZ,EAAyC;AAAA;;AAAA,8BACjC,CADiC,EAC9B,IAD8B;AAExC;;AALH;AAAA,EAAqC,aAArC;AACE;;AACO,eAAA,CAAA,SAAA,GAAY,iBAAZ;AAKT,aAAa,CAAC,aAAd,CAA4B,eAA5B;AAEA,WAAa,MAAb;AAAA;;AAAA;;AAGE,kBAAY,IAAZ,EAA+B;AAAA;;AAAA;;AAC7B,iCAAM,CAAN,EAAS,IAAT;AACA,IAAA,MAAM,CAAC,UAAP,CAAkB,IAAlB;AACA,YAAK,SAAL,GAAiB,CAAC;AAAC,MAAA,IAAI,EAAE;AAAP,KAAD,CAAjB;AAH6B;AAI9B;;AAPH;AAAA;AAAA,WASE,qBAAS;AACP,UAAM,MAAM,wEAAZ;;AACA,aAAO,MAAM,CAAC,MAAD,CAAb;AACA,aAAO,MAAM,CAAC,YAAD,CAAb;AACA,aAAO,MAAP;AACD;AAdH;AAAA;AAAA,WAgBY,oBAAkB,IAAlB,EAAqC;AAC7C;AACA,UAAI,OAAO,IAAI,CAAC,UAAZ,KAA2B,QAA3B,IACA,CAAC,aAAa,CAAC,uBAAd,CACG,IAAI,CAAC,UADR,EACoB,QADpB,EAC8B,CAD9B,EACiC,CADjC,CADL,EAE0C;AACxC,cAAM,IAAI,UAAJ,CACF,qGAC0B,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,UAApB,CAD1B,MADE,CAAN;AAGD;AACF;AAzBH;;AAAA;AAAA,EAA4B,IAA5B;AACE;;AACO,MAAA,CAAA,SAAA,GAAY,QAAZ;AAyBT,aAAa,CAAC,aAAd,CAA4B,MAA5B;AAgCA,WAAa,UAAb;AAAA;;AAAA;;AAME,sBAAY,IAAZ,EAAqC;AAAA;;AAAA;;AACnC,iCAAM,IAAN;;AACA,QAAI,OAAO,IAAI,CAAC,QAAZ,KAAyB,QAA7B,EAAuC;AACrC,cAAK,QAAL,GACI,CAAC,CAAC,IAAI,CAAC,QAAN,EAAgB,IAAI,CAAC,QAArB,CAAD,EAAiC,CAAC,IAAI,CAAC,QAAN,EAAgB,IAAI,CAAC,QAArB,CAAjC,CADJ;AAED,KAHD,MAGO,IAAI,OAAO,IAAI,CAAC,QAAL,CAAc,CAAd,CAAP,KAA4B,QAAhC,EAA0C;AAC/C,cAAK,QAAL,GAAgB,CACd,CAAC,IAAI,CAAC,QAAL,CAAc,CAAd,CAAD,EAAmB,IAAI,CAAC,QAAL,CAAc,CAAd,CAAnB,CADc,EAEd,CAAC,IAAI,CAAC,QAAL,CAAc,CAAd,CAAD,EAA6B,IAAI,CAAC,QAAL,CAAc,CAAd,CAA7B,CAFc,CAAhB;AAID,KALM,MAKA;AACL,cAAK,QAAL,GAAgB,IAAI,CAAC,QAArB;AACD;;AACD,YAAK,UAAL,GACI,IAAI,CAAC,UAAL,KAAoB,SAApB,GAAgC,cAAhC,GAAiD,IAAI,CAAC,UAD1D;AAEA,YAAK,SAAL,GAAiB,CAAC;AAAC,MAAA,IAAI,EAAE;AAAP,KAAD,CAAjB;AAfmC;AAgBpC;;AAtBH;AAAA;AAAA,WAwBE,4BAAmB,UAAnB,EAAoC;AAClC,UAAI,KAAK,UAAL,KAAoB,eAAxB,EAAyC;AACvC,eAAO,CACL,UAAU,CAAC,CAAD,CADL,EACU,UAAU,CAAC,CAAD,CADpB,EAEL,UAAU,CAAC,CAAD,CAAV,GAAgB,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAhB,GAAsC,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAFjC,EAGL,UAAU,CAAC,CAAD,CAAV,GAAgB,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAhB,GAAsC,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAHjC,CAAP;AAKD,OAND,MAMO;AACL,eAAO,CACL,UAAU,CAAC,CAAD,CADL,EAEL,UAAU,CAAC,CAAD,CAAV,GAAgB,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAhB,GAAsC,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAFjC,EAGL,UAAU,CAAC,CAAD,CAAV,GAAgB,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAhB,GAAsC,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAHjC,EAGsD,UAAU,CAAC,CAAD,CAHhE,CAAP;AAKD;AACF;AAtCH;AAAA;AAAA,WAwCE,cAAK,MAAL,EAA8B,MAA9B,EAA4C;AAAA;;AAC1C,aAAO,IAAI,CAAC,YAAK;AACf,QAAA,MAAM,GAAG,mBAAmB,CAAC,MAAD,CAA5B;;AAEA,YAAI,OAAI,CAAC,UAAL,KAAoB,cAAxB,EAAwC;AACtC,cAAM,OAAO,GAAG,CAAC,CAAC,cAAF,CACZ,MADY,EACJ,OAAI,CAAC,QAAL,CAAc,CAAd,EAAiB,CAAjB,CADI,EAEZ,MAAM,CAAC,KAAP,CAAa,CAAb,IAAkB,OAAI,CAAC,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAlB,GAAwC,OAAI,CAAC,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAF5B,EAEiD,CAFjD,CAAhB;AAGA,iBAAO,CAAC,CAAC,cAAF,CACH,OADG,EACM,OAAI,CAAC,QAAL,CAAc,CAAd,EAAiB,CAAjB,CADN,EAEH,MAAM,CAAC,KAAP,CAAa,CAAb,IAAkB,OAAI,CAAC,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAlB,GAAwC,OAAI,CAAC,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAFrC,EAE0D,CAF1D,CAAP;AAGD,SAPD,MAOO;AACL,cAAM,QAAO,GAAG,CAAC,CAAC,cAAF,CACZ,MADY,EACJ,OAAI,CAAC,QAAL,CAAc,CAAd,EAAiB,CAAjB,CADI,EAEZ,MAAM,CAAC,KAAP,CAAa,CAAb,IAAkB,OAAI,CAAC,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAlB,GAAwC,OAAI,CAAC,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAF5B,EAEiD,CAFjD,CAAhB;;AAGA,iBAAO,CAAC,CAAC,cAAF,CACH,QADG,EACM,OAAI,CAAC,QAAL,CAAc,CAAd,EAAiB,CAAjB,CADN,EAEH,MAAM,CAAC,KAAP,CAAa,CAAb,IAAkB,OAAI,CAAC,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAlB,GAAwC,OAAI,CAAC,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAFrC,EAE0D,CAF1D,CAAP;AAGD;AACF,OAlBU,CAAX;AAmBD;AA5DH;AAAA;AAAA,WA8DE,qBAAS;AACP,UAAM,MAAM,GAAG;AAAC,QAAA,QAAQ,EAAE,KAAK,QAAhB;AAA0B,QAAA,UAAU,EAAE,KAAK;AAA3C,OAAf;;AACA,UAAM,UAAU,4EAAhB;;AACA,MAAA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,UAAtB;AACA,aAAO,MAAP;AACD;AAnEH;;AAAA;AAAA,EAAgC,KAAhC;AACE;;AACO,UAAA,CAAA,SAAA,GAAY,YAAZ;AAmET,aAAa,CAAC,aAAd,CAA4B,UAA5B;AA6BA,WAAa,YAAb;AAAA;;AAAA;;AAQE,wBAAY,IAAZ,EAAuC;AAAA;;AAAA;;AACrC,kCAAM,IAAN;AANiB,YAAA,YAAA,GAAe,CAAC,CAAD,EAAI,CAAJ,CAAf;AAOjB,YAAK,SAAL,GAAiB,CAAC;AAAC,MAAA,IAAI,EAAE;AAAP,KAAD,CAAjB;AACA,YAAK,IAAL,GAAY,IAAI,CAAC,IAAL,IAAa,IAAb,GAAoB,QAAK,YAAzB,GAAwC,IAAI,CAAC,IAAzD;AACA,YAAK,UAAL,GACI,IAAI,CAAC,UAAL,IAAmB,IAAnB,GAA0B,cAA1B,GAA2C,IAAI,CAAC,UADpD;AAEA,IAAA,eAAe,CAAC,QAAK,UAAN,CAAf;AACA,YAAK,aAAL,GACI,IAAI,CAAC,aAAL,IAAsB,IAAtB,GAA6B,SAA7B,GAAyC,IAAI,CAAC,aADlD;AAEA,IAAA,wBAAwB,CAAC,QAAK,aAAN,CAAxB;AATqC;AAUtC;;AAlBH;AAAA;AAAA,WAoBE,4BAAmB,UAAnB,EAAoC;AAClC,UAAI,KAAK,UAAL,KAAoB,eAAxB,EAAyC;AACvC,YAAM,MAAM,GACR,UAAU,CAAC,CAAD,CAAV,IAAiB,IAAjB,GAAwB,IAAxB,GAA+B,KAAK,IAAL,CAAU,CAAV,IAAe,UAAU,CAAC,CAAD,CAD5D;AAEA,YAAM,KAAK,GAAG,UAAU,CAAC,CAAD,CAAV,IAAiB,IAAjB,GAAwB,IAAxB,GAA+B,KAAK,IAAL,CAAU,CAAV,IAAe,UAAU,CAAC,CAAD,CAAtE;AACA,eAAO,CAAC,UAAU,CAAC,CAAD,CAAX,EAAgB,UAAU,CAAC,CAAD,CAA1B,EAA+B,MAA/B,EAAuC,KAAvC,CAAP;AACD,OALD,MAKO;AACL,YAAM,OAAM,GACR,UAAU,CAAC,CAAD,CAAV,IAAiB,IAAjB,GAAwB,IAAxB,GAA+B,KAAK,IAAL,CAAU,CAAV,IAAe,UAAU,CAAC,CAAD,CAD5D;;AAEA,YAAM,MAAK,GAAG,UAAU,CAAC,CAAD,CAAV,IAAiB,IAAjB,GAAwB,IAAxB,GAA+B,KAAK,IAAL,CAAU,CAAV,IAAe,UAAU,CAAC,CAAD,CAAtE;;AACA,eAAO,CAAC,UAAU,CAAC,CAAD,CAAX,EAAgB,OAAhB,EAAwB,MAAxB,EAA+B,UAAU,CAAC,CAAD,CAAzC,CAAP;AACD;AACF;AAhCH;AAAA;AAAA,WAkCE,cAAK,MAAL,EAA8B,MAA9B,EAA4C;AAAA;;AAC1C,aAAO,GAAG,CAAC,IAAJ,CAAS,YAAK;AACnB,YAAI,KAAK,GAAG,mBAAmB,CAAC,MAAD,CAA/B;AACA,YAAM,UAAU,GAAG,KAAK,CAAC,KAAzB;;AAEA,YAAI,OAAI,CAAC,UAAL,KAAoB,eAAxB,EAAyC;AACvC,UAAA,KAAK,GAAG,GAAG,CAAC,SAAJ,CAAc,KAAd,EAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAArB,CAAR;AACA,cAAM,MAAM,GAAG,OAAI,CAAC,IAAL,CAAU,CAAV,IAAe,UAAU,CAAC,CAAD,CAAxC;AACA,cAAM,KAAK,GAAG,OAAI,CAAC,IAAL,CAAU,CAAV,IAAe,UAAU,CAAC,CAAD,CAAvC;AAEA,cAAM,OAAO,GAAG,OAAI,CAAC,aAAL,KAAuB,SAAvB,GACZ,KAAK,CAAC,qBAAN,CAA4B,CAAC,MAAD,EAAS,KAAT,CAA5B,CADY,GAEZ,KAAK,CAAC,cAAN,CAAqB,CAAC,MAAD,EAAS,KAAT,CAArB,CAFJ;AAGA,iBAAO,GAAG,CAAC,SAAJ,CAAc,OAAd,EAAuB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAvB,CAAP;AACD,SATD,MASO;AACL,cAAM,QAAM,GAAG,OAAI,CAAC,IAAL,CAAU,CAAV,IAAe,UAAU,CAAC,CAAD,CAAxC;;AACA,cAAM,OAAK,GAAG,OAAI,CAAC,IAAL,CAAU,CAAV,IAAe,UAAU,CAAC,CAAD,CAAvC;;AACA,iBAAO,OAAI,CAAC,aAAL,KAAuB,SAAvB,GACH,KAAK,CAAC,qBAAN,CAA4B,CAAC,QAAD,EAAS,OAAT,CAA5B,CADG,GAEH,KAAK,CAAC,cAAN,CAAqB,CAAC,QAAD,EAAS,OAAT,CAArB,CAFJ;AAGD;AACF,OApBM,CAAP;AAqBD;AAxDH;AAAA;AAAA,WA0DE,qBAAS;AACP,UAAM,MAAM,GAAG;AAAC,QAAA,IAAI,EAAE,KAAK,IAAZ;AAAkB,QAAA,UAAU,EAAE,KAAK;AAAnC,OAAf;;AACA,UAAM,UAAU,8EAAhB;;AACA,MAAA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,UAAtB;AACA,aAAO,MAAP;AACD;AA/DH;;AAAA;AAAA,EAAkC,KAAlC;AACE;;AACO,YAAA,CAAA,SAAA,GAAY,cAAZ;AA+DT,aAAa,CAAC,aAAd,CAA4B,YAA5B","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkInterpolationFormat, checkPaddingMode } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength, deconvLength, normalizeArray } from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv2DInput(x, dataFormat) {\n    // TODO(cais): Cast type to float32 if not.\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        if (dataFormat === 'channelsFirst') {\n            return tfc.transpose(x, [0, 2, 3, 1]); // NCHW -> NHWC.\n        }\n        else {\n            return x;\n        }\n    });\n}\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv3DInput(x, dataFormat) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        if (dataFormat === 'channelsFirst') {\n            return tfc.transpose(x, [0, 2, 3, 4, 1]); // NCDHW -> NDHWC.\n        }\n        else {\n            return x;\n        }\n    });\n}\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1dWithBias(x, kernel, bias, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        // Check the ranks of x, kernel and bias.\n        if (x.shape.length !== 3) {\n            throw new ValueError(`The input of a conv1dWithBias operation should be 3, but is ` +\n                `${x.shape.length} instead.`);\n        }\n        if (kernel.shape.length !== 3) {\n            throw new ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ` +\n                `${kernel.shape.length} instead`);\n        }\n        if (bias != null && bias.shape.length !== 1) {\n            throw new ValueError(`The bias for a conv1dWithBias operation should be 1, but is ` +\n                `${kernel.shape.length} instead`);\n        }\n        // TODO(cais): Support CAUSAL padding mode.\n        if (dataFormat === 'channelsFirst') {\n            x = tfc.transpose(x, [0, 2, 1]); // NCW -> NWC.\n        }\n        if (padding === 'causal') {\n            throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' +\n                'implemented yet.');\n        }\n        let y = tfc.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n        if (bias != null) {\n            y = K.biasAdd(y, bias);\n        }\n        return y;\n    });\n}\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1d(x, kernel, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\nexport function conv2d(x, kernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        return conv2dWithBiasActivation(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\nexport function conv2dWithBiasActivation(x, kernel, bias, strides = [1, 1], padding = 'valid', dataFormat, dilationRate, activation = null) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        if (x.rank !== 3 && x.rank !== 4) {\n            throw new ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, ` +\n                `but received ${x.rank}.`);\n        }\n        if (kernel.rank !== 3 && kernel.rank !== 4) {\n            throw new ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` +\n                `but received ${x.rank}.`);\n        }\n        let y = preprocessConv2DInput(x, dataFormat);\n        if (padding === 'causal') {\n            throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' +\n                'implemented yet.');\n        }\n        y = tfc.fused.conv2d({\n            x: y,\n            filter: kernel,\n            strides: strides,\n            pad: padding === 'same' ? 'same' : 'valid',\n            dilations: dilationRate,\n            dataFormat: 'NHWC',\n            bias,\n            activation\n        });\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]);\n        }\n        return y;\n    });\n}\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\nexport function conv3d(x, kernel, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        return conv3dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\nexport function conv3dWithBias(x, kernel, bias, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        if (x.rank !== 4 && x.rank !== 5) {\n            throw new ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ` +\n                `${x.rank}.`);\n        }\n        if (kernel.rank !== 4 && kernel.rank !== 5) {\n            throw new ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ` +\n                `${x.rank}.`);\n        }\n        let y = preprocessConv3DInput(x, dataFormat);\n        if (padding === 'causal') {\n            throw new NotImplementedError('The support for CAUSAL padding mode in conv3dWithBias is not ' +\n                'implemented yet.');\n        }\n        y = tfc.conv3d(y, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n        if (bias != null) {\n            y = K.biasAdd(y, bias);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n        }\n        return y;\n    });\n}\n/**\n * Abstract convolution layer.\n */\nexport class BaseConv extends Layer {\n    constructor(rank, args) {\n        super(args);\n        this.bias = null;\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        BaseConv.verifyArgs(args);\n        this.rank = rank;\n        generic_utils.assertPositiveInteger(this.rank, 'rank');\n        if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n            throw new NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is ` +\n                `not implemented yet.`);\n        }\n        this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n        this.strides = normalizeArray(args.strides == null ? 1 : args.strides, rank, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        checkPaddingMode(this.padding);\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        this.activation = getActivation(args.activation);\n        this.useBias = args.useBias == null ? true : args.useBias;\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.activityRegularizer = getRegularizer(args.activityRegularizer);\n        this.dilationRate = normalizeArray(args.dilationRate == null ? 1 : args.dilationRate, rank, 'dilationRate');\n        if (this.rank === 1 &&\n            (Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)) {\n            throw new ValueError(`dilationRate must be a number or an array of a single number ` +\n                `for 1D convolution, but received ` +\n                `${JSON.stringify(this.dilationRate)}`);\n        }\n        else if (this.rank === 2) {\n            if (typeof this.dilationRate === 'number') {\n                this.dilationRate = [this.dilationRate, this.dilationRate];\n            }\n            else if (this.dilationRate.length !== 2) {\n                throw new ValueError(`dilationRate must be a number or array of two numbers for 2D ` +\n                    `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n            }\n        }\n        else if (this.rank === 3) {\n            if (typeof this.dilationRate === 'number') {\n                this.dilationRate =\n                    [this.dilationRate, this.dilationRate, this.dilationRate];\n            }\n            else if (this.dilationRate.length !== 3) {\n                throw new ValueError(`dilationRate must be a number or array of three numbers for 3D ` +\n                    `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n            }\n        }\n    }\n    static verifyArgs(args) {\n        // Check config.kernelSize type and shape.\n        generic_utils.assert('kernelSize' in args, `required key 'kernelSize' not in config`);\n        if (typeof args.kernelSize !== 'number' &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 3)) {\n            throw new ValueError(`BaseConv expects config.kernelSize to be number or number[] with ` +\n                `length 1, 2, or 3, but received ${JSON.stringify(args.kernelSize)}.`);\n        }\n    }\n    getConfig() {\n        const config = {\n            kernelSize: this.kernelSize,\n            strides: this.strides,\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n            dilationRate: this.dilationRate,\n            activation: serializeActivation(this.activation),\n            useBias: this.useBias,\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            biasConstraint: serializeConstraint(this.biasConstraint)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\nexport class Conv extends BaseConv {\n    constructor(rank, args) {\n        super(rank, args);\n        this.kernel = null;\n        Conv.verifyArgs(args);\n        this.filters = args.filters;\n        generic_utils.assertPositiveInteger(this.filters, 'filters');\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new ValueError(`The channel dimension of the input should be defined. ` +\n                `Found ${inputShape[channelAxis]}`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n        this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        this.inputSpec = [{ ndim: this.rank + 2, axes: { [channelAxis]: inputDim } }];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            let outputs;\n            const biasValue = this.bias == null ? null : this.bias.read();\n            const fusedActivationName = generic_utils.mapActivationToFusedKernel(this.activation.getClassName());\n            if (fusedActivationName != null && this.rank === 2) {\n                outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate, fusedActivationName);\n            }\n            else {\n                if (this.rank === 1) {\n                    outputs = conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);\n                }\n                else if (this.rank === 2) {\n                    // TODO(cais): Move up to constructor.\n                    outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n                }\n                else if (this.rank === 3) {\n                    outputs = conv3dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n                }\n                else {\n                    throw new NotImplementedError('convolutions greater than 3D are not implemented yet.');\n                }\n                if (this.activation != null) {\n                    outputs = this.activation.apply(outputs);\n                }\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const newSpace = [];\n        const space = (this.dataFormat === 'channelsLast') ?\n            inputShape.slice(1, inputShape.length - 1) :\n            inputShape.slice(2);\n        for (let i = 0; i < space.length; ++i) {\n            const newDim = convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate :\n                this.dilationRate[i]);\n            newSpace.push(newDim);\n        }\n        let outputShape = [inputShape[0]];\n        if (this.dataFormat === 'channelsLast') {\n            outputShape = outputShape.concat(newSpace);\n            outputShape.push(this.filters);\n        }\n        else {\n            outputShape.push(this.filters);\n            outputShape = outputShape.concat(newSpace);\n        }\n        return outputShape;\n    }\n    getConfig() {\n        const config = {\n            filters: this.filters,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    static verifyArgs(args) {\n        // Check config.filters type, shape, and value.\n        if (!('filters' in args) || typeof args.filters !== 'number' ||\n            args.filters < 1) {\n            throw new ValueError(`Convolution layer expected config.filters to be a 'number' > 0 ` +\n                `but got ${JSON.stringify(args.filters)}`);\n        }\n    }\n}\nexport class Conv2D extends Conv {\n    constructor(args) {\n        super(2, args);\n        Conv2D.verifyArgs(args);\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        return config;\n    }\n    static verifyArgs(args) {\n        // config.kernelSize must be a number or array of numbers.\n        if ((typeof args.kernelSize !== 'number') &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 2)) {\n            throw new ValueError(`Conv2D expects config.kernelSize to be number or number[] with ` +\n                `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n        }\n    }\n}\n/** @nocollapse */\nConv2D.className = 'Conv2D';\nserialization.registerClass(Conv2D);\nexport class Conv3D extends Conv {\n    constructor(args) {\n        super(3, args);\n        Conv3D.verifyArgs(args);\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        return config;\n    }\n    static verifyArgs(args) {\n        // config.kernelSize must be a number or array of numbers.\n        if (typeof args.kernelSize !== 'number') {\n            if (!(Array.isArray(args.kernelSize) &&\n                (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n                throw new ValueError(`Conv3D expects config.kernelSize to be number or` +\n                    ` [number, number, number], but received ${JSON.stringify(args.kernelSize)}.`);\n            }\n        }\n    }\n}\n/** @nocollapse */\nConv3D.className = 'Conv3D';\nserialization.registerClass(Conv3D);\nexport class Conv2DTranspose extends Conv2D {\n    constructor(args) {\n        super(args);\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n        if (this.padding !== 'same' && this.padding !== 'valid') {\n            throw new ValueError(`Conv2DTranspose currently supports only padding modes 'same' ` +\n                `and 'valid', but received padding mode ${this.padding}`);\n        }\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length !== 4) {\n            throw new ValueError('Input should have rank 4; Received input shape: ' +\n                JSON.stringify(inputShape));\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new ValueError('The channel dimension of the inputs should be defined. ' +\n                'Found `None`.');\n        }\n        const inputDim = inputShape[channelAxis];\n        const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n        this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        // Set input spec.\n        this.inputSpec =\n            [new InputSpec({ ndim: 4, axes: { [channelAxis]: inputDim } })];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            let input = getExactlyOneTensor(inputs);\n            if (input.shape.length !== 4) {\n                throw new ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but ` +\n                    `received a tensor of rank-${input.shape.length}`);\n            }\n            const inputShape = input.shape;\n            const batchSize = inputShape[0];\n            let hAxis;\n            let wAxis;\n            if (this.dataFormat === 'channelsFirst') {\n                hAxis = 2;\n                wAxis = 3;\n            }\n            else {\n                hAxis = 1;\n                wAxis = 2;\n            }\n            const height = inputShape[hAxis];\n            const width = inputShape[wAxis];\n            const kernelH = this.kernelSize[0];\n            const kernelW = this.kernelSize[1];\n            const strideH = this.strides[0];\n            const strideW = this.strides[1];\n            // Infer the dynamic output shape.\n            const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n            const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n            // Porting Note: We don't branch based on `this.dataFormat` here,\n            // because\n            //   the tjfs-core function `conv2dTranspose` called below always\n            //   assumes channelsLast.\n            const outputShape = [batchSize, outHeight, outWidth, this.filters];\n            if (this.dataFormat !== 'channelsLast') {\n                input = tfc.transpose(input, [0, 2, 3, 1]);\n            }\n            let outputs = tfc.conv2dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);\n            if (this.dataFormat !== 'channelsLast') {\n                outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n            }\n            if (this.bias != null) {\n                outputs =\n                    K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation != null) {\n                outputs = this.activation.apply(outputs);\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const outputShape = inputShape.slice();\n        let channelAxis;\n        let heightAxis;\n        let widthAxis;\n        if (this.dataFormat === 'channelsFirst') {\n            channelAxis = 1;\n            heightAxis = 2;\n            widthAxis = 3;\n        }\n        else {\n            channelAxis = 3;\n            heightAxis = 1;\n            widthAxis = 2;\n        }\n        const kernelH = this.kernelSize[0];\n        const kernelW = this.kernelSize[1];\n        const strideH = this.strides[0];\n        const strideW = this.strides[1];\n        outputShape[channelAxis] = this.filters;\n        outputShape[heightAxis] =\n            deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n        outputShape[widthAxis] =\n            deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n        return outputShape;\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['dilationRate'];\n        return config;\n    }\n}\n/** @nocollapse */\nConv2DTranspose.className = 'Conv2DTranspose';\nserialization.registerClass(Conv2DTranspose);\nexport class SeparableConv extends Conv {\n    constructor(rank, config) {\n        super(rank, config);\n        this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';\n        this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';\n        this.depthwiseKernel = null;\n        this.pointwiseKernel = null;\n        if (config.filters == null) {\n            throw new ValueError('The `filters` configuration field is required by SeparableConv, ' +\n                'but is unspecified.');\n        }\n        if (config.kernelInitializer != null || config.kernelRegularizer != null ||\n            config.kernelConstraint != null) {\n            throw new ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +\n                'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +\n                'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +\n                'pointwiseRegularizer and pointwiseConstraint instead.');\n        }\n        if (config.padding != null && config.padding !== 'same' &&\n            config.padding !== 'valid') {\n            throw new ValueError(`SeparableConv${this.rank}D supports only padding modes: ` +\n                `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n        }\n        this.depthMultiplier =\n            config.depthMultiplier == null ? 1 : config.depthMultiplier;\n        this.depthwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n        this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n        this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n        this.pointwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n        this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n        this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length < this.rank + 2) {\n            throw new ValueError(`Inputs to SeparableConv${this.rank}D should have rank ` +\n                `${this.rank + 2}, but received input shape: ` +\n                `${JSON.stringify(inputShape)}`);\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new ValueError(`The channel dimension of the inputs should be defined, ` +\n                `but found ${JSON.stringify(inputShape[channelAxis])}`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);\n        const pointwiseKernelShape = [];\n        for (let i = 0; i < this.rank; ++i) {\n            pointwiseKernelShape.push(1);\n        }\n        pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n        const trainable = true;\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, 'float32', this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);\n        this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, 'float32', this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.inputSpec =\n            [new InputSpec({ ndim: this.rank + 2, axes: { [channelAxis]: inputDim } })];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            let output;\n            if (this.rank === 1) {\n                throw new NotImplementedError('1D separable convolution is not implemented yet.');\n            }\n            else if (this.rank === 2) {\n                if (this.dataFormat === 'channelsFirst') {\n                    inputs = tfc.transpose(inputs, [0, 2, 3, 1]); // NCHW -> NHWC.\n                }\n                output = tfc.separableConv2d(inputs, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, 'NHWC');\n            }\n            if (this.useBias) {\n                output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation != null) {\n                output = this.activation.apply(output);\n            }\n            if (this.dataFormat === 'channelsFirst') {\n                output = tfc.transpose(output, [0, 3, 1, 2]); // NHWC -> NCHW.\n            }\n            return output;\n        });\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        delete config['kernelInitializer'];\n        delete config['kernelRegularizer'];\n        delete config['kernelConstraint'];\n        config['depthwiseInitializer'] =\n            serializeInitializer(this.depthwiseInitializer);\n        config['pointwiseInitializer'] =\n            serializeInitializer(this.pointwiseInitializer);\n        config['depthwiseRegularizer'] =\n            serializeRegularizer(this.depthwiseRegularizer);\n        config['pointwiseRegularizer'] =\n            serializeRegularizer(this.pointwiseRegularizer);\n        config['depthwiseConstraint'] =\n            serializeConstraint(this.depthwiseConstraint);\n        config['pointwiseConstraint'] =\n            serializeConstraint(this.pointwiseConstraint);\n        return config;\n    }\n}\n/** @nocollapse */\nSeparableConv.className = 'SeparableConv';\nexport class SeparableConv2D extends SeparableConv {\n    constructor(args) {\n        super(2, args);\n    }\n}\n/** @nocollapse */\nSeparableConv2D.className = 'SeparableConv2D';\nserialization.registerClass(SeparableConv2D);\nexport class Conv1D extends Conv {\n    constructor(args) {\n        super(1, args);\n        Conv1D.verifyArgs(args);\n        this.inputSpec = [{ ndim: 3 }];\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        delete config['dataFormat'];\n        return config;\n    }\n    static verifyArgs(args) {\n        // config.kernelSize must be a number or array of numbers.\n        if (typeof args.kernelSize !== 'number' &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 1)) {\n            throw new ValueError(`Conv1D expects config.kernelSize to be number or number[] with ` +\n                `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n        }\n    }\n}\n/** @nocollapse */\nConv1D.className = 'Conv1D';\nserialization.registerClass(Conv1D);\nexport class Cropping2D extends Layer {\n    constructor(args) {\n        super(args);\n        if (typeof args.cropping === 'number') {\n            this.cropping =\n                [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n        }\n        else if (typeof args.cropping[0] === 'number') {\n            this.cropping = [\n                [args.cropping[0], args.cropping[0]],\n                [args.cropping[1], args.cropping[1]]\n            ];\n        }\n        else {\n            this.cropping = args.cropping;\n        }\n        this.dataFormat =\n            args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n        this.inputSpec = [{ ndim: 4 }];\n    }\n    computeOutputShape(inputShape) {\n        if (this.dataFormat === 'channelsFirst') {\n            return [\n                inputShape[0], inputShape[1],\n                inputShape[2] - this.cropping[0][0] - this.cropping[0][1],\n                inputShape[3] - this.cropping[1][0] - this.cropping[1][1]\n            ];\n        }\n        else {\n            return [\n                inputShape[0],\n                inputShape[1] - this.cropping[0][0] - this.cropping[0][1],\n                inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]\n            ];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsLast') {\n                const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n                return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n            }\n            else {\n                const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n                return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n            }\n        });\n    }\n    getConfig() {\n        const config = { cropping: this.cropping, dataFormat: this.dataFormat };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nCropping2D.className = 'Cropping2D';\nserialization.registerClass(Cropping2D);\nexport class UpSampling2D extends Layer {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_SIZE = [2, 2];\n        this.inputSpec = [{ ndim: 4 }];\n        this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        this.interpolation =\n            args.interpolation == null ? 'nearest' : args.interpolation;\n        checkInterpolationFormat(this.interpolation);\n    }\n    computeOutputShape(inputShape) {\n        if (this.dataFormat === 'channelsFirst') {\n            const height = inputShape[2] == null ? null : this.size[0] * inputShape[2];\n            const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n            return [inputShape[0], inputShape[1], height, width];\n        }\n        else {\n            const height = inputShape[1] == null ? null : this.size[0] * inputShape[1];\n            const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n            return [inputShape[0], height, width, inputShape[3]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            let input = getExactlyOneTensor(inputs);\n            const inputShape = input.shape;\n            if (this.dataFormat === 'channelsFirst') {\n                input = tfc.transpose(input, [0, 2, 3, 1]);\n                const height = this.size[0] * inputShape[2];\n                const width = this.size[1] * inputShape[3];\n                const resized = this.interpolation === 'nearest' ?\n                    input.resizeNearestNeighbor([height, width]) :\n                    input.resizeBilinear([height, width]);\n                return tfc.transpose(resized, [0, 3, 1, 2]);\n            }\n            else {\n                const height = this.size[0] * inputShape[1];\n                const width = this.size[1] * inputShape[2];\n                return this.interpolation === 'nearest' ?\n                    input.resizeNearestNeighbor([height, width]) :\n                    input.resizeBilinear([height, width]);\n            }\n        });\n    }\n    getConfig() {\n        const config = { size: this.size, dataFormat: this.dataFormat };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nUpSampling2D.className = 'UpSampling2D';\nserialization.registerClass(UpSampling2D);\n//# sourceMappingURL=convolutional.js.map"]},"metadata":{},"sourceType":"module"}