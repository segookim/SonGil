{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative, env, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nexport function depthwiseConv2dNative(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dimRoundingMode\n  } = attrs;\n  let $dilations = dilations;\n\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + `1. Got strides ${strides} and dilations '${$dilations}'`);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true\n  /* depthwise */\n  );\n  let program;\n\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\nexport const depthwiseConv2dNativeConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative\n};","map":{"version":3,"sources":["../../src/kernels/DepthwiseConv2dNative.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsB,qBAAtB,EAAsG,GAAtG,EAAqI,IAArI,QAAgJ,uBAAhJ;AAGA,SAAQ,sBAAR,QAAqC,uBAArC;AACA,SAAQ,4BAAR,QAA2C,8BAA3C;AAEA,OAAM,SAAU,qBAAV,CAAgC,IAAhC,EAIL;AACC,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA,OAAT;AAAkB,IAAA;AAAlB,MAA2B,IAAjC;AACA,QAAM;AAAC,IAAA,CAAD;AAAI,IAAA;AAAJ,MAAc,MAApB;AACA,QAAM;AAAC,IAAA,OAAD;AAAU,IAAA,GAAV;AAAe,IAAA,SAAf;AAA0B,IAAA;AAA1B,MAA6C,KAAnD;AAEA,MAAI,UAAU,GAAG,SAAjB;;AACA,MAAI,UAAU,IAAI,IAAlB,EAAwB;AACtB,IAAA,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAb;AACD;;AAED,EAAA,IAAI,CAAC,MAAL,CACI,YAAY,CAAC,8BAAb,CAA4C,OAA5C,EAAqD,UAArD,CADJ,EAEI,MAAM,mEACF,kBAAkB,OAAO,mBAAmB,UAAU,GAH9D;AAKA,QAAM,QAAQ,GAAG,YAAY,CAAC,iBAAb,CACb,CAAC,CAAC,KADW,EAEb,MAAM,CAAC,KAFM,EAEqC,OAFrC,EAE8C,UAF9C,EAGb,GAHa,EAGR,eAHQ,EAGS;AAAK;AAHd,GAAjB;AAKA,MAAI,OAAJ;;AACA,MAAI,GAAG,GAAG,OAAN,CAAc,0BAAd,KAA6C,QAAQ,CAAC,WAAT,IAAwB,CAArE,IACA,QAAQ,CAAC,WAAT,GAAuB,QAAQ,CAAC,UAAhC,KAA+C,CADnD,EACsD;AACpD,IAAA,OAAO,GAAG,IAAI,4BAAJ,CAAiC,QAAjC,CAAV;AACD,GAHD,MAGO;AACL,IAAA,OAAO,GAAG,IAAI,sBAAJ,CAA2B,QAA3B,CAAV;AACD;;AAED,SAAO,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,CAAD,EAAI,MAAJ,CAAjC,EAA8C,SAA9C,CAAP;AACD;AAED,OAAO,MAAM,2BAA2B,GAAiB;AACvD,EAAA,UAAU,EAAE,qBAD2C;AAEvD,EAAA,WAAW,EAAE,OAF0C;AAGvD,EAAA,UAAU,EAAE;AAH2C,CAAlD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative, env, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nexport function depthwiseConv2dNative(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations, dimRoundingMode } = attrs;\n    let $dilations = dilations;\n    if ($dilations == null) {\n        $dilations = [1, 1];\n    }\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n        `1. Got strides ${strides} and dilations '${$dilations}'`);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n    let program;\n    if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1) {\n        program = new DepthwiseConvPacked2DProgram(convInfo);\n    }\n    else {\n        program = new DepthwiseConv2DProgram(convInfo);\n    }\n    return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\nexport const depthwiseConv2dNativeConfig = {\n    kernelName: DepthwiseConv2dNative,\n    backendName: 'webgl',\n    kernelFunc: depthwiseConv2dNative,\n};\n//# sourceMappingURL=DepthwiseConv2dNative.js.map"]},"metadata":{},"sourceType":"module"}