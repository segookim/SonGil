{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class BatchNormProgram {\n  constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n    this.outputShape = [];\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n    let offsetSnippet = '0.0';\n\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/batchnorm_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,QAA2B,uBAA3B;AAGA,OAAM,MAAO,gBAAP,CAAuB;AAK3B,EAAA,WAAA,CACI,MADJ,EACsB,SADtB,EAC2C,aAD3C,EAEI,WAFJ,EAEgC,UAFhC,EAGI,eAHJ,EAG2B;AAN3B,SAAA,WAAA,GAAwB,EAAxB;AAOE,SAAK,aAAL,GAAqB,CAAC,GAAD,EAAM,MAAN,EAAc,UAAd,CAArB;AACA,IAAA,YAAY,CAAC,0BAAb,CAAwC,MAAxC,EAAgD,SAAhD;AACA,IAAA,YAAY,CAAC,0BAAb,CAAwC,MAAxC,EAAgD,aAAhD;AAEA,QAAI,aAAa,GAAG,KAApB;;AACA,QAAI,WAAW,IAAI,IAAnB,EAAyB;AACvB,MAAA,YAAY,CAAC,0BAAb,CAAwC,MAAxC,EAAgD,WAAhD;AACA,WAAK,aAAL,CAAmB,IAAnB,CAAwB,QAAxB;AACA,MAAA,aAAa,GAAG,wBAAhB;AACD;;AAED,QAAI,YAAY,GAAG,KAAnB;;AACA,QAAI,UAAU,IAAI,IAAlB,EAAwB;AACtB,MAAA,YAAY,CAAC,0BAAb,CAAwC,MAAxC,EAAgD,UAAhD;AACA,WAAK,aAAL,CAAmB,IAAnB,CAAwB,OAAxB;AACA,MAAA,YAAY,GAAG,uBAAf;AACD;;AAED,SAAK,WAAL,GAAmB,MAAnB;AACA,SAAK,QAAL,GAAgB;;;;;yBAKK,aAAa;wBACd,YAAY;2DACuB,eAAe;;;AAGrE,KAVD;AAWD;;AAvC0B","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class BatchNormProgram {\n    constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n        this.outputShape = [];\n        this.variableNames = ['x', 'mean', 'variance'];\n        backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n        backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n        let offsetSnippet = '0.0';\n        if (offsetShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n            this.variableNames.push('offset');\n            offsetSnippet = 'getOffsetAtOutCoords()';\n        }\n        let scaleSnippet = '1.0';\n        if (scaleShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n            this.variableNames.push('scale');\n            scaleSnippet = 'getScaleAtOutCoords()';\n        }\n        this.outputShape = xShape;\n        this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=batchnorm_gpu.js.map"]},"metadata":{},"sourceType":"module"}