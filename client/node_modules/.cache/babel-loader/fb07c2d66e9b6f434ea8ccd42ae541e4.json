{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose as _dispose, tidy } from '../globals';\nimport { abs } from '../ops/abs';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { maximum } from '../ops/maximum';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\nexport var AdamaxOptimizer = /*#__PURE__*/function (_Optimizer) {\n  _inherits(AdamaxOptimizer, _Optimizer);\n\n  var _super = _createSuper(AdamaxOptimizer);\n\n  function AdamaxOptimizer(learningRate, beta1, beta2) {\n    var _this;\n\n    var epsilon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var decay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.0;\n\n    _classCallCheck(this, AdamaxOptimizer);\n\n    _this = _super.call(this);\n    _this.learningRate = learningRate;\n    _this.beta1 = beta1;\n    _this.beta2 = beta2;\n    _this.epsilon = epsilon;\n    _this.decay = decay;\n    _this.accumulatedFirstMoment = [];\n    _this.accumulatedWeightedInfNorm = [];\n    tidy(function () {\n      _this.iteration = scalar(0).variable();\n      _this.accBeta1 = scalar(beta1).variable();\n    });\n\n    if (epsilon == null) {\n      _this.epsilon = ENGINE.backend.epsilon();\n    }\n\n    return _this;\n  }\n\n  _createClass(AdamaxOptimizer, [{\n    key: \"applyGradients\",\n    value: function applyGradients(variableGradients) {\n      var _this2 = this;\n\n      var variableNames = Array.isArray(variableGradients) ? variableGradients.map(function (item) {\n        return item.name;\n      }) : Object.keys(variableGradients);\n      tidy(function () {\n        var oneMinusAccBeta1 = sub(1, _this2.accBeta1);\n        var lr = div(-_this2.learningRate, add(mul(_this2.iteration, _this2.decay), 1));\n        variableNames.forEach(function (name, i) {\n          var value = ENGINE.registeredVariables[name];\n          var trainable = false;\n\n          if (_this2.accumulatedFirstMoment[i] == null) {\n            _this2.accumulatedFirstMoment[i] = {\n              originalName: \"\".concat(name, \"/m\"),\n              variable: zerosLike(value).variable(trainable)\n            };\n          }\n\n          if (_this2.accumulatedWeightedInfNorm[i] == null) {\n            _this2.accumulatedWeightedInfNorm[i] = {\n              originalName: \"\".concat(name, \"/v\"),\n              variable: zerosLike(value).variable(trainable)\n            };\n          }\n\n          var gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n          if (gradient == null) {\n            return;\n          }\n\n          var firstMoment = _this2.accumulatedFirstMoment[i].variable;\n          var weightedInfNorm = _this2.accumulatedWeightedInfNorm[i].variable;\n          var newFirstMoment = add(mul(firstMoment, _this2.beta1), mul(gradient, 1 - _this2.beta1));\n          var ut0 = mul(weightedInfNorm, _this2.beta2);\n          var ut1 = abs(gradient);\n          var newWeightedInfNorm = maximum(ut0, ut1);\n          firstMoment.assign(newFirstMoment);\n          weightedInfNorm.assign(newWeightedInfNorm);\n          var newValue = add(mul(div(lr, oneMinusAccBeta1), div(newFirstMoment, add(newWeightedInfNorm, _this2.epsilon))), value);\n          value.assign(newValue);\n        });\n\n        _this2.iteration.assign(add(_this2.iteration, 1));\n\n        _this2.accBeta1.assign(mul(_this2.accBeta1, _this2.beta1));\n      });\n      this.incrementIterations();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.accBeta1.dispose();\n      this.iteration.dispose();\n\n      if (this.accumulatedFirstMoment != null) {\n        _dispose(this.accumulatedFirstMoment.map(function (v) {\n          return v.variable;\n        }));\n      }\n\n      if (this.accumulatedWeightedInfNorm != null) {\n        _dispose(this.accumulatedWeightedInfNorm.map(function (v) {\n          return v.variable;\n        }));\n      }\n    }\n  }, {\n    key: \"getWeights\",\n    value: function () {\n      var _getWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                throw new Error('getWeights() is not implemented for Adamax yet.');\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getWeights() {\n        return _getWeights.apply(this, arguments);\n      }\n\n      return getWeights;\n    }()\n  }, {\n    key: \"setWeights\",\n    value: function () {\n      var _setWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(weightValues) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                throw new Error('setWeights() is not implemented for Adamax yet.');\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function setWeights(_x) {\n        return _setWeights.apply(this, arguments);\n      }\n\n      return setWeights;\n    }()\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        'learningRate': this.learningRate,\n        'beta1': this.beta1,\n        'beta2': this.beta2,\n        'epsilon': this.epsilon,\n        'decay': this.decay\n      };\n    }\n    /** @nocollapse */\n\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon'], config['decay']);\n    }\n  }]);\n\n  return AdamaxOptimizer;\n}(Optimizer);\n/** @nocollapse */\n\nAdamaxOptimizer.className = 'Adamax'; // Note: Name matters for Python compatbility.\n\nregisterClass(AdamaxOptimizer);","map":{"version":3,"sources":["../../src/optimizers/adamax_optimizer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { abs } from '../ops/abs';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { maximum } from '../ops/maximum';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\nexport class AdamaxOptimizer extends Optimizer {\n    constructor(learningRate, beta1, beta2, epsilon = null, decay = 0.0) {\n        super();\n        this.learningRate = learningRate;\n        this.beta1 = beta1;\n        this.beta2 = beta2;\n        this.epsilon = epsilon;\n        this.decay = decay;\n        this.accumulatedFirstMoment = [];\n        this.accumulatedWeightedInfNorm = [];\n        tidy(() => {\n            this.iteration = scalar(0).variable();\n            this.accBeta1 = scalar(beta1).variable();\n        });\n        if (epsilon == null) {\n            this.epsilon = ENGINE.backend.epsilon();\n        }\n    }\n    applyGradients(variableGradients) {\n        const variableNames = Array.isArray(variableGradients) ?\n            variableGradients.map(item => item.name) :\n            Object.keys(variableGradients);\n        tidy(() => {\n            const oneMinusAccBeta1 = sub(1, this.accBeta1);\n            const lr = div(-this.learningRate, add(mul(this.iteration, this.decay), 1));\n            variableNames.forEach((name, i) => {\n                const value = ENGINE.registeredVariables[name];\n                const trainable = false;\n                if (this.accumulatedFirstMoment[i] == null) {\n                    this.accumulatedFirstMoment[i] = {\n                        originalName: `${name}/m`,\n                        variable: zerosLike(value).variable(trainable)\n                    };\n                }\n                if (this.accumulatedWeightedInfNorm[i] == null) {\n                    this.accumulatedWeightedInfNorm[i] = {\n                        originalName: `${name}/v`,\n                        variable: zerosLike(value).variable(trainable)\n                    };\n                }\n                const gradient = Array.isArray(variableGradients) ?\n                    variableGradients[i].tensor :\n                    variableGradients[name];\n                if (gradient == null) {\n                    return;\n                }\n                const firstMoment = this.accumulatedFirstMoment[i].variable;\n                const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;\n                const newFirstMoment = add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n                const ut0 = mul(weightedInfNorm, this.beta2);\n                const ut1 = abs(gradient);\n                const newWeightedInfNorm = maximum(ut0, ut1);\n                firstMoment.assign(newFirstMoment);\n                weightedInfNorm.assign(newWeightedInfNorm);\n                const newValue = add(mul(div(lr, oneMinusAccBeta1), div(newFirstMoment, add(newWeightedInfNorm, this.epsilon))), value);\n                value.assign(newValue);\n            });\n            this.iteration.assign(add(this.iteration, 1));\n            this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        this.accBeta1.dispose();\n        this.iteration.dispose();\n        if (this.accumulatedFirstMoment != null) {\n            dispose(this.accumulatedFirstMoment.map(v => v.variable));\n        }\n        if (this.accumulatedWeightedInfNorm != null) {\n            dispose(this.accumulatedWeightedInfNorm.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        throw new Error('getWeights() is not implemented for Adamax yet.');\n    }\n    async setWeights(weightValues) {\n        throw new Error('setWeights() is not implemented for Adamax yet.');\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'beta1': this.beta1,\n            'beta2': this.beta2,\n            'epsilon': this.epsilon,\n            'decay': this.decay\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon'], config['decay']);\n    }\n}\n/** @nocollapse */\nAdamaxOptimizer.className = 'Adamax'; // Note: Name matters for Python compatbility.\nregisterClass(AdamaxOptimizer);\n//# sourceMappingURL=adamax_optimizer.js.map"]},"metadata":{},"sourceType":"module"}