{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { fill } from '../ops/fill';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\n\nexport class AdagradOptimizer extends Optimizer {\n  constructor(learningRate, initialAccumulatorValue = 0.1) {\n    super();\n    this.learningRate = learningRate;\n    this.initialAccumulatorValue = initialAccumulatorValue;\n    this.accumulatedGrads = [];\n  }\n\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n\n      if (this.accumulatedGrads[i] == null) {\n        const trainable = false;\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accumulator`,\n          variable: tidy(() => fill(value.shape, this.initialAccumulatorValue).variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n      tidy(() => {\n        const newAccumulatedGrad = add(accumulatedGrad, square(gradient));\n        accumulatedGrad.assign(newAccumulatedGrad);\n        const newValue = add(mul(div(gradient, sqrt(add(newAccumulatedGrad, ENGINE.backend.epsilon()))), -this.learningRate), value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose() {\n    if (this.accumulatedGrads != null) {\n      dispose(this.accumulatedGrads.map(v => v.variable));\n    }\n  }\n\n  async getWeights() {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulatedGrads.map(v => ({\n      name: v.originalName,\n      tensor: v.variable\n    })));\n  }\n\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulatedGrads = weightValues.map(v => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n  }\n\n  getConfig() {\n    return {\n      'learningRate': this.learningRate,\n      'initialAccumulatorValue': this.initialAccumulatorValue\n    };\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls(config['learningRate'], config['initialAccumulatorValue']);\n  }\n\n}\n/** @nocollapse */\n\nAdagradOptimizer.className = 'Adagrad'; // Note: Name matters for Python compatibility.\n\nregisterClass(AdagradOptimizer);","map":{"version":3,"sources":["../../src/optimizers/adagrad_optimizer.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,OAAR,EAAiB,IAAjB,QAA4B,YAA5B;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,IAAR,QAAmB,aAAnB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,IAAR,QAAmB,aAAnB;AACA,SAAQ,MAAR,QAAqB,eAArB;AACA,SAAoB,aAApB,QAA+E,kBAA/E;AAGA,SAAQ,SAAR,QAA2C,aAA3C;AAEA;;AACA,OAAM,MAAO,gBAAP,SAAgC,SAAhC,CAAyC;AAM7C,EAAA,WAAA,CACc,YADd,EAC4C,uBAAA,GAA0B,GADtE,EACyE;AACvE;AADY,SAAA,YAAA,GAAA,YAAA;AAA8B,SAAA,uBAAA,GAAA,uBAAA;AAHpC,SAAA,gBAAA,GAAwC,EAAxC;AAKP;;AAED,EAAA,cAAc,CAAC,iBAAD,EAAkD;AAC9D,UAAM,aAAa,GAAG,KAAK,CAAC,OAAN,CAAc,iBAAd,IAClB,iBAAiB,CAAC,GAAlB,CAAsB,IAAI,IAAI,IAAI,CAAC,IAAnC,CADkB,GAElB,MAAM,CAAC,IAAP,CAAY,iBAAZ,CAFJ;AAIA,IAAA,aAAa,CAAC,OAAd,CAAsB,CAAC,IAAD,EAAO,CAAP,KAAY;AAChC,YAAM,KAAK,GAAG,MAAM,CAAC,mBAAP,CAA2B,IAA3B,CAAd;;AACA,UAAI,KAAK,gBAAL,CAAsB,CAAtB,KAA4B,IAAhC,EAAsC;AACpC,cAAM,SAAS,GAAG,KAAlB;AACA,aAAK,gBAAL,CAAsB,CAAtB,IAA2B;AACzB,UAAA,YAAY,EAAE,GAAG,IAAI,cADI;AAEzB,UAAA,QAAQ,EAAE,IAAI,CACV,MAAM,IAAI,CAAC,KAAK,CAAC,KAAP,EAAc,KAAK,uBAAnB,CAAJ,CACK,QADL,CACc,SADd,CADI;AAFW,SAA3B;AAMD;;AAED,YAAM,QAAQ,GAAG,KAAK,CAAC,OAAN,CAAc,iBAAd,IACb,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,MADR,GAEb,iBAAiB,CAAC,IAAD,CAFrB;;AAGA,UAAI,QAAQ,IAAI,IAAhB,EAAsB;AACpB;AACD;;AAED,YAAM,eAAe,GAAG,KAAK,gBAAL,CAAsB,CAAtB,EAAyB,QAAjD;AAEA,MAAA,IAAI,CAAC,MAAK;AACR,cAAM,kBAAkB,GAAG,GAAG,CAAC,eAAD,EAAkB,MAAM,CAAC,QAAD,CAAxB,CAA9B;AACA,QAAA,eAAe,CAAC,MAAhB,CAAuB,kBAAvB;AAEA,cAAM,QAAQ,GAAG,GAAG,CAChB,GAAG,CAAC,GAAG,CAAC,QAAD,EACC,IAAI,CAAC,GAAG,CAAC,kBAAD,EAAqB,MAAM,CAAC,OAAP,CAAe,OAAf,EAArB,CAAJ,CADL,CAAJ,EAEC,CAAC,KAAK,YAFP,CADa,EAIhB,KAJgB,CAApB;AAKA,QAAA,KAAK,CAAC,MAAN,CAAa,QAAb;AACD,OAVG,CAAJ;AAWD,KAhCD;AAiCA,SAAK,mBAAL;AACD;;AAED,EAAA,OAAO,GAAA;AACL,QAAI,KAAK,gBAAL,IAAyB,IAA7B,EAAmC;AACjC,MAAA,OAAO,CAAC,KAAK,gBAAL,CAAsB,GAAtB,CAA0B,CAAC,IAAI,CAAC,CAAC,QAAjC,CAAD,CAAP;AACD;AACF;;AAEe,QAAV,UAAU,GAAA;AACd;AACA,WAAO,CAAC,MAAM,KAAK,cAAL,EAAP,EAA8B,MAA9B,CAAqC,KAAK,gBAAL,CAAsB,GAAtB,CACxC,CAAC,KAAK;AAAC,MAAA,IAAI,EAAE,CAAC,CAAC,YAAT;AAAuB,MAAA,MAAM,EAAE,CAAC,CAAC;AAAjC,KAAL,CADuC,CAArC,CAAP;AAED;;AAEe,QAAV,UAAU,CAAC,YAAD,EAA4B;AAC1C,IAAA,YAAY,GAAG,MAAM,KAAK,iBAAL,CAAuB,YAAvB,CAArB;AACA,UAAM,SAAS,GAAG,KAAlB;AACA,SAAK,gBAAL,GAAwB,YAAY,CAAC,GAAb,CACpB,CAAC,KAAK;AAAC,MAAA,YAAY,EAAE,CAAC,CAAC,IAAjB;AAAuB,MAAA,QAAQ,EAAE,CAAC,CAAC,MAAF,CAAS,QAAT,CAAkB,SAAlB;AAAjC,KAAL,CADmB,CAAxB;AAED;;AAED,EAAA,SAAS,GAAA;AACP,WAAO;AACL,sBAAgB,KAAK,YADhB;AAEL,iCAA2B,KAAK;AAF3B,KAAP;AAID;AAED;;;AACiB,SAAV,UAAU,CACb,GADa,EACoB,MADpB,EACsC;AACrD,WAAO,IAAI,GAAJ,CAAQ,MAAM,CAAC,cAAD,CAAd,EAAgC,MAAM,CAAC,yBAAD,CAAtC,CAAP;AACD;;AAlF4C;AAC7C;;AACO,gBAAA,CAAA,SAAA,GAAY,SAAZ,C,CAAwB;;AAkFjC,aAAa,CAAC,gBAAD,CAAb","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { fill } from '../ops/fill';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\nexport class AdagradOptimizer extends Optimizer {\n    constructor(learningRate, initialAccumulatorValue = 0.1) {\n        super();\n        this.learningRate = learningRate;\n        this.initialAccumulatorValue = initialAccumulatorValue;\n        this.accumulatedGrads = [];\n    }\n    applyGradients(variableGradients) {\n        const variableNames = Array.isArray(variableGradients) ?\n            variableGradients.map(item => item.name) :\n            Object.keys(variableGradients);\n        variableNames.forEach((name, i) => {\n            const value = ENGINE.registeredVariables[name];\n            if (this.accumulatedGrads[i] == null) {\n                const trainable = false;\n                this.accumulatedGrads[i] = {\n                    originalName: `${name}/accumulator`,\n                    variable: tidy(() => fill(value.shape, this.initialAccumulatorValue)\n                        .variable(trainable))\n                };\n            }\n            const gradient = Array.isArray(variableGradients) ?\n                variableGradients[i].tensor :\n                variableGradients[name];\n            if (gradient == null) {\n                return;\n            }\n            const accumulatedGrad = this.accumulatedGrads[i].variable;\n            tidy(() => {\n                const newAccumulatedGrad = add(accumulatedGrad, square(gradient));\n                accumulatedGrad.assign(newAccumulatedGrad);\n                const newValue = add(mul(div(gradient, sqrt(add(newAccumulatedGrad, ENGINE.backend.epsilon()))), -this.learningRate), value);\n                value.assign(newValue);\n            });\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        if (this.accumulatedGrads != null) {\n            dispose(this.accumulatedGrads.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        // Order matters for Python compatibility.\n        return [await this.saveIterations()].concat(this.accumulatedGrads.map(v => ({ name: v.originalName, tensor: v.variable })));\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        const trainable = false;\n        this.accumulatedGrads = weightValues.map(v => ({ originalName: v.name, variable: v.tensor.variable(trainable) }));\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'initialAccumulatorValue': this.initialAccumulatorValue,\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['initialAccumulatorValue']);\n    }\n}\n/** @nocollapse */\nAdagradOptimizer.className = 'Adagrad'; // Note: Name matters for Python compatibility.\nregisterClass(AdagradOptimizer);\n//# sourceMappingURL=adagrad_optimizer.js.map"]},"metadata":{},"sourceType":"module"}