{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2DBackpropFilter, util } from '@tensorflow/tfjs-core';\nexport const dilation2dBackpropFilterConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({\n    inputs,\n    backend,\n    attrs\n  }) => {\n    const {\n      x,\n      filter,\n      dy\n    } = inputs;\n    const {\n      strides,\n      pad,\n      dilations\n    } = attrs;\n    const cpuBackend = backend;\n    const $x = util.toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);\n    const $filter = util.toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC'\n    /* dataFormat */\n    , dilations);\n    util.assert(dy.rank === outShape.length, () => `Error in ${Dilation2DBackpropFilter}, dy ` + `must have the same rank as output ${outShape.length}, but got ` + `${dy.rank}`);\n    const $dy = util.toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values); // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n\n    const gradients = util.makeZerosNestedTypedArray(filter.shape, filter.dtype); // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n    return {\n      dataId,\n      shape: filter.shape,\n      dtype: filter.dtype\n    };\n  }\n};","map":{"version":3,"sources":["../../src/kernels/Dilation2DBackpropFilter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2DBackpropFilter, util } from '@tensorflow/tfjs-core';\nexport const dilation2dBackpropFilterConfig = {\n    kernelName: Dilation2DBackpropFilter,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        const { x, filter, dy } = inputs;\n        const { strides, pad, dilations } = attrs;\n        const cpuBackend = backend;\n        const $x = util.toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);\n        const $filter = util.toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);\n        const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n        util.assert(dy.rank === outShape.length, () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n        const $dy = util.toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values);\n        // The computed filter gradients has the same dimensions as the filter:\n        // [filterHeight, filterWidth, depth]\n        const gradients = util.makeZerosNestedTypedArray(filter.shape, filter.dtype);\n        // In the case of multiple argmax branches, we only back-propagate along the\n        // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n        // similarly to the max-pooling backward routines.\n        // This implementation follows the TF c++ implementation:\n        // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n        for (let b = 0; b < batchSize; ++b) {\n            for (let hOut = 0; hOut < outHeight; ++hOut) {\n                const hBeg = hOut * strideHeight - padInfo.top;\n                for (let wOut = 0; wOut < outWidth; ++wOut) {\n                    const wBeg = wOut * strideWidth - padInfo.left;\n                    for (let d = 0; d < inChannels; ++d) {\n                        let curVal = Number.MIN_SAFE_INTEGER;\n                        let hMax = 0;\n                        let wMax = 0;\n                        for (let h = 0; h < filterHeight; ++h) {\n                            const hIn = hBeg + h * dilationHeight;\n                            if (hIn >= 0 && hIn < inHeight) {\n                                for (let w = 0; w < filterWidth; ++w) {\n                                    const wIn = wBeg + w * dilationWidth;\n                                    if (wIn >= 0 && wIn < inWidth) {\n                                        const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                                        if (val > curVal) {\n                                            curVal = val;\n                                            hMax = h;\n                                            wMax = w;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n        return { dataId, shape: filter.shape, dtype: filter.dtype };\n    }\n};\n//# sourceMappingURL=Dilation2DBackpropFilter.js.map"]},"metadata":{},"sourceType":"module"}