{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { op } from './operation';\nimport { MPRandGauss } from './rand_util';\n/**\n * Creates a `tf.Tensor` with values sampled from a normal distribution.\n *\n * ```js\n * tf.randomNormal([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\n\nfunction randomNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {\n  if (dtype != null && dtype === 'bool') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n\n  const randGauss = new MPRandGauss(mean, stdDev, dtype, false\n  /* truncated */\n  , seed);\n  const res = buffer(shape, dtype);\n\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = randGauss.nextValue();\n  }\n\n  return res.toTensor();\n}\n\nexport const randomNormal = op({\n  randomNormal_\n});","map":{"version":3,"sources":["../../src/ops/random_normal.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAKH,SAAQ,MAAR,QAAqB,UAArB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,WAAR,QAA0B,aAA1B;AAEA;;;;;;;;;;;;;;AAcG;;AACH,SAAS,aAAT,CACI,KADJ,EACwB,IAAI,GAAG,CAD/B,EACkC,MAAM,GAAG,CAD3C,EAC8C,KAD9C,EAEI,IAFJ,EAEiB;AACf,MAAI,KAAK,IAAI,IAAT,IAAkB,KAAkB,KAAK,MAA7C,EAAqD;AACnD,UAAM,IAAI,KAAJ,CAAU,yBAAyB,KAAK,EAAxC,CAAN;AACD;;AACD,QAAM,SAAS,GACX,IAAI,WAAJ,CAAgB,IAAhB,EAAsB,MAAtB,EAA8B,KAA9B,EAAqC;AAAM;AAA3C,IAA4D,IAA5D,CADJ;AAEA,QAAM,GAAG,GAAG,MAAM,CAAC,KAAD,EAAQ,KAAR,CAAlB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAJ,CAAW,MAA/B,EAAuC,CAAC,EAAxC,EAA4C;AAC1C,IAAA,GAAG,CAAC,MAAJ,CAAW,CAAX,IAAgB,SAAS,CAAC,SAAV,EAAhB;AACD;;AACD,SAAO,GAAG,CAAC,QAAJ,EAAP;AACD;;AAED,OAAO,MAAM,YAAY,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAvB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { op } from './operation';\nimport { MPRandGauss } from './rand_util';\n/**\n * Creates a `tf.Tensor` with values sampled from a normal distribution.\n *\n * ```js\n * tf.randomNormal([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {\n    if (dtype != null && dtype === 'bool') {\n        throw new Error(`Unsupported data type ${dtype}`);\n    }\n    const randGauss = new MPRandGauss(mean, stdDev, dtype, false /* truncated */, seed);\n    const res = buffer(shape, dtype);\n    for (let i = 0; i < res.values.length; i++) {\n        res.values[i] = randGauss.nextValue();\n    }\n    return res.toTensor();\n}\nexport const randomNormal = op({ randomNormal_ });\n//# sourceMappingURL=random_normal.js.map"]},"metadata":{},"sourceType":"module"}