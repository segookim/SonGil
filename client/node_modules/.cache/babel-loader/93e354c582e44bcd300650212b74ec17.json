{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkPaddingMode } from '../common';\nimport { InputSpec } from '../engine/topology';\nimport { AttributeError, NotImplementedError, ValueError } from '../errors';\nimport { Initializer } from '../initializers';\nimport { convOutputLength, normalizeArray } from '../utils/conv_utils';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport { getExactlyOneShape } from '../utils/types_utils';\nimport { generateDropoutMask, LSTMCell, RNN, RNNCell } from './recurrent';\n\nclass ConvRNN2DCell extends RNNCell {}\n/**\n * Base class for convolutional-recurrent layers.\n */\n\n\nclass ConvRNN2D extends RNN {\n  constructor(args) {\n    if (args.unroll) {\n      throw new NotImplementedError('Unrolling is not possible with convolutional RNNs.');\n    }\n\n    if (Array.isArray(args.cell)) {\n      throw new NotImplementedError('It is not possible at the moment to stack convolutional cells.');\n    }\n\n    super(args);\n    this.inputSpec = [new InputSpec({\n      ndim: 5\n    })];\n  }\n\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n\n      if (kwargs && kwargs['constants']) {\n        throw new ValueError('ConvRNN2D cell does not support constants');\n      }\n\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState = kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {\n        mask,\n        training,\n        initialState\n      });\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    let outShape = this.computeSingleOutputShape(inputShape);\n\n    if (!this.returnSequences) {\n      outShape = [outShape[0], ...outShape.slice(2)];\n    }\n\n    if (this.returnState) {\n      outShape = [outShape, ...Array(2).fill([inputShape[0], ...outShape.slice(-3)])];\n    }\n\n    return outShape;\n  }\n\n  getInitialState(inputs) {\n    return tfc.tidy(() => {\n      const {\n        stateSize\n      } = this.cell;\n      const inputShape = inputs.shape;\n      const outputShape = this.computeSingleOutputShape(inputShape);\n      const stateShape = [outputShape[0], ...outputShape.slice(2)];\n      const initialState = tfc.zeros(stateShape);\n\n      if (Array.isArray(stateSize)) {\n        return Array(stateSize.length).fill(initialState);\n      }\n\n      return [initialState];\n    });\n  }\n\n  resetStates(states, training = false) {\n    tfc.tidy(() => {\n      if (!this.stateful) {\n        throw new AttributeError('Cannot call resetStates() on an RNN Layer that is not stateful.');\n      }\n\n      const inputShape = this.inputSpec[0].shape;\n      const outputShape = this.computeSingleOutputShape(inputShape);\n      const stateShape = [outputShape[0], ...outputShape.slice(2)];\n      const batchSize = inputShape[0];\n\n      if (batchSize == null) {\n        throw new ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' + 'the batch size of your input tensors: \\n' + '- If using a Sequential model, specify the batch size by ' + 'passing a `batchInputShape` option to your first layer.\\n' + '- If using the functional API, specify the batch size by ' + 'passing a `batchShape` option to your Input layer.');\n      } // Initialize state if null.\n\n\n      if (this.getStates() == null) {\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(() => tfc.zeros(stateShape));\n        } else {\n          this.states_ = [tfc.zeros(stateShape)];\n        }\n      } else if (states == null) {\n        // Dispose old state tensors.\n        tfc.dispose(this.states_); // For stateful RNNs, fully dispose kept old states.\n\n        if (this.keptStates != null) {\n          tfc.dispose(this.keptStates);\n          this.keptStates = [];\n        }\n\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(() => tfc.zeros(stateShape));\n        } else {\n          this.states_[0] = tfc.zeros(stateShape);\n        }\n      } else {\n        if (!Array.isArray(states)) {\n          states = [states];\n        }\n\n        if (states.length !== this.states_.length) {\n          throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), ` + `but it received ${states.length} state value(s). Input ` + `received: ${states}`);\n        }\n\n        if (training) {\n          // Store old state tensors for complete disposal later, i.e., during\n          // the next no-arg call to this method. We do not dispose the old\n          // states immediately because that BPTT (among other things) require\n          // them.\n          this.keptStates.push(this.states_.slice());\n        } else {\n          tfc.dispose(this.states_);\n        }\n\n        for (let index = 0; index < this.states_.length; ++index) {\n          const value = states[index];\n          const expectedShape = stateShape;\n\n          if (!util.arraysEqual(value.shape, expectedShape)) {\n            throw new ValueError(`State ${index} is incompatible with layer ${this.name}: ` + `expected shape=${expectedShape}, received shape=${value.shape}`);\n          }\n\n          this.states_[index] = value;\n        }\n      }\n\n      this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n    });\n  }\n\n  computeSingleOutputShape(inputShape) {\n    const {\n      dataFormat,\n      filters,\n      kernelSize,\n      padding,\n      strides,\n      dilationRate\n    } = this.cell;\n    const isChannelsFirst = dataFormat === 'channelsFirst';\n    const h = inputShape[isChannelsFirst ? 3 : 2];\n    const w = inputShape[isChannelsFirst ? 4 : 3];\n    const hOut = convOutputLength(h, kernelSize[0], padding, strides[0], dilationRate[0]);\n    const wOut = convOutputLength(w, kernelSize[1], padding, strides[1], dilationRate[1]);\n    const outShape = [...inputShape.slice(0, 2), ...(isChannelsFirst ? [filters, hOut, wOut] : [hOut, wOut, filters])];\n    return outShape;\n  }\n\n}\n/** @nocollapse */\n\n\nConvRNN2D.className = 'ConvRNN2D';\nexport class ConvLSTM2DCell extends LSTMCell {\n  constructor(args) {\n    const {\n      filters,\n      kernelSize,\n      strides,\n      padding,\n      dataFormat,\n      dilationRate\n    } = args;\n    super(Object.assign({}, args, {\n      units: filters\n    }));\n    this.filters = filters;\n    assertPositiveInteger(this.filters, 'filters');\n    this.kernelSize = normalizeArray(kernelSize, 2, 'kernelSize');\n    this.kernelSize.forEach(size => assertPositiveInteger(size, 'kernelSize'));\n    this.strides = normalizeArray(strides || 1, 2, 'strides');\n    this.strides.forEach(stride => assertPositiveInteger(stride, 'strides'));\n    this.padding = padding || 'valid';\n    checkPaddingMode(this.padding);\n    this.dataFormat = dataFormat || 'channelsLast';\n    checkDataFormat(this.dataFormat);\n    this.dilationRate = normalizeArray(dilationRate || 1, 2, 'dilationRate');\n    this.dilationRate.forEach(rate => assertPositiveInteger(rate, 'dilationRate'));\n  }\n\n  build(inputShape) {\n    var _a;\n\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(`The channel dimension of the input should be defined. ` + `Found ${inputShape[channelAxis]}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const numOfKernels = 4;\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters * numOfKernels]);\n    this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    const recurrentKernelShape = this.kernelSize.concat([this.filters, this.filters * numOfKernels]);\n    this.recurrentKernel = this.addWeight('recurrent_kernel', recurrentKernelShape, null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n\n    if (this.useBias) {\n      let biasInitializer;\n\n      if (this.unitForgetBias) {\n        const init = this.biasInitializer;\n        const filters = this.filters;\n        biasInitializer = new (_a = class CustomInit extends Initializer {\n          apply(shape, dtype) {\n            const biasI = init.apply([filters]);\n            const biasF = tfc.ones([filters]);\n            const biasCAndO = init.apply([filters * 2]);\n            return K.concatenate([biasI, biasF, biasCAndO]);\n          }\n\n        },\n        /** @nocollapse */\n        _a.className = 'CustomInit', _a)();\n      } else {\n        biasInitializer = this.biasInitializer;\n      }\n\n      this.bias = this.addWeight('bias', [this.filters * numOfKernels], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      if (inputs.length !== 3) {\n        throw new ValueError(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ` + `${inputs.length}.`);\n      }\n\n      const training = kwargs['training'] || false;\n      const x = inputs[0]; // Current input\n\n      const hTMinus1 = inputs[1]; // Previous memory state.\n\n      const cTMinus1 = inputs[2]; // Previous carry state.\n\n      const numOfKernels = 4;\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(x),\n          rate: this.dropout,\n          training,\n          count: numOfKernels\n        });\n      }\n\n      const dropoutMask = this.dropoutMask;\n\n      const applyDropout = (x, mask, index) => {\n        if (!mask || !mask[index]) {\n          return x;\n        }\n\n        return tfc.mul(mask[index], x);\n      };\n\n      let xI = applyDropout(x, dropoutMask, 0);\n      let xF = applyDropout(x, dropoutMask, 1);\n      let xC = applyDropout(x, dropoutMask, 2);\n      let xO = applyDropout(x, dropoutMask, 3);\n\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(hTMinus1),\n          rate: this.recurrentDropout,\n          training,\n          count: numOfKernels\n        });\n      }\n\n      const recDropoutMask = this.recurrentDropoutMask;\n      let hI = applyDropout(hTMinus1, recDropoutMask, 0);\n      let hF = applyDropout(hTMinus1, recDropoutMask, 1);\n      let hC = applyDropout(hTMinus1, recDropoutMask, 2);\n      let hO = applyDropout(hTMinus1, recDropoutMask, 3);\n      const kernelChannelAxis = 3;\n      const [kernelI, kernelF, kernelC, kernelO] = tfc.split(this.kernel.read(), numOfKernels, kernelChannelAxis);\n      const [biasI, biasF, biasC, biasO] = this.useBias ? tfc.split(this.bias.read(), numOfKernels) : [null, null, null, null];\n      xI = this.inputConv(xI, kernelI, biasI, this.padding);\n      xF = this.inputConv(xF, kernelF, biasF, this.padding);\n      xC = this.inputConv(xC, kernelC, biasC, this.padding);\n      xO = this.inputConv(xO, kernelO, biasO, this.padding);\n      const [recKernelI, recKernelF, recKernelC, recKernelO] = tfc.split(this.recurrentKernel.read(), numOfKernels, kernelChannelAxis);\n      hI = this.recurrentConv(hI, recKernelI);\n      hF = this.recurrentConv(hF, recKernelF);\n      hC = this.recurrentConv(hC, recKernelC);\n      hO = this.recurrentConv(hO, recKernelO);\n      const i = this.recurrentActivation.apply(tfc.add(xI, hI));\n      const f = this.recurrentActivation.apply(tfc.add(xF, hF));\n      const c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(tfc.add(xC, hC))));\n      const h = tfc.mul(this.recurrentActivation.apply(tfc.add(xO, hO)), this.activation.apply(c));\n      return [h, h, c];\n    });\n  }\n\n  getConfig() {\n    const _a = super.getConfig(),\n          {\n      'units': _\n    } = _a,\n          baseConfig = __rest(_a, ['units']);\n\n    const config = {\n      filters: this.filters,\n      kernelSize: this.kernelSize,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      strides: this.strides\n    };\n    return Object.assign({}, baseConfig, config);\n  }\n\n  inputConv(x, w, b, padding) {\n    const out = tfc.conv2d(x, w, this.strides, padding || 'valid', this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC', this.dilationRate);\n\n    if (b) {\n      return K.biasAdd(out, b, this.dataFormat);\n    }\n\n    return out;\n  }\n\n  recurrentConv(x, w) {\n    const strides = 1;\n    return tfc.conv2d(x, w, strides, 'same', this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC');\n  }\n\n}\n/** @nocollapse */\n\nConvLSTM2DCell.className = 'ConvLSTM2DCell';\ntfc.serialization.registerClass(ConvLSTM2DCell);\nexport class ConvLSTM2D extends ConvRNN2D {\n  constructor(args) {\n    const cell = new ConvLSTM2DCell(args);\n    super(Object.assign({}, args, {\n      cell\n    }));\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls(config);\n  }\n\n}\n/** @nocollapse */\n\nConvLSTM2D.className = 'ConvLSTM2D';\ntfc.serialization.registerClass(ConvLSTM2D);","map":{"version":3,"sources":["../../src/layers/convolutional_recurrent.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkPaddingMode } from '../common';\nimport { InputSpec } from '../engine/topology';\nimport { AttributeError, NotImplementedError, ValueError } from '../errors';\nimport { Initializer } from '../initializers';\nimport { convOutputLength, normalizeArray } from '../utils/conv_utils';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport { getExactlyOneShape } from '../utils/types_utils';\nimport { generateDropoutMask, LSTMCell, RNN, RNNCell } from './recurrent';\nclass ConvRNN2DCell extends RNNCell {\n}\n/**\n * Base class for convolutional-recurrent layers.\n */\nclass ConvRNN2D extends RNN {\n    constructor(args) {\n        if (args.unroll) {\n            throw new NotImplementedError('Unrolling is not possible with convolutional RNNs.');\n        }\n        if (Array.isArray(args.cell)) {\n            throw new NotImplementedError('It is not possible at the moment to stack convolutional cells.');\n        }\n        super(args);\n        this.inputSpec = [new InputSpec({ ndim: 5 })];\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            if (this.cell.dropoutMask != null) {\n                tfc.dispose(this.cell.dropoutMask);\n                this.cell.dropoutMask = null;\n            }\n            if (this.cell.recurrentDropoutMask != null) {\n                tfc.dispose(this.cell.recurrentDropoutMask);\n                this.cell.recurrentDropoutMask = null;\n            }\n            if (kwargs && kwargs['constants']) {\n                throw new ValueError('ConvRNN2D cell does not support constants');\n            }\n            const mask = kwargs == null ? null : kwargs['mask'];\n            const training = kwargs == null ? null : kwargs['training'];\n            const initialState = kwargs == null ? null : kwargs['initialState'];\n            return super.call(inputs, { mask, training, initialState });\n        });\n    }\n    computeOutputShape(inputShape) {\n        let outShape = this.computeSingleOutputShape(inputShape);\n        if (!this.returnSequences) {\n            outShape = [outShape[0], ...outShape.slice(2)];\n        }\n        if (this.returnState) {\n            outShape =\n                [outShape, ...Array(2).fill([inputShape[0], ...outShape.slice(-3)])];\n        }\n        return outShape;\n    }\n    getInitialState(inputs) {\n        return tfc.tidy(() => {\n            const { stateSize } = this.cell;\n            const inputShape = inputs.shape;\n            const outputShape = this.computeSingleOutputShape(inputShape);\n            const stateShape = [outputShape[0], ...outputShape.slice(2)];\n            const initialState = tfc.zeros(stateShape);\n            if (Array.isArray(stateSize)) {\n                return Array(stateSize.length).fill(initialState);\n            }\n            return [initialState];\n        });\n    }\n    resetStates(states, training = false) {\n        tfc.tidy(() => {\n            if (!this.stateful) {\n                throw new AttributeError('Cannot call resetStates() on an RNN Layer that is not stateful.');\n            }\n            const inputShape = this.inputSpec[0].shape;\n            const outputShape = this.computeSingleOutputShape(inputShape);\n            const stateShape = [outputShape[0], ...outputShape.slice(2)];\n            const batchSize = inputShape[0];\n            if (batchSize == null) {\n                throw new ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' +\n                    'the batch size of your input tensors: \\n' +\n                    '- If using a Sequential model, specify the batch size by ' +\n                    'passing a `batchInputShape` option to your first layer.\\n' +\n                    '- If using the functional API, specify the batch size by ' +\n                    'passing a `batchShape` option to your Input layer.');\n            }\n            // Initialize state if null.\n            if (this.getStates() == null) {\n                if (Array.isArray(this.cell.stateSize)) {\n                    this.states_ = this.cell.stateSize.map(() => tfc.zeros(stateShape));\n                }\n                else {\n                    this.states_ = [tfc.zeros(stateShape)];\n                }\n            }\n            else if (states == null) {\n                // Dispose old state tensors.\n                tfc.dispose(this.states_);\n                // For stateful RNNs, fully dispose kept old states.\n                if (this.keptStates != null) {\n                    tfc.dispose(this.keptStates);\n                    this.keptStates = [];\n                }\n                if (Array.isArray(this.cell.stateSize)) {\n                    this.states_ = this.cell.stateSize.map(() => tfc.zeros(stateShape));\n                }\n                else {\n                    this.states_[0] = tfc.zeros(stateShape);\n                }\n            }\n            else {\n                if (!Array.isArray(states)) {\n                    states = [states];\n                }\n                if (states.length !== this.states_.length) {\n                    throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), ` +\n                        `but it received ${states.length} state value(s). Input ` +\n                        `received: ${states}`);\n                }\n                if (training) {\n                    // Store old state tensors for complete disposal later, i.e., during\n                    // the next no-arg call to this method. We do not dispose the old\n                    // states immediately because that BPTT (among other things) require\n                    // them.\n                    this.keptStates.push(this.states_.slice());\n                }\n                else {\n                    tfc.dispose(this.states_);\n                }\n                for (let index = 0; index < this.states_.length; ++index) {\n                    const value = states[index];\n                    const expectedShape = stateShape;\n                    if (!util.arraysEqual(value.shape, expectedShape)) {\n                        throw new ValueError(`State ${index} is incompatible with layer ${this.name}: ` +\n                            `expected shape=${expectedShape}, received shape=${value.shape}`);\n                    }\n                    this.states_[index] = value;\n                }\n            }\n            this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n        });\n    }\n    computeSingleOutputShape(inputShape) {\n        const { dataFormat, filters, kernelSize, padding, strides, dilationRate } = this.cell;\n        const isChannelsFirst = dataFormat === 'channelsFirst';\n        const h = inputShape[isChannelsFirst ? 3 : 2];\n        const w = inputShape[isChannelsFirst ? 4 : 3];\n        const hOut = convOutputLength(h, kernelSize[0], padding, strides[0], dilationRate[0]);\n        const wOut = convOutputLength(w, kernelSize[1], padding, strides[1], dilationRate[1]);\n        const outShape = [\n            ...inputShape.slice(0, 2),\n            ...(isChannelsFirst ? [filters, hOut, wOut] : [hOut, wOut, filters])\n        ];\n        return outShape;\n    }\n}\n/** @nocollapse */\nConvRNN2D.className = 'ConvRNN2D';\nexport class ConvLSTM2DCell extends LSTMCell {\n    constructor(args) {\n        const { filters, kernelSize, strides, padding, dataFormat, dilationRate, } = args;\n        super(Object.assign({}, args, { units: filters }));\n        this.filters = filters;\n        assertPositiveInteger(this.filters, 'filters');\n        this.kernelSize = normalizeArray(kernelSize, 2, 'kernelSize');\n        this.kernelSize.forEach(size => assertPositiveInteger(size, 'kernelSize'));\n        this.strides = normalizeArray(strides || 1, 2, 'strides');\n        this.strides.forEach(stride => assertPositiveInteger(stride, 'strides'));\n        this.padding = padding || 'valid';\n        checkPaddingMode(this.padding);\n        this.dataFormat = dataFormat || 'channelsLast';\n        checkDataFormat(this.dataFormat);\n        this.dilationRate = normalizeArray(dilationRate || 1, 2, 'dilationRate');\n        this.dilationRate.forEach(rate => assertPositiveInteger(rate, 'dilationRate'));\n    }\n    build(inputShape) {\n        var _a;\n        inputShape = getExactlyOneShape(inputShape);\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new ValueError(`The channel dimension of the input should be defined. ` +\n                `Found ${inputShape[channelAxis]}`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const numOfKernels = 4;\n        const kernelShape = this.kernelSize.concat([inputDim, this.filters * numOfKernels]);\n        this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        const recurrentKernelShape = this.kernelSize.concat([this.filters, this.filters * numOfKernels]);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', recurrentKernelShape, null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        if (this.useBias) {\n            let biasInitializer;\n            if (this.unitForgetBias) {\n                const init = this.biasInitializer;\n                const filters = this.filters;\n                biasInitializer = new (_a = class CustomInit extends Initializer {\n                        apply(shape, dtype) {\n                            const biasI = init.apply([filters]);\n                            const biasF = tfc.ones([filters]);\n                            const biasCAndO = init.apply([filters * 2]);\n                            return K.concatenate([biasI, biasF, biasCAndO]);\n                        }\n                    },\n                    /** @nocollapse */\n                    _a.className = 'CustomInit',\n                    _a)();\n            }\n            else {\n                biasInitializer = this.biasInitializer;\n            }\n            this.bias = this.addWeight('bias', [this.filters * numOfKernels], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            if (inputs.length !== 3) {\n                throw new ValueError(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ` +\n                    `${inputs.length}.`);\n            }\n            const training = kwargs['training'] || false;\n            const x = inputs[0]; // Current input\n            const hTMinus1 = inputs[1]; // Previous memory state.\n            const cTMinus1 = inputs[2]; // Previous carry state.\n            const numOfKernels = 4;\n            if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n                this.dropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(x),\n                    rate: this.dropout,\n                    training,\n                    count: numOfKernels\n                });\n            }\n            const dropoutMask = this.dropoutMask;\n            const applyDropout = (x, mask, index) => {\n                if (!mask || !mask[index]) {\n                    return x;\n                }\n                return tfc.mul(mask[index], x);\n            };\n            let xI = applyDropout(x, dropoutMask, 0);\n            let xF = applyDropout(x, dropoutMask, 1);\n            let xC = applyDropout(x, dropoutMask, 2);\n            let xO = applyDropout(x, dropoutMask, 3);\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n                this.recurrentDropoutMask == null) {\n                this.recurrentDropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(hTMinus1),\n                    rate: this.recurrentDropout,\n                    training,\n                    count: numOfKernels\n                });\n            }\n            const recDropoutMask = this.recurrentDropoutMask;\n            let hI = applyDropout(hTMinus1, recDropoutMask, 0);\n            let hF = applyDropout(hTMinus1, recDropoutMask, 1);\n            let hC = applyDropout(hTMinus1, recDropoutMask, 2);\n            let hO = applyDropout(hTMinus1, recDropoutMask, 3);\n            const kernelChannelAxis = 3;\n            const [kernelI, kernelF, kernelC, kernelO] = tfc.split(this.kernel.read(), numOfKernels, kernelChannelAxis);\n            const [biasI, biasF, biasC, biasO] = this.useBias ?\n                tfc.split(this.bias.read(), numOfKernels) :\n                [null, null, null, null];\n            xI = this.inputConv(xI, kernelI, biasI, this.padding);\n            xF = this.inputConv(xF, kernelF, biasF, this.padding);\n            xC = this.inputConv(xC, kernelC, biasC, this.padding);\n            xO = this.inputConv(xO, kernelO, biasO, this.padding);\n            const [recKernelI, recKernelF, recKernelC, recKernelO] = tfc.split(this.recurrentKernel.read(), numOfKernels, kernelChannelAxis);\n            hI = this.recurrentConv(hI, recKernelI);\n            hF = this.recurrentConv(hF, recKernelF);\n            hC = this.recurrentConv(hC, recKernelC);\n            hO = this.recurrentConv(hO, recKernelO);\n            const i = this.recurrentActivation.apply(tfc.add(xI, hI));\n            const f = this.recurrentActivation.apply(tfc.add(xF, hF));\n            const c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(tfc.add(xC, hC))));\n            const h = tfc.mul(this.recurrentActivation.apply(tfc.add(xO, hO)), this.activation.apply(c));\n            return [h, h, c];\n        });\n    }\n    getConfig() {\n        const _a = super.getConfig(), { 'units': _ } = _a, baseConfig = __rest(_a, ['units']);\n        const config = {\n            filters: this.filters,\n            kernelSize: this.kernelSize,\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n            dilationRate: this.dilationRate,\n            strides: this.strides,\n        };\n        return Object.assign({}, baseConfig, config);\n    }\n    inputConv(x, w, b, padding) {\n        const out = tfc.conv2d(x, w, this.strides, (padding || 'valid'), this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC', this.dilationRate);\n        if (b) {\n            return K.biasAdd(out, b, this.dataFormat);\n        }\n        return out;\n    }\n    recurrentConv(x, w) {\n        const strides = 1;\n        return tfc.conv2d(x, w, strides, 'same', this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC');\n    }\n}\n/** @nocollapse */\nConvLSTM2DCell.className = 'ConvLSTM2DCell';\ntfc.serialization.registerClass(ConvLSTM2DCell);\nexport class ConvLSTM2D extends ConvRNN2D {\n    constructor(args) {\n        const cell = new ConvLSTM2DCell(args);\n        super(Object.assign({}, args, { cell }));\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config);\n    }\n}\n/** @nocollapse */\nConvLSTM2D.className = 'ConvLSTM2D';\ntfc.serialization.registerClass(ConvLSTM2D);\n//# sourceMappingURL=convolutional_recurrent.js.map"]},"metadata":{},"sourceType":"module"}