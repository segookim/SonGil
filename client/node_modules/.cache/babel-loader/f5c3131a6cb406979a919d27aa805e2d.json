{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, RotateWithOffset, util } from '@tensorflow/tfjs-core';\nexport const rotateWithOffsetConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      image\n    } = inputs;\n    const {\n      radians,\n      fillValue,\n      center\n    } = attrs;\n    const cpuBackend = backend;\n    const output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n    const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n            const x = coords[2];\n            const y = coords[1]; // coordX/coordY are the result of rotating and translating x/y.\n\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n            let outputValue = fillValue;\n\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            } // If the coordinate position falls within the image boundaries...\n\n\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 && coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx = batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {\n      dataId,\n      shape: image.shape,\n      dtype: image.dtype\n    };\n  }\n};","map":{"version":3,"sources":["../../src/kernels/RotateWithOffset.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, RotateWithOffset, util } from '@tensorflow/tfjs-core';\nexport const rotateWithOffsetConfig = {\n    kernelName: RotateWithOffset,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { image } = inputs;\n        const { radians, fillValue, center } = attrs;\n        const cpuBackend = backend;\n        const output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n        const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n        const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n        const fullOpacityValue = 255;\n        const sinFactor = Math.sin(radians);\n        const cosFactor = Math.cos(radians);\n        const imageVals = cpuBackend.data.get(image.dataId).values;\n        for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n            const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n            for (let row = 0; row < imageHeight; row++) {\n                const rowOffset = row * (imageWidth * numChannels);\n                for (let col = 0; col < imageWidth; col++) {\n                    const colOffset = col * numChannels;\n                    for (let channel = 0; channel < numChannels; channel++) {\n                        const coords = [batch, row, col, channel];\n                        const x = coords[2];\n                        const y = coords[1];\n                        // coordX/coordY are the result of rotating and translating x/y.\n                        let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n                        let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n                        coordX = Math.round(coordX + centerX);\n                        coordY = Math.round(coordY + centerY);\n                        let outputValue = fillValue;\n                        if (typeof fillValue !== 'number') {\n                            if (channel === 3) {\n                                outputValue = fullOpacityValue;\n                            }\n                            else {\n                                outputValue = fillValue[channel];\n                            }\n                        }\n                        // If the coordinate position falls within the image boundaries...\n                        if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                            coordY < imageHeight) {\n                            // set the output to the image value at the coordinate position.\n                            const rotatedRowOffset = coordY * (imageWidth * numChannels);\n                            const rotatedColOffset = coordX * numChannels;\n                            const imageIdx = batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n                            outputValue = imageVals[imageIdx];\n                        }\n                        const outIdx = batchOffset + rowOffset + colOffset + channel;\n                        output[outIdx] = outputValue;\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(output, image.shape, image.dtype);\n        return { dataId, shape: image.shape, dtype: image.dtype };\n    }\n};\n//# sourceMappingURL=RotateWithOffset.js.map"]},"metadata":{},"sourceType":"module"}