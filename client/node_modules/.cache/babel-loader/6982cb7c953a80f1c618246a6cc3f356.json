{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { HashTable } from '../../executor/hash_table';\nimport { getParamValue } from './utils';\nexport var executeOp = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(node, tensorMap, context, resourceManager) {\n    var keyDType, valueDType, hashTable, handle, keys, values, _hashTable, _handle, _keys, defaultValue, _hashTable2;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = node.op;\n            _context.next = _context.t0 === 'HashTable' ? 3 : _context.t0 === 'HashTableV2' ? 3 : _context.t0 === 'LookupTableImport' ? 8 : _context.t0 === 'LookupTableImportV2' ? 8 : _context.t0 === 'LookupTableFind' ? 16 : _context.t0 === 'LookupTableFindV2' ? 16 : 24;\n            break;\n\n          case 3:\n            keyDType = getParamValue('keyDType', node, tensorMap, context);\n            valueDType = getParamValue('valueDType', node, tensorMap, context);\n            hashTable = new HashTable(keyDType, valueDType);\n            resourceManager.addHashTable(node.name, hashTable);\n            return _context.abrupt(\"return\", [hashTable.handle]);\n\n          case 8:\n            handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            keys = getParamValue('keys', node, tensorMap, context);\n            values = getParamValue('values', node, tensorMap, context);\n            _hashTable = resourceManager.getHashTableById(handle.id);\n            _context.next = 14;\n            return _hashTable.import(keys, values);\n\n          case 14:\n            _context.t1 = _context.sent;\n            return _context.abrupt(\"return\", [_context.t1]);\n\n          case 16:\n            _handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            _keys = getParamValue('keys', node, tensorMap, context);\n            defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n            _hashTable2 = resourceManager.getHashTableById(_handle.id);\n            _context.next = 22;\n            return _hashTable2.find(_keys, defaultValue);\n\n          case 22:\n            _context.t2 = _context.sent;\n            return _context.abrupt(\"return\", [_context.t2]);\n\n          case 24:\n            throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function executeOp(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var CATEGORY = 'hash_table';","map":{"version":3,"sources":["../../../src/operations/executors/hash_table_executor.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAMH,SAAQ,SAAR,QAAwB,2BAAxB;AAIA,SAAQ,aAAR,QAA4B,SAA5B;AAEA,OAAO,IAAM,SAAS;AAAA,sEAA4B,iBAC9C,IAD8C,EAClC,SADkC,EACN,OADM,EAE9C,eAF8C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BAGxC,IAAI,CAAC,EAHmC;AAAA,4CAIzC,WAJyC,uBAKzC,aALyC,uBAezC,mBAfyC,uBAgBzC,qBAhByC,uBA4BzC,iBA5ByC,wBA6BzC,mBA7ByC;AAAA;;AAAA;AAMtC,YAAA,QANsC,GAOxC,aAAa,CAAC,UAAD,EAAa,IAAb,EAAmB,SAAnB,EAA8B,OAA9B,CAP2B;AAQtC,YAAA,UARsC,GASxC,aAAa,CAAC,YAAD,EAAe,IAAf,EAAqB,SAArB,EAAgC,OAAhC,CAT2B;AAWtC,YAAA,SAXsC,GAW1B,IAAI,SAAJ,CAAc,QAAd,EAAwB,UAAxB,CAX0B;AAY5C,YAAA,eAAe,CAAC,YAAhB,CAA6B,IAAI,CAAC,IAAlC,EAAwC,SAAxC;AAZ4C,6CAarC,CAAC,SAAS,CAAC,MAAX,CAbqC;;AAAA;AAiBtC,YAAA,MAjBsC,GAiB7B,aAAa,CACT,aADS,EACM,IADN,EACY,SADZ,EACuB,OADvB,EAET,eAFS,CAjBgB;AAoBtC,YAAA,IApBsC,GAoB/B,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CApBkB;AAqBtC,YAAA,MArBsC,GAsBxC,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CAtB2B;AAwBtC,YAAA,UAxBsC,GAwB1B,eAAe,CAAC,gBAAhB,CAAiC,MAAM,CAAC,EAAxC,CAxB0B;AAAA;AAAA,mBA0B9B,UAAS,CAAC,MAAV,CAAiB,IAAjB,EAAuB,MAAvB,CA1B8B;;AAAA;AAAA;AAAA;;AAAA;AA8BtC,YAAA,OA9BsC,GA8B7B,aAAa,CACT,aADS,EACM,IADN,EACY,SADZ,EACuB,OADvB,EAET,eAFS,CA9BgB;AAiCtC,YAAA,KAjCsC,GAiC/B,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CAjCkB;AAkCtC,YAAA,YAlCsC,GAmCxC,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CAnC2B;AAqCtC,YAAA,WArCsC,GAqC1B,eAAe,CAAC,gBAAhB,CAAiC,OAAM,CAAC,EAAxC,CArC0B;AAAA;AAAA,mBAsC9B,WAAS,CAAC,IAAV,CAAe,KAAf,EAAqB,YAArB,CAtC8B;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAyCtC,SAAS,qBAAc,IAAI,CAAC,EAAnB,yBAzC6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA,kBAAT,SAAS;AAAA;AAAA;AAAA,GAAf;AA6CP,OAAO,IAAM,QAAQ,GAAG,YAAjB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { HashTable } from '../../executor/hash_table';\nimport { getParamValue } from './utils';\nexport const executeOp = async (node, tensorMap, context, resourceManager) => {\n    switch (node.op) {\n        case 'HashTable':\n        case 'HashTableV2': {\n            const keyDType = getParamValue('keyDType', node, tensorMap, context);\n            const valueDType = getParamValue('valueDType', node, tensorMap, context);\n            const hashTable = new HashTable(keyDType, valueDType);\n            resourceManager.addHashTable(node.name, hashTable);\n            return [hashTable.handle];\n        }\n        case 'LookupTableImport':\n        case 'LookupTableImportV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const keys = getParamValue('keys', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [await hashTable.import(keys, values)];\n        }\n        case 'LookupTableFind':\n        case 'LookupTableFindV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const keys = getParamValue('keys', node, tensorMap, context);\n            const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [await hashTable.find(keys, defaultValue)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'hash_table';\n//# sourceMappingURL=hash_table_executor.js.map"]},"metadata":{},"sourceType":"module"}