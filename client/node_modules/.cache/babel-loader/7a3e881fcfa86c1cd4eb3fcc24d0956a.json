{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/** Utility functions related to user-defined metadata. */\n// Maximum recommended serialized size for user-defined metadata.\n// Beyond this limit, a warning message will be printed during model loading and\n// saving.\nexport var MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1 * 1024 * 1024;\n/**\n * Check validity of user-defined metadata.\n *\n * @param userDefinedMetadata\n * @param modelName Name of the model that the user-defined metadata belongs to.\n *   Used during construction of error messages.\n * @param checkSize Whether to check the size of the metadata is under\n *   recommended limit. Default: `false`. If `true`, will try stringify the\n *   JSON object and print a console warning if the serialzied size is above the\n *   limit.\n * @throws Error if `userDefinedMetadata` is not a plain JSON object.\n */\n\nexport function checkUserDefinedMetadata(userDefinedMetadata, modelName) {\n  var checkSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (userDefinedMetadata == null || typeof userDefinedMetadata !== 'object' || Object.getPrototypeOf(userDefinedMetadata) !== Object.prototype || !plainObjectCheck(userDefinedMetadata)) {\n    throw new Error('User-defined metadata is expected to be a JSON object, but is not.');\n  }\n\n  if (checkSize) {\n    var out = JSON.stringify(userDefinedMetadata);\n\n    if (out.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH) {\n      console.warn(\"User-defined metadata of model \\\"\".concat(modelName, \"\\\" is too large in \") + \"size (length=\".concat(out.length, \" when serialized). It is not \") + \"recommended to store such large objects in user-defined metadata. \" + \"Please make sure its serialized length is <= \" + \"\".concat(MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH, \".\"));\n    }\n  }\n}\n/**\n * Check if an input is plain JSON object or any valid subfield of it.\n *\n * @param x The input to be checked.\n * @param assertObject Whether to assert `x` is a JSON object, i.e., reject\n *   cases of arrays and primitives.\n * @return Returns `true` if and only if `x` is a plain JSON object,\n *   a JSON-valid primitive including string, number, boolean and null,\n *   or an array of the said types.\n */\n// tslint:disable-next-line:no-any\n\nexport function plainObjectCheck(x) {\n  if (x === null) {\n    // Note: typeof `null` is 'object', and `null` is valid in JSON.\n    return true;\n  } else if (typeof x === 'object') {\n    if (Object.getPrototypeOf(x) === Object.prototype) {\n      // `x` is a JavaScript object and its prototype is Object.\n      var keys = Object.keys(x);\n\n      for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n        var key = _keys[_i];\n\n        if (typeof key !== 'string') {\n          // JSON keys must be strings.\n          return false;\n        }\n\n        if (!plainObjectCheck(x[key])) {\n          // Recursive call.\n          return false;\n        }\n      }\n\n      return true;\n    } else {\n      // `x` is a JavaScript object but its prototype is not Object.\n      if (Array.isArray(x)) {\n        // `x` is a JavaScript array.\n        var _iterator = _createForOfIteratorHelper(x),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n\n            if (!plainObjectCheck(item)) {\n              // Recursive call.\n              return false;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return true;\n      } else {\n        // `x` is a JavaScript object and its prototype is not Object,\n        // and it's not an Array. I.e., it's a complex object such as\n        // `Error` and `Date`.\n        return false;\n      }\n    }\n  } else {\n    // `x` is not a JavaScript object or `null`.\n    var xType = typeof x;\n    return xType === 'string' || xType === 'number' || xType === 'boolean';\n  }\n}","map":{"version":3,"sources":["../src/user_defined_metadata.ts"],"names":[],"mappings":";;AAAA;;;;;;;;AAQG;;AAEH;AAEA;AACA;AACA;AACA,OAAO,IAAM,2CAA2C,GAAG,IAAI,IAAJ,GAAW,IAA/D;AAEP;;;;;;;;;;;AAWG;;AACH,OAAM,SAAU,wBAAV,CACF,mBADE,EACuB,SADvB,EAC2D;AAAA,MAAjB,SAAiB,uEAAL,KAAK;;AAC/D,MAAI,mBAAmB,IAAI,IAAvB,IACA,OAAO,mBAAP,KAA+B,QAD/B,IAEA,MAAM,CAAC,cAAP,CAAsB,mBAAtB,MAA+C,MAAM,CAAC,SAFtD,IAGA,CAAC,gBAAgB,CAAC,mBAAD,CAHrB,EAG4C;AAC1C,UAAM,IAAI,KAAJ,CACF,oEADE,CAAN;AAED;;AAED,MAAI,SAAJ,EAAe;AACb,QAAM,GAAG,GAAG,IAAI,CAAC,SAAL,CAAe,mBAAf,CAAZ;;AACA,QAAI,GAAG,CAAC,MAAJ,GAAa,2CAAjB,EAA8D;AAC5D,MAAA,OAAO,CAAC,IAAR,CACI,2CAAmC,SAAnC,kDACgB,GAAG,CAAC,MADpB,wKAIG,2CAJH,MADJ;AAMD;AACF;AACF;AAED;;;;;;;;;AASG;AACH;;AACA,OAAM,SAAU,gBAAV,CAA2B,CAA3B,EAAiC;AACrC,MAAI,CAAC,KAAK,IAAV,EAAgB;AACd;AACA,WAAO,IAAP;AACD,GAHD,MAGO,IAAI,OAAO,CAAP,KAAa,QAAjB,EAA2B;AAChC,QAAI,MAAM,CAAC,cAAP,CAAsB,CAAtB,MAA6B,MAAM,CAAC,SAAxC,EAAmD;AACjD;AACA,UAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,CAAZ,CAAb;;AACA,+BAAkB,IAAlB,2BAAwB;AAAnB,YAAM,GAAG,YAAT;;AACH,YAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC3B;AACA,iBAAO,KAAP;AACD;;AACD,YAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAD,CAAF,CAArB,EAA+B;AAAG;AAChC,iBAAO,KAAP;AACD;AACF;;AACD,aAAO,IAAP;AACD,KAbD,MAaO;AACL;AACA,UAAI,KAAK,CAAC,OAAN,CAAc,CAAd,CAAJ,EAAsB;AACpB;AADoB,mDAED,CAFC;AAAA;;AAAA;AAEpB,8DAAsB;AAAA,gBAAX,IAAW;;AACpB,gBAAI,CAAC,gBAAgB,CAAC,IAAD,CAArB,EAA6B;AAAG;AAC9B,qBAAO,KAAP;AACD;AACF;AANmB;AAAA;AAAA;AAAA;AAAA;;AAOpB,eAAO,IAAP;AACD,OARD,MAQO;AACL;AACA;AACA;AACA,eAAO,KAAP;AACD;AACF;AACF,GA/BM,MA+BA;AACL;AACA,QAAM,KAAK,GAAG,OAAO,CAArB;AACA,WAAO,KAAK,KAAK,QAAV,IAAsB,KAAK,KAAK,QAAhC,IAA4C,KAAK,KAAK,SAA7D;AACD;AACF","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/** Utility functions related to user-defined metadata. */\n// Maximum recommended serialized size for user-defined metadata.\n// Beyond this limit, a warning message will be printed during model loading and\n// saving.\nexport const MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1 * 1024 * 1024;\n/**\n * Check validity of user-defined metadata.\n *\n * @param userDefinedMetadata\n * @param modelName Name of the model that the user-defined metadata belongs to.\n *   Used during construction of error messages.\n * @param checkSize Whether to check the size of the metadata is under\n *   recommended limit. Default: `false`. If `true`, will try stringify the\n *   JSON object and print a console warning if the serialzied size is above the\n *   limit.\n * @throws Error if `userDefinedMetadata` is not a plain JSON object.\n */\nexport function checkUserDefinedMetadata(userDefinedMetadata, modelName, checkSize = false) {\n    if (userDefinedMetadata == null ||\n        typeof userDefinedMetadata !== 'object' ||\n        Object.getPrototypeOf(userDefinedMetadata) !== Object.prototype ||\n        !plainObjectCheck(userDefinedMetadata)) {\n        throw new Error('User-defined metadata is expected to be a JSON object, but is not.');\n    }\n    if (checkSize) {\n        const out = JSON.stringify(userDefinedMetadata);\n        if (out.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH) {\n            console.warn(`User-defined metadata of model \"${modelName}\" is too large in ` +\n                `size (length=${out.length} when serialized). It is not ` +\n                `recommended to store such large objects in user-defined metadata. ` +\n                `Please make sure its serialized length is <= ` +\n                `${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`);\n        }\n    }\n}\n/**\n * Check if an input is plain JSON object or any valid subfield of it.\n *\n * @param x The input to be checked.\n * @param assertObject Whether to assert `x` is a JSON object, i.e., reject\n *   cases of arrays and primitives.\n * @return Returns `true` if and only if `x` is a plain JSON object,\n *   a JSON-valid primitive including string, number, boolean and null,\n *   or an array of the said types.\n */\n// tslint:disable-next-line:no-any\nexport function plainObjectCheck(x) {\n    if (x === null) {\n        // Note: typeof `null` is 'object', and `null` is valid in JSON.\n        return true;\n    }\n    else if (typeof x === 'object') {\n        if (Object.getPrototypeOf(x) === Object.prototype) {\n            // `x` is a JavaScript object and its prototype is Object.\n            const keys = Object.keys(x);\n            for (const key of keys) {\n                if (typeof key !== 'string') {\n                    // JSON keys must be strings.\n                    return false;\n                }\n                if (!plainObjectCheck(x[key])) { // Recursive call.\n                    return false;\n                }\n            }\n            return true;\n        }\n        else {\n            // `x` is a JavaScript object but its prototype is not Object.\n            if (Array.isArray(x)) {\n                // `x` is a JavaScript array.\n                for (const item of x) {\n                    if (!plainObjectCheck(item)) { // Recursive call.\n                        return false;\n                    }\n                }\n                return true;\n            }\n            else {\n                // `x` is a JavaScript object and its prototype is not Object,\n                // and it's not an Array. I.e., it's a complex object such as\n                // `Error` and `Date`.\n                return false;\n            }\n        }\n    }\n    else {\n        // `x` is not a JavaScript object or `null`.\n        const xType = typeof x;\n        return xType === 'string' || xType === 'number' || xType === 'boolean';\n    }\n}\n//# sourceMappingURL=user_defined_metadata.js.map"]},"metadata":{},"sourceType":"module"}