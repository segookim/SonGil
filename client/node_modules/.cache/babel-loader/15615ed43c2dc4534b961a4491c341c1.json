{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IFFT, util } from '@tensorflow/tfjs-core';\nimport { fftBatch } from '../utils/fft_utils';\nimport { reshape } from './Reshape';\nexport function ifft(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    input\n  } = inputs;\n  const inputSize = util.sizeFromShape(input.shape); // Collapse all outer dimensions to a single batch dimension.\n\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n  const input2D = reshape({\n    inputs: {\n      x: input\n    },\n    backend,\n    attrs: {\n      shape: [batch, innerDimensionSize]\n    }\n  });\n  const result = fftBatch(input2D, true, backend);\n  const resultReshaped = reshape({\n    inputs: {\n      x: result\n    },\n    backend,\n    attrs: {\n      shape: input.shape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n  return resultReshaped;\n}\nexport const ifftConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft\n};","map":{"version":3,"sources":["../../src/kernels/IFFT.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,IAAR,EAAgE,IAAhE,QAA2E,uBAA3E;AAGA,SAAQ,QAAR,QAAuB,oBAAvB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAU,IAAV,CAAe,IAAf,EAAkE;AAEtE,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA;AAAT,MAAoB,IAA1B;AACA,QAAM;AAAC,IAAA;AAAD,MAAU,MAAhB;AAEA,QAAM,SAAS,GAAG,IAAI,CAAC,aAAL,CAAmB,KAAK,CAAC,KAAzB,CAAlB,CALsE,CAOtE;;AACA,QAAM,kBAAkB,GAAG,KAAK,CAAC,KAAN,CAAY,KAAK,CAAC,KAAN,CAAY,MAAZ,GAAqB,CAAjC,CAA3B;AACA,QAAM,KAAK,GAAG,SAAS,GAAG,kBAA1B;AAEA,QAAM,OAAO,GAAG,OAAO,CAAC;AACtB,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KADc;AAEtB,IAAA,OAFsB;AAGtB,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,kBAAR;AAAR;AAHe,GAAD,CAAvB;AAMA,QAAM,MAAM,GAAG,QAAQ,CAAC,OAAD,EAAU,IAAV,EAAgB,OAAhB,CAAvB;AAEA,QAAM,cAAc,GAChB,OAAO,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAsB,IAAA,OAAtB;AAA+B,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE,KAAK,CAAC;AAAd;AAAtC,GAAD,CADX;AAGA,EAAA,OAAO,CAAC,6BAAR,CAAsC,OAAtC;AACA,EAAA,OAAO,CAAC,6BAAR,CAAsC,MAAtC;AAEA,SAAO,cAAP;AACD;AAED,OAAO,MAAM,UAAU,GAAiB;AACtC,EAAA,UAAU,EAAE,IAD0B;AAEtC,EAAA,WAAW,EAAE,KAFyB;AAGtC,EAAA,UAAU,EAAE;AAH0B,CAAjC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IFFT, util } from '@tensorflow/tfjs-core';\nimport { fftBatch } from '../utils/fft_utils';\nimport { reshape } from './Reshape';\nexport function ifft(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const inputSize = util.sizeFromShape(input.shape);\n    // Collapse all outer dimensions to a single batch dimension.\n    const innerDimensionSize = input.shape[input.shape.length - 1];\n    const batch = inputSize / innerDimensionSize;\n    const input2D = reshape({\n        inputs: { x: input },\n        backend,\n        attrs: { shape: [batch, innerDimensionSize] }\n    });\n    const result = fftBatch(input2D, true, backend);\n    const resultReshaped = reshape({ inputs: { x: result }, backend, attrs: { shape: input.shape } });\n    backend.disposeIntermediateTensorInfo(input2D);\n    backend.disposeIntermediateTensorInfo(result);\n    return resultReshaped;\n}\nexport const ifftConfig = {\n    kernelName: IFFT,\n    backendName: 'cpu',\n    kernelFunc: ifft\n};\n//# sourceMappingURL=IFFT.js.map"]},"metadata":{},"sourceType":"module"}