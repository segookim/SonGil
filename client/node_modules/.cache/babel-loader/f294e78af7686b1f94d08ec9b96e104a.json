{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n/**\n * Returns true if the axis specifies the inner most dimensions of the\n * array.\n */\n\nexport function axesAreInnerMostDims(axes, rank) {\n  for (var i = 0; i < axes.length; ++i) {\n    if (axes[axes.length - i - 1] !== rank - 1 - i) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function combineLocations(outputLoc, reduceLoc, axes) {\n  var rank = outputLoc.length + reduceLoc.length;\n  var loc = [];\n  var outIdx = 0;\n  var reduceIdx = 0;\n\n  for (var dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      loc.push(outputLoc[outIdx++]);\n    } else {\n      loc.push(reduceLoc[reduceIdx++]);\n    }\n  }\n\n  return loc;\n}\nexport function computeOutAndReduceShapes(aShape, axes) {\n  var outShape = [];\n  var rank = aShape.length;\n\n  for (var dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      outShape.push(aShape[dim]);\n    }\n  }\n\n  var reduceShape = axes.map(function (dim) {\n    return aShape[dim];\n  });\n  return [outShape, reduceShape];\n}\nexport function expandShapeToKeepDim(shape, axes) {\n  var reduceSubShape = axes.map(function (x) {\n    return 1;\n  });\n  return combineLocations(shape, reduceSubShape, axes);\n}\nexport function assertAxesAreInnerMostDims(msg, axes, rank) {\n  util.assert(axesAreInnerMostDims(axes, rank), function () {\n    return \"\".concat(msg, \" supports only inner-most axes for now. \") + \"Got axes \".concat(axes, \" and rank-\").concat(rank, \" input.\");\n  });\n}\n/**\n * Returns the axes permutation to be used with `tf.transpose`, if such\n * permutation is necessary. Otherwise it returns null. This method is used by\n * operations that operate only on inner-most axes.\n */\n\nexport function getAxesPermutation(axes, rank) {\n  if (axesAreInnerMostDims(axes, rank)) {\n    return null;\n  }\n\n  var result = [];\n\n  for (var i = 0; i < rank; ++i) {\n    if (axes.indexOf(i) === -1) {\n      result.push(i);\n    }\n  }\n\n  axes.forEach(function (axis) {\n    return result.push(axis);\n  });\n  return result;\n}\n/** Returns the axes permutation that undoes the original permutation. */\n\nexport function getUndoAxesPermutation(axes) {\n  return axes.map(function (axis, i) {\n    return [i, axis];\n  }).sort(function (a, b) {\n    return a[1] - b[1];\n  }).map(function (x) {\n    return x[0];\n  });\n}\nexport function getInnerMostAxes(numAxes, rank) {\n  var res = [];\n\n  for (var i = rank - numAxes; i < rank; ++i) {\n    res.push(i);\n  }\n\n  return res;\n}","map":{"version":3,"sources":["../../src/ops/axis_util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n/**\n * Returns true if the axis specifies the inner most dimensions of the\n * array.\n */\nexport function axesAreInnerMostDims(axes, rank) {\n    for (let i = 0; i < axes.length; ++i) {\n        if (axes[axes.length - i - 1] !== rank - 1 - i) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function combineLocations(outputLoc, reduceLoc, axes) {\n    const rank = outputLoc.length + reduceLoc.length;\n    const loc = [];\n    let outIdx = 0;\n    let reduceIdx = 0;\n    for (let dim = 0; dim < rank; dim++) {\n        if (axes.indexOf(dim) === -1) {\n            loc.push(outputLoc[outIdx++]);\n        }\n        else {\n            loc.push(reduceLoc[reduceIdx++]);\n        }\n    }\n    return loc;\n}\nexport function computeOutAndReduceShapes(aShape, axes) {\n    const outShape = [];\n    const rank = aShape.length;\n    for (let dim = 0; dim < rank; dim++) {\n        if (axes.indexOf(dim) === -1) {\n            outShape.push(aShape[dim]);\n        }\n    }\n    const reduceShape = axes.map(dim => aShape[dim]);\n    return [outShape, reduceShape];\n}\nexport function expandShapeToKeepDim(shape, axes) {\n    const reduceSubShape = axes.map(x => 1);\n    return combineLocations(shape, reduceSubShape, axes);\n}\nexport function assertAxesAreInnerMostDims(msg, axes, rank) {\n    util.assert(axesAreInnerMostDims(axes, rank), () => `${msg} supports only inner-most axes for now. ` +\n        `Got axes ${axes} and rank-${rank} input.`);\n}\n/**\n * Returns the axes permutation to be used with `tf.transpose`, if such\n * permutation is necessary. Otherwise it returns null. This method is used by\n * operations that operate only on inner-most axes.\n */\nexport function getAxesPermutation(axes, rank) {\n    if (axesAreInnerMostDims(axes, rank)) {\n        return null;\n    }\n    const result = [];\n    for (let i = 0; i < rank; ++i) {\n        if (axes.indexOf(i) === -1) {\n            result.push(i);\n        }\n    }\n    axes.forEach(axis => result.push(axis));\n    return result;\n}\n/** Returns the axes permutation that undoes the original permutation. */\nexport function getUndoAxesPermutation(axes) {\n    return axes.map((axis, i) => [i, axis])\n        .sort((a, b) => a[1] - b[1])\n        .map(x => x[0]);\n}\nexport function getInnerMostAxes(numAxes, rank) {\n    const res = [];\n    for (let i = rank - numAxes; i < rank; ++i) {\n        res.push(i);\n    }\n    return res;\n}\n//# sourceMappingURL=axis_util.js.map"]},"metadata":{},"sourceType":"module"}