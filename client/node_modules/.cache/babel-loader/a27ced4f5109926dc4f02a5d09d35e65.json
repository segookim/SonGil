{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Built-in metrics.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { tidy } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { NotImplementedError, ValueError } from './errors';\nimport { categoricalCrossentropy as categoricalCrossentropyLoss, cosineProximity, meanAbsoluteError, meanAbsolutePercentageError, meanSquaredError, sparseCategoricalCrossentropy as sparseCategoricalCrossentropyLoss } from './losses';\nimport { binaryCrossentropy as lossBinaryCrossentropy } from './losses';\nimport { lossesMap } from './losses';\nimport * as util from './utils/generic_utils';\nexport function binaryAccuracy(yTrue, yPred) {\n  return tidy(() => {\n    const threshold = tfc.mul(.5, tfc.onesLike(yPred));\n    const yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);\n    return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);\n  });\n}\nexport function categoricalAccuracy(yTrue, yPred) {\n  return tidy(() => K.cast(tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32'));\n}\n\nfunction truePositives(yTrue, yPred) {\n  return tidy(() => {\n    return tfc.logicalAnd(yTrue.equal(1), yPred.equal(1)).sum().cast('float32');\n  });\n}\n\nfunction falseNegatives(yTrue, yPred) {\n  return tidy(() => {\n    return tfc.logicalAnd(yTrue.equal(1), yPred.equal(0)).sum().cast('float32');\n  });\n}\n\nfunction falsePositives(yTrue, yPred) {\n  return tidy(() => {\n    return tfc.logicalAnd(yTrue.equal(0), yPred.equal(1)).sum().cast('float32');\n  });\n}\n\nexport function precision(yTrue, yPred) {\n  return tidy(() => {\n    const tp = truePositives(yTrue, yPred);\n    const fp = falsePositives(yTrue, yPred);\n    const denominator = tp.add(fp);\n    return tfc.where(tfc.greater(denominator, 0), tp.div(denominator), 0).cast('float32');\n  });\n}\nexport function recall(yTrue, yPred) {\n  return tidy(() => {\n    const tp = truePositives(yTrue, yPred);\n    const fn = falseNegatives(yTrue, yPred);\n    const denominator = tp.add(fn);\n    return tfc.where(tfc.greater(denominator, 0), tp.div(denominator), 0).cast('float32');\n  });\n}\nexport function binaryCrossentropy(yTrue, yPred) {\n  return lossBinaryCrossentropy(yTrue, yPred);\n}\nexport function sparseCategoricalAccuracy(yTrue, yPred) {\n  if (yTrue.rank === yPred.rank) {\n    yTrue = yTrue.squeeze([yTrue.rank - 1]);\n  }\n\n  yPred = yPred.argMax(-1);\n\n  if (yPred.dtype !== yTrue.dtype) {\n    yPred = yPred.asType(yTrue.dtype);\n  }\n\n  return tfc.equal(yTrue, yPred).asType('float32');\n}\nexport function topKCategoricalAccuracy(yTrue, yPred) {\n  throw new NotImplementedError();\n}\nexport function sparseTopKCategoricalAccuracy(yTrue, yPred) {\n  throw new NotImplementedError();\n} // Aliases.\n\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const categoricalCrossentropy = categoricalCrossentropyLoss;\nexport const cosine = cosineProximity;\nexport const sparseCategoricalCrossentropy = sparseCategoricalCrossentropyLoss; // TODO(cais, nielsene): Add serialize().\n\nexport const metricsMap = {\n  binaryAccuracy,\n  categoricalAccuracy,\n  precision,\n  categoricalCrossentropy,\n  sparseCategoricalCrossentropy,\n  mse,\n  MSE,\n  mae,\n  MAE,\n  mape,\n  MAPE,\n  cosine\n};\nexport function get(identifier) {\n  if (typeof identifier === 'string' && identifier in metricsMap) {\n    return metricsMap[identifier];\n  } else if (typeof identifier !== 'string' && identifier != null) {\n    return identifier;\n  } else {\n    throw new ValueError(`Unknown metric ${identifier}`);\n  }\n}\n/**\n * Get the shortcut function name.\n *\n * If the fn name is a string,\n *   directly return the string name.\n * If the function is included in metricsMap or lossesMap,\n *   return key of the map.\n *   - If the function relative to multiple keys,\n *     return the first found key as the function name.\n *   - If the function exists in both lossesMap and metricsMap,\n *     search lossesMap first.\n * If the function is not included in metricsMap or lossesMap,\n *   return the function name.\n *\n * @param fn loss function, metric function, or short cut name.\n * @returns Loss or Metric name in string.\n */\n\nexport function getLossOrMetricName(fn) {\n  util.assert(fn !== null, `Unknown LossOrMetricFn ${fn}`);\n\n  if (typeof fn === 'string') {\n    return fn;\n  } else {\n    let fnName;\n\n    for (const key of Object.keys(lossesMap)) {\n      if (lossesMap[key] === fn) {\n        fnName = key;\n        break;\n      }\n    }\n\n    if (fnName !== undefined) {\n      return fnName;\n    }\n\n    for (const key of Object.keys(metricsMap)) {\n      if (metricsMap[key] === fn) {\n        fnName = key;\n        break;\n      }\n    }\n\n    if (fnName !== undefined) {\n      return fnName;\n    }\n\n    return fn.name;\n  }\n}","map":{"version":3,"sources":["../src/metrics.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Built-in metrics.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { tidy } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { NotImplementedError, ValueError } from './errors';\nimport { categoricalCrossentropy as categoricalCrossentropyLoss, cosineProximity, meanAbsoluteError, meanAbsolutePercentageError, meanSquaredError, sparseCategoricalCrossentropy as sparseCategoricalCrossentropyLoss } from './losses';\nimport { binaryCrossentropy as lossBinaryCrossentropy } from './losses';\nimport { lossesMap } from './losses';\nimport * as util from './utils/generic_utils';\nexport function binaryAccuracy(yTrue, yPred) {\n    return tidy(() => {\n        const threshold = tfc.mul(.5, tfc.onesLike(yPred));\n        const yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);\n        return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);\n    });\n}\nexport function categoricalAccuracy(yTrue, yPred) {\n    return tidy(() => K.cast(tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32'));\n}\nfunction truePositives(yTrue, yPred) {\n    return tidy(() => {\n        return tfc.logicalAnd(yTrue.equal(1), yPred.equal(1)).sum().cast('float32');\n    });\n}\nfunction falseNegatives(yTrue, yPred) {\n    return tidy(() => {\n        return tfc.logicalAnd(yTrue.equal(1), yPred.equal(0)).sum().cast('float32');\n    });\n}\nfunction falsePositives(yTrue, yPred) {\n    return tidy(() => {\n        return tfc.logicalAnd(yTrue.equal(0), yPred.equal(1)).sum().cast('float32');\n    });\n}\nexport function precision(yTrue, yPred) {\n    return tidy(() => {\n        const tp = truePositives(yTrue, yPred);\n        const fp = falsePositives(yTrue, yPred);\n        const denominator = tp.add(fp);\n        return tfc.where(tfc.greater(denominator, 0), tp.div(denominator), 0)\n            .cast('float32');\n    });\n}\nexport function recall(yTrue, yPred) {\n    return tidy(() => {\n        const tp = truePositives(yTrue, yPred);\n        const fn = falseNegatives(yTrue, yPred);\n        const denominator = tp.add(fn);\n        return tfc.where(tfc.greater(denominator, 0), tp.div(denominator), 0)\n            .cast('float32');\n    });\n}\nexport function binaryCrossentropy(yTrue, yPred) {\n    return lossBinaryCrossentropy(yTrue, yPred);\n}\nexport function sparseCategoricalAccuracy(yTrue, yPred) {\n    if (yTrue.rank === yPred.rank) {\n        yTrue = yTrue.squeeze([yTrue.rank - 1]);\n    }\n    yPred = yPred.argMax(-1);\n    if (yPred.dtype !== yTrue.dtype) {\n        yPred = yPred.asType(yTrue.dtype);\n    }\n    return tfc.equal(yTrue, yPred).asType('float32');\n}\nexport function topKCategoricalAccuracy(yTrue, yPred) {\n    throw new NotImplementedError();\n}\nexport function sparseTopKCategoricalAccuracy(yTrue, yPred) {\n    throw new NotImplementedError();\n}\n// Aliases.\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const categoricalCrossentropy = categoricalCrossentropyLoss;\nexport const cosine = cosineProximity;\nexport const sparseCategoricalCrossentropy = sparseCategoricalCrossentropyLoss;\n// TODO(cais, nielsene): Add serialize().\nexport const metricsMap = {\n    binaryAccuracy,\n    categoricalAccuracy,\n    precision,\n    categoricalCrossentropy,\n    sparseCategoricalCrossentropy,\n    mse,\n    MSE,\n    mae,\n    MAE,\n    mape,\n    MAPE,\n    cosine\n};\nexport function get(identifier) {\n    if (typeof identifier === 'string' && identifier in metricsMap) {\n        return metricsMap[identifier];\n    }\n    else if (typeof identifier !== 'string' && identifier != null) {\n        return identifier;\n    }\n    else {\n        throw new ValueError(`Unknown metric ${identifier}`);\n    }\n}\n/**\n * Get the shortcut function name.\n *\n * If the fn name is a string,\n *   directly return the string name.\n * If the function is included in metricsMap or lossesMap,\n *   return key of the map.\n *   - If the function relative to multiple keys,\n *     return the first found key as the function name.\n *   - If the function exists in both lossesMap and metricsMap,\n *     search lossesMap first.\n * If the function is not included in metricsMap or lossesMap,\n *   return the function name.\n *\n * @param fn loss function, metric function, or short cut name.\n * @returns Loss or Metric name in string.\n */\nexport function getLossOrMetricName(fn) {\n    util.assert(fn !== null, `Unknown LossOrMetricFn ${fn}`);\n    if (typeof fn === 'string') {\n        return fn;\n    }\n    else {\n        let fnName;\n        for (const key of Object.keys(lossesMap)) {\n            if (lossesMap[key] === fn) {\n                fnName = key;\n                break;\n            }\n        }\n        if (fnName !== undefined) {\n            return fnName;\n        }\n        for (const key of Object.keys(metricsMap)) {\n            if (metricsMap[key] === fn) {\n                fnName = key;\n                break;\n            }\n        }\n        if (fnName !== undefined) {\n            return fnName;\n        }\n        return fn.name;\n    }\n}\n//# sourceMappingURL=metrics.js.map"]},"metadata":{},"sourceType":"module"}