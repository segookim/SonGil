{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nexport var StringIterator = /*#__PURE__*/function (_LazyIterator) {\n  _inherits(StringIterator, _LazyIterator);\n\n  var _super = _createSuper(StringIterator);\n\n  function StringIterator() {\n    _classCallCheck(this, StringIterator);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(StringIterator, [{\n    key: \"split\",\n    value:\n    /**\n     * Splits a string stream on a given separator.\n     *\n     * It is assumed that the incoming chunk boundaries have no semantic meaning,\n     * so conceptually the incoming stream is treated simply as the concatenation\n     * of its elements.\n     *\n     * The outgoing stream provides chunks corresponding to the results of the\n     * standard string split() operation (even if such a chunk spanned incoming\n     * chunks).  The separators are not included.\n     *\n     * A typical usage is to split a text file (represented as a stream with\n     * arbitrary chunk boundaries) into lines.\n     *\n     * @param upstream A readable stream of strings that can be treated as\n     *   concatenated.\n     * @param separator A character to split on.\n     */\n    function split(separator) {\n      return new SplitIterator(this, separator);\n    }\n  }]);\n\n  return StringIterator;\n}(LazyIterator); // ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\n\nvar SplitIterator = /*#__PURE__*/function (_StringIterator) {\n  _inherits(SplitIterator, _StringIterator);\n\n  var _super2 = _createSuper(SplitIterator);\n\n  function SplitIterator(upstream, separator) {\n    var _this;\n\n    _classCallCheck(this, SplitIterator);\n\n    _this = _super2.call(this);\n    _this.upstream = upstream;\n    _this.impl = new SplitIteratorImpl(upstream, separator);\n    return _this;\n  }\n\n  _createClass(SplitIterator, [{\n    key: \"summary\",\n    value: function summary() {\n      return this.impl.summary();\n    }\n  }, {\n    key: \"next\",\n    value: function () {\n      var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.impl.next());\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function next() {\n        return _next.apply(this, arguments);\n      }\n\n      return next;\n    }()\n  }]);\n\n  return SplitIterator;\n}(StringIterator);\n\nvar SplitIteratorImpl = /*#__PURE__*/function (_OneToManyIterator) {\n  _inherits(SplitIteratorImpl, _OneToManyIterator);\n\n  var _super3 = _createSuper(SplitIteratorImpl);\n\n  function SplitIteratorImpl(upstream, separator) {\n    var _this2;\n\n    _classCallCheck(this, SplitIteratorImpl);\n\n    _this2 = _super3.call(this);\n    _this2.upstream = upstream;\n    _this2.separator = separator; // A partial string at the end of an upstream chunk\n\n    _this2.carryover = '';\n    return _this2;\n  }\n\n  _createClass(SplitIteratorImpl, [{\n    key: \"summary\",\n    value: function summary() {\n      return \"\".concat(this.upstream.summary(), \" -> Split('\").concat(this.separator, \"')\");\n    }\n  }, {\n    key: \"pump\",\n    value: function () {\n      var _pump = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var chunkResult, lines, _iterator, _step, line;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.upstream.next();\n\n              case 2:\n                chunkResult = _context2.sent;\n\n                if (!chunkResult.done) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                if (!(this.carryover === '')) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 6:\n                // Pretend that the pump succeeded in order to emit the small last batch.\n                // The next pump() call will actually fail.\n                this.outputQueue.push(this.carryover);\n                this.carryover = '';\n                return _context2.abrupt(\"return\", true);\n\n              case 9:\n                lines = chunkResult.value.split(this.separator); // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n                // Thus the carryover may be '' if the separator falls on a chunk\n                // boundary; this produces the correct result.\n\n                lines[0] = this.carryover + lines[0];\n                _iterator = _createForOfIteratorHelper(lines.slice(0, -1));\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    line = _step.value;\n                    this.outputQueue.push(line);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                this.carryover = lines[lines.length - 1];\n                return _context2.abrupt(\"return\", true);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function pump() {\n        return _pump.apply(this, arguments);\n      }\n\n      return pump;\n    }()\n  }]);\n\n  return SplitIteratorImpl;\n}(OneToManyIterator);","map":{"version":3,"sources":["../../src/iterators/string_iterator.ts"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,YAAR,EAAsB,iBAAtB,QAA8C,iBAA9C;AAEA,WAAsB,cAAtB;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;;;AAiBG;AACH,mBAAM,SAAN,EAAuB;AACrB,aAAO,IAAI,aAAJ,CAAkB,IAAlB,EAAwB,SAAxB,CAAP;AACD;AArBH;;AAAA;AAAA,EAA6C,YAA7C,E,CAwBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;IAEM,a;;;;;AAGJ,yBAAsB,QAAtB,EAAsD,SAAtD,EAAuE;AAAA;;AAAA;;AACrE;AADoB,UAAA,QAAA,GAAA,QAAA;AAEpB,UAAK,IAAL,GAAY,IAAI,iBAAJ,CAAsB,QAAtB,EAAgC,SAAhC,CAAZ;AAFqE;AAGtE;;;;WAED,mBAAO;AACL,aAAO,KAAK,IAAL,CAAU,OAAV,EAAP;AACD;;;;2EAED;AAAA;AAAA;AAAA;AAAA;AAAA,iDACS,KAAK,IAAL,CAAU,IAAV,EADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;EAZ0B,c;;IAiBtB,iB;;;;;AAIJ,6BACc,QADd,EACwD,SADxD,EACyE;AAAA;;AAAA;;AACvE;AADY,WAAA,QAAA,GAAA,QAAA;AAA0C,WAAA,SAAA,GAAA,SAAA,CAAiB,CAJzE;;AACA,WAAA,SAAA,GAAY,EAAZ;AAGyE;AAExE;;;;WAED,mBAAO;AACL,uBAAU,KAAK,QAAL,CAAc,OAAd,EAAV,wBAA+C,KAAK,SAApD;AACD;;;;2EAED;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC4B,KAAK,QAAL,CAAc,IAAd,EAD5B;;AAAA;AACQ,gBAAA,WADR;;AAAA,qBAEM,WAAW,CAAC,IAFlB;AAAA;AAAA;AAAA;;AAAA,sBAGQ,KAAK,SAAL,KAAmB,EAH3B;AAAA;AAAA;AAAA;;AAAA,kDAIa,KAJb;;AAAA;AAOI;AACA;AACA,qBAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAK,SAA3B;AACA,qBAAK,SAAL,GAAiB,EAAjB;AAVJ,kDAWW,IAXX;;AAAA;AAaQ,gBAAA,KAbR,GAagB,WAAW,CAAC,KAAZ,CAAkB,KAAlB,CAAwB,KAAK,SAA7B,CAbhB,EAcE;AACA;AACA;;AAEA,gBAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAK,SAAL,GAAiB,KAAK,CAAC,CAAD,CAAjC;AAlBF,uDAmBqB,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAnBrB;;AAAA;AAmBE,sEAAuC;AAA5B,oBAAA,IAA4B;AACrC,yBAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB;AACD;AArBH;AAAA;AAAA;AAAA;AAAA;;AAsBE,qBAAK,SAAL,GAAiB,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAtB;AAtBF,kDAwBS,IAxBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;EAb8B,iB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nexport class StringIterator extends LazyIterator {\n    /**\n     * Splits a string stream on a given separator.\n     *\n     * It is assumed that the incoming chunk boundaries have no semantic meaning,\n     * so conceptually the incoming stream is treated simply as the concatenation\n     * of its elements.\n     *\n     * The outgoing stream provides chunks corresponding to the results of the\n     * standard string split() operation (even if such a chunk spanned incoming\n     * chunks).  The separators are not included.\n     *\n     * A typical usage is to split a text file (represented as a stream with\n     * arbitrary chunk boundaries) into lines.\n     *\n     * @param upstream A readable stream of strings that can be treated as\n     *   concatenated.\n     * @param separator A character to split on.\n     */\n    split(separator) {\n        return new SplitIterator(this, separator);\n    }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nclass SplitIterator extends StringIterator {\n    constructor(upstream, separator) {\n        super();\n        this.upstream = upstream;\n        this.impl = new SplitIteratorImpl(upstream, separator);\n    }\n    summary() {\n        return this.impl.summary();\n    }\n    async next() {\n        return this.impl.next();\n    }\n}\nclass SplitIteratorImpl extends OneToManyIterator {\n    constructor(upstream, separator) {\n        super();\n        this.upstream = upstream;\n        this.separator = separator;\n        // A partial string at the end of an upstream chunk\n        this.carryover = '';\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Split('${this.separator}')`;\n    }\n    async pump() {\n        const chunkResult = await this.upstream.next();\n        if (chunkResult.done) {\n            if (this.carryover === '') {\n                return false;\n            }\n            // Pretend that the pump succeeded in order to emit the small last batch.\n            // The next pump() call will actually fail.\n            this.outputQueue.push(this.carryover);\n            this.carryover = '';\n            return true;\n        }\n        const lines = chunkResult.value.split(this.separator);\n        // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n        // Thus the carryover may be '' if the separator falls on a chunk\n        // boundary; this produces the correct result.\n        lines[0] = this.carryover + lines[0];\n        for (const line of lines.slice(0, -1)) {\n            this.outputQueue.push(line);\n        }\n        this.carryover = lines[lines.length - 1];\n        return true;\n    }\n}\n//# sourceMappingURL=string_iterator.js.map"]},"metadata":{},"sourceType":"module"}