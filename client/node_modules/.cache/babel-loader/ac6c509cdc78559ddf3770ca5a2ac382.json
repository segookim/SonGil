{"ast":null,"code":"import _slicedToArray from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nvar getBroadcastDims = backend_util.getBroadcastDims;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, userCode, usesPackedTextures) {\n  var prefixSnippets = [];\n  inputsInfo.forEach(function (x) {\n    var size = util.sizeFromShape(x.shapeInfo.logicalShape); // Snippet when we decided to upload the values as uniform.\n\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\"uniform float \".concat(x.name).concat(size > 1 ? \"[\".concat(size, \"]\") : '', \";\"));\n    } else {\n      prefixSnippets.push(\"uniform sampler2D \".concat(x.name, \";\"));\n      prefixSnippets.push(\"uniform int offset\".concat(x.name, \";\"));\n    }\n  });\n  var inputPrefixSnippet = prefixSnippets.join('\\n');\n  var inputSamplingSnippet = inputsInfo.map(function (x) {\n    return getInputSamplingSnippet(x, outputShape, usesPackedTextures);\n  }).join('\\n');\n  var outTexShape = outputShape.texShape;\n  var glsl = getGlslDifferences();\n  var floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  var outputSamplingSnippet;\n  var floatTextureSetOutputSnippet;\n  var shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (usesPackedTextures) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  var source = [shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(inInfo) {\n  var shape = inInfo.shapeInfo.logicalShape;\n\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo);\n\n    case 1:\n      return getSampler1D(inInfo);\n\n    case 2:\n      return getSampler2D(inInfo);\n\n    case 3:\n      return getSampler3D(inInfo);\n\n    case 4:\n      return getSampler4D(inInfo);\n\n    case 5:\n      return getSampler5D(inInfo);\n\n    case 6:\n      return getSampler6D(inInfo);\n\n    default:\n      throw new Error(\"\".concat(shape.length, \"-D input sampling\") + \" is not yet supported\");\n  }\n}\n\nfunction getPackedSamplerFromInInfo(inInfo) {\n  var shape = inInfo.shapeInfo.logicalShape;\n\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n\n    case 1:\n      return getPackedSampler1D(inInfo);\n\n    case 2:\n      return getPackedSampler2D(inInfo);\n\n    case 3:\n      return getPackedSampler3D(inInfo);\n\n    default:\n      return getPackedSamplerND(inInfo);\n  }\n}\n\nfunction getInputSamplingSnippet(inInfo, outShapeInfo) {\n  var usesPackedTextures = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var res = '';\n\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo);\n  } else {\n    res += getSamplerFromInInfo(inInfo);\n  }\n\n  var inShape = inInfo.shapeInfo.logicalShape;\n  var outShape = outShapeInfo.logicalShape;\n\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n\n    case 1:\n      return getOutputPacked1DCoords(outShape, outTexShape);\n\n    case 2:\n      return getOutputPacked2DCoords(outShape, outTexShape);\n\n    case 3:\n      return getOutputPacked3DCoords(outShape, outTexShape);\n\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape);\n  }\n}\n\nfunction getOutputSamplingSnippet(outShape, outTexShape) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n\n    case 1:\n      return getOutput1DCoords(outShape, outTexShape);\n\n    case 2:\n      return getOutput2DCoords(outShape, outTexShape);\n\n    case 3:\n      return getOutput3DCoords(outShape, outTexShape);\n\n    case 4:\n      return getOutput4DCoords(outShape, outTexShape);\n\n    case 5:\n      return getOutput5DCoords(outShape, outTexShape);\n\n    case 6:\n      return getOutput6DCoords(outShape, outTexShape);\n\n    default:\n      throw new Error(\"\".concat(outShape.length, \"-D output sampling is not yet supported\"));\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl) {\n  return \"\\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n      return \".concat(glsl.texture2D, \"(textureSampler, uv).r;\\n    }\\n  \");\n}\n\nfunction getFloatTextureSetRSnippet(glsl) {\n  return \"\\n    void setOutput(float val) {\\n      \".concat(glsl.output, \" = vec4(val, 0, 0, 0);\\n    }\\n  \");\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl) {\n  return \"\\n    void setOutput(vec4 val) {\\n      \".concat(glsl.output, \" = val;\\n    }\\n  \");\n}\n\nfunction getShaderPrefix(glsl) {\n  var SHADER_PREFIX = \"\".concat(glsl.version, \"\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    \").concat(glsl.varyingFs, \" vec2 resultUV;\\n    \").concat(glsl.defineOutput, \"\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    uniform float NAN;\\n    \").concat(glsl.defineSpecialNaN, \"\\n    \").concat(glsl.defineSpecialInf, \"\\n    \").concat(glsl.defineRound, \"\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    int idiv(int a, int b, float sign) {\\n      int res = a / b;\\n      int mod = imod(a, b);\\n      if (sign < 0. && mod != 0) {\\n        res -= 1;\\n      }\\n      return res;\\n    }\\n\\n    //Based on the work of Dave Hoskins\\n    //https://www.shadertoy.com/view/4djSRW\\n    #define HASHSCALE1 443.8975\\n    float random(float seed){\\n      vec2 p = resultUV * seed;\\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n      p3 += dot(p3, p3.yzx + 19.19);\\n      return fract((p3.x + p3.y) * p3.z);\\n    }\\n\\n    \").concat(SAMPLE_1D_SNIPPET, \"\\n    \").concat(SAMPLE_2D_SNIPPET, \"\\n    \").concat(SAMPLE_3D_SNIPPET, \"\\n  \");\n  return SHADER_PREFIX;\n}\n\nvar SAMPLE_1D_SNIPPET = \"\\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n  int texelIndex = index / 2;\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_2D_SNIPPET = \"\\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\\n  int texNumC, int row, int col) {\\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_3D_SNIPPET = \"\\nvec2 packedUVfrom3D(int texNumR, int texNumC,\\n    int texelsInBatch, int texelsInLogicalRow, int b,\\n    int row, int col) {\\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SHADER_PACKED_PREFIX = \"\\n  float getChannel(vec4 frag, vec2 innerDims) {\\n    vec2 modCoord = mod(innerDims, 2.);\\n    return modCoord.x == 0. ?\\n      (modCoord.y == 0. ? frag.r : frag.g) :\\n      (modCoord.y == 0. ? frag.b : frag.a);\\n  }\\n  float getChannel(vec4 frag, int dim) {\\n    float modCoord = mod(float(dim), 2.);\\n    return modCoord == 0. ? frag.r : frag.g;\\n  }\\n\";\n\nfunction getOutputScalarCoords() {\n  return \"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";\n}\n\nfunction getOutputPacked1DCoords(shape, texShape) {\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (packedTexShape[0] === 1) {\n    return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * \".concat(packedTexShape[1], \".0);\\n      }\\n    \");\n  }\n\n  if (packedTexShape[1] === 1) {\n    return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * \".concat(packedTexShape[0], \".0);\\n      }\\n    \");\n  }\n\n  return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      return 2 * (resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y);\\n    }\\n  \");\n}\n\nfunction getOutput1DCoords(shape, texShape) {\n  if (texShape[0] === 1) {\n    return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \".concat(texShape[1], \".0);\\n      }\\n    \");\n  }\n\n  if (texShape[1] === 1) {\n    return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \".concat(texShape[0], \".0);\\n      }\\n    \");\n  }\n\n  return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      return resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n    }\\n  \");\n}\n\nfunction getOutputPacked3DCoords(shape, texShape) {\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  var texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n  return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n\\n      int b = index / \").concat(texelsInBatch, \";\\n      index -= b * \").concat(texelsInBatch, \";\\n\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \");\n}\n\nfunction getOutput3DCoords(shape, texShape) {\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      \").concat(coordsFromIndexSnippet, \"\\n      return ivec3(r, c, d);\\n    }\\n  \");\n}\n\nfunction getOutputPackedNDCoords(shape, texShape) {\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  var texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  var texelsInBatchN = texelsInBatch;\n  var batches = \"\";\n  var coords = 'b, r, c';\n\n  for (var b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = \"\\n      int b\".concat(b, \" = index / \").concat(texelsInBatchN, \";\\n      index -= b\").concat(b, \" * \").concat(texelsInBatchN, \";\\n    \") + batches;\n    coords = \"b\".concat(b, \", \") + coords;\n  }\n\n  return \"\\n    ivec\".concat(shape.length, \" getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n\\n      \").concat(batches, \"\\n\\n      int b = index / \").concat(texelsInBatch, \";\\n      index -= b * \").concat(texelsInBatch, \";\\n\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec\").concat(shape.length, \"(\").concat(coords, \");\\n    }\\n  \");\n}\n\nfunction getOutput4DCoords(shape, texShape) {\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n  return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      \").concat(coordsFromIndexSnippet, \"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \");\n}\n\nfunction getOutput5DCoords(shape, texShape) {\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n  return \"\\n    ivec5 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(\".concat(texShape[0], \",\\n                             \").concat(texShape[1], \"));\\n\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n\\n      \").concat(coordsFromIndexSnippet, \"\\n\\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\\n      return outShape;\\n    }\\n  \");\n}\n\nfunction getOutput6DCoords(shape, texShape) {\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n  return \"\\n    ivec6 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n\\n      \").concat(coordsFromIndexSnippet, \"\\n\\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\\n      return result;\\n    }\\n  \");\n}\n\nfunction getOutputPacked2DCoords(shape, texShape) {\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (util.arraysEqual(shape, texShape)) {\n    return \"\\n      ivec2 getOutputCoords() {\\n        return 2 * ivec2(resultUV.yx * vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      }\\n    \");\n  } // texels needed to accommodate a logical row\n\n\n  var texelsInLogicalRow = Math.ceil(shape[1] / 2);\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n\n  return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \");\n}\n\nfunction getOutput2DCoords(shape, texShape) {\n  if (util.arraysEqual(shape, texShape)) {\n    return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      }\\n    \");\n  }\n\n  if (shape[1] === 1) {\n    return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n        int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \");\n  }\n\n  if (shape[0] === 1) {\n    return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n        int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \");\n  }\n\n  return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      int r = index / \").concat(shape[1], \";\\n      int c = index - r * \").concat(shape[1], \";\\n      return ivec2(r, c);\\n    }\\n  \");\n}\n\nfunction getFlatOffsetUniformName(texName) {\n  return \"offset\".concat(texName);\n}\n\nfunction getPackedSamplerScalar(inputInfo) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var glsl = getGlslDifferences();\n  return \"\\n    vec4 \".concat(funcName, \"() {\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", halfCR);\\n    }\\n  \");\n}\n\nfunction getSamplerScalar(inputInfo) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    return \"float \".concat(funcName, \"() {return \").concat(texName, \";}\");\n  }\n\n  var _inputInfo$shapeInfo$ = _slicedToArray(inputInfo.shapeInfo.texShape, 2),\n      texNumR = _inputInfo$shapeInfo$[0],\n      texNumC = _inputInfo$shapeInfo$[1];\n\n  if (texNumR === 1 && texNumC === 1) {\n    return \"\\n      float \".concat(funcName, \"() {\\n        return sampleTexture(\").concat(texName, \", halfCR);\\n      }\\n    \");\n  }\n\n  var _inputInfo$shapeInfo$2 = _slicedToArray(inputInfo.shapeInfo.texShape, 2),\n      tNumR = _inputInfo$shapeInfo$2[0],\n      tNumC = _inputInfo$shapeInfo$2[1];\n\n  var offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \".concat(funcName, \"() {\\n      vec2 uv = uvFromFlat(\").concat(tNumR, \", \").concat(tNumC, \", \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getPackedSampler1D(inputInfo) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var glsl = getGlslDifferences();\n  return \"\\n    vec4 \".concat(funcName, \"(int index) {\\n      vec2 uv = packedUVfrom1D(\\n        \").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \", index);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getSampler1D(inputInfo) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n\n  var texShape = inputInfo.shapeInfo.texShape;\n  var tNumR = texShape[0];\n  var tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        return sampleTexture(\").concat(texName, \", halfCR);\\n      }\\n    \");\n  }\n\n  var offset = getFlatOffsetUniformName(texName);\n\n  if (tNumC === 1) {\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \").concat(offset, \") + 0.5) / \").concat(tNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  if (tNumR === 1) {\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2((float(index + \").concat(offset, \") + 0.5) / \").concat(tNumC, \".0, 0.5);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  return \"\\n    float \".concat(funcName, \"(int index) {\\n      vec2 uv = uvFromFlat(\").concat(tNumR, \", \").concat(tNumC, \", index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getPackedSampler2D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var glsl = getGlslDifferences();\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    return \"\\n      vec4 \".concat(funcName, \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n\\n        return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var valuesPerRow = Math.ceil(shape[1] / 2);\n  return \"\\n    vec4 \".concat(funcName, \"(int row, int col) {\\n      vec2 uv = packedUVfrom2D(\").concat(valuesPerRow, \", \").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \", row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getSampler2D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    var _texNumR = texShape[0];\n    var _texNumC = texShape[1];\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(_texNumC, \".0, \").concat(_texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n\n  var _util$squeezeShape = util.squeezeShape(shape),\n      newShape = _util$squeezeShape.newShape,\n      keptDims = _util$squeezeShape.keptDims;\n\n  var squeezedShape = newShape;\n\n  if (squeezedShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    var params = ['row', 'col'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo), \"\\n      float \").concat(funcName, \"(int row, int col) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        int index = round(dot(vec2(row, col), vec2(\").concat(shape[1], \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var offset = getFlatOffsetUniformName(texName);\n\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(shape[1], \", 1, 1));\\n      vec2 uv = vec2(0.5, (index + 0.5) / \").concat(texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(shape[1], \", 1, 1));\\n      vec2 uv = vec2((index + 0.5) / \").concat(texNumC, \".0, 0.5);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n\n  return \"\\n  float \".concat(funcName, \"(int row, int col) {\\n    // Explicitly use integer operations as dot() only works on floats.\\n    int index = row * \").concat(shape[1], \" + col + \").concat(offset, \";\\n    vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n    return sampleTexture(\").concat(texName, \", uv);\\n  }\\n\");\n}\n\nfunction getPackedSampler3D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    var squeezedShape = shape.slice(1);\n    var keptDims = [1, 2];\n    var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    var params = ['b', 'row', 'col'];\n    return \"\\n        \".concat(getPackedSamplerFromInInfo(newInputInfo), \"\\n        vec4 \").concat(funcName, \"(int b, int row, int col) {\\n          return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n        }\\n      \");\n  }\n\n  var texNumR = packedTexShape[0];\n  var texNumC = packedTexShape[1];\n  var valuesPerRow = Math.ceil(shape[2] / 2);\n  var texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  var glsl = getGlslDifferences();\n  return \"\\n    vec4 \".concat(funcName, \"(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        \").concat(texNumR, \", \").concat(texNumC, \", \").concat(texelsInBatch, \", \").concat(valuesPerRow, \", b, row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getSampler3D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var stride0 = shape[1] * shape[2];\n  var stride1 = shape[2];\n\n  var _util$squeezeShape2 = util.squeezeShape(shape),\n      newShape = _util$squeezeShape2.newShape,\n      keptDims = _util$squeezeShape2.keptDims;\n\n  var squeezedShape = newShape;\n\n  if (squeezedShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    var params = ['row', 'col', 'depth'];\n    return \"\\n        \".concat(getSamplerFromInInfo(newInputInfo), \"\\n        float \").concat(funcName, \"(int row, int col, int depth) {\\n          return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n        }\\n      \");\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        int index = round(dot(vec3(row, col, depth),\\n                          vec3(\").concat(stride0, \", \").concat(stride1, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return \"\\n        float \".concat(funcName, \"(int row, int col, int depth) {\\n          float texR = float(row);\\n          float texC = dot(vec2(col, depth), vec2(\").concat(stride1, \", 1));\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n          return sampleTexture(\").concat(texName, \", uv);\\n        }\\n      \");\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return \"\\n    float \".concat(funcName, \"(int row, int col, int depth) {\\n      float texR = dot(vec2(row, col), vec2(\").concat(shape[1], \", 1));\\n      float texC = float(depth);\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n\n  var offset = getFlatOffsetUniformName(texName);\n  return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth + \").concat(offset, \";\\n        vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n  \");\n}\n\nfunction getPackedSamplerND(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var rank = shape.length;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var texNumR = packedTexShape[0];\n  var texNumC = packedTexShape[1];\n  var valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  var texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  var params = \"int b, int row, int col\";\n  var index = \"b * \".concat(texelsInBatch, \" + (row / 2) * \").concat(valuesPerRow, \" + (col / 2)\");\n\n  for (var b = 2; b < rank - 1; b++) {\n    params = \"int b\".concat(b, \", \") + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = \"b\".concat(b, \" * \").concat(texelsInBatch, \" + \") + index;\n  }\n\n  var glsl = getGlslDifferences();\n  return \"\\n    vec4 \".concat(funcName, \"(\").concat(params, \") {\\n      int index = \").concat(index, \";\\n      int texR = index / \").concat(texNumC, \";\\n      int texC = index - texR * \").concat(texNumC, \";\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texNumC, \", \").concat(texNumR, \");\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getSampler4D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var stride2 = shape[3];\n  var stride1 = shape[2] * stride2;\n  var stride0 = shape[1] * stride1;\n\n  var _util$squeezeShape3 = util.squeezeShape(shape),\n      newShape = _util$squeezeShape3.newShape,\n      keptDims = _util$squeezeShape3.keptDims;\n\n  if (newShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    var params = ['row', 'col', 'depth', 'depth2'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo), \"\\n      float \").concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        int index = round(dot(vec4(row, col, depth, depth2),\\n                          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(\").concat(stride1, \", \").concat(stride2, \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\").concat(shape[1] * shape[2], \", \").concat(shape[2], \", 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  var offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" +\\n          depth * \").concat(stride2, \" + depth2;\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getSampler5D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var stride3 = shape[4];\n  var stride2 = shape[3] * stride3;\n  var stride1 = shape[2] * stride2;\n  var stride0 = shape[1] * stride1;\n\n  var _util$squeezeShape4 = util.squeezeShape(shape),\n      newShape = _util$squeezeShape4.newShape,\n      keptDims = _util$squeezeShape4.keptDims;\n\n  if (newShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    var params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo), \"\\n      float \").concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        float index = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \")) +\\n          depth3;\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n                         vec4(\").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        float texR = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(shape[1] * shape[2] * shape[3], \",\\n               \").concat(shape[2] * shape[3], \", \").concat(shape[3], \", 1));\\n        int texC = depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  var offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth * \").concat(stride2, \" +\\n          depth2 * \").concat(stride3, \" + depth3 + \").concat(offset, \";\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getSampler6D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  var _util$squeezeShape5 = util.squeezeShape(shape),\n      newShape = _util$squeezeShape5.newShape,\n      keptDims = _util$squeezeShape5.keptDims;\n\n  if (newShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    var params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo), \"\\n      float \").concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n\n  var stride4 = shape[5];\n  var stride3 = shape[4] * stride4;\n  var stride2 = shape[3] * stride3;\n  var stride1 = shape[2] * stride2;\n  var stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n        int index = round(dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \")) +\\n          dot(\\n            vec2(depth3, depth4),\\n            vec2(\").concat(stride4, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n          vec4(\").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \", \").concat(stride4, \")) +\\n               float(depth4);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        float texR = dot(vec4(row, col, depth, depth2),\\n          vec4(\").concat(shape[1] * shape[2] * shape[3] * shape[4], \",\\n               \").concat(shape[2] * shape[3] * shape[4], \",\\n               \").concat(shape[3] * shape[4], \",\\n               \").concat(shape[4], \")) + float(depth3);\\n        int texC = depth4;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  var offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth * \").concat(stride2, \" +\\n          depth2 * \").concat(stride3, \" + depth3 * \").concat(stride4, \" + depth4 + \").concat(offset, \";\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getUniformSampler(inputInfo) {\n  var texName = inputInfo.name;\n  var inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return \"return \".concat(texName, \";\");\n  }\n\n  return \"\\n    for (int i = 0; i < \".concat(inSize, \"; i++) {\\n      if (i == index) {\\n        return \").concat(texName, \"[i];\\n      }\\n    }\\n  \");\n}\n\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  var texName = inputInfo.name;\n  var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  var funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  var inRank = inputInfo.shapeInfo.logicalShape.length;\n  var outRank = outShapeInfo.logicalShape.length;\n  var broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  var type = getCoordsDataType(outRank);\n  var rankDiff = outRank - inRank;\n  var coordsSnippet;\n  var fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(function (d) {\n      return \"coords.\".concat(fields[d + rankDiff], \" = 0;\");\n    }).join('\\n');\n  }\n\n  var unpackedCoordsSnippet = '';\n\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map(function (s, i) {\n      return \"coords.\".concat(fields[i + rankDiff]);\n    }).join(', ');\n  }\n\n  var output = \"return outputValue;\";\n  var inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  var isInputScalar = inSize === 1;\n  var outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  var isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = \"\\n      return vec4(outputValue.xy, outputValue.xy);\\n    \";\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = \"\\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\\n      \";\n    } else {\n      output = \"\\n        return vec4(outputValue.x);\\n      \";\n    }\n  } else if (broadcastDims.length) {\n    var rows = inRank - 2;\n    var cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = \"return vec4(outputValue.x);\";\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = \"return vec4(outputValue.x, outputValue.y, \" + \"outputValue.x, outputValue.y);\";\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = \"return vec4(outputValue.xx, outputValue.zz);\";\n    }\n  }\n\n  return \"\\n    vec4 \".concat(funcName, \"() {\\n      \").concat(type, \" coords = getOutputCoords();\\n      \").concat(coordsSnippet, \"\\n      vec4 outputValue = get\").concat(texFuncSnippet, \"(\").concat(unpackedCoordsSnippet, \");\\n      \").concat(output, \"\\n    }\\n  \");\n}\n\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  var texName = inputInfo.name;\n  var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  var funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  var outTexShape = outShapeInfo.texShape;\n  var inTexShape = inputInfo.shapeInfo.texShape;\n  var inRank = inputInfo.shapeInfo.logicalShape.length;\n  var outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && util.arraysEqual(inTexShape, outTexShape)) {\n    return \"\\n      float \".concat(funcName, \"() {\\n        return sampleTexture(\").concat(texName, \", resultUV);\\n      }\\n    \");\n  }\n\n  var type = getCoordsDataType(outRank);\n  var broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  var rankDiff = outRank - inRank;\n  var coordsSnippet;\n  var fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(function (d) {\n      return \"coords.\".concat(fields[d + rankDiff], \" = 0;\");\n    }).join('\\n');\n  }\n\n  var unpackedCoordsSnippet = '';\n\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map(function (s, i) {\n      return \"coords.\".concat(fields[i + rankDiff]);\n    }).join(', ');\n  }\n\n  return \"\\n    float \".concat(funcName, \"() {\\n      \").concat(type, \" coords = getOutputCoords();\\n      \").concat(coordsSnippet, \"\\n      return get\").concat(texFuncSnippet, \"(\").concat(unpackedCoordsSnippet, \");\\n    }\\n  \");\n}\n\nexport function getCoordsDataType(rank) {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(\"GPU for rank \".concat(rank, \" is not yet supported\"));\n  }\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\n\nfunction squeezeInputInfo(inInfo, squeezedShape) {\n  // Deep copy.\n  var newInputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params, keptDims) {\n  return keptDims.map(function (d) {\n    return params[d];\n  }).join(', ');\n}","map":{"version":3,"sources":["../src/shader_compiler.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsB,IAAtB,QAAiC,uBAAjC;IACO,gB,GAAoB,Y,CAApB,gB;AACP,SAAQ,kBAAR,QAAuC,gBAAvC;AACA,OAAO,KAAK,WAAZ,MAA6B,wBAA7B;AAeA,OAAM,SAAU,UAAV,CACF,UADE,EACuB,WADvB,EAC+C,QAD/C,EAEF,kBAFE,EAEyB;AAC7B,MAAM,cAAc,GAAa,EAAjC;AACA,EAAA,UAAU,CAAC,OAAX,CAAmB,UAAA,CAAC,EAAG;AACrB,QAAM,IAAI,GAAG,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,SAAF,CAAY,YAA/B,CAAb,CADqB,CAGrB;;AACA,QAAI,CAAC,CAAC,SAAF,CAAY,SAAhB,EAA2B;AACzB,MAAA,cAAc,CAAC,IAAf,yBACqB,CAAC,CAAC,IADvB,SAC8B,IAAI,GAAG,CAAP,cAAe,IAAf,SAAyB,EADvD;AAED,KAHD,MAGO;AACL,MAAA,cAAc,CAAC,IAAf,6BAAyC,CAAC,CAAC,IAA3C;AACA,MAAA,cAAc,CAAC,IAAf,6BAAyC,CAAC,CAAC,IAA3C;AACD;AACF,GAXD;AAYA,MAAM,kBAAkB,GAAG,cAAc,CAAC,IAAf,CAAoB,IAApB,CAA3B;AAEA,MAAM,oBAAoB,GACtB,UAAU,CACL,GADL,CACS,UAAA,CAAC;AAAA,WAAI,uBAAuB,CAAC,CAAD,EAAI,WAAJ,EAAiB,kBAAjB,CAA3B;AAAA,GADV,EAEK,IAFL,CAEU,IAFV,CADJ;AAIA,MAAM,WAAW,GAAG,WAAW,CAAC,QAAhC;AACA,MAAM,IAAI,GAAG,kBAAkB,EAA/B;AACA,MAAM,yBAAyB,GAAG,4BAA4B,CAAC,IAAD,CAA9D;AACA,MAAI,qBAAJ;AACA,MAAI,4BAAJ;AACA,MAAI,YAAY,GAAG,eAAe,CAAC,IAAD,CAAlC;;AAEA,MAAI,WAAW,CAAC,QAAhB,EAA0B;AACxB,IAAA,qBAAqB,GACjB,8BAA8B,CAAC,WAAW,CAAC,YAAb,EAA2B,WAA3B,CADlC;AAEA,IAAA,4BAA4B,GAAG,6BAA6B,CAAC,IAAD,CAA5D;AACD,GAJD,MAIO;AACL,IAAA,qBAAqB,GACjB,wBAAwB,CAAC,WAAW,CAAC,YAAb,EAA2B,WAA3B,CAD5B;AAEA,IAAA,4BAA4B,GAAG,0BAA0B,CAAC,IAAD,CAAzD;AACD;;AAED,MAAI,kBAAJ,EAAwB;AACtB,IAAA,YAAY,IAAI,oBAAhB;AACD;;AAED,MAAM,MAAM,GAAG,CACb,YADa,EACC,yBADD,EAC4B,4BAD5B,EAEb,kBAFa,EAEO,qBAFP,EAE8B,oBAF9B,EAEoD,QAFpD,EAGb,IAHa,CAGR,IAHQ,CAAf;AAIA,SAAO,MAAP;AACD;;AAED,SAAS,oBAAT,CAA8B,MAA9B,EAA+C;AAC7C,MAAM,KAAK,GAAG,MAAM,CAAC,SAAP,CAAiB,YAA/B;;AACA,UAAQ,KAAK,CAAC,MAAd;AACE,SAAK,CAAL;AACE,aAAO,gBAAgB,CAAC,MAAD,CAAvB;;AACF,SAAK,CAAL;AACE,aAAO,YAAY,CAAC,MAAD,CAAnB;;AACF,SAAK,CAAL;AACE,aAAO,YAAY,CAAC,MAAD,CAAnB;;AACF,SAAK,CAAL;AACE,aAAO,YAAY,CAAC,MAAD,CAAnB;;AACF,SAAK,CAAL;AACE,aAAO,YAAY,CAAC,MAAD,CAAnB;;AACF,SAAK,CAAL;AACE,aAAO,YAAY,CAAC,MAAD,CAAnB;;AACF,SAAK,CAAL;AACE,aAAO,YAAY,CAAC,MAAD,CAAnB;;AACF;AACE,YAAM,IAAI,KAAJ,CACF,UAAG,KAAK,CAAC,MAAT,gDADE,CAAN;AAhBJ;AAoBD;;AAED,SAAS,0BAAT,CAAoC,MAApC,EAAqD;AACnD,MAAM,KAAK,GAAG,MAAM,CAAC,SAAP,CAAiB,YAA/B;;AACA,UAAQ,KAAK,CAAC,MAAd;AACE,SAAK,CAAL;AACE,aAAO,sBAAsB,CAAC,MAAD,CAA7B;;AACF,SAAK,CAAL;AACE,aAAO,kBAAkB,CAAC,MAAD,CAAzB;;AACF,SAAK,CAAL;AACE,aAAO,kBAAkB,CAAC,MAAD,CAAzB;;AACF,SAAK,CAAL;AACE,aAAO,kBAAkB,CAAC,MAAD,CAAzB;;AACF;AACE,aAAO,kBAAkB,CAAC,MAAD,CAAzB;AAVJ;AAYD;;AAED,SAAS,uBAAT,CACI,MADJ,EACuB,YADvB,EAE8B;AAAA,MAA1B,kBAA0B,uEAAL,KAAK;AAC5B,MAAI,GAAG,GAAG,EAAV;;AACA,MAAI,kBAAJ,EAAwB;AACtB,IAAA,GAAG,IAAI,0BAA0B,CAAC,MAAD,CAAjC;AACD,GAFD,MAEO;AACL,IAAA,GAAG,IAAI,oBAAoB,CAAC,MAAD,CAA3B;AACD;;AAED,MAAM,OAAO,GAAG,MAAM,CAAC,SAAP,CAAiB,YAAjC;AACA,MAAM,QAAQ,GAAG,YAAY,CAAC,YAA9B;;AACA,MAAI,OAAO,CAAC,MAAR,IAAkB,QAAQ,CAAC,MAA/B,EAAuC;AACrC,QAAI,kBAAJ,EAAwB;AACtB,MAAA,GAAG,IAAI,8BAA8B,CAAC,MAAD,EAAS,YAAT,CAArC;AACD,KAFD,MAEO;AACL,MAAA,GAAG,IAAI,wBAAwB,CAAC,MAAD,EAAS,YAAT,CAA/B;AACD;AACF;;AACD,SAAO,GAAP;AACD;;AAED,SAAS,8BAAT,CACI,QADJ,EACwB,WADxB,EACqD;AACnD,UAAQ,QAAQ,CAAC,MAAjB;AACE,SAAK,CAAL;AACE,aAAO,qBAAqB,EAA5B;;AACF,SAAK,CAAL;AACE,aAAO,uBAAuB,CAAC,QAAD,EAAuB,WAAvB,CAA9B;;AACF,SAAK,CAAL;AACE,aAAO,uBAAuB,CAAC,QAAD,EAA+B,WAA/B,CAA9B;;AACF,SAAK,CAAL;AACE,aAAO,uBAAuB,CAC1B,QAD0B,EACY,WADZ,CAA9B;;AAEF;AACE,aAAO,uBAAuB,CAAC,QAAD,EAAW,WAAX,CAA9B;AAXJ;AAaD;;AAED,SAAS,wBAAT,CACI,QADJ,EACwB,WADxB,EACqD;AACnD,UAAQ,QAAQ,CAAC,MAAjB;AACE,SAAK,CAAL;AACE,aAAO,qBAAqB,EAA5B;;AACF,SAAK,CAAL;AACE,aAAO,iBAAiB,CAAC,QAAD,EAAuB,WAAvB,CAAxB;;AACF,SAAK,CAAL;AACE,aAAO,iBAAiB,CAAC,QAAD,EAA+B,WAA/B,CAAxB;;AACF,SAAK,CAAL;AACE,aAAO,iBAAiB,CACpB,QADoB,EACkB,WADlB,CAAxB;;AAEF,SAAK,CAAL;AACE,aAAO,iBAAiB,CACpB,QADoB,EAC0B,WAD1B,CAAxB;;AAEF,SAAK,CAAL;AACE,aAAO,iBAAiB,CACpB,QADoB,EACkC,WADlC,CAAxB;;AAEF,SAAK,CAAL;AACE,aAAO,iBAAiB,CACpB,QADoB,EAEpB,WAFoB,CAAxB;;AAGF;AACE,YAAM,IAAI,KAAJ,WACC,QAAQ,CAAC,MADV,6CAAN;AArBJ;AAwBD;;AAED,SAAS,4BAAT,CAAsC,IAAtC,EAAgD;AAC9C,gGAEa,IAAI,CAAC,SAFlB;AAKD;;AAED,SAAS,0BAAT,CAAoC,IAApC,EAA8C;AAC5C,4DAEM,IAAI,CAAC,MAFX;AAKD;;AAED,SAAS,6BAAT,CAAuC,IAAvC,EAAiD;AAC/C,2DAEM,IAAI,CAAC,MAFX;AAKD;;AAED,SAAS,eAAT,CAAyB,IAAzB,EAAmC;AACjC,MAAM,aAAa,aAAM,IAAI,CAAC,OAAX,yGAIf,IAAI,CAAC,SAJU,kCAKf,IAAI,CAAC,YALU,sTA4Bf,IAAI,CAAC,gBA5BU,mBA6Bf,IAAI,CAAC,gBA7BU,mBA8Bf,IAAI,CAAC,WA9BU,0lBAuDf,iBAvDe,mBAwDf,iBAxDe,mBAyDf,iBAzDe,SAAnB;AA4DA,SAAO,aAAP;AACD;;AAED,IAAM,iBAAiB,obAAvB;AAcA,IAAM,iBAAiB,uTAAvB;AAUA,IAAM,iBAAiB,6VAAvB;AAWA,IAAM,oBAAoB,wWAA1B;;AAaA,SAAS,qBAAT,GAA8B;AAC5B;AAKD;;AAED,SAAS,uBAAT,CACI,KADJ,EACqB,QADrB,EAC+C;AAC7C,MAAM,cAAc,GAChB,CAAC,IAAI,CAAC,IAAL,CAAU,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxB,CAAD,EAA6B,IAAI,CAAC,IAAL,CAAU,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxB,CAA7B,CADJ;;AAEA,MAAI,cAAc,CAAC,CAAD,CAAd,KAAsB,CAA1B,EAA6B;AAC3B,0FAEkC,cAAc,CAAC,CAAD,CAFhD;AAKD;;AAED,MAAI,cAAc,CAAC,CAAD,CAAd,KAAsB,CAA1B,EAA6B;AAC3B,0FAEkC,cAAc,CAAC,CAAD,CAFhD;AAKD;;AAED,gIAGkC,cAAc,CAAC,CAAD,CAHhD,eAGwD,cAAc,CAAC,CAAD,CAHtE,iDAI+B,cAAc,CAAC,CAAD,CAJ7C;AAOD;;AAED,SAAS,iBAAT,CACI,KADJ,EACqB,QADrB,EAC+C;AAC7C,MAAI,QAAQ,CAAC,CAAD,CAAR,KAAgB,CAApB,EAAuB;AACrB,sFAE8B,QAAQ,CAAC,CAAD,CAFtC;AAKD;;AACD,MAAI,QAAQ,CAAC,CAAD,CAAR,KAAgB,CAApB,EAAuB;AACrB,sFAE8B,QAAQ,CAAC,CAAD,CAFtC;AAKD;;AACD,gIAGkC,QAAQ,CAAC,CAAD,CAH1C,eAGkD,QAAQ,CAAC,CAAD,CAH1D,4CAI0B,QAAQ,CAAC,CAAD,CAJlC;AAOD;;AAED,SAAS,uBAAT,CACI,KADJ,EACqC,QADrC,EAC+D;AAC7D,MAAM,cAAc,GAChB,CAAC,IAAI,CAAC,IAAL,CAAU,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxB,CAAD,EAA6B,IAAI,CAAC,IAAL,CAAU,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxB,CAA7B,CADJ;AAEA,MAAM,kBAAkB,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,CAAD,CAAL,GAAW,CAArB,CAA3B;AACA,MAAM,aAAa,GAAG,kBAAkB,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,CAAD,CAAL,GAAW,CAArB,CAA3C;AAEA,kIAGkC,cAAc,CAAC,CAAD,CAHhD,eAGwD,cAAc,CAAC,CAAD,CAHtE,iDAI+B,cAAc,CAAC,CAAD,CAJ7C,qDAMsB,aANtB,mCAOmB,aAPnB,6CAS2B,kBAT3B,2CAU0B,kBAV1B;AAeD;;AAED,SAAS,iBAAT,CACI,KADJ,EACqC,QADrC,EAC+D;AAC7D,MAAM,sBAAsB,GACxB,WAAW,CAAC,kCAAZ,CAA+C,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA/C,EAAgE,KAAhE,CADJ;AAGA,kIAGkC,QAAQ,CAAC,CAAD,CAH1C,eAGkD,QAAQ,CAAC,CAAD,CAH1D,iDAI+B,QAAQ,CAAC,CAAD,CAJvC,mCAKM,sBALN;AASD;;AAED,SAAS,uBAAT,CACI,KADJ,EACqB,QADrB,EAC+C;AAC7C,MAAM,cAAc,GAChB,CAAC,IAAI,CAAC,IAAL,CAAU,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxB,CAAD,EAA6B,IAAI,CAAC,IAAL,CAAU,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxB,CAA7B,CADJ;AAGA,MAAM,kBAAkB,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAL,GAA0B,CAApC,CAA3B;AACA,MAAM,aAAa,GACf,kBAAkB,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAL,GAA0B,CAApC,CADzB;AAEA,MAAI,cAAc,GAAG,aAArB;AACA,MAAI,OAAO,KAAX;AACA,MAAI,MAAM,GAAG,SAAb;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAAN,GAAe,CAAnC,EAAsC,CAAC,EAAvC,EAA2C;AACzC,IAAA,cAAc,IAAI,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAf,GAAmB,CAApB,CAAvB;AACA,IAAA,OAAO,GAAG,uBACD,CADC,wBACc,cADd,gCAEI,CAFJ,gBAEW,cAFX,eAGN,OAHJ;AAIA,IAAA,MAAM,GAAG,WAAI,CAAJ,UAAY,MAArB;AACD;;AAED,6BACQ,KAAK,CAAC,MADd,iHAGkC,cAAc,CAAC,CAAD,CAHhD,eAGwD,cAAc,CAAC,CAAD,CAHtE,iDAI+B,cAAc,CAAC,CAAD,CAJ7C,qCAMM,OANN,uCAQsB,aARtB,mCASmB,aATnB,6CAW2B,kBAX3B,2CAY0B,kBAZ1B,wCAciB,KAAK,CAAC,MAdvB,cAciC,MAdjC;AAiBD;;AAED,SAAS,iBAAT,CACI,KADJ,EAEI,QAFJ,EAE8B;AAC5B,MAAM,sBAAsB,GAAG,WAAW,CAAC,kCAAZ,CAC3B,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,CAD2B,EACJ,KADI,CAA/B;AAGA,6GAGa,QAAQ,CAAC,CAAD,CAHrB,eAG6B,QAAQ,CAAC,CAAD,CAHrC,iDAI+B,QAAQ,CAAC,CAAD,CAJvC,mCAKM,sBALN;AASD;;AAED,SAAS,iBAAT,CACI,KADJ,EAEI,QAFJ,EAE8B;AAC5B,MAAM,sBAAsB,GAAG,WAAW,CAAC,kCAAZ,CAC3B,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,EAAsB,IAAtB,CAD2B,EACE,KADF,CAA/B;AAGA,oGAEgD,QAAQ,CAAC,CAAD,CAFxD,6CAG6B,QAAQ,CAAC,CAAD,CAHrC,mDAK+B,QAAQ,CAAC,CAAD,CALvC,qCAOM,sBAPN;AAaD;;AAED,SAAS,iBAAT,CACI,KADJ,EAEI,QAFJ,EAE8B;AAC5B,MAAM,sBAAsB,GAAG,WAAW,CAAC,kCAAZ,CAC3B,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,CAD2B,EACQ,KADR,CAA/B;AAGA,6GAGa,QAAQ,CAAC,CAAD,CAHrB,eAG6B,QAAQ,CAAC,CAAD,CAHrC,iDAI+B,QAAQ,CAAC,CAAD,CAJvC,qCAMM,sBANN;AAYD;;AAED,SAAS,uBAAT,CACI,KADJ,EAC6B,QAD7B,EACuD;AACrD,MAAM,cAAc,GAChB,CAAC,IAAI,CAAC,IAAL,CAAU,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxB,CAAD,EAA6B,IAAI,CAAC,IAAL,CAAU,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxB,CAA7B,CADJ;;AAEA,MAAI,IAAI,CAAC,WAAL,CAAiB,KAAjB,EAAwB,QAAxB,CAAJ,EAAuC;AACrC,oGAE0C,cAAc,CAAC,CAAD,CAFxD,eAGI,cAAc,CAAC,CAAD,CAHlB;AAMD,GAVoD,CAYrD;;;AACA,MAAM,kBAAkB,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,CAAD,CAAL,GAAW,CAArB,CAA3B;AAEA;;;;;;;;AAQG;;AACH,kIAGkC,cAAc,CAAC,CAAD,CAHhD,eAGwD,cAAc,CAAC,CAAD,CAHtE,mDAK+B,cAAc,CAAC,CAAD,CAL7C,wDAM2B,kBAN3B,2CAO0B,kBAP1B;AAYD;;AAED,SAAS,iBAAT,CACI,KADJ,EAC6B,QAD7B,EACuD;AACrD,MAAI,IAAI,CAAC,WAAL,CAAiB,KAAjB,EAAwB,QAAxB,CAAJ,EAAuC;AACrC,gGAEsC,QAAQ,CAAC,CAAD,CAF9C,eAEsD,QAAQ,CAAC,CAAD,CAF9D;AAKD;;AACD,MAAI,KAAK,CAAC,CAAD,CAAL,KAAa,CAAjB,EAAoB;AAClB,0IAGkC,QAAQ,CAAC,CAAD,CAH1C,eAGkD,QAAQ,CAAC,CAAD,CAH1D,mDAI+B,QAAQ,CAAC,CAAD,CAJvC;AAQD;;AACD,MAAI,KAAK,CAAC,CAAD,CAAL,KAAa,CAAjB,EAAoB;AAClB,0IAGkC,QAAQ,CAAC,CAAD,CAH1C,eAGkD,QAAQ,CAAC,CAAD,CAH1D,mDAI+B,QAAQ,CAAC,CAAD,CAJvC;AAQD;;AACD,kIAGkC,QAAQ,CAAC,CAAD,CAH1C,eAGkD,QAAQ,CAAC,CAAD,CAH1D,iDAI+B,QAAQ,CAAC,CAAD,CAJvC,mDAKsB,KAAK,CAAC,CAAD,CAL3B,0CAM0B,KAAK,CAAC,CAAD,CAN/B;AAUD;;AAED,SAAS,wBAAT,CAAkC,OAAlC,EAAiD;AAC/C,yBAAgB,OAAhB;AACD;;AAED,SAAS,sBAAT,CAAgC,SAAhC,EAAoD;AAClD,MAAM,OAAO,GAAG,SAAS,CAAC,IAA1B;AACA,MAAM,QAAQ,GAAG,QAAQ,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,WAAlB,EAAR,GAA0C,OAAO,CAAC,KAAR,CAAc,CAAd,CAA3D;AACA,MAAM,IAAI,GAAG,kBAAkB,EAA/B;AACA,8BACS,QADT,gCAEa,IAAI,CAAC,SAFlB,cAE+B,OAF/B;AAKD;;AAED,SAAS,gBAAT,CAA0B,SAA1B,EAA8C;AAC5C,MAAM,OAAO,GAAG,SAAS,CAAC,IAA1B;AACA,MAAM,QAAQ,GAAG,QAAQ,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,WAAlB,EAAR,GAA0C,OAAO,CAAC,KAAR,CAAc,CAAd,CAA3D;;AACA,MAAI,SAAS,CAAC,SAAV,CAAoB,SAAxB,EAAmC;AACjC,2BAAgB,QAAhB,wBAAsC,OAAtC;AACD;;AAL2C,6CAMjB,SAAS,CAAC,SAAV,CAAoB,QANH;AAAA,MAMrC,OANqC;AAAA,MAM5B,OAN4B;;AAO5C,MAAI,OAAO,KAAK,CAAZ,IAAiB,OAAO,KAAK,CAAjC,EAAoC;AAClC,mCACU,QADV,gDAE2B,OAF3B;AAKD;;AAb2C,8CAerB,SAAS,CAAC,SAAV,CAAoB,QAfC;AAAA,MAerC,KAfqC;AAAA,MAe9B,KAf8B;;AAgB5C,MAAM,MAAM,GAAG,wBAAwB,CAAC,OAAD,CAAvC;AACA,+BACU,QADV,8CAE2B,KAF3B,eAEqC,KAFrC,eAE+C,MAF/C,4CAG2B,OAH3B;AAMD;;AAED,SAAS,kBAAT,CAA4B,SAA5B,EAAgD;AAC9C,MAAM,OAAO,GAAG,SAAS,CAAC,IAA1B;AACA,MAAM,QAAQ,GAAG,QAAQ,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,WAAlB,EAAR,GAA0C,OAAO,CAAC,KAAR,CAAc,CAAd,CAA3D;AACA,MAAM,QAAQ,GAAG,SAAS,CAAC,SAAV,CAAoB,QAArC;AACA,MAAM,cAAc,GAChB,CAAC,IAAI,CAAC,IAAL,CAAU,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxB,CAAD,EAA6B,IAAI,CAAC,IAAL,CAAU,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxB,CAA7B,CADJ;AAEA,MAAM,IAAI,GAAG,kBAAkB,EAA/B;AAEA,8BACS,QADT,qEAGQ,cAAc,CAAC,CAAD,CAHtB,eAG8B,cAAc,CAAC,CAAD,CAH5C,qCAIa,IAAI,CAAC,SAJlB,cAI+B,OAJ/B;AAOD;;AAED,SAAS,YAAT,CAAsB,SAAtB,EAA0C;AACxC,MAAM,OAAO,GAAG,SAAS,CAAC,IAA1B;AACA,MAAM,QAAQ,GAAG,QAAQ,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,WAAlB,EAAR,GAA0C,OAAO,CAAC,KAAR,CAAc,CAAd,CAA3D;;AAEA,MAAI,SAAS,CAAC,SAAV,CAAoB,SAAxB,EAAmC;AACjC;AACA,mCACU,QADV,oCAEM,iBAAiB,CAAC,SAAD,CAFvB;AAKD;;AAED,MAAM,QAAQ,GAAG,SAAS,CAAC,SAAV,CAAoB,QAArC;AACA,MAAM,KAAK,GAAG,QAAQ,CAAC,CAAD,CAAtB;AACA,MAAM,KAAK,GAAG,QAAQ,CAAC,CAAD,CAAtB;;AAEA,MAAI,KAAK,KAAK,CAAV,IAAe,KAAK,KAAK,CAA7B,EAAgC;AAC9B,mCACU,QADV,yDAE2B,OAF3B;AAKD;;AACD,MAAM,MAAM,GAAG,wBAAwB,CAAC,OAAD,CAAvC;;AACA,MAAI,KAAK,KAAK,CAAd,EAAiB;AACf,mCACU,QADV,uEAEyC,MAFzC,wBAE6D,KAF7D,gDAG2B,OAH3B;AAMD;;AACD,MAAI,KAAK,KAAK,CAAd,EAAiB;AACf,mCACU,QADV,kEAEoC,MAFpC,wBAEwD,KAFxD,qDAG2B,OAH3B;AAMD;;AACD,+BACU,QADV,uDAE2B,KAF3B,eAEqC,KAFrC,uBAEuD,MAFvD,4CAG2B,OAH3B;AAMD;;AAED,SAAS,kBAAT,CAA4B,SAA5B,EAAgD;AAC9C,MAAM,KAAK,GAAG,SAAS,CAAC,SAAV,CAAoB,YAAlC;AACA,MAAM,OAAO,GAAG,SAAS,CAAC,IAA1B;AACA,MAAM,QAAQ,GAAG,QAAQ,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,WAAlB,EAAR,GAA0C,OAAO,CAAC,KAAR,CAAc,CAAd,CAA3D;AACA,MAAM,QAAQ,GAAG,SAAS,CAAC,SAAV,CAAoB,QAArC;AAEA,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;AACA,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;AACA,MAAM,IAAI,GAAG,kBAAkB,EAA/B;;AACA,MAAI,QAAQ,IAAI,IAAZ,IAAoB,IAAI,CAAC,WAAL,CAAiB,KAAjB,EAAwB,QAAxB,CAAxB,EAA2D;AACzD,kCACS,QADT,sFAEiD,OAFjD,iBAE+D,OAF/D,oCAIa,IAAI,CAAC,SAJlB,cAI+B,OAJ/B;AAOD;;AAED,MAAM,cAAc,GAChB,CAAC,IAAI,CAAC,IAAL,CAAU,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxB,CAAD,EAA6B,IAAI,CAAC,IAAL,CAAU,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxB,CAA7B,CADJ;AAEA,MAAM,YAAY,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,CAAD,CAAL,GAAW,CAArB,CAArB;AAEA,8BACS,QADT,kEAE+B,YAF/B,eAEgD,cAAc,CAAC,CAAD,CAF9D,eAGI,cAAc,CAAC,CAAD,CAHlB,wCAIa,IAAI,CAAC,SAJlB,cAI+B,OAJ/B;AAOD;;AAED,SAAS,YAAT,CAAsB,SAAtB,EAA0C;AACxC,MAAM,KAAK,GAAG,SAAS,CAAC,SAAV,CAAoB,YAAlC;AACA,MAAM,OAAO,GAAG,SAAS,CAAC,IAA1B;AACA,MAAM,QAAQ,GAAG,QAAQ,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,WAAlB,EAAR,GAA0C,OAAO,CAAC,KAAR,CAAc,CAAd,CAA3D;AACA,MAAM,QAAQ,GAAG,SAAS,CAAC,SAAV,CAAoB,QAArC;;AAEA,MAAI,QAAQ,IAAI,IAAZ,IAAoB,IAAI,CAAC,WAAL,CAAiB,KAAjB,EAAwB,QAAxB,CAAxB,EAA2D;AACzD,QAAM,QAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;AACA,QAAM,QAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;AACA,iCACQ,QADR,oFAE+C,QAF/C,iBAE6D,QAF7D,8CAGyB,OAHzB;AAMD;;AAfuC,2BAiBX,IAAI,CAAC,YAAL,CAAkB,KAAlB,CAjBW;AAAA,MAiBjC,QAjBiC,sBAiBjC,QAjBiC;AAAA,MAiBvB,QAjBuB,sBAiBvB,QAjBuB;;AAkBxC,MAAM,aAAa,GAAG,QAAtB;;AACA,MAAI,aAAa,CAAC,MAAd,GAAuB,KAAK,CAAC,MAAjC,EAAyC;AACvC,QAAM,YAAY,GAAG,gBAAgB,CAAC,SAAD,EAAY,aAAZ,CAArC;AACA,QAAM,MAAM,GAAG,CAAC,KAAD,EAAQ,KAAR,CAAf;AACA,6BACI,oBAAoB,CAAC,YAAD,CADxB,2BAEU,QAFV,kDAGa,QAHb,cAGyB,iBAAiB,CAAC,MAAD,EAAS,QAAT,CAH1C;AAMD;;AAED,MAAI,SAAS,CAAC,SAAV,CAAoB,SAAxB,EAAmC;AACjC;AACA,mCACU,QADV,sFAEiD,KAAK,CAAC,CAAD,CAFtD,8BAGM,iBAAiB,CAAC,SAAD,CAHvB;AAMD;;AAED,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;AACA,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;AACA,MAAM,MAAM,GAAG,wBAAwB,CAAC,OAAD,CAAvC;;AACA,MAAI,OAAO,KAAK,CAAhB,EAAmB;AACjB;AACA,iCACQ,QADR,0EAEqC,MAFrC,qBAEsD,KAAK,CAAC,CAAD,CAF3D,kEAGwC,OAHxC,8CAIyB,OAJzB;AAOD;;AACD,MAAI,OAAO,KAAK,CAAhB,EAAmB;AACjB;AACA,iCACQ,QADR,0EAEqC,MAFrC,qBAEsD,KAAK,CAAC,CAAD,CAF3D,6DAGmC,OAHnC,mDAIyB,OAJzB;AAOD;;AAED,6BACQ,QADR,kIAGsB,KAAK,CAAC,CAAD,CAH3B,sBAG0C,MAH1C,yCAIyB,OAJzB,eAIqC,OAJrC,iDAKyB,OALzB;AAQD;;AAED,SAAS,kBAAT,CAA4B,SAA5B,EAAgD;AAC9C,MAAM,KAAK,GAAG,SAAS,CAAC,SAAV,CAAoB,YAAlC;AACA,MAAM,OAAO,GAAG,SAAS,CAAC,IAA1B;AACA,MAAM,QAAQ,GAAG,QAAQ,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,WAAlB,EAAR,GAA0C,OAAO,CAAC,KAAR,CAAc,CAAd,CAA3D;AACA,MAAM,QAAQ,GAAG,SAAS,CAAC,SAAV,CAAoB,QAArC;AACA,MAAM,cAAc,GAChB,CAAC,IAAI,CAAC,IAAL,CAAU,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxB,CAAD,EAA6B,IAAI,CAAC,IAAL,CAAU,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxB,CAA7B,CADJ;;AAGA,MAAI,KAAK,CAAC,CAAD,CAAL,KAAa,CAAjB,EAAoB;AAClB,QAAM,aAAa,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAtB;AACA,QAAM,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAjB;AACA,QAAM,YAAY,GAAG,gBAAgB,CAAC,SAAD,EAAY,aAAZ,CAArC;AACA,QAAM,MAAM,GAAG,CAAC,GAAD,EAAM,KAAN,EAAa,KAAb,CAAf;AACA,+BACM,0BAA0B,CAAC,YAAD,CADhC,4BAEW,QAFX,2DAGe,QAHf,cAG2B,iBAAiB,CAAC,MAAD,EAAS,QAAT,CAH5C;AAMD;;AAED,MAAM,OAAO,GAAG,cAAc,CAAC,CAAD,CAA9B;AACA,MAAM,OAAO,GAAG,cAAc,CAAC,CAAD,CAA9B;AAEA,MAAM,YAAY,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,CAAD,CAAL,GAAW,CAArB,CAArB;AACA,MAAM,aAAa,GAAG,YAAY,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,CAAD,CAAL,GAAW,CAArB,CAArC;AACA,MAAM,IAAI,GAAG,kBAAkB,EAA/B;AAEA,8BACS,QADT,mFAGQ,OAHR,eAGoB,OAHpB,eAGgC,aAHhC,eAGkD,YAHlD,2CAIa,IAAI,CAAC,SAJlB,cAI+B,OAJ/B;AAOD;;AAED,SAAS,YAAT,CAAsB,SAAtB,EAA0C;AACxC,MAAM,KAAK,GAAG,SAAS,CAAC,SAAV,CAAoB,YAAlC;AACA,MAAM,OAAO,GAAG,SAAS,CAAC,IAA1B;AACA,MAAM,QAAQ,GAAG,QAAQ,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,WAAlB,EAAR,GAA0C,OAAO,CAAC,KAAR,CAAc,CAAd,CAA3D;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,CAAD,CAAL,GAAW,KAAK,CAAC,CAAD,CAAhC;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,CAAD,CAArB;;AALwC,4BAOX,IAAI,CAAC,YAAL,CAAkB,KAAlB,CAPW;AAAA,MAOjC,QAPiC,uBAOjC,QAPiC;AAAA,MAOvB,QAPuB,uBAOvB,QAPuB;;AAQxC,MAAM,aAAa,GAAG,QAAtB;;AACA,MAAI,aAAa,CAAC,MAAd,GAAuB,KAAK,CAAC,MAAjC,EAAyC;AACvC,QAAM,YAAY,GAAG,gBAAgB,CAAC,SAAD,EAAY,aAAZ,CAArC;AACA,QAAM,MAAM,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,CAAf;AACA,+BACM,oBAAoB,CAAC,YAAD,CAD1B,6BAEY,QAFZ,+DAGe,QAHf,cAG2B,iBAAiB,CAAC,MAAD,EAAS,QAAT,CAH5C;AAMD;;AAED,MAAI,SAAS,CAAC,SAAV,CAAoB,SAAxB,EAAmC;AACjC;AACA,mCACU,QADV,mIAG6B,OAH7B,eAGyC,OAHzC,8BAIM,iBAAiB,CAAC,SAAD,CAJvB;AAOD;;AAED,MAAM,QAAQ,GAAG,SAAS,CAAC,SAAV,CAAoB,QAArC;AACA,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;AACA,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;AACA,MAAM,UAAU,GAAG,SAAS,CAAC,SAAV,CAAoB,UAAvC;;AACA,MAAI,OAAO,KAAK,OAAZ,IAAuB,UAAU,IAAI,IAAzC,EAA+C;AAC7C;AACA,qCACY,QADZ,oIAGgD,OAHhD,kGAKwB,OALxB,iBAKsC,OALtC,kDAM6B,OAN7B;AASD;;AAED,MAAI,OAAO,KAAK,OAAZ,IAAuB,UAAU,IAAI,IAAzC,EAA+C;AAC7C;AACA,iCACQ,QADR,0FAE0C,KAAK,CAAC,CAAD,CAF/C,0GAIiD,OAJjD,iBAI+D,OAJ/D,8CAKyB,OALzB;AAQD;;AAED,MAAM,MAAM,GAAG,wBAAwB,CAAC,OAAD,CAAvC;AACA,iCACY,QADZ,qJAG0B,OAH1B,sBAG6C,OAH7C,wBAGkE,MAHlE,6CAI6B,OAJ7B,eAIyC,OAJzC,qDAK6B,OAL7B;AAQD;;AAED,SAAS,kBAAT,CAA4B,SAA5B,EAAgD;AAC9C,MAAM,KAAK,GAAG,SAAS,CAAC,SAAV,CAAoB,YAAlC;AACA,MAAM,IAAI,GAAG,KAAK,CAAC,MAAnB;AACA,MAAM,OAAO,GAAG,SAAS,CAAC,IAA1B;AACA,MAAM,QAAQ,GAAG,QAAQ,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,WAAlB,EAAR,GAA0C,OAAO,CAAC,KAAR,CAAc,CAAd,CAA3D;AACA,MAAM,QAAQ,GAAG,SAAS,CAAC,SAAV,CAAoB,QAArC;AACA,MAAM,cAAc,GAChB,CAAC,IAAI,CAAC,IAAL,CAAU,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxB,CAAD,EAA6B,IAAI,CAAC,IAAL,CAAU,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxB,CAA7B,CADJ;AAEA,MAAM,OAAO,GAAG,cAAc,CAAC,CAAD,CAA9B;AACA,MAAM,OAAO,GAAG,cAAc,CAAC,CAAD,CAA9B;AAEA,MAAM,YAAY,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,IAAI,GAAG,CAAR,CAAL,GAAkB,CAA5B,CAArB;AACA,MAAI,aAAa,GAAG,YAAY,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,IAAI,GAAG,CAAR,CAAL,GAAkB,CAA5B,CAAnC;AACA,MAAI,MAAM,4BAAV;AACA,MAAI,KAAK,iBAAU,aAAV,4BAAyC,YAAzC,iBAAT;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,GAAG,CAA3B,EAA8B,CAAC,EAA/B,EAAmC;AACjC,IAAA,MAAM,GAAG,eAAQ,CAAR,UAAgB,MAAzB;AACA,IAAA,aAAa,IAAI,KAAK,CAAC,IAAI,GAAG,CAAP,GAAW,CAAZ,CAAtB;AACA,IAAA,KAAK,GAAG,WAAI,CAAJ,gBAAW,aAAX,WAAgC,KAAxC;AACD;;AACD,MAAM,IAAI,GAAG,kBAAkB,EAA/B;AACA,8BACS,QADT,cACqB,MADrB,oCAEkB,KAFlB,yCAGyB,OAHzB,gDAIgC,OAJhC,mEAKmD,OALnD,eAK+D,OAL/D,8BAMa,IAAI,CAAC,SANlB,cAM+B,OAN/B;AASD;;AAED,SAAS,YAAT,CAAsB,SAAtB,EAA0C;AACxC,MAAM,KAAK,GAAG,SAAS,CAAC,SAAV,CAAoB,YAAlC;AACA,MAAM,OAAO,GAAG,SAAS,CAAC,IAA1B;AACA,MAAM,QAAQ,GAAG,QAAQ,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,WAAlB,EAAR,GAA0C,OAAO,CAAC,KAAR,CAAc,CAAd,CAA3D;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,CAAD,CAArB;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,CAAD,CAAL,GAAW,OAA3B;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,CAAD,CAAL,GAAW,OAA3B;;AANwC,4BAQX,IAAI,CAAC,YAAL,CAAkB,KAAlB,CARW;AAAA,MAQjC,QARiC,uBAQjC,QARiC;AAAA,MAQvB,QARuB,uBAQvB,QARuB;;AASxC,MAAI,QAAQ,CAAC,MAAT,GAAkB,KAAK,CAAC,MAA5B,EAAoC;AAClC,QAAM,YAAY,GAAG,gBAAgB,CAAC,SAAD,EAAY,QAAZ,CAArC;AACA,QAAM,MAAM,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,EAAwB,QAAxB,CAAf;AACA,6BACI,oBAAoB,CAAC,YAAD,CADxB,2BAEU,QAFV,yEAGa,QAHb,cAGyB,iBAAiB,CAAC,MAAD,EAAS,QAAT,CAH1C;AAMD;;AAED,MAAI,SAAS,CAAC,SAAV,CAAoB,SAAxB,EAAmC;AACjC;AACA,mCACU,QADV,uJAG6B,OAH7B,eAGyC,OAHzC,eAGqD,OAHrD,8BAIM,iBAAiB,CAAC,SAAD,CAJvB;AAOD;;AAED,MAAM,UAAU,GAAG,SAAS,CAAC,SAAV,CAAoB,UAAvC;AACA,MAAM,QAAQ,GAAG,SAAS,CAAC,SAAV,CAAoB,QAArC;AACA,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;AACA,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;;AAEA,MAAI,OAAO,KAAK,OAAZ,IAAuB,UAAU,IAAI,IAAzC,EAA+C;AAC7C;AACA,mCACU,QADV,kLAKmB,OALnB,eAK+B,OAL/B,8FAOsB,OAPtB,iBAOoC,OAPpC,gDAQ2B,OAR3B;AAWD;;AACD,MAAI,OAAO,KAAK,OAAZ,IAAuB,UAAU,IAAI,IAAzC,EAA+C;AAC7C;AACA,mCACU,QADV,yIAG4B,KAAK,CAAC,CAAD,CAAL,GAAW,KAAK,CAAC,CAAD,CAH5C,eAGoD,KAAK,CAAC,CAAD,CAHzD,kIAMqB,OANrB,iBAMmC,OANnC,gDAO2B,OAP3B;AAUD;;AAED,MAAM,MAAM,GAAG,wBAAwB,CAAC,OAAD,CAAvC;AACA,+BACU,QADV,6JAGwB,OAHxB,sBAG2C,OAH3C,mCAIkB,OAJlB,oDAK2B,OAL3B,eAKuC,OALvC,uBAK2D,MAL3D,4CAM2B,OAN3B;AASD;;AAED,SAAS,YAAT,CAAsB,SAAtB,EAA0C;AACxC,MAAM,KAAK,GAAG,SAAS,CAAC,SAAV,CAAoB,YAAlC;AACA,MAAM,OAAO,GAAG,SAAS,CAAC,IAA1B;AACA,MAAM,QAAQ,GAAG,QAAQ,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,WAAlB,EAAR,GAA0C,OAAO,CAAC,KAAR,CAAc,CAAd,CAA3D;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,CAAD,CAArB;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,CAAD,CAAL,GAAW,OAA3B;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,CAAD,CAAL,GAAW,OAA3B;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,CAAD,CAAL,GAAW,OAA3B;;AAPwC,4BASX,IAAI,CAAC,YAAL,CAAkB,KAAlB,CATW;AAAA,MASjC,QATiC,uBASjC,QATiC;AAAA,MASvB,QATuB,uBASvB,QATuB;;AAUxC,MAAI,QAAQ,CAAC,MAAT,GAAkB,KAAK,CAAC,MAA5B,EAAoC;AAClC,QAAM,YAAY,GAAG,gBAAgB,CAAC,SAAD,EAAY,QAAZ,CAArC;AACA,QAAM,MAAM,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,EAAwB,QAAxB,EAAkC,QAAlC,CAAf;AACA,6BACI,oBAAoB,CAAC,YAAD,CADxB,2BAEU,QAFV,qFAGa,QAHb,cAGyB,iBAAiB,CAAC,MAAD,EAAS,QAAT,CAH1C;AAMD;;AAED,MAAI,SAAS,CAAC,SAAV,CAAoB,SAAxB,EAAmC;AACjC;AACA,mCACU,QADV,2JAIa,OAJb,eAIyB,OAJzB,eAIqC,OAJrC,eAIiD,OAJjD,8CAMM,iBAAiB,CAAC,SAAD,CANvB;AASD;;AAED,MAAM,UAAU,GAAG,SAAS,CAAC,SAAV,CAAoB,UAAvC;AACA,MAAM,QAAQ,GAAG,SAAS,CAAC,SAAV,CAAoB,QAArC;AACA,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;AACA,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;;AAEA,MAAI,OAAO,KAAK,OAAZ,IAAuB,UAAU,IAAI,IAAzC,EAA+C;AAC7C;AACA,mCACU,QADV,yLAI4B,OAJ5B,eAIwC,OAJxC,eAIoD,OAJpD,8FAMsB,OANtB,iBAMoC,OANpC,gDAO2B,OAP3B;AAUD;;AAED,MAAI,OAAO,KAAK,OAAZ,IAAuB,UAAU,IAAI,IAAzC,EAA+C;AAC7C;AACA,mCACU,QADV,0JAIa,KAAK,CAAC,CAAD,CAAL,GAAW,KAAK,CAAC,CAAD,CAAhB,GAAsB,KAAK,CAAC,CAAD,CAJxC,+BAKa,KAAK,CAAC,CAAD,CAAL,GAAW,KAAK,CAAC,CAAD,CAL7B,eAKqC,KAAK,CAAC,CAAD,CAL1C,yHAQqB,OARrB,iBAQmC,OARnC,gDAS2B,OAT3B;AAYD;;AAED,MAAM,MAAM,GAAG,wBAAwB,CAAC,OAAD,CAAvC;AACA,+BACU,QADV,yKAGwB,OAHxB,sBAG2C,OAH3C,wBAGgE,OAHhE,oCAImB,OAJnB,yBAIyC,MAJzC,2CAK2B,OAL3B,eAKuC,OALvC,mDAM2B,OAN3B;AASD;;AAED,SAAS,YAAT,CAAsB,SAAtB,EAA0C;AACxC,MAAM,KAAK,GAAG,SAAS,CAAC,SAAV,CAAoB,YAAlC;AACA,MAAM,OAAO,GAAG,SAAS,CAAC,IAA1B;AACA,MAAM,QAAQ,GAAG,QAAQ,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,WAAlB,EAAR,GAA0C,OAAO,CAAC,KAAR,CAAc,CAAd,CAA3D;;AAHwC,4BAKX,IAAI,CAAC,YAAL,CAAkB,KAAlB,CALW;AAAA,MAKjC,QALiC,uBAKjC,QALiC;AAAA,MAKvB,QALuB,uBAKvB,QALuB;;AAMxC,MAAI,QAAQ,CAAC,MAAT,GAAkB,KAAK,CAAC,MAA5B,EAAoC;AAClC,QAAM,YAAY,GAAG,gBAAgB,CAAC,SAAD,EAAY,QAAZ,CAArC;AACA,QAAM,MAAM,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,EAAwB,QAAxB,EAAkC,QAAlC,EAA4C,QAA5C,CAAf;AACA,6BACI,oBAAoB,CAAC,YAAD,CADxB,2BAEU,QAFV,sHAIa,QAJb,cAIyB,iBAAiB,CAAC,MAAD,EAAS,QAAT,CAJ1C;AAOD;;AAED,MAAM,OAAO,GAAG,KAAK,CAAC,CAAD,CAArB;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,CAAD,CAAL,GAAW,OAA3B;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,CAAD,CAAL,GAAW,OAA3B;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,CAAD,CAAL,GAAW,OAA3B;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,CAAD,CAAL,GAAW,OAA3B;;AAEA,MAAI,SAAS,CAAC,SAAV,CAAoB,SAAxB,EAAmC;AACjC;AACA,mCACU,QADV,8LAKa,OALb,eAKyB,OALzB,eAKqC,OALrC,eAKiD,OALjD,uFAQe,OARf,8BASM,iBAAiB,CAAC,SAAD,CATvB;AAYD;;AAED,MAAM,UAAU,GAAG,SAAS,CAAC,SAAV,CAAoB,UAAvC;AACA,MAAM,QAAQ,GAAG,SAAS,CAAC,SAAV,CAAoB,QAArC;AACA,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;AACA,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAxB;;AACA,MAAI,OAAO,KAAK,OAAZ,IAAuB,UAAU,IAAI,IAAzC,EAA+C;AAC7C;AACA,mCACU,QADV,2MAKa,OALb,eAKyB,OALzB,eAKqC,OALrC,eAKiD,OALjD,2HAQsB,OARtB,iBAQoC,OARpC,gDAS2B,OAT3B;AAYD;;AACD,MAAI,OAAO,KAAK,OAAZ,IAAuB,UAAU,IAAI,IAAzC,EAA+C;AAC7C;AACA,mCACU,QADV,+KAIa,KAAK,CAAC,CAAD,CAAL,GAAW,KAAK,CAAC,CAAD,CAAhB,GAAsB,KAAK,CAAC,CAAD,CAA3B,GAAiC,KAAK,CAAC,CAAD,CAJnD,+BAKa,KAAK,CAAC,CAAD,CAAL,GAAW,KAAK,CAAC,CAAD,CAAhB,GAAsB,KAAK,CAAC,CAAD,CALxC,+BAMa,KAAK,CAAC,CAAD,CAAL,GAAW,KAAK,CAAC,CAAD,CAN7B,+BAOa,KAAK,CAAC,CAAD,CAPlB,sIAUqB,OAVrB,iBAUmC,OAVnC,gDAW2B,OAX3B;AAcD;;AACD,MAAM,MAAM,GAAG,wBAAwB,CAAC,OAAD,CAAvC;AACA,+BACU,QADV,wMAIwB,OAJxB,sBAI2C,OAJ3C,wBAIgE,OAJhE,oCAKmB,OALnB,yBAKyC,OALzC,yBAK+D,MAL/D,2CAM2B,OAN3B,eAMuC,OANvC,mDAO2B,OAP3B;AAUD;;AAED,SAAS,iBAAT,CAA2B,SAA3B,EAA+C;AAC7C,MAAM,OAAO,GAAG,SAAS,CAAC,IAA1B;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,aAAL,CAAmB,SAAS,CAAC,SAAV,CAAoB,YAAvC,CAAf;;AAEA,MAAI,MAAM,GAAG,CAAb,EAAgB;AACd,4BAAiB,OAAjB;AACD;;AACD,6CACwB,MADxB,+DAGe,OAHf;AAOD;;AAED,SAAS,8BAAT,CACI,SADJ,EAC0B,YAD1B,EACiD;AAC/C,MAAM,OAAO,GAAG,SAAS,CAAC,IAA1B;AACA,MAAM,cAAc,GAAG,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,WAAlB,KAAkC,OAAO,CAAC,KAAR,CAAc,CAAd,CAAzD;AACA,MAAM,QAAQ,GAAG,QAAQ,cAAR,GAAyB,aAA1C;AACA,MAAM,MAAM,GAAG,SAAS,CAAC,SAAV,CAAoB,YAApB,CAAiC,MAAhD;AACA,MAAM,OAAO,GAAG,YAAY,CAAC,YAAb,CAA0B,MAA1C;AAEA,MAAM,aAAa,GAAG,gBAAgB,CAClC,SAAS,CAAC,SAAV,CAAoB,YADc,EACA,YAAY,CAAC,YADb,CAAtC;AAGA,MAAM,IAAI,GAAG,iBAAiB,CAAC,OAAD,CAA9B;AACA,MAAM,QAAQ,GAAG,OAAO,GAAG,MAA3B;AACA,MAAI,aAAJ;AACA,MAAM,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAf;;AAEA,MAAI,MAAM,KAAK,CAAf,EAAkB;AAChB,IAAA,aAAa,GAAG,EAAhB;AACD,GAFD,MAEO,IAAI,OAAO,GAAG,CAAV,IAAe,aAAa,CAAC,MAAd,IAAwB,CAA3C,EAA8C;AACnD,IAAA,aAAa,GAAG,aAAhB;AACD,GAFM,MAEA;AACL,IAAA,aAAa,GACT,aAAa,CAAC,GAAd,CAAkB,UAAA,CAAC;AAAA,8BAAc,MAAM,CAAC,CAAC,GAAG,QAAL,CAApB;AAAA,KAAnB,EACK,IADL,CACU,IADV,CADJ;AAGD;;AACD,MAAI,qBAAqB,GAAG,EAA5B;;AACA,MAAI,OAAO,GAAG,CAAV,IAAe,MAAM,GAAG,CAA5B,EAA+B;AAC7B,IAAA,qBAAqB,GAAG,QAAxB;AACD,GAFD,MAEO;AACL,IAAA,qBAAqB,GAAG,SAAS,CAAC,SAAV,CAAoB,YAApB,CACK,GADL,CACS,UAAC,CAAD,EAAI,CAAJ;AAAA,8BAAoB,MAAM,CAAC,CAAC,GAAG,QAAL,CAA1B;AAAA,KADT,EAEK,IAFL,CAEU,IAFV,CAAxB;AAGD;;AAED,MAAI,MAAM,wBAAV;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,aAAL,CAAmB,SAAS,CAAC,SAAV,CAAoB,YAAvC,CAAf;AACA,MAAM,aAAa,GAAG,MAAM,KAAK,CAAjC;AACA,MAAM,OAAO,GAAG,IAAI,CAAC,aAAL,CAAmB,YAAY,CAAC,YAAhC,CAAhB;AACA,MAAM,cAAc,GAAG,OAAO,KAAK,CAAnC;;AAEA,MAAI,MAAM,KAAK,CAAX,IAAgB,CAAC,aAAjB,IAAkC,CAAC,cAAvC,EAAuD;AACrD,IAAA,MAAM,+DAAN;AAGD,GAJD,MAIO,IAAI,aAAa,IAAI,CAAC,cAAtB,EAAsC;AAC3C,QAAI,OAAO,KAAK,CAAhB,EAAmB;AACjB,MAAA,MAAM,yEAAN;AAGD,KAJD,MAIO;AACL,MAAA,MAAM,kDAAN;AAGD;AACF,GAVM,MAUA,IAAI,aAAa,CAAC,MAAlB,EAA0B;AAC/B,QAAM,IAAI,GAAG,MAAM,GAAG,CAAtB;AACA,QAAM,IAAI,GAAG,MAAM,GAAG,CAAtB;;AAEA,QAAI,aAAa,CAAC,OAAd,CAAsB,IAAtB,IAA8B,CAAC,CAA/B,IAAoC,aAAa,CAAC,OAAd,CAAsB,IAAtB,IAA8B,CAAC,CAAvE,EAA0E;AACxE,MAAA,MAAM,gCAAN;AACD,KAFD,MAEO,IAAI,aAAa,CAAC,OAAd,CAAsB,IAAtB,IAA8B,CAAC,CAAnC,EAAsC;AAC3C,MAAA,MAAM,GAAG,+EAAT;AAED,KAHM,MAGA,IAAI,aAAa,CAAC,OAAd,CAAsB,IAAtB,IAA8B,CAAC,CAAnC,EAAsC;AAC3C,MAAA,MAAM,iDAAN;AACD;AACF;;AAED,8BACS,QADT,yBAEM,IAFN,iDAGM,aAHN,2CAI4B,cAJ5B,cAI8C,qBAJ9C,uBAKM,MALN;AAQD;;AAED,SAAS,wBAAT,CACI,SADJ,EAC0B,YAD1B,EACiD;AAC/C,MAAM,OAAO,GAAG,SAAS,CAAC,IAA1B;AACA,MAAM,cAAc,GAAG,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,WAAlB,KAAkC,OAAO,CAAC,KAAR,CAAc,CAAd,CAAzD;AACA,MAAM,QAAQ,GAAG,QAAQ,cAAR,GAAyB,aAA1C;AACA,MAAM,WAAW,GAAG,YAAY,CAAC,QAAjC;AACA,MAAM,UAAU,GAAG,SAAS,CAAC,SAAV,CAAoB,QAAvC;AACA,MAAM,MAAM,GAAG,SAAS,CAAC,SAAV,CAAoB,YAApB,CAAiC,MAAhD;AACA,MAAM,OAAO,GAAG,YAAY,CAAC,YAAb,CAA0B,MAA1C;;AAEA,MAAI,CAAC,SAAS,CAAC,SAAV,CAAoB,SAArB,IAAkC,MAAM,KAAK,OAA7C,IACA,SAAS,CAAC,SAAV,CAAoB,UAApB,IAAkC,IADlC,IAEA,IAAI,CAAC,WAAL,CAAiB,UAAjB,EAA6B,WAA7B,CAFJ,EAE+C;AAC7C,mCACU,QADV,gDAE2B,OAF3B;AAKD;;AAED,MAAM,IAAI,GAAG,iBAAiB,CAAC,OAAD,CAA9B;AACA,MAAM,aAAa,GAAG,gBAAgB,CAClC,SAAS,CAAC,SAAV,CAAoB,YADc,EACA,YAAY,CAAC,YADb,CAAtC;AAEA,MAAM,QAAQ,GAAG,OAAO,GAAG,MAA3B;AACA,MAAI,aAAJ;AACA,MAAM,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAf;;AAEA,MAAI,MAAM,KAAK,CAAf,EAAkB;AAChB,IAAA,aAAa,GAAG,EAAhB;AACD,GAFD,MAEO,IAAI,OAAO,GAAG,CAAV,IAAe,aAAa,CAAC,MAAd,IAAwB,CAA3C,EAA8C;AACnD,IAAA,aAAa,GAAG,aAAhB;AACD,GAFM,MAEA;AACL,IAAA,aAAa,GACT,aAAa,CAAC,GAAd,CAAkB,UAAA,CAAC;AAAA,8BAAc,MAAM,CAAC,CAAC,GAAG,QAAL,CAApB;AAAA,KAAnB,EACK,IADL,CACU,IADV,CADJ;AAGD;;AACD,MAAI,qBAAqB,GAAG,EAA5B;;AACA,MAAI,OAAO,GAAG,CAAV,IAAe,MAAM,GAAG,CAA5B,EAA+B;AAC7B,IAAA,qBAAqB,GAAG,QAAxB;AACD,GAFD,MAEO;AACL,IAAA,qBAAqB,GAAG,SAAS,CAAC,SAAV,CAAoB,YAApB,CACK,GADL,CACS,UAAC,CAAD,EAAI,CAAJ;AAAA,8BAAoB,MAAM,CAAC,CAAC,GAAG,QAAL,CAA1B;AAAA,KADT,EAEK,IAFL,CAEU,IAFV,CAAxB;AAGD;;AAED,+BACU,QADV,yBAEM,IAFN,iDAGM,aAHN,+BAIgB,cAJhB,cAIkC,qBAJlC;AAOD;;AAED,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAAwC;AAC5C,MAAI,IAAI,IAAI,CAAZ,EAAe;AACb,WAAO,KAAP;AACD,GAFD,MAEO,IAAI,IAAI,KAAK,CAAb,EAAgB;AACrB,WAAO,OAAP;AACD,GAFM,MAEA,IAAI,IAAI,KAAK,CAAb,EAAgB;AACrB,WAAO,OAAP;AACD,GAFM,MAEA,IAAI,IAAI,KAAK,CAAb,EAAgB;AACrB,WAAO,OAAP;AACD,GAFM,MAEA,IAAI,IAAI,KAAK,CAAb,EAAgB;AACrB,WAAO,OAAP;AACD,GAFM,MAEA,IAAI,IAAI,KAAK,CAAb,EAAgB;AACrB,WAAO,OAAP;AACD,GAFM,MAEA;AACL,UAAM,KAAK,wBAAiB,IAAjB,2BAAX;AACD;AACF;AAED;;AACA,SAAS,gBAAT,CACI,MADJ,EACuB,aADvB,EAC8C;AAC5C;AACA,MAAM,YAAY,GAAc,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,SAAL,CAAe,MAAf,CAAX,CAAhC;AACA,EAAA,YAAY,CAAC,SAAb,CAAuB,YAAvB,GAAsC,aAAtC;AACA,SAAO,YAAP;AACD;;AAED,SAAS,iBAAT,CAA2B,MAA3B,EAA6C,QAA7C,EAA+D;AAC7D,SAAO,QAAQ,CAAC,GAAT,CAAa,UAAA,CAAC;AAAA,WAAI,MAAM,CAAC,CAAD,CAAV;AAAA,GAAd,EAA6B,IAA7B,CAAkC,IAAlC,CAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nconst { getBroadcastDims } = backend_util;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, userCode, usesPackedTextures) {\n    const prefixSnippets = [];\n    inputsInfo.forEach(x => {\n        const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n        // Snippet when we decided to upload the values as uniform.\n        if (x.shapeInfo.isUniform) {\n            prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n        }\n        else {\n            prefixSnippets.push(`uniform sampler2D ${x.name};`);\n            prefixSnippets.push(`uniform int offset${x.name};`);\n        }\n    });\n    const inputPrefixSnippet = prefixSnippets.join('\\n');\n    const inputSamplingSnippet = inputsInfo\n        .map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures))\n        .join('\\n');\n    const outTexShape = outputShape.texShape;\n    const glsl = getGlslDifferences();\n    const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n    let outputSamplingSnippet;\n    let floatTextureSetOutputSnippet;\n    let shaderPrefix = getShaderPrefix(glsl);\n    if (outputShape.isPacked) {\n        outputSamplingSnippet =\n            getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n        floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n    }\n    else {\n        outputSamplingSnippet =\n            getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n        floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n    }\n    if (usesPackedTextures) {\n        shaderPrefix += SHADER_PACKED_PREFIX;\n    }\n    const source = [\n        shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n        inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode\n    ].join('\\n');\n    return source;\n}\nfunction getSamplerFromInInfo(inInfo) {\n    const shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getSamplerScalar(inInfo);\n        case 1:\n            return getSampler1D(inInfo);\n        case 2:\n            return getSampler2D(inInfo);\n        case 3:\n            return getSampler3D(inInfo);\n        case 4:\n            return getSampler4D(inInfo);\n        case 5:\n            return getSampler5D(inInfo);\n        case 6:\n            return getSampler6D(inInfo);\n        default:\n            throw new Error(`${shape.length}-D input sampling` +\n                ` is not yet supported`);\n    }\n}\nfunction getPackedSamplerFromInInfo(inInfo) {\n    const shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getPackedSamplerScalar(inInfo);\n        case 1:\n            return getPackedSampler1D(inInfo);\n        case 2:\n            return getPackedSampler2D(inInfo);\n        case 3:\n            return getPackedSampler3D(inInfo);\n        default:\n            return getPackedSamplerND(inInfo);\n    }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false) {\n    let res = '';\n    if (usesPackedTextures) {\n        res += getPackedSamplerFromInInfo(inInfo);\n    }\n    else {\n        res += getSamplerFromInInfo(inInfo);\n    }\n    const inShape = inInfo.shapeInfo.logicalShape;\n    const outShape = outShapeInfo.logicalShape;\n    if (inShape.length <= outShape.length) {\n        if (usesPackedTextures) {\n            res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n        }\n        else {\n            res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n        }\n    }\n    return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutputPacked1DCoords(outShape, outTexShape);\n        case 2:\n            return getOutputPacked2DCoords(outShape, outTexShape);\n        case 3:\n            return getOutputPacked3DCoords(outShape, outTexShape);\n        default:\n            return getOutputPackedNDCoords(outShape, outTexShape);\n    }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutput1DCoords(outShape, outTexShape);\n        case 2:\n            return getOutput2DCoords(outShape, outTexShape);\n        case 3:\n            return getOutput3DCoords(outShape, outTexShape);\n        case 4:\n            return getOutput4DCoords(outShape, outTexShape);\n        case 5:\n            return getOutput5DCoords(outShape, outTexShape);\n        case 6:\n            return getOutput6DCoords(outShape, outTexShape);\n        default:\n            throw new Error(`${outShape.length}-D output sampling is not yet supported`);\n    }\n}\nfunction getFloatTextureSampleSnippet(glsl) {\n    return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\nfunction getFloatTextureSetRSnippet(glsl) {\n    return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\nfunction getFloatTextureSetRGBASnippet(glsl) {\n    return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\nfunction getShaderPrefix(glsl) {\n    const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n    return SHADER_PREFIX;\n}\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\nfunction getOutputScalarCoords() {\n    return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\nfunction getOutputPacked1DCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (packedTexShape[0] === 1) {\n        return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n    }\n    if (packedTexShape[1] === 1) {\n        return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n    }\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\nfunction getOutput1DCoords(shape, texShape) {\n    if (texShape[0] === 1) {\n        return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n    }\n    if (texShape[1] === 1) {\n        return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n    }\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\nfunction getOutputPacked3DCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\nfunction getOutput3DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\nfunction getOutputPackedNDCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = ``;\n    let coords = 'b, r, c';\n    for (let b = 2; b < shape.length - 1; b++) {\n        texelsInBatchN *= shape[shape.length - b - 1];\n        batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n        coords = `b${b}, ` + coords;\n    }\n    return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\nfunction getOutput4DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\nfunction getOutput5DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n    return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\nfunction getOutput6DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n    return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\nfunction getOutputPacked2DCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (util.arraysEqual(shape, texShape)) {\n        return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      }\n    `;\n    }\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getOutput2DCoords(shape, texShape) {\n    if (util.arraysEqual(shape, texShape)) {\n        return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n    }\n    if (shape[1] === 1) {\n        return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    if (shape[0] === 1) {\n        return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getFlatOffsetUniformName(texName) {\n    return `offset${texName}`;\n}\nfunction getPackedSamplerScalar(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\nfunction getSamplerScalar(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        return `float ${funcName}() {return ${texName};}`;\n    }\n    const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n    if (texNumR === 1 && texNumC === 1) {\n        return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n    }\n    const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler1D(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler1D(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texShape = inputInfo.shapeInfo.texShape;\n    const tNumR = texShape[0];\n    const tNumC = texShape[1];\n    if (tNumC === 1 && tNumR === 1) {\n        return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (tNumC === 1) {\n        return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (tNumR === 1) {\n        return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler2D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const glsl = getGlslDifferences();\n    if (texShape != null && util.arraysEqual(shape, texShape)) {\n        return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler2D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    if (texShape != null && util.arraysEqual(shape, texShape)) {\n        const texNumR = texShape[0];\n        const texNumC = texShape[1];\n        return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['row', 'col'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const offset = getFlatOffsetUniformName(texName);\n    if (texNumC === 1) {\n        // index is used directly as physical (no risk of float16 overflow).\n        return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    if (texNumR === 1) {\n        // index is used directly as physical (no risk of float16 overflow).\n        return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\nfunction getPackedSampler3D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (shape[0] === 1) {\n        const squeezedShape = shape.slice(1);\n        const keptDims = [1, 2];\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['b', 'row', 'col'];\n        return `\n        ${getPackedSamplerFromInInfo(newInputInfo)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler3D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['row', 'col', 'depth'];\n        return `\n        ${getSamplerFromInInfo(newInputInfo)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n    }\n    if (texNumC === stride1 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\nfunction getPackedSamplerND(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const rank = shape.length;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = `int b, int row, int col`;\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n        params = `int b${b}, ` + params;\n        texelsInBatch *= shape[rank - b - 1];\n        index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler4D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride2 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler5D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride3 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler6D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride4 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getUniformSampler(inputInfo) {\n    const texName = inputInfo.name;\n    const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    if (inSize < 2) {\n        return `return ${texName};`;\n    }\n    return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n    const texName = inputInfo.name;\n    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    const inRank = inputInfo.shapeInfo.logicalShape.length;\n    const outRank = outShapeInfo.logicalShape.length;\n    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n                .join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map((s, i) => `coords.${fields[i + rankDiff]}`)\n            .join(', ');\n    }\n    let output = `return outputValue;`;\n    const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    const isInputScalar = inSize === 1;\n    const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n    const isOutputScalar = outSize === 1;\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n        output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n    }\n    else if (isInputScalar && !isOutputScalar) {\n        if (outRank === 1) {\n            output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n        }\n        else {\n            output = `\n        return vec4(outputValue.x);\n      `;\n        }\n    }\n    else if (broadcastDims.length) {\n        const rows = inRank - 2;\n        const cols = inRank - 1;\n        if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n            output = `return vec4(outputValue.x);`;\n        }\n        else if (broadcastDims.indexOf(rows) > -1) {\n            output = `return vec4(outputValue.x, outputValue.y, ` +\n                `outputValue.x, outputValue.y);`;\n        }\n        else if (broadcastDims.indexOf(cols) > -1) {\n            output = `return vec4(outputValue.xx, outputValue.zz);`;\n        }\n    }\n    return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n    const texName = inputInfo.name;\n    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    const outTexShape = outShapeInfo.texShape;\n    const inTexShape = inputInfo.shapeInfo.texShape;\n    const inRank = inputInfo.shapeInfo.logicalShape.length;\n    const outRank = outShapeInfo.logicalShape.length;\n    if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n        inputInfo.shapeInfo.flatOffset == null &&\n        util.arraysEqual(inTexShape, outTexShape)) {\n        return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n    }\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n                .join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map((s, i) => `coords.${fields[i + rankDiff]}`)\n            .join(', ');\n    }\n    return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\nexport function getCoordsDataType(rank) {\n    if (rank <= 1) {\n        return 'int';\n    }\n    else if (rank === 2) {\n        return 'ivec2';\n    }\n    else if (rank === 3) {\n        return 'ivec3';\n    }\n    else if (rank === 4) {\n        return 'ivec4';\n    }\n    else if (rank === 5) {\n        return 'ivec5';\n    }\n    else if (rank === 6) {\n        return 'ivec6';\n    }\n    else {\n        throw Error(`GPU for rank ${rank} is not yet supported`);\n    }\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nfunction squeezeInputInfo(inInfo, squeezedShape) {\n    // Deep copy.\n    const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n    newInputInfo.shapeInfo.logicalShape = squeezedShape;\n    return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n    return keptDims.map(d => params[d]).join(', ');\n}\n//# sourceMappingURL=shader_compiler.js.map"]},"metadata":{},"sourceType":"module"}