{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nexport class StringIterator extends LazyIterator {\n  /**\n   * Splits a string stream on a given separator.\n   *\n   * It is assumed that the incoming chunk boundaries have no semantic meaning,\n   * so conceptually the incoming stream is treated simply as the concatenation\n   * of its elements.\n   *\n   * The outgoing stream provides chunks corresponding to the results of the\n   * standard string split() operation (even if such a chunk spanned incoming\n   * chunks).  The separators are not included.\n   *\n   * A typical usage is to split a text file (represented as a stream with\n   * arbitrary chunk boundaries) into lines.\n   *\n   * @param upstream A readable stream of strings that can be treated as\n   *   concatenated.\n   * @param separator A character to split on.\n   */\n  split(separator) {\n    return new SplitIterator(this, separator);\n  }\n\n} // ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\n\nclass SplitIterator extends StringIterator {\n  constructor(upstream, separator) {\n    super();\n    this.upstream = upstream;\n    this.impl = new SplitIteratorImpl(upstream, separator);\n  }\n\n  summary() {\n    return this.impl.summary();\n  }\n\n  async next() {\n    return this.impl.next();\n  }\n\n}\n\nclass SplitIteratorImpl extends OneToManyIterator {\n  constructor(upstream, separator) {\n    super();\n    this.upstream = upstream;\n    this.separator = separator; // A partial string at the end of an upstream chunk\n\n    this.carryover = '';\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Split('${this.separator}')`;\n  }\n\n  async pump() {\n    const chunkResult = await this.upstream.next();\n\n    if (chunkResult.done) {\n      if (this.carryover === '') {\n        return false;\n      } // Pretend that the pump succeeded in order to emit the small last batch.\n      // The next pump() call will actually fail.\n\n\n      this.outputQueue.push(this.carryover);\n      this.carryover = '';\n      return true;\n    }\n\n    const lines = chunkResult.value.split(this.separator); // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n    // Thus the carryover may be '' if the separator falls on a chunk\n    // boundary; this produces the correct result.\n\n    lines[0] = this.carryover + lines[0];\n\n    for (const line of lines.slice(0, -1)) {\n      this.outputQueue.push(line);\n    }\n\n    this.carryover = lines[lines.length - 1];\n    return true;\n  }\n\n}","map":{"version":3,"sources":["../../src/iterators/string_iterator.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,YAAR,EAAsB,iBAAtB,QAA8C,iBAA9C;AAEA,OAAM,MAAgB,cAAhB,SAAuC,YAAvC,CAA2D;AAC/D;;;;;;;;;;;;;;;;;AAiBG;AACH,EAAA,KAAK,CAAC,SAAD,EAAkB;AACrB,WAAO,IAAI,aAAJ,CAAkB,IAAlB,EAAwB,SAAxB,CAAP;AACD;;AArB8D,C,CAwBjE;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,MAAM,aAAN,SAA4B,cAA5B,CAA0C;AAGxC,EAAA,WAAA,CAAsB,QAAtB,EAAsD,SAAtD,EAAuE;AACrE;AADoB,SAAA,QAAA,GAAA,QAAA;AAEpB,SAAK,IAAL,GAAY,IAAI,iBAAJ,CAAsB,QAAtB,EAAgC,SAAhC,CAAZ;AACD;;AAED,EAAA,OAAO,GAAA;AACL,WAAO,KAAK,IAAL,CAAU,OAAV,EAAP;AACD;;AAES,QAAJ,IAAI,GAAA;AACR,WAAO,KAAK,IAAL,CAAU,IAAV,EAAP;AACD;;AAduC;;AAiB1C,MAAM,iBAAN,SAAgC,iBAAhC,CAAyD;AAIvD,EAAA,WAAA,CACc,QADd,EACwD,SADxD,EACyE;AACvE;AADY,SAAA,QAAA,GAAA,QAAA;AAA0C,SAAA,SAAA,GAAA,SAAA,CAAiB,CAJzE;;AACA,SAAA,SAAA,GAAY,EAAZ;AAKC;;AAED,EAAA,OAAO,GAAA;AACL,WAAO,GAAG,KAAK,QAAL,CAAc,OAAd,EAAuB,cAAc,KAAK,SAAS,IAA7D;AACD;;AAES,QAAJ,IAAI,GAAA;AACR,UAAM,WAAW,GAAG,MAAM,KAAK,QAAL,CAAc,IAAd,EAA1B;;AACA,QAAI,WAAW,CAAC,IAAhB,EAAsB;AACpB,UAAI,KAAK,SAAL,KAAmB,EAAvB,EAA2B;AACzB,eAAO,KAAP;AACD,OAHmB,CAKpB;AACA;;;AACA,WAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAK,SAA3B;AACA,WAAK,SAAL,GAAiB,EAAjB;AACA,aAAO,IAAP;AACD;;AACD,UAAM,KAAK,GAAG,WAAW,CAAC,KAAZ,CAAkB,KAAlB,CAAwB,KAAK,SAA7B,CAAd,CAbQ,CAcR;AACA;AACA;;AAEA,IAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAK,SAAL,GAAiB,KAAK,CAAC,CAAD,CAAjC;;AACA,SAAK,MAAM,IAAX,IAAmB,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAnB,EAAuC;AACrC,WAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB;AACD;;AACD,SAAK,SAAL,GAAiB,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAtB;AAEA,WAAO,IAAP;AACD;;AAtCsD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nexport class StringIterator extends LazyIterator {\n    /**\n     * Splits a string stream on a given separator.\n     *\n     * It is assumed that the incoming chunk boundaries have no semantic meaning,\n     * so conceptually the incoming stream is treated simply as the concatenation\n     * of its elements.\n     *\n     * The outgoing stream provides chunks corresponding to the results of the\n     * standard string split() operation (even if such a chunk spanned incoming\n     * chunks).  The separators are not included.\n     *\n     * A typical usage is to split a text file (represented as a stream with\n     * arbitrary chunk boundaries) into lines.\n     *\n     * @param upstream A readable stream of strings that can be treated as\n     *   concatenated.\n     * @param separator A character to split on.\n     */\n    split(separator) {\n        return new SplitIterator(this, separator);\n    }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nclass SplitIterator extends StringIterator {\n    constructor(upstream, separator) {\n        super();\n        this.upstream = upstream;\n        this.impl = new SplitIteratorImpl(upstream, separator);\n    }\n    summary() {\n        return this.impl.summary();\n    }\n    async next() {\n        return this.impl.next();\n    }\n}\nclass SplitIteratorImpl extends OneToManyIterator {\n    constructor(upstream, separator) {\n        super();\n        this.upstream = upstream;\n        this.separator = separator;\n        // A partial string at the end of an upstream chunk\n        this.carryover = '';\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Split('${this.separator}')`;\n    }\n    async pump() {\n        const chunkResult = await this.upstream.next();\n        if (chunkResult.done) {\n            if (this.carryover === '') {\n                return false;\n            }\n            // Pretend that the pump succeeded in order to emit the small last batch.\n            // The next pump() call will actually fail.\n            this.outputQueue.push(this.carryover);\n            this.carryover = '';\n            return true;\n        }\n        const lines = chunkResult.value.split(this.separator);\n        // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n        // Thus the carryover may be '' if the separator falls on a chunk\n        // boundary; this produces the correct result.\n        lines[0] = this.carryover + lines[0];\n        for (const line of lines.slice(0, -1)) {\n            this.outputQueue.push(line);\n        }\n        this.carryover = lines[lines.length - 1];\n        return true;\n    }\n}\n//# sourceMappingURL=string_iterator.js.map"]},"metadata":{},"sourceType":"module"}