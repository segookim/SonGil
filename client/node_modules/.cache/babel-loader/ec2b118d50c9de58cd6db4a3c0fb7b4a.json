{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\n\nexport function complex(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var real = inputs.real,\n      imag = inputs.imag;\n  var complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  var complex = backend.texData.get(complexInfo.dataId);\n  var realTensorInfo = identity({\n    inputs: {\n      x: real\n    },\n    backend: backend\n  });\n  var imagTensorInfo = identity({\n    inputs: {\n      x: imag\n    },\n    backend: backend\n  });\n  complex.complexTensorInfos = {\n    real: realTensorInfo,\n    imag: imagTensorInfo\n  };\n  return complexInfo;\n}\nexport var complexConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex\n};","map":{"version":3,"sources":["../../src/kernels/Complex.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,OAAR,QAA2E,uBAA3E;AAGA,SAAQ,QAAR,QAAuB,YAAvB;AAEA;;;;;;;;AAQG;;AACH,OAAM,SAAU,OAAV,CACF,IADE,EACsD;AAAA,MACnD,MADmD,GAChC,IADgC,CACnD,MADmD;AAAA,MAC3C,OAD2C,GAChC,IADgC,CAC3C,OAD2C;AAAA,MAEnD,IAFmD,GAErC,MAFqC,CAEnD,IAFmD;AAAA,MAE7C,IAF6C,GAErC,MAFqC,CAE7C,IAF6C;AAI1D,MAAM,WAAW,GAAG,OAAO,CAAC,cAAR,CAAuB,IAAI,CAAC,KAA5B,EAAmC,WAAnC,CAApB;AACA,MAAM,OAAO,GAAG,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAoB,WAAW,CAAC,MAAhC,CAAhB;AAEA,MAAM,cAAc,GAAG,QAAQ,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAoB,IAAA,OAAO,EAAP;AAApB,GAAD,CAA/B;AAEA,MAAM,cAAc,GAAG,QAAQ,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAoB,IAAA,OAAO,EAAP;AAApB,GAAD,CAA/B;AAEA,EAAA,OAAO,CAAC,kBAAR,GAA6B;AAAC,IAAA,IAAI,EAAE,cAAP;AAAuB,IAAA,IAAI,EAAE;AAA7B,GAA7B;AAEA,SAAO,WAAP;AACD;AAED,OAAO,IAAM,aAAa,GAAiB;AACzC,EAAA,UAAU,EAAE,OAD6B;AAEzC,EAAA,WAAW,EAAE,OAF4B;AAGzC,EAAA,UAAU,EAAE;AAH6B,CAApC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(args) {\n    const { inputs, backend } = args;\n    const { real, imag } = inputs;\n    const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n    const complex = backend.texData.get(complexInfo.dataId);\n    const realTensorInfo = identity({ inputs: { x: real }, backend });\n    const imagTensorInfo = identity({ inputs: { x: imag }, backend });\n    complex.complexTensorInfos = { real: realTensorInfo, imag: imagTensorInfo };\n    return complexInfo;\n}\nexport const complexConfig = {\n    kernelName: Complex,\n    backendName: 'webgl',\n    kernelFunc: complex\n};\n//# sourceMappingURL=Complex.js.map"]},"metadata":{},"sourceType":"module"}