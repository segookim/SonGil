{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Noise Layers.\n */\nimport { greaterEqual, randomUniform, serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { Layer } from '../engine/topology';\nimport { getExactlyOneTensor } from '../utils/types_utils';\nexport class GaussianNoise extends Layer {\n  constructor(args) {\n    super(args);\n    this.supportsMasking = true;\n    this.stddev = args.stddev;\n  }\n\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      stddev: this.stddev\n    };\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n\n      const noised = () => K.randomNormal(input.shape, 0, this.stddev).add(input);\n\n      const output = K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n      return output;\n    });\n  }\n\n}\n/** @nocollapse */\n\nGaussianNoise.className = 'GaussianNoise';\nserialization.registerClass(GaussianNoise);\nexport class GaussianDropout extends Layer {\n  constructor(args) {\n    super(args);\n    this.supportsMasking = true;\n    this.rate = args.rate;\n  }\n\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      rate: this.rate\n    };\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n\n      if (this.rate > 0 && this.rate < 1) {\n        const noised = () => {\n          const stddev = Math.sqrt(this.rate / (1 - this.rate));\n          return input.mul(K.randomNormal(input.shape, 1, stddev));\n        };\n\n        return K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n      }\n\n      return input;\n    });\n  }\n\n}\n/** @nocollapse */\n\nGaussianDropout.className = 'GaussianDropout';\nserialization.registerClass(GaussianDropout);\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n */\n\nexport class AlphaDropout extends Layer {\n  constructor(args) {\n    super(args);\n    this.supportsMasking = true;\n    this.rate = args.rate;\n    this.noiseShape = args.noiseShape;\n  }\n\n  _getNoiseShape(inputs) {\n    return this.noiseShape || getExactlyOneTensor(inputs).shape;\n  }\n\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      rate: this.rate\n    };\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.rate < 1 && this.rate > 0) {\n        const noiseShape = this._getNoiseShape(inputs);\n\n        const droppedInputs = () => {\n          const input = getExactlyOneTensor(inputs);\n          const alpha = 1.6732632423543772848170429916717;\n          const scale = 1.0507009873554804934193349852946;\n          const alphaP = -alpha * scale;\n          let keptIdx = greaterEqual(randomUniform(noiseShape), this.rate);\n          keptIdx = K.cast(keptIdx, 'float32'); // get default dtype.\n          // Get affine transformation params.\n\n          const a = ((1 - this.rate) * (1 + this.rate * alphaP ** 2)) ** -0.5;\n          const b = -a * alphaP * this.rate; // Apply mask.\n\n          const x = input.mul(keptIdx).add(keptIdx.add(-1).mul(alphaP));\n          return x.mul(a).add(b);\n        };\n\n        return K.inTrainPhase(droppedInputs, () => getExactlyOneTensor(inputs), kwargs['training'] || false);\n      }\n\n      return inputs;\n    });\n  }\n\n}\n/** @nocollapse */\n\nAlphaDropout.className = 'AlphaDropout';\nserialization.registerClass(AlphaDropout);","map":{"version":3,"sources":["../../src/layers/noise.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Noise Layers.\n */\nimport { greaterEqual, randomUniform, serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { Layer } from '../engine/topology';\nimport { getExactlyOneTensor } from '../utils/types_utils';\nexport class GaussianNoise extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.stddev = args.stddev;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { stddev: this.stddev };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            const noised = () => K.randomNormal(input.shape, 0, this.stddev).add(input);\n            const output = K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nGaussianNoise.className = 'GaussianNoise';\nserialization.registerClass(GaussianNoise);\nexport class GaussianDropout extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.rate = args.rate;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { rate: this.rate };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            if (this.rate > 0 && this.rate < 1) {\n                const noised = () => {\n                    const stddev = Math.sqrt(this.rate / (1 - this.rate));\n                    return input.mul(K.randomNormal(input.shape, 1, stddev));\n                };\n                return K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n            }\n            return input;\n        });\n    }\n}\n/** @nocollapse */\nGaussianDropout.className = 'GaussianDropout';\nserialization.registerClass(GaussianDropout);\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n */\nexport class AlphaDropout extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.rate = args.rate;\n        this.noiseShape = args.noiseShape;\n    }\n    _getNoiseShape(inputs) {\n        return this.noiseShape || getExactlyOneTensor(inputs).shape;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { rate: this.rate };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            if (this.rate < 1 && this.rate > 0) {\n                const noiseShape = this._getNoiseShape(inputs);\n                const droppedInputs = () => {\n                    const input = getExactlyOneTensor(inputs);\n                    const alpha = 1.6732632423543772848170429916717;\n                    const scale = 1.0507009873554804934193349852946;\n                    const alphaP = -alpha * scale;\n                    let keptIdx = greaterEqual(randomUniform(noiseShape), this.rate);\n                    keptIdx = K.cast(keptIdx, 'float32'); // get default dtype.\n                    // Get affine transformation params.\n                    const a = ((1 - this.rate) * (1 + this.rate * alphaP ** 2)) ** -0.5;\n                    const b = -a * alphaP * this.rate;\n                    // Apply mask.\n                    const x = input.mul(keptIdx).add(keptIdx.add(-1).mul(alphaP));\n                    return x.mul(a).add(b);\n                };\n                return K.inTrainPhase(droppedInputs, () => getExactlyOneTensor(inputs), kwargs['training'] || false);\n            }\n            return inputs;\n        });\n    }\n}\n/** @nocollapse */\nAlphaDropout.className = 'AlphaDropout';\nserialization.registerClass(AlphaDropout);\n//# sourceMappingURL=noise.js.map"]},"metadata":{},"sourceType":"module"}