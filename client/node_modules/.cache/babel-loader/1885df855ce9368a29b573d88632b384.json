{"ast":null,"code":"import _slicedToArray from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function prodImpl(xShape, xDtype, xVals, reductionAxes) {\n  var _backend_util$compute = backend_util.computeOutAndReduceShapes(xShape, reductionAxes),\n      _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n      outShape = _backend_util$compute2[0],\n      reduceShape = _backend_util$compute2[1];\n\n  var outDtype = upcastType(xDtype, 'int32');\n  var outVals = util.makeZerosTypedArray(util.sizeFromShape(outShape), outDtype);\n  var reduceSize = util.sizeFromShape(reduceShape);\n\n  for (var i = 0; i < outVals.length; ++i) {\n    var offset = i * reduceSize;\n    var _prod = 1;\n\n    for (var j = 0; j < reduceSize; ++j) {\n      _prod *= xVals[offset + j];\n    }\n\n    outVals[i] = _prod;\n  }\n\n  return {\n    outVals: outVals,\n    outShape: outShape,\n    outDtype: outDtype\n  };\n}\nexport function prod(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var axis = attrs.axis,\n      keepDims = attrs.keepDims;\n  assertNotComplex(x, 'prod');\n  var xRank = x.shape.length;\n  var axes = util.parseAxisParam(axis, x.shape);\n  var permutation = backend_util.getAxesPermutation(axes, xRank);\n  var reductionAxes = axes;\n  var permutedX = x;\n  var intermediateTensorInfos = [];\n\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  var xVals = backend.data.get(permutedX.dataId).values;\n\n  var _prodImpl = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes),\n      outVals = _prodImpl.outVals,\n      outShape = _prodImpl.outShape,\n      outDtype = _prodImpl.outDtype;\n\n  var resultShape = outShape;\n\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\nexport var prodConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod\n};","map":{"version":3,"sources":["../../src/kernels/Prod.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function prodImpl(xShape, xDtype, xVals, reductionAxes) {\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n    const outDtype = upcastType(xDtype, 'int32');\n    const outVals = util.makeZerosTypedArray(util.sizeFromShape(outShape), outDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    for (let i = 0; i < outVals.length; ++i) {\n        const offset = i * reduceSize;\n        let prod = 1;\n        for (let j = 0; j < reduceSize; ++j) {\n            prod *= xVals[offset + j];\n        }\n        outVals[i] = prod;\n    }\n    return { outVals, outShape, outDtype };\n}\nexport function prod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'prod');\n    const xRank = x.shape.length;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const permutation = backend_util.getAxesPermutation(axes, xRank);\n    let reductionAxes = axes;\n    let permutedX = x;\n    const intermediateTensorInfos = [];\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n        intermediateTensorInfos.push(permutedX);\n        reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n    }\n    const xVals = backend.data.get(permutedX.dataId).values;\n    const { outVals, outShape, outDtype } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n    let resultShape = outShape;\n    if (keepDims) {\n        resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n    }\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\nexport const prodConfig = {\n    kernelName: Prod,\n    backendName: 'cpu',\n    kernelFunc: prod\n};\n//# sourceMappingURL=Prod.js.map"]},"metadata":{},"sourceType":"module"}