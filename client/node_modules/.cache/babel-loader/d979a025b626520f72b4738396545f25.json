{"ast":null,"code":"import _slicedToArray from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNativeBackpropInput(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var dy = inputs.dy,\n      filter = inputs.filter;\n  var strides = attrs.strides,\n      dilations = attrs.dilations,\n      pad = attrs.pad,\n      dimRoundingMode = attrs.dimRoundingMode,\n      inputShape = attrs.inputShape;\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n  var dyStrides = util.computeStrides(dy.shape);\n  var filterStrides = util.computeStrides(filter.shape);\n  var convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true\n  /* depthwise */\n  );\n  var dx = new TensorBuffer(convInfo.inShape, 'float32');\n  var dxValues = dx.values;\n\n  var _dx$strides = _slicedToArray(dx.strides, 3),\n      dxS0 = _dx$strides[0],\n      dxS1 = _dx$strides[1],\n      dxS2 = _dx$strides[2];\n\n  var dyValues = backend.data.get(dy.dataId).values;\n\n  var _dyStrides = _slicedToArray(dyStrides, 3),\n      dyS0 = _dyStrides[0],\n      dyS1 = _dyStrides[1],\n      dyS2 = _dyStrides[2];\n\n  var fltValues = backend.data.get(filter.dataId).values;\n\n  var _filterStrides = _slicedToArray(filterStrides, 3),\n      fltS0 = _filterStrides[0],\n      fltS1 = _filterStrides[1],\n      fltS2 = _filterStrides[2];\n\n  var batchSize = convInfo.batchSize,\n      filterHeight = convInfo.filterHeight,\n      filterWidth = convInfo.filterWidth,\n      inChannels = convInfo.inChannels,\n      inHeight = convInfo.inHeight,\n      inWidth = convInfo.inWidth,\n      outChannels = convInfo.outChannels,\n      outHeight = convInfo.outHeight,\n      outWidth = convInfo.outWidth,\n      strideHeight = convInfo.strideHeight,\n      strideWidth = convInfo.strideWidth;\n  var topPad = filterHeight - 1 - convInfo.padInfo.top;\n  var leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  var chMul = outChannels / inChannels;\n\n  for (var b = 0; b < batchSize; ++b) {\n    for (var d1 = 0; d1 < inChannels; ++d1) {\n      for (var xR = 0; xR < inHeight; ++xR) {\n        var xRCorner = xR - topPad;\n        var xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        var yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (var xC = 0; xC < inWidth; ++xC) {\n          var xCCorner = xC - leftPad;\n          var xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          var yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n          var dotProd = 0;\n\n          for (var yR = xRMin; yR < yRMax; ++yR) {\n            var wR = yR * strideHeight - xRCorner;\n\n            for (var yC = xCMin; yC < yCMax; ++yC) {\n              var wC = yC * strideWidth - xCCorner;\n              var dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              var fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (var dm = 0; dm < chMul; ++dm) {\n                var d2 = d1 * chMul + dm;\n                var pixel = dyValues[dyOffset + d2];\n                var weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport var depthwiseConv2dNativeBackpropInputConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput\n};","map":{"version":3,"sources":["../../src/kernels/DepthwiseConv2dNativeBackpropInput.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNativeBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { strides, dilations, pad, dimRoundingMode, inputShape } = attrs;\n    assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n    const dyStrides = util.computeStrides(dy.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n    const dx = new TensorBuffer(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2] = dx.strides;\n    const dyValues = backend.data.get(dy.dataId).values;\n    const [dyS0, dyS1, dyS2] = dyStrides;\n    const fltValues = backend.data.get(filter.dataId).values;\n    const [fltS0, fltS1, fltS2] = filterStrides;\n    const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    const chMul = outChannels / inChannels;\n    for (let b = 0; b < batchSize; ++b) {\n        for (let d1 = 0; d1 < inChannels; ++d1) {\n            for (let xR = 0; xR < inHeight; ++xR) {\n                const xRCorner = xR - topPad;\n                const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                for (let xC = 0; xC < inWidth; ++xC) {\n                    const xCCorner = xC - leftPad;\n                    const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                    const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                    let dotProd = 0;\n                    for (let yR = xRMin; yR < yRMax; ++yR) {\n                        const wR = yR * strideHeight - xRCorner;\n                        for (let yC = xCMin; yC < yCMax; ++yC) {\n                            const wC = yC * strideWidth - xCCorner;\n                            const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n                            const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                                fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n                            for (let dm = 0; dm < chMul; ++dm) {\n                                const d2 = d1 * chMul + dm;\n                                const pixel = dyValues[dyOffset + d2];\n                                const weight = fltValues[fltOffset + dm];\n                                dotProd += pixel * weight;\n                            }\n                        }\n                    }\n                    dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const depthwiseConv2dNativeBackpropInputConfig = {\n    kernelName: DepthwiseConv2dNativeBackpropInput,\n    backendName: 'cpu',\n    kernelFunc: depthwiseConv2dNativeBackpropInput\n};\n//# sourceMappingURL=DepthwiseConv2dNativeBackpropInput.js.map"]},"metadata":{},"sourceType":"module"}