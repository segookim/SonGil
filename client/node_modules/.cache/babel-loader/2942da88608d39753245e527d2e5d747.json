{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { pow } from '../ops/pow';\nimport { scalar } from '../ops/scalar';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\nexport class AdamOptimizer extends Optimizer {\n  constructor(learningRate, beta1, beta2, epsilon = null) {\n    super();\n    this.learningRate = learningRate;\n    this.beta1 = beta1;\n    this.beta2 = beta2;\n    this.epsilon = epsilon;\n    this.accumulatedFirstMoment = [];\n    this.accumulatedSecondMoment = [];\n    tidy(() => {\n      // accB* will be updated by batch.\n      this.accBeta1 = scalar(beta1).variable();\n      this.accBeta2 = scalar(beta2).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients) {\n    const varNames = Array.isArray(variableGradients) ? variableGradients.map(v => v.name) : Object.keys(variableGradients);\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const oneMinusAccBeta2 = sub(1, this.accBeta2);\n      varNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n\n        if (this.accumulatedSecondMoment[i] == null) {\n          this.accumulatedSecondMoment[i] = {\n            originalName: `${name}/v`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const secondMoment = this.accumulatedSecondMoment[i].variable;\n        const newFirstMoment = add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n        const newSecondMoment = add(mul(secondMoment, this.beta2), mul(square(gradient), 1 - this.beta2));\n        const biasCorrectedFirstMoment = div(newFirstMoment, oneMinusAccBeta1);\n        const biasCorrectedSecondMoment = div(newSecondMoment, oneMinusAccBeta2);\n        firstMoment.assign(newFirstMoment);\n        secondMoment.assign(newSecondMoment);\n        const newValue = add(mul(div(biasCorrectedFirstMoment, add(sqrt(biasCorrectedSecondMoment), this.epsilon)), -this.learningRate), value);\n        value.assign(newValue);\n      });\n      this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n      this.accBeta2.assign(mul(this.accBeta2, this.beta2));\n    });\n    this.incrementIterations();\n  }\n\n  dispose() {\n    this.accBeta1.dispose();\n    this.accBeta2.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n\n    if (this.accumulatedSecondMoment != null) {\n      dispose(this.accumulatedSecondMoment.map(v => v.variable));\n    }\n  }\n\n  async getWeights() {\n    // Order matters for Python compatibility.\n    const variables = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];\n    return [await this.saveIterations()].concat(variables.map(v => ({\n      name: v.originalName,\n      tensor: v.variable\n    })));\n  }\n\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    tidy(() => {\n      this.accBeta1.assign(pow(this.beta1, this.iterations_ + 1));\n      this.accBeta2.assign(pow(this.beta2, this.iterations_ + 1));\n    });\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedFirstMoment = weightValues.slice(0, variableCount).map(v => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n    this.accumulatedSecondMoment = weightValues.slice(variableCount, variableCount * 2).map(v => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n  }\n\n  getConfig() {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon\n    };\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon']);\n  }\n\n}\n/** @nocollapse */\n\nAdamOptimizer.className = 'Adam'; // Note: Name matters for Python compatibility.\n\nregisterClass(AdamOptimizer);","map":{"version":3,"sources":["../../src/optimizers/adam_optimizer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { pow } from '../ops/pow';\nimport { scalar } from '../ops/scalar';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\nexport class AdamOptimizer extends Optimizer {\n    constructor(learningRate, beta1, beta2, epsilon = null) {\n        super();\n        this.learningRate = learningRate;\n        this.beta1 = beta1;\n        this.beta2 = beta2;\n        this.epsilon = epsilon;\n        this.accumulatedFirstMoment = [];\n        this.accumulatedSecondMoment = [];\n        tidy(() => {\n            // accB* will be updated by batch.\n            this.accBeta1 = scalar(beta1).variable();\n            this.accBeta2 = scalar(beta2).variable();\n        });\n        if (epsilon == null) {\n            this.epsilon = ENGINE.backend.epsilon();\n        }\n    }\n    applyGradients(variableGradients) {\n        const varNames = Array.isArray(variableGradients) ?\n            variableGradients.map(v => v.name) :\n            Object.keys(variableGradients);\n        tidy(() => {\n            const oneMinusAccBeta1 = sub(1, this.accBeta1);\n            const oneMinusAccBeta2 = sub(1, this.accBeta2);\n            varNames.forEach((name, i) => {\n                const value = ENGINE.registeredVariables[name];\n                const trainable = false;\n                if (this.accumulatedFirstMoment[i] == null) {\n                    this.accumulatedFirstMoment[i] = {\n                        originalName: `${name}/m`,\n                        variable: tidy(() => zerosLike(value).variable(trainable))\n                    };\n                }\n                if (this.accumulatedSecondMoment[i] == null) {\n                    this.accumulatedSecondMoment[i] = {\n                        originalName: `${name}/v`,\n                        variable: tidy(() => zerosLike(value).variable(trainable))\n                    };\n                }\n                const gradient = Array.isArray(variableGradients) ?\n                    variableGradients[i].tensor :\n                    variableGradients[name];\n                if (gradient == null) {\n                    return;\n                }\n                const firstMoment = this.accumulatedFirstMoment[i].variable;\n                const secondMoment = this.accumulatedSecondMoment[i].variable;\n                const newFirstMoment = add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n                const newSecondMoment = add(mul(secondMoment, this.beta2), mul(square(gradient), 1 - this.beta2));\n                const biasCorrectedFirstMoment = div(newFirstMoment, oneMinusAccBeta1);\n                const biasCorrectedSecondMoment = div(newSecondMoment, oneMinusAccBeta2);\n                firstMoment.assign(newFirstMoment);\n                secondMoment.assign(newSecondMoment);\n                const newValue = add(mul(div(biasCorrectedFirstMoment, add(sqrt(biasCorrectedSecondMoment), this.epsilon)), -this.learningRate), value);\n                value.assign(newValue);\n            });\n            this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n            this.accBeta2.assign(mul(this.accBeta2, this.beta2));\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        this.accBeta1.dispose();\n        this.accBeta2.dispose();\n        if (this.accumulatedFirstMoment != null) {\n            dispose(this.accumulatedFirstMoment.map(v => v.variable));\n        }\n        if (this.accumulatedSecondMoment != null) {\n            dispose(this.accumulatedSecondMoment.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        // Order matters for Python compatibility.\n        const variables = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];\n        return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        tidy(() => {\n            this.accBeta1.assign(pow(this.beta1, this.iterations_ + 1));\n            this.accBeta2.assign(pow(this.beta2, this.iterations_ + 1));\n        });\n        const variableCount = weightValues.length / 2;\n        const trainable = false;\n        this.accumulatedFirstMoment =\n            weightValues.slice(0, variableCount).map(v => ({\n                originalName: v.name,\n                variable: v.tensor.variable(trainable)\n            }));\n        this.accumulatedSecondMoment =\n            weightValues.slice(variableCount, variableCount * 2)\n                .map(v => ({\n                originalName: v.name,\n                variable: v.tensor.variable(trainable)\n            }));\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'beta1': this.beta1,\n            'beta2': this.beta2,\n            'epsilon': this.epsilon,\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon']);\n    }\n}\n/** @nocollapse */\nAdamOptimizer.className = 'Adam'; // Note: Name matters for Python compatibility.\nregisterClass(AdamOptimizer);\n//# sourceMappingURL=adam_optimizer.js.map"]},"metadata":{},"sourceType":"module"}