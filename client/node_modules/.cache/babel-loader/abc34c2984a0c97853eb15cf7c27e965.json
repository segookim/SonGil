{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { SGDOptimizer } from './sgd_optimizer';\n/** @doclink Optimizer */\n\nexport class MomentumOptimizer extends SGDOptimizer {\n  constructor(learningRate, momentum, useNesterov = false) {\n    super(learningRate);\n    this.learningRate = learningRate;\n    this.momentum = momentum;\n    this.useNesterov = useNesterov;\n    this.accumulations = [];\n    this.m = scalar(this.momentum);\n  }\n\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n\n      if (this.accumulations[i] == null) {\n        const trainable = false;\n        this.accumulations[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const accumulation = this.accumulations[i].variable;\n      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n      if (gradient == null) {\n        return;\n      }\n\n      tidy(() => {\n        let newValue;\n        const newAccumulation = add(mul(this.m, accumulation), gradient);\n\n        if (this.useNesterov) {\n          newValue = add(mul(this.c, add(gradient, mul(newAccumulation, this.m))), value);\n        } else {\n          newValue = add(mul(this.c, newAccumulation), value);\n        }\n\n        accumulation.assign(newAccumulation);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose() {\n    this.m.dispose();\n\n    if (this.accumulations != null) {\n      dispose(this.accumulations.map(v => v.variable));\n    }\n  }\n  /**\n   * Sets the momentum of the optimizer.\n   *\n   * @param momentum\n   */\n\n\n  setMomentum(momentum) {\n    this.momentum = momentum;\n  }\n\n  async getWeights() {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulations.map(v => ({\n      name: v.originalName,\n      tensor: v.variable\n    })));\n  }\n\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulations = weightValues.map(v => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n  }\n\n  getConfig() {\n    return {\n      'learningRate': this.learningRate,\n      'momentum': this.momentum,\n      'useNesterov': this.useNesterov\n    };\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls(config['learningRate'], config['momentum'], config['useNesterov']);\n  }\n\n}\n/** @nocollapse */\n\nMomentumOptimizer.className = 'Momentum'; // Name matters for Python compatibility.\n\nregisterClass(MomentumOptimizer);","map":{"version":3,"sources":["../../src/optimizers/momentum_optimizer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { SGDOptimizer } from './sgd_optimizer';\n/** @doclink Optimizer */\nexport class MomentumOptimizer extends SGDOptimizer {\n    constructor(learningRate, momentum, useNesterov = false) {\n        super(learningRate);\n        this.learningRate = learningRate;\n        this.momentum = momentum;\n        this.useNesterov = useNesterov;\n        this.accumulations = [];\n        this.m = scalar(this.momentum);\n    }\n    applyGradients(variableGradients) {\n        const variableNames = Array.isArray(variableGradients) ?\n            variableGradients.map(item => item.name) :\n            Object.keys(variableGradients);\n        variableNames.forEach((name, i) => {\n            const value = ENGINE.registeredVariables[name];\n            if (this.accumulations[i] == null) {\n                const trainable = false;\n                this.accumulations[i] = {\n                    originalName: `${name}/momentum`,\n                    variable: tidy(() => zerosLike(value).variable(trainable))\n                };\n            }\n            const accumulation = this.accumulations[i].variable;\n            const gradient = Array.isArray(variableGradients) ?\n                variableGradients[i].tensor :\n                variableGradients[name];\n            if (gradient == null) {\n                return;\n            }\n            tidy(() => {\n                let newValue;\n                const newAccumulation = add(mul(this.m, accumulation), gradient);\n                if (this.useNesterov) {\n                    newValue = add(mul(this.c, add(gradient, mul(newAccumulation, this.m))), value);\n                }\n                else {\n                    newValue = add(mul(this.c, newAccumulation), value);\n                }\n                accumulation.assign(newAccumulation);\n                value.assign(newValue);\n            });\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        this.m.dispose();\n        if (this.accumulations != null) {\n            dispose(this.accumulations.map(v => v.variable));\n        }\n    }\n    /**\n     * Sets the momentum of the optimizer.\n     *\n     * @param momentum\n     */\n    setMomentum(momentum) {\n        this.momentum = momentum;\n    }\n    async getWeights() {\n        // Order matters for Python compatibility.\n        return [await this.saveIterations()].concat(this.accumulations.map(v => ({ name: v.originalName, tensor: v.variable })));\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        const trainable = false;\n        this.accumulations = weightValues.map(v => ({ originalName: v.name, variable: v.tensor.variable(trainable) }));\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'momentum': this.momentum,\n            'useNesterov': this.useNesterov\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['momentum'], config['useNesterov']);\n    }\n}\n/** @nocollapse */\nMomentumOptimizer.className = 'Momentum'; // Name matters for Python compatibility.\nregisterClass(MomentumOptimizer);\n//# sourceMappingURL=momentum_optimizer.js.map"]},"metadata":{},"sourceType":"module"}