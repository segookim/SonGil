{"ast":null,"code":"import _classCallCheck from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var ScatterProgram = function ScatterProgram(updateSize, sliceDim, indicesRank, updatesRank, strides, shape) {\n  var summingDupeIndex = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n\n  _classCallCheck(this, ScatterProgram);\n\n  this.variableNames = ['updates', 'indices', 'defaultValue'];\n  this.outputShape = shape;\n  var stridesType = getCoordsDataType(strides.length);\n  var dtype = getCoordsDataType(shape.length);\n  var indicesString = '';\n\n  if (indicesRank === 1) {\n    indicesString = 'i';\n  } else if (indicesRank === 2) {\n    indicesString = 'i, j';\n  }\n\n  var indicesSnippet = \"getIndices(\".concat(indicesString, \")\");\n  var updatesString = '';\n\n  if (updatesRank === 1) {\n    updatesString = 'i';\n  } else if (updatesRank === 2) {\n    updatesString = 'i, coords[1]';\n  }\n\n  var updatesSnippet = \"getUpdates(\".concat(updatesString, \")\");\n  var strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n  this.userCode = \"\\n        \".concat(stridesType, \" strides = \").concat(stridesType, \"(\").concat(strides, \");\\n\\n        void main() {\\n          \").concat(dtype, \" coords = getOutputCoords();\\n          float sum = 0.0;\\n          bool found = false;\\n          for (int i = 0; i < \").concat(updateSize, \"; i++) {\\n            int flattenedIndex = 0;\\n            for (int j = 0; j < \").concat(sliceDim, \"; j++) {\\n              int index = round(\").concat(indicesSnippet, \");\\n              flattenedIndex += index * \").concat(strideString, \";\\n            }\\n            if (flattenedIndex == coords[0]) {\\n              sum += \").concat(updatesSnippet, \";\\n              found = true;\\n            }\\n          }\\n          setOutput(mix(getDefaultValue(), sum, float(found)));\\n        }\\n      \");\n};","map":{"version":3,"sources":["../src/scatter_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,WAAa,cAAb,GAKE,wBACI,UADJ,EACwB,QADxB,EAC0C,WAD1C,EAEI,WAFJ,EAEyB,OAFzB,EAE4C,KAF5C,EAG2B;AAAA,MAAvB,gBAAuB,uEAAJ,IAAI;;AAAA;;AAP3B,OAAA,aAAA,GAAgB,CAAC,SAAD,EAAY,SAAZ,EAAuB,cAAvB,CAAhB;AAQE,OAAK,WAAL,GAAmB,KAAnB;AACA,MAAM,WAAW,GAAG,iBAAiB,CAAC,OAAO,CAAC,MAAT,CAArC;AACA,MAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC,MAAP,CAA/B;AACA,MAAI,aAAa,GAAG,EAApB;;AACA,MAAI,WAAW,KAAK,CAApB,EAAuB;AACrB,IAAA,aAAa,GAAG,GAAhB;AACD,GAFD,MAEO,IAAI,WAAW,KAAK,CAApB,EAAuB;AAC5B,IAAA,aAAa,GAAG,MAAhB;AACD;;AACD,MAAM,cAAc,wBAAiB,aAAjB,MAApB;AAEA,MAAI,aAAa,GAAG,EAApB;;AACA,MAAI,WAAW,KAAK,CAApB,EAAuB;AACrB,IAAA,aAAa,GAAG,GAAhB;AACD,GAFD,MAEO,IAAI,WAAW,KAAK,CAApB,EAAuB;AAC5B,IAAA,aAAa,GAAG,cAAhB;AACD;;AACD,MAAM,cAAc,wBAAiB,aAAjB,MAApB;AAEA,MAAM,YAAY,GAAG,QAAQ,GAAG,CAAX,GAAe,YAAf,GAA8B,SAAnD;AACA,OAAK,QAAL,uBACM,WADN,wBAC+B,WAD/B,cAC8C,OAD9C,oDAIQ,KAJR,oIAO4B,UAP5B,4FAS8B,QAT9B,uDAU8B,cAV9B,yDAWsC,YAXtC,oGAcmB,cAdnB;AAqBD,CAlDH","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ScatterProgram {\n    constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true) {\n        this.variableNames = ['updates', 'indices', 'defaultValue'];\n        this.outputShape = shape;\n        const stridesType = getCoordsDataType(strides.length);\n        const dtype = getCoordsDataType(shape.length);\n        let indicesString = '';\n        if (indicesRank === 1) {\n            indicesString = 'i';\n        }\n        else if (indicesRank === 2) {\n            indicesString = 'i, j';\n        }\n        const indicesSnippet = `getIndices(${indicesString})`;\n        let updatesString = '';\n        if (updatesRank === 1) {\n            updatesString = 'i';\n        }\n        else if (updatesRank === 2) {\n            updatesString = 'i, coords[1]';\n        }\n        const updatesSnippet = `getUpdates(${updatesString})`;\n        const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n        this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n    }\n}\n//# sourceMappingURL=scatter_gpu.js.map"]},"metadata":{},"sourceType":"module"}