{"ast":null,"code":"import _classCallCheck from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels, getSourceCoords } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport var UnpackProgram = function UnpackProgram(outputShape) {\n  _classCallCheck(this, UnpackProgram);\n\n  this.variableNames = ['A'];\n  this.packedInputs = true;\n  this.packedOutput = false;\n  this.outputShape = outputShape;\n  var rank = outputShape.length;\n  var channels = getChannels('rc', rank);\n  var dtype = getCoordsDataType(rank);\n  var sourceCoords = getSourceCoords(rank, channels);\n  var innerDims = channels.slice(-2);\n  var coords = rank <= 1 ? 'rc' : \"vec2(\".concat(innerDims.join(','), \")\");\n  this.userCode = \"\\n      void main() {\\n        \".concat(dtype, \" rc = getOutputCoords();\\n        vec4 packedInput = getA(\").concat(sourceCoords, \");\\n\\n        setOutput(getChannel(packedInput, \").concat(coords, \"));\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/unpack_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,WAAR,EAAqB,eAArB,QAA2C,gBAA3C;AACA,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,WAAa,aAAb,GAOE,uBAAY,WAAZ,EAAiC;AAAA;;AANjC,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AACA,OAAA,YAAA,GAAe,IAAf;AACA,OAAA,YAAA,GAAe,KAAf;AAKE,OAAK,WAAL,GAAmB,WAAnB;AACA,MAAM,IAAI,GAAG,WAAW,CAAC,MAAzB;AAEA,MAAM,QAAQ,GAAG,WAAW,CAAC,IAAD,EAAO,IAAP,CAA5B;AACA,MAAM,KAAK,GAAG,iBAAiB,CAAC,IAAD,CAA/B;AACA,MAAM,YAAY,GAAG,eAAe,CAAC,IAAD,EAAO,QAAP,CAApC;AACA,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAT,CAAe,CAAC,CAAhB,CAAlB;AACA,MAAM,MAAM,GAAG,IAAI,IAAI,CAAR,GAAY,IAAZ,kBAA2B,SAAS,CAAC,IAAV,CAAe,GAAf,CAA3B,MAAf;AAEA,OAAK,QAAL,4CAEM,KAFN,uEAG8B,YAH9B,6DAKwC,MALxC;AAQD,CAzBH","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels, getSourceCoords } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class UnpackProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = false;\n        this.outputShape = outputShape;\n        const rank = outputShape.length;\n        const channels = getChannels('rc', rank);\n        const dtype = getCoordsDataType(rank);\n        const sourceCoords = getSourceCoords(rank, channels);\n        const innerDims = channels.slice(-2);\n        const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n        this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=unpack_gpu.js.map"]},"metadata":{},"sourceType":"module"}