{"ast":null,"code":"import _slicedToArray from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { FromPixels } from '@tensorflow/tfjs-core';\nimport { TextureUsage } from '../tex_util';\nimport { FromPixelsProgram } from './FromPixels_utils/from_pixels_gpu';\nimport { FromPixelsPackedProgram } from './FromPixels_utils/from_pixels_packed_gpu';\nexport var fromPixelsConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels\n};\nvar fromPixels2DContext;\n\nfunction fromPixels(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var pixels = inputs.pixels;\n  var numChannels = attrs.numChannels;\n  var isVideo = typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement;\n  var isImage = typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement;\n  var isImageBitmap = typeof ImageBitmap !== 'undefined' && pixels instanceof ImageBitmap;\n\n  var _ref = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height],\n      _ref2 = _slicedToArray(_ref, 2),\n      width = _ref2[0],\n      height = _ref2[1];\n\n  var texShape = [height, width];\n  var outShape = [height, width, numChannels];\n\n  if (isImage || isVideo || isImageBitmap) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  var tempPixelHandle = backend.makeTensorInfo(texShape, 'int32'); // This is a byte texture with pixels.\n\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);\n  var program = env().getBool('WEBGL_PACK') ? new FromPixelsPackedProgram(outShape) : new FromPixelsProgram(outShape);\n  var res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}","map":{"version":3,"sources":["../../src/kernels/FromPixels.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,GAAR,QAAwD,uBAAxD;AACA,SAAQ,UAAR,QAA4D,uBAA5D;AAGA,SAAQ,YAAR,QAA2B,aAA3B;AAEA,SAAQ,iBAAR,QAAgC,oCAAhC;AACA,SAAQ,uBAAR,QAAsC,2CAAtC;AAEA,OAAO,IAAM,gBAAgB,GAAiB;AAC5C,EAAA,UAAU,EAAE,UADgC;AAE5C,EAAA,WAAW,EAAE,OAF+B;AAG5C,EAAA,UAAU,EAAE;AAHgC,CAAvC;AAMP,IAAI,mBAAJ;;AAEA,SAAS,UAAT,CAAoB,IAApB,EAIC;AAAA,MACQ,MADR,GACkC,IADlC,CACQ,MADR;AAAA,MACgB,OADhB,GACkC,IADlC,CACgB,OADhB;AAAA,MACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,MAEM,MAFN,GAEgB,MAFhB,CAEM,MAFN;AAAA,MAGQ,WAHR,GAGuB,KAHvB,CAGQ,WAHR;AAKC,MAAM,OAAO,GAAG,OAAQ,gBAAR,KAA8B,WAA9B,IACZ,MAAM,YAAY,gBADtB;AAEA,MAAM,OAAO,GAAG,OAAQ,gBAAR,KAA8B,WAA9B,IACZ,MAAM,YAAY,gBADtB;AAEA,MAAM,aAAa,GAAG,OAAO,WAAP,KAAwB,WAAxB,IAClB,MAAM,YAAY,WADtB;;AATD,aAWyB,OAAO,GAC3B,CACG,MAA2B,CAAC,UAD/B,EAEG,MAA2B,CAAC,WAF/B,CAD2B,GAK3B,CAAC,MAAM,CAAC,KAAR,EAAe,MAAM,CAAC,MAAtB,CAhBL;AAAA;AAAA,MAWQ,KAXR;AAAA,MAWe,MAXf;;AAkBC,MAAM,QAAQ,GAAqB,CAAC,MAAD,EAAS,KAAT,CAAnC;AACA,MAAM,QAAQ,GAAG,CAAC,MAAD,EAAS,KAAT,EAAgB,WAAhB,CAAjB;;AAEA,MAAI,OAAO,IAAI,OAAX,IAAsB,aAA1B,EAAyC;AACvC,QAAI,mBAAmB,IAAI,IAA3B,EAAiC;AAC/B,MAAA,mBAAmB,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,EAAiC,UAAjC,CAA4C,IAA5C,CAAtB;AACD;;AAED,IAAA,mBAAmB,CAAC,MAApB,CAA2B,KAA3B,GAAmC,KAAnC;AACA,IAAA,mBAAmB,CAAC,MAApB,CAA2B,MAA3B,GAAoC,MAApC;AACA,IAAA,mBAAmB,CAAC,SAApB,CACI,MADJ,EAEI,CAFJ,EAEO,CAFP,EAEU,KAFV,EAEiB,MAFjB;AAGA,IAAA,MAAM,GAAG,mBAAmB,CAAC,MAA7B;AACD;;AAED,MAAM,eAAe,GAAG,OAAO,CAAC,cAAR,CAAuB,QAAvB,EAAiC,OAAjC,CAAxB,CAlCD,CAmCC;;AACA,EAAA,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAoB,eAAe,CAAC,MAApC,EAA4C,KAA5C,GAAoD,YAAY,CAAC,MAAjE;AACA,EAAA,OAAO,CAAC,KAAR,CAAc,wBAAd,CACI,OAAO,CAAC,UAAR,CAAmB,eAAe,CAAC,MAAnC,CADJ,EACgD,MADhD;AAEA,MAAM,OAAO,GAAG,GAAG,GAAG,OAAN,CAAc,YAAd,IACZ,IAAI,uBAAJ,CAA4B,QAA5B,CADY,GAEZ,IAAI,iBAAJ,CAAsB,QAAtB,CAFJ;AAGA,MAAM,GAAG,GAAG,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,eAAD,CAAjC,EAAoD,OAApD,CAAZ;AACA,EAAA,OAAO,CAAC,WAAR,CAAoB,eAAe,CAAC,MAApC;AACA,SAAO,GAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { FromPixels } from '@tensorflow/tfjs-core';\nimport { TextureUsage } from '../tex_util';\nimport { FromPixelsProgram } from './FromPixels_utils/from_pixels_gpu';\nimport { FromPixelsPackedProgram } from './FromPixels_utils/from_pixels_packed_gpu';\nexport const fromPixelsConfig = {\n    kernelName: FromPixels,\n    backendName: 'webgl',\n    kernelFunc: fromPixels,\n};\nlet fromPixels2DContext;\nfunction fromPixels(args) {\n    const { inputs, backend, attrs } = args;\n    let { pixels } = inputs;\n    const { numChannels } = attrs;\n    const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n        pixels instanceof HTMLVideoElement;\n    const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n        pixels instanceof HTMLImageElement;\n    const isImageBitmap = typeof (ImageBitmap) !== 'undefined' &&\n        pixels instanceof ImageBitmap;\n    const [width, height] = isVideo ?\n        [\n            pixels.videoWidth,\n            pixels.videoHeight\n        ] :\n        [pixels.width, pixels.height];\n    const texShape = [height, width];\n    const outShape = [height, width, numChannels];\n    if (isImage || isVideo || isImageBitmap) {\n        if (fromPixels2DContext == null) {\n            fromPixels2DContext = document.createElement('canvas').getContext('2d');\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n        pixels = fromPixels2DContext.canvas;\n    }\n    const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n    // This is a byte texture with pixels.\n    backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n    backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);\n    const program = env().getBool('WEBGL_PACK') ?\n        new FromPixelsPackedProgram(outShape) :\n        new FromPixelsProgram(outShape);\n    const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n    backend.disposeData(tempPixelHandle.dataId);\n    return res;\n}\n//# sourceMappingURL=FromPixels.js.map"]},"metadata":{},"sourceType":"module"}