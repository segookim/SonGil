{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape } from './tensor_utils';\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport class TensorList {\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor, this can be a single number (any\n   * shape is allowed) or partial shape (dim = -1).\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {\n    this.tensors = tensors;\n    this.elementShape = elementShape;\n    this.elementDtype = elementDtype;\n\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);\n        }\n\n        assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n      });\n    }\n\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n\n\n  copy() {\n    return new TensorList([...this.tensors], this.elementShape, this.elementDtype);\n  }\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n\n\n  clearAndClose(keepIds) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n\n\n  size() {\n    return this.tensors.length;\n  }\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n\n\n  stack(elementShape, elementDtype, numElements = -1) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    return tidy(() => {\n      const reshapedTensors = this.tensors.map(tensor => reshape(tensor, outputElementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n\n\n  popBack(elementShape, elementDtype) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    const tensor = this.tensors.pop();\n    assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n    return reshape(tensor, outputElementShape);\n  }\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n\n\n  pushBack(tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n\n\n  resize(size) {\n    if (size < 0) {\n      throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n\n    this.tensors.length = size;\n  }\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n\n\n  getItem(elementIndex, elementShape, elementDtype) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    return reshape(this.tensors[elementIndex], outputElementShape);\n  }\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n\n\n  setItem(elementIndex, tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 || this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n    this.tensors[elementIndex] = tensor;\n  }\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n\n\n  gather(indices, elementDtype, elementShape) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: '); // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n\n    indices = indices.slice(0, this.size());\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n\n    return tidy(() => {\n      const tensors = indices.map(i => reshape(this.tensors[i], outputElementShape));\n      return stack(tensors, 0);\n    });\n  }\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n\n\n  concat(elementDtype, elementShape) {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n      return concat(tensors, 0);\n    });\n  }\n\n}\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\n\nexport function fromTensor(tensor, elementShape, elementDtype) {\n  const dtype = tensor.dtype;\n\n  if (tensor.shape.length < 1) {\n    throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);\n  }\n\n  const tensorElementShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n  const tensorList = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\n\nexport function reserve(elementShape, elementDtype, numElements) {\n  return new TensorList([], elementShape, elementDtype, numElements);\n}\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\n\nexport function scatter(tensor, indices, elementShape, numElements) {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n  }\n\n  const maxIndex = Math.max(...indices);\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\n\nexport function split(tensor, length, elementShape) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n\n  const shapeWithoutFirstDim = tensor.shape.slice(1);\n  const outputElementShape = mergeElementShape(shapeWithoutFirstDim, elementShape);\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(slice(tensor, indices, sizes), outputElementShape);\n    }\n\n    tensor.dispose();\n    return tensors;\n  });\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n\n  return list;\n}","map":{"version":3,"sources":["../../src/executor/tensor_list.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape } from './tensor_utils';\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\nexport class TensorList {\n    /**\n     *\n     * @param tensors list of tensors\n     * @param elementShape shape of each tensor, this can be a single number (any\n     * shape is allowed) or partial shape (dim = -1).\n     * @param elementDtype data type of each tensor\n     * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n     *   meaning that the size of `tensors` is unbounded.\n     */\n    constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {\n        this.tensors = tensors;\n        this.elementShape = elementShape;\n        this.elementDtype = elementDtype;\n        if (tensors != null) {\n            tensors.forEach(tensor => {\n                if (elementDtype !== tensor.dtype) {\n                    throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);\n                }\n                assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n                keep(tensor);\n            });\n        }\n        this.idTensor = scalar(0);\n        this.maxNumElements = maxNumElements;\n        keep(this.idTensor);\n    }\n    get id() {\n        return this.idTensor.id;\n    }\n    /**\n     * Get a new TensorList containing a copy of the underlying tensor container.\n     */\n    copy() {\n        return new TensorList([...this.tensors], this.elementShape, this.elementDtype);\n    }\n    /**\n     * Dispose the tensors and idTensor and clear the tensor list.\n     */\n    clearAndClose(keepIds) {\n        this.tensors.forEach(tensor => {\n            if (keepIds == null || !keepIds.has(tensor.id)) {\n                tensor.dispose();\n            }\n        });\n        this.tensors.length = 0;\n        this.idTensor.dispose();\n    }\n    /**\n     * The size of the tensors in the tensor list.\n     */\n    size() {\n        return this.tensors.length;\n    }\n    /**\n     * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n     * tf.Tensor.\n     * @param elementShape shape of each tensor\n     * @param elementDtype data type of each tensor\n     * @param numElements the number of elements to stack\n     */\n    stack(elementShape, elementDtype, numElements = -1) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (numElements !== -1 && this.tensors.length !== numElements) {\n            throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);\n        }\n        assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        return tidy(() => {\n            const reshapedTensors = this.tensors.map(tensor => reshape(tensor, outputElementShape));\n            return stack(reshapedTensors, 0);\n        });\n    }\n    /**\n     * Pop a tensor from the end of the list.\n     * @param elementShape shape of the tensor\n     * @param elementDtype data type of the tensor\n     */\n    popBack(elementShape, elementDtype) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (this.size() === 0) {\n            throw new Error('Trying to pop from an empty list.');\n        }\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        const tensor = this.tensors.pop();\n        assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n        return reshape(tensor, outputElementShape);\n    }\n    /**\n     * Push a tensor to the end of the list.\n     * @param tensor Tensor to be pushed.\n     */\n    pushBack(tensor) {\n        if (tensor.dtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n        if (this.maxNumElements === this.size()) {\n            throw new Error(`Trying to push element into a full list.`);\n        }\n        keep(tensor);\n        this.tensors.push(tensor);\n    }\n    /**\n     * Update the size of the list.\n     * @param size the new size of the list.\n     */\n    resize(size) {\n        if (size < 0) {\n            throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);\n        }\n        if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n            throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);\n        }\n        this.tensors.length = size;\n    }\n    /**\n     * Retrieve the element at the provided index\n     * @param elementShape shape of the tensor\n     * @param elementDtype dtype of the tensor\n     * @param elementIndex index of the tensor\n     */\n    getItem(elementIndex, elementShape, elementDtype) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (elementIndex < 0 || elementIndex > this.tensors.length) {\n            throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);\n        }\n        if (this.tensors[elementIndex] == null) {\n            throw new Error(`element at index ${elementIndex} is null.`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        return reshape(this.tensors[elementIndex], outputElementShape);\n    }\n    /**\n     * Set the tensor at the index\n     * @param elementIndex index of the tensor\n     * @param tensor the tensor to be inserted into the list\n     */\n    setItem(elementIndex, tensor) {\n        if (tensor.dtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n        }\n        if (elementIndex < 0 ||\n            this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n            throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n        this.tensors[elementIndex] = tensor;\n    }\n    /**\n     * Return selected values in the TensorList as a stacked Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param indices indices of tensors to gather\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n    gather(indices, elementDtype, elementShape) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n        // When indices is greater than the size of the list, indices beyond the\n        // size of the list are ignored.\n        indices = indices.slice(0, this.size());\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        if (indices.length === 0) {\n            return tensor([], [0].concat(outputElementShape));\n        }\n        return tidy(() => {\n            const tensors = indices.map(i => reshape(this.tensors[i], outputElementShape));\n            return stack(tensors, 0);\n        });\n    }\n    /**\n     * Return the values in the TensorList as a concatenated Tensor.\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n    concat(elementDtype, elementShape) {\n        if (!!elementDtype && elementDtype !== this.elementDtype) {\n            throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        if (this.size() === 0) {\n            return tensor([], [0].concat(outputElementShape));\n        }\n        return tidy(() => {\n            const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n            return concat(tensors, 0);\n        });\n    }\n}\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(tensor, elementShape, elementDtype) {\n    const dtype = tensor.dtype;\n    if (tensor.shape.length < 1) {\n        throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n    }\n    if (tensor.dtype !== elementDtype) {\n        throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);\n    }\n    const tensorElementShape = tensor.shape.slice(1);\n    assertShapesMatchAllowUndefinedSize(tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n    const tensorList = unstack(tensor);\n    return new TensorList(tensorList, elementShape, dtype);\n}\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\nexport function reserve(elementShape, elementDtype, numElements) {\n    return new TensorList([], elementShape, elementDtype, numElements);\n}\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(tensor, indices, elementShape, numElements) {\n    if (indices.length !== tensor.shape[0]) {\n        throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n    }\n    const maxIndex = Math.max(...indices);\n    if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n        throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n    }\n    const list = new TensorList([], elementShape, tensor.dtype, numElements);\n    const tensors = unstack(tensor, 0);\n    indices.forEach((value, index) => {\n        list.setItem(value, tensors[index]);\n    });\n    return list;\n}\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(tensor, length, elementShape) {\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n        totalLength += len;\n        return totalLength;\n    });\n    if (totalLength !== tensor.shape[0]) {\n        throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n    const shapeWithoutFirstDim = tensor.shape.slice(1);\n    const outputElementShape = mergeElementShape(shapeWithoutFirstDim, elementShape);\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors = tidy(() => {\n        const tensors = [];\n        tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n        for (let i = 0; i < length.length; ++i) {\n            const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n            const indices = [0, previousLength, 0];\n            const sizes = [1, length[i], elementPerRow];\n            tensors[i] = reshape(slice(tensor, indices, sizes), outputElementShape);\n        }\n        tensor.dispose();\n        return tensors;\n    });\n    const list = new TensorList([], elementShape, tensor.dtype, length.length);\n    for (let i = 0; i < tensors.length; i++) {\n        list.setItem(i, tensors[i]);\n    }\n    return list;\n}\n//# sourceMappingURL=tensor_list.js.map"]},"metadata":{},"sourceType":"module"}