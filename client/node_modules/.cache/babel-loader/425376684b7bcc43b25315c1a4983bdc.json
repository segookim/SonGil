{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n/**\n * Normalize noise shape based on provided tensor and noise shape.\n *\n * @param x Tensor.\n * @param noiseShape The shape for the randomly generated keep/drop flags, as\n *   an array of numbers. Optional.\n * @returns Normalized noise shape.\n */\n\nexport function getNoiseShape(x, noiseShape) {\n  if (noiseShape == null) {\n    return x.shape.slice();\n  }\n\n  if (util.arraysEqual(x.shape, noiseShape)) {\n    return noiseShape;\n  }\n\n  if (x.shape.length === noiseShape.length) {\n    const newDimension = [];\n\n    for (let i = 0; i < x.shape.length; i++) {\n      if (noiseShape[i] == null && x.shape[i] != null) {\n        newDimension.push(x.shape[i]);\n      } else {\n        newDimension.push(noiseShape[i]);\n      }\n    }\n\n    return newDimension;\n  }\n\n  return noiseShape;\n}","map":{"version":3,"sources":["../../src/ops/dropout_util.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA;;;;;;;AAOG;;AACH,OAAM,SAAU,aAAV,CAAwB,CAAxB,EAAmC,UAAnC,EAAwD;AAC5D,MAAI,UAAU,IAAI,IAAlB,EAAwB;AACtB,WAAO,CAAC,CAAC,KAAF,CAAQ,KAAR,EAAP;AACD;;AACD,MAAI,IAAI,CAAC,WAAL,CAAiB,CAAC,CAAC,KAAnB,EAA0B,UAA1B,CAAJ,EAA2C;AACzC,WAAO,UAAP;AACD;;AACD,MAAI,CAAC,CAAC,KAAF,CAAQ,MAAR,KAAmB,UAAU,CAAC,MAAlC,EAA0C;AACxC,UAAM,YAAY,GAAa,EAA/B;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAAC,CAAC,KAAF,CAAQ,MAA5B,EAAoC,CAAC,EAArC,EAAyC;AACvC,UAAI,UAAU,CAAC,CAAD,CAAV,IAAiB,IAAjB,IAAyB,CAAC,CAAC,KAAF,CAAQ,CAAR,KAAc,IAA3C,EAAiD;AAC/C,QAAA,YAAY,CAAC,IAAb,CAAkB,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAlB;AACD,OAFD,MAEO;AACL,QAAA,YAAY,CAAC,IAAb,CAAkB,UAAU,CAAC,CAAD,CAA5B;AACD;AACF;;AACD,WAAO,YAAP;AACD;;AAED,SAAO,UAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n/**\n * Normalize noise shape based on provided tensor and noise shape.\n *\n * @param x Tensor.\n * @param noiseShape The shape for the randomly generated keep/drop flags, as\n *   an array of numbers. Optional.\n * @returns Normalized noise shape.\n */\nexport function getNoiseShape(x, noiseShape) {\n    if (noiseShape == null) {\n        return x.shape.slice();\n    }\n    if (util.arraysEqual(x.shape, noiseShape)) {\n        return noiseShape;\n    }\n    if (x.shape.length === noiseShape.length) {\n        const newDimension = [];\n        for (let i = 0; i < x.shape.length; i++) {\n            if (noiseShape[i] == null && x.shape[i] != null) {\n                newDimension.push(x.shape[i]);\n            }\n            else {\n                newDimension.push(noiseShape[i]);\n            }\n        }\n        return newDimension;\n    }\n    return noiseShape;\n}\n//# sourceMappingURL=dropout_util.js.map"]},"metadata":{},"sourceType":"module"}