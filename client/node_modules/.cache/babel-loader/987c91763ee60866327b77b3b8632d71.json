{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3D, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool3d } from '../utils/pool_utils';\nexport function maxPool3D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode,\n    dataFormat\n  } = attrs;\n  assertNotComplex(x, 'maxPool3d');\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode, dataFormat);\n  const xValues = backend.data.get(x.dataId).values;\n  const outBuf = pool3d(xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\nexport const maxPool3DConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D\n};","map":{"version":3,"sources":["../../src/kernels/MaxPool3D.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAgD,SAAhD,EAAoH,IAApH,QAA+H,uBAA/H;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AACA,SAAQ,MAAR,QAAqB,qBAArB;AAEA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAIL;AACC,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA,OAAT;AAAkB,IAAA;AAAlB,MAA2B,IAAjC;AACA,QAAM;AAAC,IAAA;AAAD,MAAM,MAAZ;AACA,QAAM;AAAC,IAAA,UAAD;AAAa,IAAA,OAAb;AAAsB,IAAA,GAAtB;AAA2B,IAAA,eAA3B;AAA4C,IAAA;AAA5C,MAA0D,KAAhE;AAEA,EAAA,gBAAgB,CAAC,CAAD,EAAI,WAAJ,CAAhB;AAEA,QAAM,QAAQ,GAAG,YAAY,CAAC,iBAAb,CACb,CAAC,CAAC,KADW,EACwC,UADxC,EACoD,OADpD,EAEb;AAAE;AAFW,IAEM,GAFN,EAEW,eAFX,EAE4B,UAF5B,CAAjB;AAIA,QAAM,OAAO,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAA3C;AACA,QAAM,MAAM,GAAG,MAAM,CACjB,OADiB,EACR,CAAC,CAAC,KADM,EACC,CAAC,CAAC,KADH,EACU,IAAI,CAAC,cAAL,CAAoB,CAAC,CAAC,KAAtB,CADV,EACwC,QADxC,EACkD,KADlD,CAArB;AAGA,SAAO,OAAO,CAAC,cAAR,CAAuB,MAAM,CAAC,KAA9B,EAAqC,SAArC,EAAgD,MAAM,CAAC,MAAvD,CAAP;AACD;AAED,OAAO,MAAM,eAAe,GAAiB;AAC3C,EAAA,UAAU,EAAE,SAD+B;AAE3C,EAAA,WAAW,EAAE,KAF8B;AAG3C,EAAA,UAAU,EAAE;AAH+B,CAAtC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3D, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool3d } from '../utils/pool_utils';\nexport function maxPool3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { filterSize, strides, pad, dimRoundingMode, dataFormat } = attrs;\n    assertNotComplex(x, 'maxPool3d');\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode, dataFormat);\n    const xValues = backend.data.get(x.dataId).values;\n    const outBuf = pool3d(xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n    return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\nexport const maxPool3DConfig = {\n    kernelName: MaxPool3D,\n    backendName: 'cpu',\n    kernelFunc: maxPool3D\n};\n//# sourceMappingURL=MaxPool3D.js.map"]},"metadata":{},"sourceType":"module"}