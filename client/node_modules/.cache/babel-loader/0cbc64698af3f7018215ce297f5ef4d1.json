{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, buffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function addN(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var tensors = inputs;\n  assertNotComplex(inputs, 'addN');\n  var vals = tensors.map(function (t) {\n    return backend.data.get(t.dataId).values;\n  });\n  var outBuf = buffer(tensors[0].shape, tensors[0].dtype);\n  var outVals = outBuf.values;\n\n  for (var i = 0; i < tensors.length; i++) {\n    var currVals = vals[i];\n\n    for (var j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nexport var addNConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN\n};","map":{"version":3,"sources":["../../src/kernels/AddN.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,IAAR,EAA0B,MAA1B,QAAiG,uBAAjG;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAU,IAAV,CAAe,IAAf,EAAkE;AAAA,MAE/D,MAF+D,GAE5C,IAF4C,CAE/D,MAF+D;AAAA,MAEvD,OAFuD,GAE5C,IAF4C,CAEvD,OAFuD;AAGtE,MAAM,OAAO,GAAG,MAAhB;AAEA,EAAA,gBAAgB,CAAC,MAAD,EAAS,MAAT,CAAhB;AAEA,MAAM,IAAI,GACN,OAAO,CAAC,GAAR,CAAY,UAAA,CAAC;AAAA,WAAI,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAA/B;AAAA,GAAb,CADJ;AAEA,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAD,CAAP,CAAW,KAAZ,EAAmB,OAAO,CAAC,CAAD,CAAP,CAAW,KAA9B,CAArB;AACA,MAAM,OAAO,GAAG,MAAM,CAAC,MAAvB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAA5B,EAAoC,CAAC,EAArC,EAAyC;AACvC,QAAM,QAAQ,GAAG,IAAI,CAAC,CAAD,CAArB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAA5B,EAAoC,CAAC,EAArC,EAAyC;AACvC,MAAA,OAAO,CAAC,CAAD,CAAP,IAAc,QAAQ,CAAC,CAAD,CAAtB;AACD;AACF;;AAED,SAAO,OAAO,CAAC,cAAR,CAAuB,MAAM,CAAC,KAA9B,EAAqC,MAAM,CAAC,KAA5C,EAAmD,MAAM,CAAC,MAA1D,CAAP;AACD;AAED,OAAO,IAAM,UAAU,GAAiB;AACtC,EAAA,UAAU,EAAE,IAD0B;AAEtC,EAAA,WAAW,EAAE,KAFyB;AAGtC,EAAA,UAAU,EAAE;AAH0B,CAAjC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, buffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function addN(args) {\n    const { inputs, backend } = args;\n    const tensors = inputs;\n    assertNotComplex(inputs, 'addN');\n    const vals = tensors.map(t => backend.data.get(t.dataId).values);\n    const outBuf = buffer(tensors[0].shape, tensors[0].dtype);\n    const outVals = outBuf.values;\n    for (let i = 0; i < tensors.length; i++) {\n        const currVals = vals[i];\n        for (let j = 0; j < outVals.length; j++) {\n            outVals[j] += currVals[j];\n        }\n    }\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nexport const addNConfig = {\n    kernelName: AddN,\n    backendName: 'cpu',\n    kernelFunc: addN\n};\n//# sourceMappingURL=AddN.js.map"]},"metadata":{},"sourceType":"module"}