{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { matMul } from './mat_mul';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor2d([[1, 2], [3, 4]]);\n * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n *\n * a.dot(b).print();  // or tf.dot(a, b)\n * b.dot(a).print();\n * b.dot(c).print();\n * ```\n * @param t1 The first tensor in the dot operation.\n * @param t2 The second tensor in the dot operation.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\n\nfunction dot_(t1, t2) {\n  var $t1 = convertToTensor(t1, 't1', 'dot');\n  var $t2 = convertToTensor(t2, 't2', 'dot');\n  util.assert(($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2), function () {\n    return \"Error in dot: inputs must all be rank 1 or 2, but got ranks \" + \"\".concat($t1.rank, \" and \").concat($t2.rank, \".\");\n  });\n  var t1Inner = $t1.rank === 1 ? $t1.size : $t1.shape[1];\n  var t2Inner = $t2.rank === 1 ? $t2.size : $t2.shape[0];\n  util.assert(t1Inner === t2Inner, function () {\n    return \"Error in dot: inner dimensions of inputs must match, but got \" + \"\".concat(t1Inner, \" and \").concat(t2Inner, \".\");\n  });\n\n  if ($t1.rank === 1 && $t2.rank === 1) {\n    var t12D = reshape($t1, [1, -1]);\n    var t22D = reshape($t2, [-1, 1]);\n    var t1t2 = matMul(t12D, t22D);\n    return reshape(t1t2, []);\n  } else if ($t1.rank === 1 && $t2.rank === 2) {\n    var _t12D = reshape($t1, [1, -1]);\n\n    var _t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n\n    var _t1t = matMul(_t12D, _t22D);\n\n    return reshape(_t1t, [_t1t.size]);\n  } else if ($t1.rank === 2 && $t2.rank === 1) {\n    var _t22D2 = reshape($t2, [-1, 1]);\n\n    var _t1t2 = matMul($t1, _t22D2);\n\n    return reshape(_t1t2, [_t1t2.size]);\n  } else {\n    var _t22D3 = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n\n    var _t1t3 = matMul($t1, _t22D3);\n\n    return _t1t3;\n  }\n}\n\nexport var dot = op({\n  dot_: dot_\n});","map":{"version":3,"sources":["../../src/ops/dot.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { matMul } from './mat_mul';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor2d([[1, 2], [3, 4]]);\n * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n *\n * a.dot(b).print();  // or tf.dot(a, b)\n * b.dot(a).print();\n * b.dot(c).print();\n * ```\n * @param t1 The first tensor in the dot operation.\n * @param t2 The second tensor in the dot operation.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction dot_(t1, t2) {\n    const $t1 = convertToTensor(t1, 't1', 'dot');\n    const $t2 = convertToTensor(t2, 't2', 'dot');\n    util.assert(($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ` +\n        `${$t1.rank} and ${$t2.rank}.`);\n    const t1Inner = ($t1.rank === 1 ? $t1.size : $t1.shape[1]);\n    const t2Inner = ($t2.rank === 1 ? $t2.size : $t2.shape[0]);\n    util.assert(t1Inner === t2Inner, () => `Error in dot: inner dimensions of inputs must match, but got ` +\n        `${t1Inner} and ${t2Inner}.`);\n    if ($t1.rank === 1 && $t2.rank === 1) {\n        const t12D = reshape($t1, [1, -1]);\n        const t22D = reshape($t2, [-1, 1]);\n        const t1t2 = matMul(t12D, t22D);\n        return reshape(t1t2, []);\n    }\n    else if ($t1.rank === 1 && $t2.rank === 2) {\n        const t12D = reshape($t1, [1, -1]);\n        const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n        const t1t2 = matMul(t12D, t22D);\n        return reshape(t1t2, [t1t2.size]);\n    }\n    else if ($t1.rank === 2 && $t2.rank === 1) {\n        const t22D = reshape($t2, [-1, 1]);\n        const t1t2 = matMul($t1, t22D);\n        return reshape(t1t2, [t1t2.size]);\n    }\n    else {\n        const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n        const t1t2 = matMul($t1, t22D);\n        return t1t2;\n    }\n}\nexport const dot = op({ dot_ });\n//# sourceMappingURL=dot.js.map"]},"metadata":{},"sourceType":"module"}