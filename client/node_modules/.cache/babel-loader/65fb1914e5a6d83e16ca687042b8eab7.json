{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { DataSource } from '../datasource';\nimport { FileChunkIterator } from '../iterators/file_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\n/**\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\n * chunks.\n */\n\nexport class FileDataSource extends DataSource {\n  /**\n   * Create a `FileDataSource`.\n   *\n   * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\n   *     read. Local file only works in node environment.\n   * @param options Options passed to the underlying `FileChunkIterator`s,\n   *   such as {chunksize: 1024}.\n   */\n  constructor(input, options = {}) {\n    super();\n    this.input = input;\n    this.options = options;\n  }\n\n  async iterator() {\n    if (isLocalPath(this.input) && env().get('IS_NODE')) {\n      // tslint:disable-next-line:no-require-imports\n      const fs = require('fs');\n\n      this.input = fs.readFileSync(this.input.substr(7));\n    } // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n    // with file in browser.\n\n\n    return new FileChunkIterator(this.input, this.options);\n  }\n\n}","map":{"version":3,"sources":["../../src/sources/file_data_source.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,GAAR,QAAkB,uBAAlB;AACA,SAAQ,UAAR,QAAyB,eAAzB;AAEA,SAAQ,iBAAR,QAA0D,kCAA1D;AAEA,SAAQ,WAAR,QAA0B,qBAA1B;AAEA;;;AAGG;;AACH,OAAM,MAAO,cAAP,SAA8B,UAA9B,CAAwC;AAC5C;;;;;;;AAOG;AACH,EAAA,WAAA,CACc,KADd,EAEuB,OAAA,GAAoC,EAF3D,EAE6D;AAC3D;AAFY,SAAA,KAAA,GAAA,KAAA;AACS,SAAA,OAAA,GAAA,OAAA;AAEtB;;AAEa,QAAR,QAAQ,GAAA;AACZ,QAAI,WAAW,CAAC,KAAK,KAAN,CAAX,IAA2B,GAAG,GAAG,GAAN,CAAU,SAAV,CAA/B,EAAqD;AACnD;AACA,YAAM,EAAE,GAAG,OAAO,CAAC,IAAD,CAAlB;;AACA,WAAK,KAAL,GAAa,EAAE,CAAC,YAAH,CAAiB,KAAK,KAAL,CAAsB,MAAtB,CAA6B,CAA7B,CAAjB,CAAb;AACD,KALW,CAMZ;AACA;;;AACA,WAAO,IAAI,iBAAJ,CAAsB,KAAK,KAA3B,EAAiD,KAAK,OAAtD,CAAP;AACD;;AAxB2C","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { DataSource } from '../datasource';\nimport { FileChunkIterator } from '../iterators/file_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\n/**\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\n * chunks.\n */\nexport class FileDataSource extends DataSource {\n    /**\n     * Create a `FileDataSource`.\n     *\n     * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\n     *     read. Local file only works in node environment.\n     * @param options Options passed to the underlying `FileChunkIterator`s,\n     *   such as {chunksize: 1024}.\n     */\n    constructor(input, options = {}) {\n        super();\n        this.input = input;\n        this.options = options;\n    }\n    async iterator() {\n        if (isLocalPath(this.input) && env().get('IS_NODE')) {\n            // tslint:disable-next-line:no-require-imports\n            const fs = require('fs');\n            this.input = fs.readFileSync(this.input.substr(7));\n        }\n        // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n        // with file in browser.\n        return new FileChunkIterator(this.input, this.options);\n    }\n}\n//# sourceMappingURL=file_data_source.js.map"]},"metadata":{},"sourceType":"module"}