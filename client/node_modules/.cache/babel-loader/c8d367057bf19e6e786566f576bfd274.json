{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getTensor } from '../executors/utils';\nimport { getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam } from '../operation_mapper';\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\n\nexport class NodeValueImpl {\n  constructor(node, tensorMap, context) {\n    this.node = node;\n    this.tensorMap = tensorMap;\n    this.context = context;\n    this.inputs = [];\n    this.attrs = {};\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs).reduce((attrs, key) => {\n        attrs[key] = this.getAttr(key);\n        return attrs;\n      }, {});\n    }\n  }\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n\n\n  getInput(name) {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n\n\n  getAttr(name, defaultValue) {\n    const value = this.node.rawAttrs[name];\n\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue);\n    }\n\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue);\n    }\n\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue);\n    }\n\n    if (value.shape != null) {\n      return getTensorShapeParam(this.node.rawAttrs, name, defaultValue);\n    }\n\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue);\n    }\n\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n\n      if (value.list.s != null) {\n        return getStringArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n\n      if (value.list.b != null) {\n        return getBoolArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n\n      if (value.list.type != null) {\n        return getDtypeArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n    }\n\n    return defaultValue;\n  }\n\n}","map":{"version":3,"sources":["../../../src/operations/custom_op/node_value_impl.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAMH,SAAQ,SAAR,QAAwB,oBAAxB;AACA,SAAQ,iBAAR,EAA2B,YAA3B,EAAyC,kBAAzC,EAA6D,aAA7D,EAA4E,cAA5E,EAA4F,oBAA5F,EAAkH,mBAAlH,EAAuI,cAAvI,EAAuJ,wBAAvJ,EAAiL,mBAAjL,QAA2M,qBAA3M;AAGA;;AAEG;;AACH,OAAM,MAAO,aAAP,CAAoB;AAGxB,EAAA,WAAA,CACY,IADZ,EACgC,SADhC,EAEY,OAFZ,EAEqC;AADzB,SAAA,IAAA,GAAA,IAAA;AAAoB,SAAA,SAAA,GAAA,SAAA;AACpB,SAAA,OAAA,GAAA,OAAA;AAJI,SAAA,MAAA,GAAmB,EAAnB;AACA,SAAA,KAAA,GAAoC,EAApC;AAId,SAAK,MAAL,GAAc,IAAI,CAAC,UAAL,CAAgB,GAAhB,CAAoB,IAAI,IAAI,KAAK,QAAL,CAAc,IAAd,CAA5B,CAAd;;AACA,QAAI,IAAI,CAAC,QAAL,IAAiB,IAArB,EAA2B;AACzB,WAAK,KAAL,GAAa,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,QAAjB,EACK,MADL,CACY,CAAC,KAAD,EAAoC,GAApC,KAA2C;AACjD,QAAA,KAAK,CAAC,GAAD,CAAL,GAAa,KAAK,OAAL,CAAa,GAAb,CAAb;AACA,eAAO,KAAP;AACD,OAJL,EAIO,EAJP,CAAb;AAKD;AACF;AAED;;;AAGG;;;AACK,EAAA,QAAQ,CAAC,IAAD,EAAa;AAC3B,WAAO,SAAS,CAAC,IAAD,EAAO,KAAK,SAAZ,EAAuB,KAAK,OAA5B,CAAhB;AACD;AAED;;;AAGG;;;AACK,EAAA,OAAO,CAAC,IAAD,EAAe,YAAf,EAAuC;AACpD,UAAM,KAAK,GAAG,KAAK,IAAL,CAAU,QAAV,CAAmB,IAAnB,CAAd;;AACA,QAAI,KAAK,CAAC,MAAN,IAAgB,IAApB,EAA0B;AACxB,aAAO,SAAS,CAAC,IAAD,EAAO,KAAK,SAAZ,EAAuB,KAAK,OAA5B,CAAhB;AACD;;AACD,QAAI,KAAK,CAAC,CAAN,IAAW,IAAX,IAAmB,KAAK,CAAC,CAAN,IAAW,IAAlC,EAAwC;AACtC,aAAO,cAAc,CAAC,KAAK,IAAL,CAAU,QAAX,EAAqB,IAArB,EAA2B,YAA3B,CAArB;AACD;;AACD,QAAI,KAAK,CAAC,CAAN,IAAW,IAAf,EAAqB;AACnB,aAAO,cAAc,CAAC,KAAK,IAAL,CAAU,QAAX,EAAqB,IAArB,EAA2B,YAA3B,CAArB;AACD;;AACD,QAAI,KAAK,CAAC,CAAN,IAAW,IAAf,EAAqB;AACnB,aAAO,YAAY,CAAC,KAAK,IAAL,CAAU,QAAX,EAAqB,IAArB,EAA2B,YAA3B,CAAnB;AACD;;AACD,QAAI,KAAK,CAAC,KAAN,IAAe,IAAnB,EAAyB;AACvB,aAAO,mBAAmB,CACtB,KAAK,IAAL,CAAU,QADY,EACF,IADE,EACI,YADJ,CAA1B;AAED;;AACD,QAAI,KAAK,CAAC,IAAN,IAAc,IAAlB,EAAwB;AACtB,aAAO,aAAa,CAAC,KAAK,IAAL,CAAU,QAAX,EAAqB,IAArB,EAA2B,YAA3B,CAApB;AACD;;AACD,QAAI,KAAK,CAAC,IAAN,IAAc,IAAlB,EAAwB;AACtB,UAAI,KAAK,CAAC,IAAN,CAAW,CAAX,IAAgB,IAAhB,IAAwB,KAAK,CAAC,IAAN,CAAW,CAAX,IAAgB,IAA5C,EAAkD;AAChD,eAAO,oBAAoB,CACvB,KAAK,IAAL,CAAU,QADa,EACH,IADG,EACG,YADH,CAA3B;AAED;;AACD,UAAI,KAAK,CAAC,IAAN,CAAW,CAAX,IAAgB,IAApB,EAA0B;AACxB,eAAO,mBAAmB,CACtB,KAAK,IAAL,CAAU,QADY,EACF,IADE,EACI,YADJ,CAA1B;AAED;;AACD,UAAI,KAAK,CAAC,IAAN,CAAW,KAAX,IAAoB,IAAxB,EAA8B;AAC5B,eAAO,wBAAwB,CAC3B,KAAK,IAAL,CAAU,QADiB,EACP,IADO,EACD,YADC,CAA/B;AAED;;AACD,UAAI,KAAK,CAAC,IAAN,CAAW,CAAX,IAAgB,IAApB,EAA0B;AACxB,eAAO,iBAAiB,CACpB,KAAK,IAAL,CAAU,QADU,EACA,IADA,EACM,YADN,CAAxB;AAED;;AACD,UAAI,KAAK,CAAC,IAAN,CAAW,IAAX,IAAmB,IAAvB,EAA6B;AAC3B,eAAO,kBAAkB,CACrB,KAAK,IAAL,CAAU,QADW,EACD,IADC,EACK,YADL,CAAzB;AAED;AACF;;AAED,WAAO,YAAP;AACD;;AAzEuB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getTensor } from '../executors/utils';\nimport { getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam } from '../operation_mapper';\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl {\n    constructor(node, tensorMap, context) {\n        this.node = node;\n        this.tensorMap = tensorMap;\n        this.context = context;\n        this.inputs = [];\n        this.attrs = {};\n        this.inputs = node.inputNames.map(name => this.getInput(name));\n        if (node.rawAttrs != null) {\n            this.attrs = Object.keys(node.rawAttrs)\n                .reduce((attrs, key) => {\n                attrs[key] = this.getAttr(key);\n                return attrs;\n            }, {});\n        }\n    }\n    /**\n     * Return the value of the attribute or input param.\n     * @param name String: name of attribute or input param.\n     */\n    getInput(name) {\n        return getTensor(name, this.tensorMap, this.context);\n    }\n    /**\n     * Return the value of the attribute or input param.\n     * @param name String: name of attribute or input param.\n     */\n    getAttr(name, defaultValue) {\n        const value = this.node.rawAttrs[name];\n        if (value.tensor != null) {\n            return getTensor(name, this.tensorMap, this.context);\n        }\n        if (value.i != null || value.f != null) {\n            return getNumberParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.s != null) {\n            return getStringParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.b != null) {\n            return getBoolParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.shape != null) {\n            return getTensorShapeParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.type != null) {\n            return getDtypeParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.list != null) {\n            if (value.list.i != null || value.list.f != null) {\n                return getNumericArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n            if (value.list.s != null) {\n                return getStringArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n            if (value.list.shape != null) {\n                return getTensorShapeArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n            if (value.list.b != null) {\n                return getBoolArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n            if (value.list.type != null) {\n                return getDtypeArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n        }\n        return defaultValue;\n    }\n}\n//# sourceMappingURL=node_value_impl.js.map"]},"metadata":{},"sourceType":"module"}