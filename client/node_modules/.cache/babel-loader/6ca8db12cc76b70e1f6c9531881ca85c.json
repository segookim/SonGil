{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3D, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool3d } from '../utils/pool_utils';\nexport function avgPool3D(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var filterSize = attrs.filterSize,\n      strides = attrs.strides,\n      pad = attrs.pad,\n      dimRoundingMode = attrs.dimRoundingMode,\n      dataFormat = attrs.dataFormat;\n  assertNotComplex(x, 'avgPool3d');\n  var convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode, dataFormat);\n  var xValues = backend.data.get(x.dataId).values;\n  var outBuf = pool3d(xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\nexport var avgPool3DConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D\n};","map":{"version":3,"sources":["../../src/kernels/AvgPool3D.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,SAAR,EAAoD,YAApD,EAAoH,IAApH,QAA+H,uBAA/H;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AACA,SAAQ,MAAR,QAAqB,qBAArB;AAEA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAIL;AAAA,MACQ,MADR,GACkC,IADlC,CACQ,MADR;AAAA,MACgB,OADhB,GACkC,IADlC,CACgB,OADhB;AAAA,MACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,MAEQ,CAFR,GAEa,MAFb,CAEQ,CAFR;AAAA,MAGQ,UAHR,GAGiE,KAHjE,CAGQ,UAHR;AAAA,MAGoB,OAHpB,GAGiE,KAHjE,CAGoB,OAHpB;AAAA,MAG6B,GAH7B,GAGiE,KAHjE,CAG6B,GAH7B;AAAA,MAGkC,eAHlC,GAGiE,KAHjE,CAGkC,eAHlC;AAAA,MAGmD,UAHnD,GAGiE,KAHjE,CAGmD,UAHnD;AAKC,EAAA,gBAAgB,CAAC,CAAD,EAAI,WAAJ,CAAhB;AAEA,MAAM,QAAQ,GAAG,YAAY,CAAC,iBAAb,CACb,CAAC,CAAC,KADW,EACwC,UADxC,EACoD,OADpD,EAEb;AAAE;AAFW,IAEM,GAFN,EAEW,eAFX,EAE4B,UAF5B,CAAjB;AAIA,MAAM,OAAO,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAA3C;AACA,MAAM,MAAM,GAAG,MAAM,CACjB,OADiB,EACR,CAAC,CAAC,KADM,EACC,CAAC,CAAC,KADH,EACU,IAAI,CAAC,cAAL,CAAoB,CAAC,CAAC,KAAtB,CADV,EACwC,QADxC,EACkD,KADlD,CAArB;AAGA,SAAO,OAAO,CAAC,cAAR,CAAuB,MAAM,CAAC,KAA9B,EAAqC,SAArC,EAAgD,MAAM,CAAC,MAAvD,CAAP;AACD;AAED,OAAO,IAAM,eAAe,GAAiB;AAC3C,EAAA,UAAU,EAAE,SAD+B;AAE3C,EAAA,WAAW,EAAE,KAF8B;AAG3C,EAAA,UAAU,EAAE;AAH+B,CAAtC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3D, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool3d } from '../utils/pool_utils';\nexport function avgPool3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { filterSize, strides, pad, dimRoundingMode, dataFormat } = attrs;\n    assertNotComplex(x, 'avgPool3d');\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode, dataFormat);\n    const xValues = backend.data.get(x.dataId).values;\n    const outBuf = pool3d(xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n    return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\nexport const avgPool3DConfig = {\n    kernelName: AvgPool3D,\n    backendName: 'cpu',\n    kernelFunc: avgPool3D\n};\n//# sourceMappingURL=AvgPool3D.js.map"]},"metadata":{},"sourceType":"module"}