{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function sparseToDense(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    sparseIndices,\n    sparseValues,\n    defaultValue\n  } = inputs;\n  const {\n    outputShape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n  const program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.shape.length, sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n  const res = backend.runWebGLProgram(program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: outputShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\nexport const sparseToDenseConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense\n};","map":{"version":3,"sources":["../../src/kernels/SparseToDense.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAgD,aAAhD,QAAyH,uBAAzH;AAGA,SAAQ,cAAR,QAA6B,gBAA7B;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAU,aAAV,CAAwB,IAAxB,EAIL;AACC,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA,OAAT;AAAkB,IAAA;AAAlB,MAA2B,IAAjC;AACA,QAAM;AAAC,IAAA,aAAD;AAAgB,IAAA,YAAhB;AAA8B,IAAA;AAA9B,MAA8C,MAApD;AACA,QAAM;AAAC,IAAA;AAAD,MAAgB,KAAtB;AAEA,QAAM;AAAC,IAAA,SAAD;AAAY,IAAA,UAAZ;AAAwB,IAAA,OAAxB;AAAiC,IAAA;AAAjC,MACF,YAAY,CAAC,eAAb,CAA6B,YAA7B,EAA2C,aAA3C,EAA0D,WAA1D,CADJ;AAGA,QAAM,cAAc,GAAG,KAAvB;AACA,QAAM,OAAO,GAAG,IAAI,cAAJ,CACZ,UADY,EACA,SADA,EACW,aAAa,CAAC,KAAd,CAAoB,MAD/B,EAEZ,YAAY,CAAC,KAAb,CAAmB,MAFP,EAEe,OAFf,EAEwB,CAAC,UAAD,EAAa,CAAb,CAFxB,EAEyC,cAFzC,CAAhB;AAIA,QAAM,GAAG,GAAG,OAAO,CAAC,eAAR,CACR,OADQ,EACC,CAAC,YAAD,EAAe,aAAf,EAA8B,YAA9B,CADD,EAC8C,YAAY,CAAC,KAD3D,CAAZ;AAGA,QAAM,QAAQ,GACV,OAAO,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAmB,IAAA,OAAnB;AAA4B,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE;AAAR;AAAnC,GAAD,CADX;AAGA,EAAA,OAAO,CAAC,6BAAR,CAAsC,GAAtC;AACA,SAAO,QAAP;AACD;AAED,OAAO,MAAM,mBAAmB,GAAiB;AAC/C,EAAA,UAAU,EAAE,aADmC;AAE/C,EAAA,WAAW,EAAE,OAFkC;AAG/C,EAAA,UAAU,EAAE;AAHmC,CAA1C","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function sparseToDense(args) {\n    const { inputs, backend, attrs } = args;\n    const { sparseIndices, sparseValues, defaultValue } = inputs;\n    const { outputShape } = attrs;\n    const { sliceRank, numUpdates, strides, outputSize } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n    const sumDupeIndices = false;\n    const program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.shape.length, sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n    const res = backend.runWebGLProgram(program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n    const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape: outputShape } });\n    backend.disposeIntermediateTensorInfo(res);\n    return reshaped;\n}\nexport const sparseToDenseConfig = {\n    kernelName: SparseToDense,\n    backendName: 'webgl',\n    kernelFunc: sparseToDense\n};\n//# sourceMappingURL=SparseToDense.js.map"]},"metadata":{},"sourceType":"module"}