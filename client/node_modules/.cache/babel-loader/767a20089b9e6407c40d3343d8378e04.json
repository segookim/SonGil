{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class StridedSliceProgram {\n  constructor(begin, strides, size) {\n    this.variableNames = ['x'];\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n    let newCoords = '';\n\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords = size.map((_, i) => {\n        outputAxis++;\n        return size.length === 1 ? `coords * strides[${i}] + begin[${i}]` : `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n      }).join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/strided_slice_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAO,mBAAP,CAA0B;AAK9B,EAAA,WAAA,CAAY,KAAZ,EAA6B,OAA7B,EAAgD,IAAhD,EAA8D;AAJ9D,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAKE,SAAK,WAAL,GAAmB,IAAnB;AACA,UAAM,IAAI,GAAG,IAAI,CAAC,MAAlB;AACA,UAAM,UAAU,GAAG,iBAAiB,CAAC,IAAI,CAAC,MAAN,CAApC;AACA,UAAM,KAAK,GAAG,iBAAiB,CAAC,IAAI,CAAC,MAAN,CAA/B;AAEA,QAAI,SAAS,GAAG,EAAhB;;AACA,QAAI,IAAI,KAAK,CAAb,EAAgB;AACd,MAAA,SAAS,GAAG,0BAAZ;AACD,KAFD,MAEO;AACL,UAAI,UAAU,GAAG,CAAjB;AACA,MAAA,SAAS,GACL,IAAI,CAAC,GAAL,CAAS,CAAC,CAAD,EAAI,CAAJ,KAAS;AACZ,QAAA,UAAU;AACV,eAAO,IAAI,CAAC,MAAL,KAAgB,CAAhB,GACH,oBAAoB,CAAC,aAAa,CAAC,GADhC,GAEH,UAAU,UAAU,GAAG,CAAC,eAAe,CAAC,aAAa,CAAC,GAF1D;AAGD,OALL,EAMK,IANL,CAMU,GANV,CADJ;AAQD;;AAED,SAAK,QAAL,GAAgB;QACZ,UAAU,YAAY,UAAU,IAAI,KAAK;QACzC,UAAU,cAAc,UAAU,IAAI,OAAO;;;UAG3C,KAAK;yBACU,SAAS;;AAE7B,KARD;AASD;;AAnC6B","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class StridedSliceProgram {\n    constructor(begin, strides, size) {\n        this.variableNames = ['x'];\n        this.outputShape = size;\n        const rank = size.length;\n        const inputDtype = getCoordsDataType(size.length);\n        const dtype = getCoordsDataType(size.length);\n        let newCoords = '';\n        if (rank === 1) {\n            newCoords = 'coords * strides + begin';\n        }\n        else {\n            let outputAxis = 0;\n            newCoords =\n                size.map((_, i) => {\n                    outputAxis++;\n                    return size.length === 1 ?\n                        `coords * strides[${i}] + begin[${i}]` :\n                        `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n                })\n                    .join(',');\n        }\n        this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=strided_slice_gpu.js.map"]},"metadata":{},"sourceType":"module"}