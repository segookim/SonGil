{"ast":null,"code":"import _toConsumableArray from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Diag, util } from '@tensorflow/tfjs-core';\nimport { DiagProgram } from '../diag_gpu';\nimport { reshape } from './Reshape';\nexport function diag(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var x = inputs.x;\n  var outShape = [].concat(_toConsumableArray(x.shape), _toConsumableArray(x.shape));\n  var xSize = util.sizeFromShape(x.shape);\n  var flat = reshape({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      shape: [xSize]\n    }\n  });\n  var program = new DiagProgram(xSize);\n  var res = backend.runWebGLProgram(program, [flat], flat.dtype);\n  var out = reshape({\n    inputs: {\n      x: res\n    },\n    backend: backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n  return out;\n}\nexport var diagConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag\n};","map":{"version":3,"sources":["../../src/kernels/Diag.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,IAAR,EAAgE,IAAhE,QAA2E,uBAA3E;AAGA,SAAQ,WAAR,QAA0B,aAA1B;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAU,IAAV,CAAe,IAAf,EAAoE;AAAA,MAEjE,MAFiE,GAE9C,IAF8C,CAEjE,MAFiE;AAAA,MAEzD,OAFyD,GAE9C,IAF8C,CAEzD,OAFyD;AAAA,MAGjE,CAHiE,GAG5D,MAH4D,CAGjE,CAHiE;AAKxE,MAAM,QAAQ,gCAAO,CAAC,CAAC,KAAT,sBAAmB,CAAC,CAAC,KAArB,EAAd;AACA,MAAM,KAAK,GAAG,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,CAAd;AAEA,MAAM,IAAI,GAAG,OAAO,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAD;AAAD,KAAT;AAAc,IAAA,OAAO,EAAP,OAAd;AAAuB,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE,CAAC,KAAD;AAAR;AAA9B,GAAD,CAApB;AAEA,MAAM,OAAO,GAAG,IAAI,WAAJ,CAAgB,KAAhB,CAAhB;AACA,MAAM,GAAG,GAAG,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,IAAD,CAAjC,EAAyC,IAAI,CAAC,KAA9C,CAAZ;AAEA,MAAM,GAAG,GAAG,OAAO,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAmB,IAAA,OAAO,EAAP,OAAnB;AAA4B,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE;AAAR;AAAnC,GAAD,CAAnB;AAEA,EAAA,OAAO,CAAC,6BAAR,CAAsC,IAAtC;AACA,EAAA,OAAO,CAAC,6BAAR,CAAsC,GAAtC;AAEA,SAAO,GAAP;AACD;AAED,OAAO,IAAM,UAAU,GAAiB;AACtC,EAAA,UAAU,EAAE,IAD0B;AAEtC,EAAA,WAAW,EAAE,OAFyB;AAGtC,EAAA,UAAU,EAAE;AAH0B,CAAjC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Diag, util } from '@tensorflow/tfjs-core';\nimport { DiagProgram } from '../diag_gpu';\nimport { reshape } from './Reshape';\nexport function diag(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    const outShape = [...x.shape, ...x.shape];\n    const xSize = util.sizeFromShape(x.shape);\n    const flat = reshape({ inputs: { x }, backend, attrs: { shape: [xSize] } });\n    const program = new DiagProgram(xSize);\n    const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n    const out = reshape({ inputs: { x: res }, backend, attrs: { shape: outShape } });\n    backend.disposeIntermediateTensorInfo(flat);\n    backend.disposeIntermediateTensorInfo(res);\n    return out;\n}\nexport const diagConfig = {\n    kernelName: Diag,\n    backendName: 'webgl',\n    kernelFunc: diag\n};\n//# sourceMappingURL=Diag.js.map"]},"metadata":{},"sourceType":"module"}