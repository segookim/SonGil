{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { TensorArray } from '../../executor/tensor_array';\nimport { fromTensor, reserve, scatter, split } from '../../executor/tensor_list';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = async (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf':\n      {\n        const thenFunc = getParamValue('thenBranch', node, tensorMap, context);\n        const elseFunc = getParamValue('elseBranch', node, tensorMap, context);\n        const cond = getParamValue('cond', node, tensorMap, context);\n        const args = getParamValue('args', node, tensorMap, context);\n        const condValue = await cond.data();\n\n        if (condValue[0]) {\n          return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        } else {\n          return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        }\n      }\n\n    case 'While':\n    case 'StatelessWhile':\n      {\n        const bodyFunc = getParamValue('body', node, tensorMap, context);\n        const condFunc = getParamValue('cond', node, tensorMap, context);\n        const args = getParamValue('args', node, tensorMap, context); // Calculate the condition of the loop\n\n        const condResult = await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        const argIds = args.map(tensor => tensor.id);\n        let condValue = await condResult[0].data(); // Dispose the intermediate tensors for condition function\n\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n        let result = args;\n\n        while (condValue[0]) {\n          // Record the previous result for intermediate tensor tracking\n          const origResult = result; // Execution the body of the loop\n\n          result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n          const resultIds = result.map(tensor => tensor.id); // Dispose the intermediate tensor for body function that is not global\n          // kept, not input/output of the body function\n\n          origResult.forEach(tensor => {\n            if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n              tensor.dispose();\n            }\n          }); // Recalcuate the condition of the loop using the latest results.\n\n          const condResult = await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n          condValue = await condResult[0].data(); // Dispose the intermediate tensors for condition function\n\n          condResult.forEach(tensor => {\n            if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n              tensor.dispose();\n            }\n          });\n        }\n\n        return result;\n      }\n\n    case 'LoopCond':\n      {\n        const pred = getParamValue('pred', node, tensorMap, context);\n        return [cloneTensor(pred)];\n      }\n\n    case 'Switch':\n      {\n        const pred = getParamValue('pred', node, tensorMap, context);\n        let data = getParamValue('data', node, tensorMap, context);\n\n        if (!data.kept) {\n          data = cloneTensor(data);\n        } // Outputs nodes :0 => false, :1 => true\n\n\n        return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n      }\n\n    case 'Merge':\n      {\n        const inputName = node.inputNames.find(name => getTensor(name, tensorMap, context) !== undefined);\n\n        if (inputName) {\n          const data = getTensor(inputName, tensorMap, context);\n          return [cloneTensor(data)];\n        }\n\n        return undefined;\n      }\n\n    case 'Enter':\n      {\n        const frameId = getParamValue('frameName', node, tensorMap, context);\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.enterFrame(frameId);\n        return [cloneTensor(data)];\n      }\n\n    case 'Exit':\n      {\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.exitFrame();\n        return [cloneTensor(data)];\n      }\n\n    case 'NextIteration':\n      {\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.nextIteration();\n        return [cloneTensor(data)];\n      }\n\n    case 'TensorArrayV3':\n      {\n        const size = getParamValue('size', node, tensorMap, context);\n        const dtype = getParamValue('dtype', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const dynamicSize = getParamValue('dynamicSize', node, tensorMap, context);\n        const clearAfterRead = getParamValue('clearAfterRead', node, tensorMap, context);\n        const identicalElementShapes = getParamValue('identicalElementShapes', node, tensorMap, context);\n        const name = getParamValue('name', node, tensorMap, context);\n        const tensorArray = new TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);\n        context.addTensorArray(tensorArray);\n        return [tensorArray.idTensor, scalar(1.0)];\n      }\n\n    case 'TensorArrayWriteV3':\n      {\n        const id = getParamValue('tensorArrayId', node, tensorMap, context);\n        const index = getParamValue('index', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const writeTensorArray = context.getTensorArray(id.id);\n        writeTensorArray.write(index, writeTensor);\n        return [writeTensorArray.idTensor];\n      }\n\n    case 'TensorArrayReadV3':\n      {\n        const readId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const readIndex = getParamValue('index', node, tensorMap, context);\n        const readTensorArray = context.getTensorArray(readId.id);\n        return [readTensorArray.read(readIndex)];\n      }\n\n    case 'TensorArrayGatherV3':\n      {\n        const gatherId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const gatherIndices = getParamValue('indices', node, tensorMap, context);\n        const gatherDtype = getParamValue('dtype', node, tensorMap, context);\n        const gatherTensorArray = context.getTensorArray(gatherId.id);\n        return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n      }\n\n    case 'TensorArrayScatterV3':\n      {\n        const scatterId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const scatterIndices = getParamValue('indices', node, tensorMap, context);\n        const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n        const scatterTensorArray = context.getTensorArray(scatterId.id);\n        scatterTensorArray.scatter(scatterIndices, scatterTensor);\n        return [scatterTensorArray.idTensor];\n      }\n\n    case 'TensorArrayConcatV3':\n      {\n        const concatId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const concatTensorArray = context.getTensorArray(concatId.id);\n        const concatDtype = getParamValue('dtype', node, tensorMap, context);\n        return [concatTensorArray.concat(concatDtype)];\n      }\n\n    case 'TensorArraySplitV3':\n      {\n        const splitId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const splitTensor = getParamValue('tensor', node, tensorMap, context);\n        const lengths = getParamValue('lengths', node, tensorMap, context);\n        const splitTensorArray = context.getTensorArray(splitId.id);\n        splitTensorArray.split(lengths, splitTensor);\n        return [splitTensorArray.idTensor];\n      }\n\n    case 'TensorArraySizeV3':\n      {\n        const sizeId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const sizeTensorArray = context.getTensorArray(sizeId.id);\n        return [scalar(sizeTensorArray.size(), 'int32')];\n      }\n\n    case 'TensorArrayCloseV3':\n      {\n        const closeId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const closeTensorArray = context.getTensorArray(closeId.id);\n        closeTensorArray.clearAndClose();\n        return [closeTensorArray.idTensor];\n      }\n\n    case 'TensorListSetItem':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const index = getParamValue('index', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        tensorList.setItem(index, writeTensor);\n        return [tensorList.idTensor];\n      }\n\n    case 'TensorListGetItem':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const readIndex = getParamValue('index', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDType = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.getItem(readIndex, elementShape, elementDType)];\n      }\n\n    case 'TensorListScatterV2':\n    case 'TensorListScatter':\n      {\n        const scatterIndices = getParamValue('indices', node, tensorMap, context);\n        const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const numElements = getParamValue('numElements', node, tensorMap, context);\n        const tensorList = scatter(scatterTensor, scatterIndices, elementShape, numElements);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n\n    case 'TensorListReserve':\n    case 'EmptyTensorList':\n      {\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        let numElementsParam;\n\n        if (node.op === 'TensorListReserve') {\n          numElementsParam = 'numElements';\n        } else {\n          numElementsParam = 'maxNumElements';\n        }\n\n        const numElements = getParamValue(numElementsParam, node, tensorMap, context);\n        const tensorList = reserve(elementShape, elementDtype, numElements);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n\n    case 'TensorListGather':\n      {\n        const gatherId = getParamValue('tensorListId', node, tensorMap, context);\n        const gatherIndices = getParamValue('indices', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(gatherId.id);\n        return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n      }\n\n    case 'TensorListStack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const numElements = getParamValue('numElements', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.stack(elementShape, elementDtype, numElements)];\n      }\n\n    case 'TensorListFromTensor':\n      {\n        const tensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = fromTensor(tensor, elementShape, elementDtype);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n\n    case 'TensorListConcat':\n      {\n        const concatId = getParamValue('tensorListId', node, tensorMap, context);\n        const tensorList = context.getTensorList(concatId.id);\n        const concatDtype = getParamValue('dtype', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        return [tensorList.concat(concatDtype, elementShape)];\n      }\n\n    case 'TensorListPushBack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        tensorList.pushBack(writeTensor);\n        return [tensorList.idTensor];\n      }\n\n    case 'TensorListPopBack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDType = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.popBack(elementShape, elementDType)];\n      }\n\n    case 'TensorListSplit':\n      {\n        const splitTensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const lengths = getParamValue('lengths', node, tensorMap, context);\n        const tensorList = split(splitTensor, lengths, elementShape);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'control';","map":{"version":3,"sources":["../../../src/operations/executors/control_executor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkB,MAAlB,QAAuC,uBAAvC;AAIA,SAAQ,WAAR,QAA0B,6BAA1B;AACA,SAAQ,UAAR,EAAoB,OAApB,EAA6B,OAA7B,EAAsC,KAAtC,QAAkD,4BAAlD;AAGA,SAAQ,WAAR,EAAqB,aAArB,EAAoC,SAApC,QAAoD,SAApD;AAEA,OAAO,MAAM,SAAS,GAA4B,OAC9C,IAD8C,EAClC,SADkC,EAE9C,OAF8C,KAEE;AAClD,UAAQ,IAAI,CAAC,EAAb;AACE,SAAK,IAAL;AACA,SAAK,aAAL;AAAoB;AAClB,cAAM,QAAQ,GACV,aAAa,CAAC,YAAD,EAAe,IAAf,EAAqB,SAArB,EAAgC,OAAhC,CADjB;AAEA,cAAM,QAAQ,GACV,aAAa,CAAC,YAAD,EAAe,IAAf,EAAqB,SAArB,EAAgC,OAAhC,CADjB;AAEA,cAAM,IAAI,GAAG,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CAA1B;AACA,cAAM,IAAI,GAAG,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CAA1B;AACA,cAAM,SAAS,GAAG,MAAM,IAAI,CAAC,IAAL,EAAxB;;AACA,YAAI,SAAS,CAAC,CAAD,CAAb,EAAkB;AAChB,iBAAO,OAAO,CAAC,WAAR,CAAoB,QAApB,EAA8B,oBAA9B,CACH,IADG,EACG,OAAO,CAAC,cADX,EAC2B,OAAO,CAAC,aADnC,CAAP;AAED,SAHD,MAGO;AACL,iBAAO,OAAO,CAAC,WAAR,CAAoB,QAApB,EAA8B,oBAA9B,CACH,IADG,EACG,OAAO,CAAC,cADX,EAC2B,OAAO,CAAC,aADnC,CAAP;AAED;AACF;;AACD,SAAK,OAAL;AACA,SAAK,gBAAL;AAAuB;AACrB,cAAM,QAAQ,GACV,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CADjB;AAEA,cAAM,QAAQ,GACV,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CADjB;AAEA,cAAM,IAAI,GAAG,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CAA1B,CALqB,CAOrB;;AACA,cAAM,UAAU,GACX,MAAM,OAAO,CAAC,WAAR,CAAoB,QAApB,EAA8B,oBAA9B,CACH,IADG,EACG,OAAO,CAAC,cADX,EAC2B,OAAO,CAAC,aADnC,CADX;AAGA,cAAM,MAAM,GAAG,IAAI,CAAC,GAAL,CAAS,MAAM,IAAI,MAAM,CAAC,EAA1B,CAAf;AACA,YAAI,SAAS,GAAG,MAAM,UAAU,CAAC,CAAD,CAAV,CAAc,IAAd,EAAtB,CAZqB,CAarB;;AACA,QAAA,UAAU,CAAC,OAAX,CAAmB,MAAM,IAAG;AAC1B,cAAI,CAAC,MAAM,CAAC,IAAR,IAAgB,MAAM,CAAC,OAAP,CAAe,MAAM,CAAC,EAAtB,MAA8B,CAAC,CAAnD,EAAsD;AACpD,YAAA,MAAM,CAAC,OAAP;AACD;AACF,SAJD;AAMA,YAAI,MAAM,GAAa,IAAvB;;AAEA,eAAO,SAAS,CAAC,CAAD,CAAhB,EAAqB;AACnB;AACA,gBAAM,UAAU,GAAG,MAAnB,CAFmB,CAGnB;;AACA,UAAA,MAAM,GAAG,MAAM,OAAO,CAAC,WAAR,CAAoB,QAApB,EAA8B,oBAA9B,CACX,MADW,EACH,OAAO,CAAC,cADL,EACqB,OAAO,CAAC,aAD7B,CAAf;AAEA,gBAAM,SAAS,GAAG,MAAM,CAAC,GAAP,CAAW,MAAM,IAAI,MAAM,CAAC,EAA5B,CAAlB,CANmB,CAQnB;AACA;;AACA,UAAA,UAAU,CAAC,OAAX,CAAmB,MAAM,IAAG;AAC1B,gBAAI,CAAC,MAAM,CAAC,IAAR,IAAgB,MAAM,CAAC,OAAP,CAAe,MAAM,CAAC,EAAtB,MAA8B,CAAC,CAA/C,IACA,SAAS,CAAC,OAAV,CAAkB,MAAM,CAAC,EAAzB,MAAiC,CAAC,CADtC,EACyC;AACvC,cAAA,MAAM,CAAC,OAAP;AACD;AACF,WALD,EAVmB,CAiBnB;;AACA,gBAAM,UAAU,GACX,MAAM,OAAO,CAAC,WAAR,CAAoB,QAApB,EAA8B,oBAA9B,CACH,MADG,EACK,OAAO,CAAC,cADb,EAC6B,OAAO,CAAC,aADrC,CADX;AAGA,UAAA,SAAS,GAAG,MAAM,UAAU,CAAC,CAAD,CAAV,CAAc,IAAd,EAAlB,CArBmB,CAsBnB;;AACA,UAAA,UAAU,CAAC,OAAX,CAAmB,MAAM,IAAG;AAC1B,gBAAI,CAAC,MAAM,CAAC,IAAR,IAAgB,MAAM,CAAC,OAAP,CAAe,MAAM,CAAC,EAAtB,MAA8B,CAAC,CAA/C,IACA,SAAS,CAAC,OAAV,CAAkB,MAAM,CAAC,EAAzB,MAAiC,CAAC,CADtC,EACyC;AACvC,cAAA,MAAM,CAAC,OAAP;AACD;AACF,WALD;AAMD;;AACD,eAAO,MAAP;AACD;;AACD,SAAK,UAAL;AAAiB;AACf,cAAM,IAAI,GAAG,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CAA1B;AACA,eAAO,CAAC,WAAW,CAAC,IAAD,CAAZ,CAAP;AACD;;AACD,SAAK,QAAL;AAAe;AACb,cAAM,IAAI,GAAG,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CAA1B;AACA,YAAI,IAAI,GAAG,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CAAxB;;AACA,YAAI,CAAC,IAAI,CAAC,IAAV,EAAgB;AACd,UAAA,IAAI,GAAG,WAAW,CAAC,IAAD,CAAlB;AACD,SALY,CAMb;;;AACA,eAAO,CAAC,MAAM,IAAI,CAAC,IAAL,EAAP,EAAoB,CAApB,IAAyB,CAAC,SAAD,EAAY,IAAZ,CAAzB,GAA6C,CAAC,IAAD,EAAO,SAAP,CAApD;AACD;;AACD,SAAK,OAAL;AAAc;AACZ,cAAM,SAAS,GAAG,IAAI,CAAC,UAAL,CAAgB,IAAhB,CACd,IAAI,IAAI,SAAS,CAAC,IAAD,EAAO,SAAP,EAAkB,OAAlB,CAAT,KAAwC,SADlC,CAAlB;;AAEA,YAAI,SAAJ,EAAe;AACb,gBAAM,IAAI,GAAG,SAAS,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,CAAtB;AACA,iBAAO,CAAC,WAAW,CAAC,IAAD,CAAZ,CAAP;AACD;;AACD,eAAO,SAAP;AACD;;AACD,SAAK,OAAL;AAAc;AACZ,cAAM,OAAO,GACT,aAAa,CAAC,WAAD,EAAc,IAAd,EAAoB,SAApB,EAA+B,OAA/B,CADjB;AAEA,cAAM,IAAI,GAAG,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CAA1B;AACA,QAAA,OAAO,CAAC,UAAR,CAAmB,OAAnB;AACA,eAAO,CAAC,WAAW,CAAC,IAAD,CAAZ,CAAP;AACD;;AACD,SAAK,MAAL;AAAa;AACX,cAAM,IAAI,GAAG,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CAA1B;AACA,QAAA,OAAO,CAAC,SAAR;AACA,eAAO,CAAC,WAAW,CAAC,IAAD,CAAZ,CAAP;AACD;;AACD,SAAK,eAAL;AAAsB;AACpB,cAAM,IAAI,GAAG,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CAA1B;AACA,QAAA,OAAO,CAAC,aAAR;AACA,eAAO,CAAC,WAAW,CAAC,IAAD,CAAZ,CAAP;AACD;;AACD,SAAK,eAAL;AAAsB;AACpB,cAAM,IAAI,GAAG,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CAA1B;AACA,cAAM,KAAK,GACP,aAAa,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,EAA2B,OAA3B,CADjB;AAEA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,WAAW,GACb,aAAa,CAAC,aAAD,EAAgB,IAAhB,EAAsB,SAAtB,EAAiC,OAAjC,CADjB;AAEA,cAAM,cAAc,GAChB,aAAa,CAAC,gBAAD,EAAmB,IAAnB,EAAyB,SAAzB,EAAoC,OAApC,CADjB;AAEA,cAAM,sBAAsB,GACxB,aAAa,CAAC,wBAAD,EAA2B,IAA3B,EAAiC,SAAjC,EAA4C,OAA5C,CADjB;AAGA,cAAM,IAAI,GAAG,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CAA1B;AACA,cAAM,WAAW,GAAG,IAAI,WAAJ,CAChB,IADgB,EACV,KADU,EACH,IADG,EACG,YADH,EACiB,sBADjB,EACyC,WADzC,EAEhB,cAFgB,CAApB;AAGA,QAAA,OAAO,CAAC,cAAR,CAAuB,WAAvB;AACA,eAAO,CAAC,WAAW,CAAC,QAAb,EAAuB,MAAM,CAAC,GAAD,CAA7B,CAAP;AACD;;AACD,SAAK,oBAAL;AAA2B;AACzB,cAAM,EAAE,GACJ,aAAa,CAAC,eAAD,EAAkB,IAAlB,EAAwB,SAAxB,EAAmC,OAAnC,CADjB;AAEA,cAAM,KAAK,GAAG,aAAa,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,EAA2B,OAA3B,CAA3B;AACA,cAAM,WAAW,GACb,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;AAEA,cAAM,gBAAgB,GAAG,OAAO,CAAC,cAAR,CAAuB,EAAE,CAAC,EAA1B,CAAzB;AACA,QAAA,gBAAgB,CAAC,KAAjB,CAAuB,KAAvB,EAA8B,WAA9B;AACA,eAAO,CAAC,gBAAgB,CAAC,QAAlB,CAAP;AACD;;AACD,SAAK,mBAAL;AAA0B;AACxB,cAAM,MAAM,GACR,aAAa,CAAC,eAAD,EAAkB,IAAlB,EAAwB,SAAxB,EAAmC,OAAnC,CADjB;AAEA,cAAM,SAAS,GACX,aAAa,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,EAA2B,OAA3B,CADjB;AAEA,cAAM,eAAe,GAAG,OAAO,CAAC,cAAR,CAAuB,MAAM,CAAC,EAA9B,CAAxB;AACA,eAAO,CAAC,eAAe,CAAC,IAAhB,CAAqB,SAArB,CAAD,CAAP;AACD;;AACD,SAAK,qBAAL;AAA4B;AAC1B,cAAM,QAAQ,GACV,aAAa,CAAC,eAAD,EAAkB,IAAlB,EAAwB,SAAxB,EAAmC,OAAnC,CADjB;AAEA,cAAM,aAAa,GACf,aAAa,CAAC,SAAD,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,OAA7B,CADjB;AAEA,cAAM,WAAW,GACb,aAAa,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,EAA2B,OAA3B,CADjB;AAEA,cAAM,iBAAiB,GAAG,OAAO,CAAC,cAAR,CAAuB,QAAQ,CAAC,EAAhC,CAA1B;AACA,eAAO,CAAC,iBAAiB,CAAC,MAAlB,CAAyB,aAAzB,EAAwC,WAAxC,CAAD,CAAP;AACD;;AACD,SAAK,sBAAL;AAA6B;AAC3B,cAAM,SAAS,GACX,aAAa,CAAC,eAAD,EAAkB,IAAlB,EAAwB,SAAxB,EAAmC,OAAnC,CADjB;AAEA,cAAM,cAAc,GAChB,aAAa,CAAC,SAAD,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,OAA7B,CADjB;AAEA,cAAM,aAAa,GACf,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;AAEA,cAAM,kBAAkB,GAAG,OAAO,CAAC,cAAR,CAAuB,SAAS,CAAC,EAAjC,CAA3B;AACA,QAAA,kBAAkB,CAAC,OAAnB,CAA2B,cAA3B,EAA2C,aAA3C;AACA,eAAO,CAAC,kBAAkB,CAAC,QAApB,CAAP;AACD;;AACD,SAAK,qBAAL;AAA4B;AAC1B,cAAM,QAAQ,GACV,aAAa,CAAC,eAAD,EAAkB,IAAlB,EAAwB,SAAxB,EAAmC,OAAnC,CADjB;AAEA,cAAM,iBAAiB,GAAG,OAAO,CAAC,cAAR,CAAuB,QAAQ,CAAC,EAAhC,CAA1B;AACA,cAAM,WAAW,GACb,aAAa,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,EAA2B,OAA3B,CADjB;AAEA,eAAO,CAAC,iBAAiB,CAAC,MAAlB,CAAyB,WAAzB,CAAD,CAAP;AACD;;AACD,SAAK,oBAAL;AAA2B;AACzB,cAAM,OAAO,GACT,aAAa,CAAC,eAAD,EAAkB,IAAlB,EAAwB,SAAxB,EAAmC,OAAnC,CADjB;AAEA,cAAM,WAAW,GACb,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;AAEA,cAAM,OAAO,GACT,aAAa,CAAC,SAAD,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,OAA7B,CADjB;AAEA,cAAM,gBAAgB,GAAG,OAAO,CAAC,cAAR,CAAuB,OAAO,CAAC,EAA/B,CAAzB;AACA,QAAA,gBAAgB,CAAC,KAAjB,CAAuB,OAAvB,EAAgC,WAAhC;AACA,eAAO,CAAC,gBAAgB,CAAC,QAAlB,CAAP;AACD;;AACD,SAAK,mBAAL;AAA0B;AACxB,cAAM,MAAM,GACR,aAAa,CAAC,eAAD,EAAkB,IAAlB,EAAwB,SAAxB,EAAmC,OAAnC,CADjB;AAEA,cAAM,eAAe,GAAG,OAAO,CAAC,cAAR,CAAuB,MAAM,CAAC,EAA9B,CAAxB;AACA,eAAO,CAAC,MAAM,CAAC,eAAe,CAAC,IAAhB,EAAD,EAAyB,OAAzB,CAAP,CAAP;AACD;;AACD,SAAK,oBAAL;AAA2B;AACzB,cAAM,OAAO,GACT,aAAa,CAAC,eAAD,EAAkB,IAAlB,EAAwB,SAAxB,EAAmC,OAAnC,CADjB;AAEA,cAAM,gBAAgB,GAAG,OAAO,CAAC,cAAR,CAAuB,OAAO,CAAC,EAA/B,CAAzB;AACA,QAAA,gBAAgB,CAAC,aAAjB;AACA,eAAO,CAAC,gBAAgB,CAAC,QAAlB,CAAP;AACD;;AACD,SAAK,mBAAL;AAA0B;AACxB,cAAM,QAAQ,GACV,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,KAAK,GAAG,aAAa,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,EAA2B,OAA3B,CAA3B;AACA,cAAM,WAAW,GACb,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;AAEA,cAAM,UAAU,GAAG,OAAO,CAAC,aAAR,CAAsB,QAAQ,CAAC,EAA/B,CAAnB;AACA,QAAA,UAAU,CAAC,OAAX,CAAmB,KAAnB,EAA0B,WAA1B;AACA,eAAO,CAAC,UAAU,CAAC,QAAZ,CAAP;AACD;;AACD,SAAK,mBAAL;AAA0B;AACxB,cAAM,QAAQ,GACV,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,SAAS,GACX,aAAa,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,EAA2B,OAA3B,CADjB;AAEA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAGA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,UAAU,GAAG,OAAO,CAAC,aAAR,CAAsB,QAAQ,CAAC,EAA/B,CAAnB;AACA,eAAO,CAAC,UAAU,CAAC,OAAX,CAAmB,SAAnB,EAA8B,YAA9B,EAA4C,YAA5C,CAAD,CAAP;AACD;;AACD,SAAK,qBAAL;AACA,SAAK,mBAAL;AAA0B;AACxB,cAAM,cAAc,GAChB,aAAa,CAAC,SAAD,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,OAA7B,CADjB;AAEA,cAAM,aAAa,GACf,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;AAEA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,WAAW,GACb,aAAa,CAAC,aAAD,EAAgB,IAAhB,EAAsB,SAAtB,EAAiC,OAAjC,CADjB;AAEA,cAAM,UAAU,GACZ,OAAO,CAAC,aAAD,EAAgB,cAAhB,EAAgC,YAAhC,EAA8C,WAA9C,CADX;AAEA,QAAA,OAAO,CAAC,aAAR,CAAsB,UAAtB;AACA,eAAO,CAAC,UAAU,CAAC,QAAZ,CAAP;AACD;;AACD,SAAK,mBAAL;AACA,SAAK,iBAAL;AAAwB;AACtB,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,YAAI,gBAAJ;;AAEA,YAAI,IAAI,CAAC,EAAL,KAAY,mBAAhB,EAAqC;AACnC,UAAA,gBAAgB,GAAG,aAAnB;AACD,SAFD,MAEO;AACL,UAAA,gBAAgB,GAAG,gBAAnB;AACD;;AAED,cAAM,WAAW,GACb,aAAa,CAAC,gBAAD,EAAmB,IAAnB,EAAyB,SAAzB,EAAoC,OAApC,CADjB;AAGA,cAAM,UAAU,GAAG,OAAO,CAAC,YAAD,EAAe,YAAf,EAA6B,WAA7B,CAA1B;AACA,QAAA,OAAO,CAAC,aAAR,CAAsB,UAAtB;AACA,eAAO,CAAC,UAAU,CAAC,QAAZ,CAAP;AACD;;AACD,SAAK,kBAAL;AAAyB;AACvB,cAAM,QAAQ,GACV,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,aAAa,GACf,aAAa,CAAC,SAAD,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,OAA7B,CADjB;AAEA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,UAAU,GAAG,OAAO,CAAC,aAAR,CAAsB,QAAQ,CAAC,EAA/B,CAAnB;AACA,eAAO,CAAC,UAAU,CAAC,MAAX,CAAkB,aAAlB,EAAiC,YAAjC,EAA+C,YAA/C,CAAD,CAAP;AACD;;AACD,SAAK,iBAAL;AAAwB;AACtB,cAAM,QAAQ,GACV,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,WAAW,GACb,aAAa,CAAC,aAAD,EAAgB,IAAhB,EAAsB,SAAtB,EAAiC,OAAjC,CADjB;AAEA,cAAM,UAAU,GAAG,OAAO,CAAC,aAAR,CAAsB,QAAQ,CAAC,EAA/B,CAAnB;AACA,eAAO,CAAC,UAAU,CAAC,KAAX,CAAiB,YAAjB,EAA+B,YAA/B,EAA6C,WAA7C,CAAD,CAAP;AACD;;AACD,SAAK,sBAAL;AAA6B;AAC3B,cAAM,MAAM,GACR,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;AAEA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,UAAU,GAAG,UAAU,CAAC,MAAD,EAAS,YAAT,EAAuB,YAAvB,CAA7B;AACA,QAAA,OAAO,CAAC,aAAR,CAAsB,UAAtB;AACA,eAAO,CAAC,UAAU,CAAC,QAAZ,CAAP;AACD;;AACD,SAAK,kBAAL;AAAyB;AACvB,cAAM,QAAQ,GACV,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,UAAU,GAAG,OAAO,CAAC,aAAR,CAAsB,QAAQ,CAAC,EAA/B,CAAnB;AACA,cAAM,WAAW,GACb,aAAa,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,EAA2B,OAA3B,CADjB;AAEA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,eAAO,CAAC,UAAU,CAAC,MAAX,CAAkB,WAAlB,EAA+B,YAA/B,CAAD,CAAP;AACD;;AACD,SAAK,oBAAL;AAA2B;AACzB,cAAM,QAAQ,GACV,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,WAAW,GACb,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;AAEA,cAAM,UAAU,GAAG,OAAO,CAAC,aAAR,CAAsB,QAAQ,CAAC,EAA/B,CAAnB;AACA,QAAA,UAAU,CAAC,QAAX,CAAoB,WAApB;AACA,eAAO,CAAC,UAAU,CAAC,QAAZ,CAAP;AACD;;AACD,SAAK,mBAAL;AAA0B;AACxB,cAAM,QAAQ,GACV,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,UAAU,GAAG,OAAO,CAAC,aAAR,CAAsB,QAAQ,CAAC,EAA/B,CAAnB;AACA,eAAO,CAAC,UAAU,CAAC,OAAX,CAAmB,YAAnB,EAAiC,YAAjC,CAAD,CAAP;AACD;;AACD,SAAK,iBAAL;AAAwB;AACtB,cAAM,WAAW,GACb,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;AAEA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAEA,cAAM,OAAO,GACT,aAAa,CAAC,SAAD,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,OAA7B,CADjB;AAGA,cAAM,UAAU,GAAG,KAAK,CAAC,WAAD,EAAc,OAAd,EAAuB,YAAvB,CAAxB;AACA,QAAA,OAAO,CAAC,aAAR,CAAsB,UAAtB;AACA,eAAO,CAAC,UAAU,CAAC,QAAZ,CAAP;AACD;;AACD;AACE,YAAM,SAAS,CAAC,aAAa,IAAI,CAAC,EAAE,qBAArB,CAAf;AAnVJ;AAqVD,CAxVM;AA0VP,OAAO,MAAM,QAAQ,GAAG,SAAjB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { TensorArray } from '../../executor/tensor_array';\nimport { fromTensor, reserve, scatter, split } from '../../executor/tensor_list';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = async (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'If':\n        case 'StatelessIf': {\n            const thenFunc = getParamValue('thenBranch', node, tensorMap, context);\n            const elseFunc = getParamValue('elseBranch', node, tensorMap, context);\n            const cond = getParamValue('cond', node, tensorMap, context);\n            const args = getParamValue('args', node, tensorMap, context);\n            const condValue = await cond.data();\n            if (condValue[0]) {\n                return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n            }\n            else {\n                return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n            }\n        }\n        case 'While':\n        case 'StatelessWhile': {\n            const bodyFunc = getParamValue('body', node, tensorMap, context);\n            const condFunc = getParamValue('cond', node, tensorMap, context);\n            const args = getParamValue('args', node, tensorMap, context);\n            // Calculate the condition of the loop\n            const condResult = (await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap));\n            const argIds = args.map(tensor => tensor.id);\n            let condValue = await condResult[0].data();\n            // Dispose the intermediate tensors for condition function\n            condResult.forEach(tensor => {\n                if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n                    tensor.dispose();\n                }\n            });\n            let result = args;\n            while (condValue[0]) {\n                // Record the previous result for intermediate tensor tracking\n                const origResult = result;\n                // Execution the body of the loop\n                result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n                const resultIds = result.map(tensor => tensor.id);\n                // Dispose the intermediate tensor for body function that is not global\n                // kept, not input/output of the body function\n                origResult.forEach(tensor => {\n                    if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n                        resultIds.indexOf(tensor.id) === -1) {\n                        tensor.dispose();\n                    }\n                });\n                // Recalcuate the condition of the loop using the latest results.\n                const condResult = (await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap));\n                condValue = await condResult[0].data();\n                // Dispose the intermediate tensors for condition function\n                condResult.forEach(tensor => {\n                    if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n                        resultIds.indexOf(tensor.id) === -1) {\n                        tensor.dispose();\n                    }\n                });\n            }\n            return result;\n        }\n        case 'LoopCond': {\n            const pred = getParamValue('pred', node, tensorMap, context);\n            return [cloneTensor(pred)];\n        }\n        case 'Switch': {\n            const pred = getParamValue('pred', node, tensorMap, context);\n            let data = getParamValue('data', node, tensorMap, context);\n            if (!data.kept) {\n                data = cloneTensor(data);\n            }\n            // Outputs nodes :0 => false, :1 => true\n            return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n        }\n        case 'Merge': {\n            const inputName = node.inputNames.find(name => getTensor(name, tensorMap, context) !== undefined);\n            if (inputName) {\n                const data = getTensor(inputName, tensorMap, context);\n                return [cloneTensor(data)];\n            }\n            return undefined;\n        }\n        case 'Enter': {\n            const frameId = getParamValue('frameName', node, tensorMap, context);\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.enterFrame(frameId);\n            return [cloneTensor(data)];\n        }\n        case 'Exit': {\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.exitFrame();\n            return [cloneTensor(data)];\n        }\n        case 'NextIteration': {\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.nextIteration();\n            return [cloneTensor(data)];\n        }\n        case 'TensorArrayV3': {\n            const size = getParamValue('size', node, tensorMap, context);\n            const dtype = getParamValue('dtype', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const dynamicSize = getParamValue('dynamicSize', node, tensorMap, context);\n            const clearAfterRead = getParamValue('clearAfterRead', node, tensorMap, context);\n            const identicalElementShapes = getParamValue('identicalElementShapes', node, tensorMap, context);\n            const name = getParamValue('name', node, tensorMap, context);\n            const tensorArray = new TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);\n            context.addTensorArray(tensorArray);\n            return [tensorArray.idTensor, scalar(1.0)];\n        }\n        case 'TensorArrayWriteV3': {\n            const id = getParamValue('tensorArrayId', node, tensorMap, context);\n            const index = getParamValue('index', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const writeTensorArray = context.getTensorArray(id.id);\n            writeTensorArray.write(index, writeTensor);\n            return [writeTensorArray.idTensor];\n        }\n        case 'TensorArrayReadV3': {\n            const readId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const readIndex = getParamValue('index', node, tensorMap, context);\n            const readTensorArray = context.getTensorArray(readId.id);\n            return [readTensorArray.read(readIndex)];\n        }\n        case 'TensorArrayGatherV3': {\n            const gatherId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const gatherIndices = getParamValue('indices', node, tensorMap, context);\n            const gatherDtype = getParamValue('dtype', node, tensorMap, context);\n            const gatherTensorArray = context.getTensorArray(gatherId.id);\n            return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n        }\n        case 'TensorArrayScatterV3': {\n            const scatterId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const scatterIndices = getParamValue('indices', node, tensorMap, context);\n            const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n            const scatterTensorArray = context.getTensorArray(scatterId.id);\n            scatterTensorArray.scatter(scatterIndices, scatterTensor);\n            return [scatterTensorArray.idTensor];\n        }\n        case 'TensorArrayConcatV3': {\n            const concatId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const concatTensorArray = context.getTensorArray(concatId.id);\n            const concatDtype = getParamValue('dtype', node, tensorMap, context);\n            return [concatTensorArray.concat(concatDtype)];\n        }\n        case 'TensorArraySplitV3': {\n            const splitId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const splitTensor = getParamValue('tensor', node, tensorMap, context);\n            const lengths = getParamValue('lengths', node, tensorMap, context);\n            const splitTensorArray = context.getTensorArray(splitId.id);\n            splitTensorArray.split(lengths, splitTensor);\n            return [splitTensorArray.idTensor];\n        }\n        case 'TensorArraySizeV3': {\n            const sizeId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const sizeTensorArray = context.getTensorArray(sizeId.id);\n            return [scalar(sizeTensorArray.size(), 'int32')];\n        }\n        case 'TensorArrayCloseV3': {\n            const closeId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const closeTensorArray = context.getTensorArray(closeId.id);\n            closeTensorArray.clearAndClose();\n            return [closeTensorArray.idTensor];\n        }\n        case 'TensorListSetItem': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const index = getParamValue('index', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            tensorList.setItem(index, writeTensor);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListGetItem': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const readIndex = getParamValue('index', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDType = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.getItem(readIndex, elementShape, elementDType)];\n        }\n        case 'TensorListScatterV2':\n        case 'TensorListScatter': {\n            const scatterIndices = getParamValue('indices', node, tensorMap, context);\n            const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const numElements = getParamValue('numElements', node, tensorMap, context);\n            const tensorList = scatter(scatterTensor, scatterIndices, elementShape, numElements);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListReserve':\n        case 'EmptyTensorList': {\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            let numElementsParam;\n            if (node.op === 'TensorListReserve') {\n                numElementsParam = 'numElements';\n            }\n            else {\n                numElementsParam = 'maxNumElements';\n            }\n            const numElements = getParamValue(numElementsParam, node, tensorMap, context);\n            const tensorList = reserve(elementShape, elementDtype, numElements);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListGather': {\n            const gatherId = getParamValue('tensorListId', node, tensorMap, context);\n            const gatherIndices = getParamValue('indices', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(gatherId.id);\n            return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n        }\n        case 'TensorListStack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const numElements = getParamValue('numElements', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.stack(elementShape, elementDtype, numElements)];\n        }\n        case 'TensorListFromTensor': {\n            const tensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = fromTensor(tensor, elementShape, elementDtype);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListConcat': {\n            const concatId = getParamValue('tensorListId', node, tensorMap, context);\n            const tensorList = context.getTensorList(concatId.id);\n            const concatDtype = getParamValue('dtype', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            return [tensorList.concat(concatDtype, elementShape)];\n        }\n        case 'TensorListPushBack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            tensorList.pushBack(writeTensor);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListPopBack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDType = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.popBack(elementShape, elementDType)];\n        }\n        case 'TensorListSplit': {\n            const splitTensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const lengths = getParamValue('lengths', node, tensorMap, context);\n            const tensorList = split(splitTensor, lengths, elementShape);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'control';\n//# sourceMappingURL=control_executor.js.map"]},"metadata":{},"sourceType":"module"}