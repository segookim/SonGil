{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Recurrent Neural Network Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport { nameScope } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, SymbolicTensor } from '../engine/topology';\nimport { Layer } from '../engine/topology';\nimport { AttributeError, NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, Initializer, Ones, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor, isArrayOfShapes } from '../utils/types_utils';\nimport { batchGetValue, batchSetValue } from '../variables';\nimport { deserialize } from './serialization';\n/**\n * Standardize `apply()` args to a single list of tensor inputs.\n *\n * When running a model loaded from file, the input tensors `initialState` and\n * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the\n * dedicated kwargs fields. `inputs` consists of\n * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this\n * case.\n * This method makes sure that arguments are\n * separated and that `initialState` and `constants` are `Array`s of tensors\n * (or None).\n *\n * @param inputs Tensor or `Array` of  tensors.\n * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.\n * @param constants Tensor or `Array` of tensors or `null`/`undefined`.\n * @returns An object consisting of\n *   inputs: A tensor.\n *   initialState: `Array` of tensors or `null`.\n *   constants: `Array` of tensors or `null`.\n * @throws ValueError, if `inputs` is an `Array` but either `initialState` or\n *   `constants` is provided.\n */\n\nexport function standardizeArgs(inputs, initialState, constants, numConstants) {\n  if (Array.isArray(inputs)) {\n    if (initialState != null || constants != null) {\n      throw new ValueError('When inputs is an array, neither initialState or constants ' + 'should be provided');\n    }\n\n    if (numConstants != null) {\n      constants = inputs.slice(inputs.length - numConstants, inputs.length);\n      inputs = inputs.slice(0, inputs.length - numConstants);\n    }\n\n    if (inputs.length > 1) {\n      initialState = inputs.slice(1, inputs.length);\n    }\n\n    inputs = inputs[0];\n  }\n\n  function toListOrNull(x) {\n    if (x == null || Array.isArray(x)) {\n      return x;\n    } else {\n      return [x];\n    }\n  }\n\n  initialState = toListOrNull(initialState);\n  constants = toListOrNull(constants);\n  return {\n    inputs,\n    initialState,\n    constants\n  };\n}\n/**\n * Iterates over the time dimension of a tensor.\n *\n * @param stepFunction RNN step function.\n *   Parameters:\n *     inputs: tensor with shape `[samples, ...]` (no time dimension),\n *       representing input for the batch of samples at a certain time step.\n *     states: an Array of tensors.\n *   Returns:\n *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).\n *     newStates: list of tensors, same length and shapes as `states`. The first\n *       state in the list must be the output tensor at the previous timestep.\n * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at\n *   least 3D).\n * @param initialStates Tensor with shape `[samples, outputDim]` (no time\n *   dimension), containing the initial values of the states used in the step\n *   function.\n * @param goBackwards If `true`, do the iteration over the time dimension in\n *   reverse order and return the reversed sequence.\n * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for\n *   every element that is masked.\n * @param constants An Array of constant values passed at each step.\n * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*\n *   applicable to this imperative deeplearn.js backend. Its value is ignored.\n * @param needPerStepOutputs Whether the per-step outputs are to be\n *   concatenated into a single tensor and returned (as the second return\n *   value). Default: `false`. This arg is included so that the relatively\n *   expensive concatenation of the stepwise outputs can be omitted unless\n *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which\n *   `returnSequence` is `true`.)\n * @returns An Array: `[lastOutput, outputs, newStates]`.\n *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.\n *   outputs: tensor with shape `[samples, time, ...]` where each entry\n *     `output[s, t]` is the output of the step function at time `t` for sample\n *     `s`. This return value is provided if and only if the\n *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this\n *     return value will be `undefined`.\n *   newStates: Array of tensors, latest states returned by the step function,\n *      of shape `(samples, ...)`.\n * @throws ValueError If input dimension is less than 3.\n *\n * TODO(nielsene): This needs to be tidy-ed.\n */\n\nexport function rnn(stepFunction, inputs, initialStates, goBackwards = false, mask, constants, unroll = false, needPerStepOutputs = false) {\n  return tfc.tidy(() => {\n    const ndim = inputs.shape.length;\n\n    if (ndim < 3) {\n      throw new ValueError(`Input should be at least 3D, but is ${ndim}D.`);\n    } // Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,\n    // ...].\n\n\n    const axes = [1, 0].concat(math_utils.range(2, ndim));\n    inputs = tfc.transpose(inputs, axes);\n\n    if (constants != null) {\n      throw new NotImplementedError('The rnn() functoin of the deeplearn.js backend does not support ' + 'constants yet.');\n    } // Porting Note: the unroll option is ignored by the imperative backend.\n\n\n    if (unroll) {\n      console.warn('Backend rnn(): the unroll = true option is not applicable to the ' + 'imperative deeplearn.js backend.');\n    }\n\n    if (mask != null) {\n      mask = mask.asType('bool').asType('float32');\n\n      if (mask.rank === ndim - 1) {\n        mask = tfc.expandDims(mask, -1);\n      }\n\n      mask = tfc.transpose(mask, axes);\n    }\n\n    if (goBackwards) {\n      inputs = tfc.reverse(inputs, 0);\n\n      if (mask != null) {\n        mask = tfc.reverse(mask, 0);\n      }\n    } // Porting Note: PyKeras with TensorFlow backend uses a symbolic loop\n    //   (tf.while_loop). But for the imperative deeplearn.js backend, we just\n    //   use the usual TypeScript control flow to iterate over the time steps in\n    //   the inputs.\n    // Porting Note: PyKeras patches a \"_use_learning_phase\" attribute to\n    // outputs.\n    //   This is not idiomatic in TypeScript. The info regarding whether we are\n    //   in a learning (i.e., training) phase for RNN is passed in a different\n    //   way.\n\n\n    const perStepOutputs = [];\n    let lastOutput;\n    let states = initialStates;\n    const timeSteps = inputs.shape[0];\n    const perStepInputs = tfc.unstack(inputs);\n    let perStepMasks;\n\n    if (mask != null) {\n      perStepMasks = tfc.unstack(mask);\n    }\n\n    for (let t = 0; t < timeSteps; ++t) {\n      const currentInput = perStepInputs[t];\n      const stepOutputs = tfc.tidy(() => stepFunction(currentInput, states));\n\n      if (mask == null) {\n        lastOutput = stepOutputs[0];\n        states = stepOutputs[1];\n      } else {\n        const maskedOutputs = tfc.tidy(() => {\n          const stepMask = perStepMasks[t];\n          const negStepMask = tfc.onesLike(stepMask).sub(stepMask); // TODO(cais): Would tfc.where() be better for performance?\n\n          const output = stepOutputs[0].mul(stepMask).add(states[0].mul(negStepMask));\n          const newStates = states.map((state, i) => {\n            return stepOutputs[1][i].mul(stepMask).add(state.mul(negStepMask));\n          });\n          return {\n            output,\n            newStates\n          };\n        });\n        lastOutput = maskedOutputs.output;\n        states = maskedOutputs.newStates;\n      }\n\n      if (needPerStepOutputs) {\n        perStepOutputs.push(lastOutput);\n      }\n    }\n\n    let outputs;\n\n    if (needPerStepOutputs) {\n      const axis = 1;\n      outputs = tfc.stack(perStepOutputs, axis);\n    }\n\n    return [lastOutput, outputs, states];\n  });\n}\nexport class RNN extends Layer {\n  constructor(args) {\n    super(args);\n    let cell;\n\n    if (args.cell == null) {\n      throw new ValueError('cell property is missing for the constructor of RNN.');\n    } else if (Array.isArray(args.cell)) {\n      cell = new StackedRNNCells({\n        cells: args.cell\n      });\n    } else {\n      cell = args.cell;\n    }\n\n    if (cell.stateSize == null) {\n      throw new ValueError('The RNN cell should have an attribute `stateSize` (tuple of ' + 'integers, one integer per RNN state).');\n    }\n\n    this.cell = cell;\n    this.returnSequences = args.returnSequences == null ? false : args.returnSequences;\n    this.returnState = args.returnState == null ? false : args.returnState;\n    this.goBackwards = args.goBackwards == null ? false : args.goBackwards;\n    this._stateful = args.stateful == null ? false : args.stateful;\n    this.unroll = args.unroll == null ? false : args.unroll;\n    this.supportsMasking = true;\n    this.inputSpec = [new InputSpec({\n      ndim: 3\n    })];\n    this.stateSpec = null;\n    this.states_ = null; // TODO(cais): Add constantsSpec and numConstants.\n\n    this.numConstants = null; // TODO(cais): Look into the use of initial_state in the kwargs of the\n    //   constructor.\n\n    this.keptStates = [];\n  } // Porting Note: This is the equivalent of `RNN.states` property getter in\n  //   PyKeras.\n\n\n  getStates() {\n    if (this.states_ == null) {\n      const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      return math_utils.range(0, numStates).map(x => null);\n    } else {\n      return this.states_;\n    }\n  } // Porting Note: This is the equivalent of the `RNN.states` property setter in\n  //   PyKeras.\n\n\n  setStates(states) {\n    this.states_ = states;\n  }\n\n  computeOutputShape(inputShape) {\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = inputShape[0];\n    }\n\n    inputShape = inputShape; // TODO(cais): Remove the casting once stacked RNN cells become supported.\n\n    let stateSize = this.cell.stateSize;\n\n    if (!Array.isArray(stateSize)) {\n      stateSize = [stateSize];\n    }\n\n    const outputDim = stateSize[0];\n    let outputShape;\n\n    if (this.returnSequences) {\n      outputShape = [inputShape[0], inputShape[1], outputDim];\n    } else {\n      outputShape = [inputShape[0], outputDim];\n    }\n\n    if (this.returnState) {\n      const stateShape = [];\n\n      for (const dim of stateSize) {\n        stateShape.push([inputShape[0], dim]);\n      }\n\n      return [outputShape].concat(stateShape);\n    } else {\n      return outputShape;\n    }\n  }\n\n  computeMask(inputs, mask) {\n    return tfc.tidy(() => {\n      if (Array.isArray(mask)) {\n        mask = mask[0];\n      }\n\n      const outputMask = this.returnSequences ? mask : null;\n\n      if (this.returnState) {\n        const stateMask = this.states.map(s => null);\n        return [outputMask].concat(stateMask);\n      } else {\n        return outputMask;\n      }\n    });\n  }\n  /**\n   * Get the current state tensors of the RNN.\n   *\n   * If the state hasn't been set, return an array of `null`s of the correct\n   * length.\n   */\n\n\n  get states() {\n    if (this.states_ == null) {\n      const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      const output = [];\n\n      for (let i = 0; i < numStates; ++i) {\n        output.push(null);\n      }\n\n      return output;\n    } else {\n      return this.states_;\n    }\n  }\n\n  set states(s) {\n    this.states_ = s;\n  }\n\n  build(inputShape) {\n    // Note inputShape will be an Array of Shapes of initial states and\n    // constants if these are passed in apply().\n    const constantShape = null;\n\n    if (this.numConstants != null) {\n      throw new NotImplementedError('Constants support is not implemented in RNN yet.');\n    }\n\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = inputShape[0];\n    }\n\n    inputShape = inputShape;\n    const batchSize = this.stateful ? inputShape[0] : null;\n    const inputDim = inputShape.slice(2);\n    this.inputSpec[0] = new InputSpec({\n      shape: [batchSize, null, ...inputDim]\n    }); // Allow cell (if RNNCell Layer) to build before we set or validate\n    // stateSpec.\n\n    const stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n\n    if (constantShape != null) {\n      throw new NotImplementedError('Constants support is not implemented in RNN yet.');\n    } else {\n      this.cell.build(stepInputShape);\n    } // Set or validate stateSpec.\n\n\n    let stateSize;\n\n    if (Array.isArray(this.cell.stateSize)) {\n      stateSize = this.cell.stateSize;\n    } else {\n      stateSize = [this.cell.stateSize];\n    }\n\n    if (this.stateSpec != null) {\n      if (!util.arraysEqual(this.stateSpec.map(spec => spec.shape[spec.shape.length - 1]), stateSize)) {\n        throw new ValueError(`An initialState was passed that is not compatible with ` + `cell.stateSize. Received stateSpec=${this.stateSpec}; ` + `However cell.stateSize is ${this.cell.stateSize}`);\n      }\n    } else {\n      this.stateSpec = stateSize.map(dim => new InputSpec({\n        shape: [null, dim]\n      }));\n    }\n\n    if (this.stateful) {\n      this.resetStates();\n    }\n  }\n  /**\n   * Reset the state tensors of the RNN.\n   *\n   * If the `states` argument is `undefined` or `null`, will set the\n   * state tensor(s) of the RNN to all-zero tensors of the appropriate\n   * shape(s).\n   *\n   * If `states` is provided, will set the state tensors of the RNN to its\n   * value.\n   *\n   * @param states Optional externally-provided initial states.\n   * @param training Whether this call is done during training. For stateful\n   *   RNNs, this affects whether the old states are kept or discarded. In\n   *   particular, if `training` is `true`, the old states will be kept so\n   *   that subsequent backpropgataion through time (BPTT) may work properly.\n   *   Else, the old states will be discarded.\n   */\n\n\n  resetStates(states, training = false) {\n    tidy(() => {\n      if (!this.stateful) {\n        throw new AttributeError('Cannot call resetStates() on an RNN Layer that is not stateful.');\n      }\n\n      const batchSize = this.inputSpec[0].shape[0];\n\n      if (batchSize == null) {\n        throw new ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' + 'the batch size of your input tensors: \\n' + '- If using a Sequential model, specify the batch size by ' + 'passing a `batchInputShape` option to your first layer.\\n' + '- If using the functional API, specify the batch size by ' + 'passing a `batchShape` option to your Input layer.');\n      } // Initialize state if null.\n\n\n      if (this.states_ == null) {\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_ = [tfc.zeros([batchSize, this.cell.stateSize])];\n        }\n      } else if (states == null) {\n        // Dispose old state tensors.\n        tfc.dispose(this.states_); // For stateful RNNs, fully dispose kept old states.\n\n        if (this.keptStates != null) {\n          tfc.dispose(this.keptStates);\n          this.keptStates = [];\n        }\n\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_[0] = tfc.zeros([batchSize, this.cell.stateSize]);\n        }\n      } else {\n        if (!Array.isArray(states)) {\n          states = [states];\n        }\n\n        if (states.length !== this.states_.length) {\n          throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), ` + `but it received ${states.length} state value(s). Input ` + `received: ${states}`);\n        }\n\n        if (training === true) {\n          // Store old state tensors for complete disposal later, i.e., during\n          // the next no-arg call to this method. We do not dispose the old\n          // states immediately because that BPTT (among other things) require\n          // them.\n          this.keptStates.push(this.states_.slice());\n        } else {\n          tfc.dispose(this.states_);\n        }\n\n        for (let index = 0; index < this.states_.length; ++index) {\n          const value = states[index];\n          const dim = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[index] : this.cell.stateSize;\n          const expectedShape = [batchSize, dim];\n\n          if (!util.arraysEqual(value.shape, expectedShape)) {\n            throw new ValueError(`State ${index} is incompatible with layer ${this.name}: ` + `expected shape=${expectedShape}, received shape=${value.shape}`);\n          }\n\n          this.states_[index] = value;\n        }\n      }\n\n      this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n    });\n  }\n\n  apply(inputs, kwargs) {\n    // TODO(cais): Figure out whether initialState is in kwargs or inputs.\n    let initialState = kwargs == null ? null : kwargs['initialState'];\n    let constants = kwargs == null ? null : kwargs['constants'];\n\n    if (kwargs == null) {\n      kwargs = {};\n    }\n\n    const standardized = standardizeArgs(inputs, initialState, constants, this.numConstants);\n    inputs = standardized.inputs;\n    initialState = standardized.initialState;\n    constants = standardized.constants; // If any of `initial_state` or `constants` are specified and are\n    // `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify\n    // the input_spec to include them.\n\n    let additionalInputs = [];\n    let additionalSpecs = [];\n\n    if (initialState != null) {\n      kwargs['initialState'] = initialState;\n      additionalInputs = additionalInputs.concat(initialState);\n      this.stateSpec = [];\n\n      for (const state of initialState) {\n        this.stateSpec.push(new InputSpec({\n          shape: state.shape\n        }));\n      } // TODO(cais): Use the following instead.\n      // this.stateSpec = initialState.map(state => new InputSpec({shape:\n      // state.shape}));\n\n\n      additionalSpecs = additionalSpecs.concat(this.stateSpec);\n    }\n\n    if (constants != null) {\n      kwargs['constants'] = constants;\n      additionalInputs = additionalInputs.concat(constants); // TODO(cais): Add this.constantsSpec.\n\n      this.numConstants = constants.length;\n    }\n\n    const isTensor = additionalInputs[0] instanceof SymbolicTensor;\n\n    if (isTensor) {\n      // Compute full input spec, including state and constants.\n      const fullInput = [inputs].concat(additionalInputs);\n      const fullInputSpec = this.inputSpec.concat(additionalSpecs); // Perform the call with temporarily replaced inputSpec.\n\n      const originalInputSpec = this.inputSpec;\n      this.inputSpec = fullInputSpec;\n      const output = super.apply(fullInput, kwargs);\n      this.inputSpec = originalInputSpec;\n      return output;\n    } else {\n      return super.apply(inputs, kwargs);\n    }\n  } // tslint:disable-next-line:no-any\n\n\n  call(inputs, kwargs) {\n    // Input shape: `[samples, time (padded with zeros), input_dim]`.\n    // Note that the .build() method of subclasses **must** define\n    // this.inputSpec and this.stateSpec owith complete input shapes.\n    return tidy(() => {\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      let initialState = kwargs == null ? null : kwargs['initialState'];\n      inputs = getExactlyOneTensor(inputs);\n\n      if (initialState == null) {\n        if (this.stateful) {\n          initialState = this.states_;\n        } else {\n          initialState = this.getInitialState(inputs);\n        }\n      }\n\n      const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n\n      if (initialState.length !== numStates) {\n        throw new ValueError(`RNN Layer has ${numStates} state(s) but was passed ` + `${initialState.length} initial state(s).`);\n      }\n\n      if (this.unroll) {\n        console.warn('Ignoring unroll = true for RNN layer, due to imperative backend.');\n      }\n\n      const cellCallKwargs = {\n        training\n      }; // TODO(cais): Add support for constants.\n\n      const step = (inputs, states) => {\n        // `inputs` and `states` are concatenated to form a single `Array` of\n        // `tf.Tensor`s as the input to `cell.call()`.\n        const outputs = this.cell.call([inputs].concat(states), cellCallKwargs); // Marshall the return value into output and new states.\n\n        return [outputs[0], outputs.slice(1)];\n      }; // TODO(cais): Add support for constants.\n\n\n      const rnnOutputs = rnn(step, inputs, initialState, this.goBackwards, mask, null, this.unroll, this.returnSequences);\n      const lastOutput = rnnOutputs[0];\n      const outputs = rnnOutputs[1];\n      const states = rnnOutputs[2];\n\n      if (this.stateful) {\n        this.resetStates(states, training);\n      }\n\n      const output = this.returnSequences ? outputs : lastOutput; // TODO(cais): Porperty set learning phase flag.\n\n      if (this.returnState) {\n        return [output].concat(states);\n      } else {\n        return output;\n      }\n    });\n  }\n\n  getInitialState(inputs) {\n    return tidy(() => {\n      // Build an all-zero tensor of shape [samples, outputDim].\n      // [Samples, timeSteps, inputDim].\n      let initialState = tfc.zeros(inputs.shape); // [Samples].\n\n      initialState = tfc.sum(initialState, [1, 2]);\n      initialState = K.expandDims(initialState); // [Samples, 1].\n\n      if (Array.isArray(this.cell.stateSize)) {\n        return this.cell.stateSize.map(dim => dim > 1 ? K.tile(initialState, [1, dim]) : initialState);\n      } else {\n        return this.cell.stateSize > 1 ? [K.tile(initialState, [1, this.cell.stateSize])] : [initialState];\n      }\n    });\n  }\n\n  get trainableWeights() {\n    if (!this.trainable) {\n      return [];\n    } // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n\n\n    return this.cell.trainableWeights;\n  }\n\n  get nonTrainableWeights() {\n    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n    if (!this.trainable) {\n      return this.cell.weights;\n    }\n\n    return this.cell.nonTrainableWeights;\n  }\n\n  setFastWeightInitDuringBuild(value) {\n    super.setFastWeightInitDuringBuild(value);\n\n    if (this.cell != null) {\n      this.cell.setFastWeightInitDuringBuild(value);\n    }\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      returnSequences: this.returnSequences,\n      returnState: this.returnState,\n      goBackwards: this.goBackwards,\n      stateful: this.stateful,\n      unroll: this.unroll\n    };\n\n    if (this.numConstants != null) {\n      config['numConstants'] = this.numConstants;\n    }\n\n    const cellConfig = this.cell.getConfig();\n\n    if (this.getClassName() === RNN.className) {\n      config['cell'] = {\n        'className': this.cell.getClassName(),\n        'config': cellConfig\n      };\n    } // this order is necessary, to prevent cell name from replacing layer name\n\n\n    return Object.assign({}, cellConfig, baseConfig, config);\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config, customObjects = {}) {\n    const cellConfig = config['cell'];\n    const cell = deserialize(cellConfig, customObjects);\n    return new cls(Object.assign(config, {\n      cell\n    }));\n  }\n\n}\n/** @nocollapse */\n\nRNN.className = 'RNN';\nserialization.registerClass(RNN); // Porting Note: This is a common parent class for RNN cells. There is no\n// equivalent of this in PyKeras. Having a common parent class forgoes the\n//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.\n\n/**\n * An RNNCell layer.\n *\n * @doc {heading: 'Layers', subheading: 'Classes'}\n */\n\nexport class RNNCell extends Layer {}\nexport class SimpleRNNCell extends RNNCell {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_ACTIVATION = 'tanh';\n    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n    this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    this.units = args.units;\n    assertPositiveInteger(this.units, `units`);\n    this.activation = getActivation(args.activation == null ? this.DEFAULT_ACTIVATION : args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([1, math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])]);\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape); // TODO(cais): Use regularizer.\n\n    this.kernel = this.addWeight('kernel', [inputShape[inputShape.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.built = true;\n  } // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:\n  //   `inputs` and `states`. Here, the two tensors are combined into an\n  //   `Tensor[]` Array as the first input argument.\n  //   Similarly, PyKeras' equivalent of this method returns two values:\n  //    `output` and `[output]`. Here the two are combined into one length-2\n  //    `Tensor[]`, consisting of `output` repeated.\n\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = inputs;\n\n      if (inputs.length !== 2) {\n        throw new ValueError(`SimpleRNNCell expects 2 input Tensors, got ${inputs.length}.`);\n      }\n\n      let prevOutput = inputs[1];\n      inputs = inputs[0];\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(inputs),\n          rate: this.dropout,\n          training\n        });\n      }\n\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(prevOutput),\n          rate: this.recurrentDropout,\n          training\n        });\n      }\n\n      let h;\n      const dpMask = this.dropoutMask;\n      const recDpMask = this.recurrentDropoutMask;\n\n      if (dpMask != null) {\n        h = K.dot(tfc.mul(inputs, dpMask), this.kernel.read());\n      } else {\n        h = K.dot(inputs, this.kernel.read());\n      }\n\n      if (this.bias != null) {\n        h = K.biasAdd(h, this.bias.read());\n      }\n\n      if (recDpMask != null) {\n        prevOutput = tfc.mul(prevOutput, recDpMask);\n      }\n\n      let output = tfc.add(h, K.dot(prevOutput, this.recurrentKernel.read()));\n\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      } // TODO(cais): Properly set learning phase on output tensor?\n\n\n      return [output, output];\n    });\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout\n    };\n    return Object.assign({}, baseConfig, config);\n  }\n\n}\n/** @nocollapse */\n\nSimpleRNNCell.className = 'SimpleRNNCell';\nserialization.registerClass(SimpleRNNCell);\nexport class SimpleRNN extends RNN {\n  constructor(args) {\n    args.cell = new SimpleRNNCell(args);\n    super(args); // TODO(cais): Add activityRegularizer.\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState = kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {\n        mask,\n        training,\n        initialState\n      });\n    });\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls(config);\n  }\n\n}\n/** @nocollapse */\n\nSimpleRNN.className = 'SimpleRNN';\nserialization.registerClass(SimpleRNN);\nexport class GRUCell extends RNNCell {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_ACTIVATION = 'tanh';\n    this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n    this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n\n    if (args.resetAfter) {\n      throw new ValueError(`GRUCell does not support reset_after parameter set to true.`);\n    }\n\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(args.activation === undefined ? this.DEFAULT_ACTIVATION : args.activation);\n    this.recurrentActivation = getActivation(args.recurrentActivation === undefined ? this.DEFAULT_RECURRENT_ACTIVATION : args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([1, math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])]);\n    this.implementation = args.implementation;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight('kernel', [inputDim, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    } // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n\n\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = inputs;\n\n      if (inputs.length !== 2) {\n        throw new ValueError(`GRUCell expects 2 input Tensors (inputs, h, c), got ` + `${inputs.length}.`);\n      }\n\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      let hTMinus1 = inputs[1]; // Previous memory state.\n\n      inputs = inputs[0]; // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2, regardless of the actual value of\n      // config.implementation.\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(inputs),\n          rate: this.dropout,\n          training,\n          count: 3\n        });\n      }\n\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(hTMinus1),\n          rate: this.recurrentDropout,\n          training,\n          count: 3\n        });\n      }\n\n      const dpMask = this.dropoutMask;\n      const recDpMask = this.recurrentDropoutMask;\n      let z;\n      let r;\n      let hh;\n\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n\n      let matrixX = K.dot(inputs, this.kernel.read());\n\n      if (this.useBias) {\n        matrixX = K.biasAdd(matrixX, this.bias.read());\n      }\n\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n\n      const recurrentKernelValue = this.recurrentKernel.read();\n      const [rk1, rk2] = tfc.split(recurrentKernelValue, [2 * this.units, this.units], recurrentKernelValue.rank - 1);\n      const matrixInner = K.dot(hTMinus1, rk1);\n      const [xZ, xR, xH] = tfc.split(matrixX, 3, matrixX.rank - 1);\n      const [recurrentZ, recurrentR] = tfc.split(matrixInner, 2, matrixInner.rank - 1);\n      z = this.recurrentActivation.apply(tfc.add(xZ, recurrentZ));\n      r = this.recurrentActivation.apply(tfc.add(xR, recurrentR));\n      const recurrentH = K.dot(tfc.mul(r, hTMinus1), rk2);\n      hh = this.activation.apply(tfc.add(xH, recurrentH));\n      const h = tfc.add(tfc.mul(z, hTMinus1), tfc.mul(tfc.add(1, tfc.neg(z)), hh)); // TODO(cais): Add use_learning_phase flag properly.\n\n      return [h, h];\n    });\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n      resetAfter: false\n    };\n    return Object.assign({}, baseConfig, config);\n  }\n\n}\n/** @nocollapse */\n\nGRUCell.className = 'GRUCell';\nserialization.registerClass(GRUCell);\nexport class GRU extends RNN {\n  constructor(args) {\n    if (args.implementation === 0) {\n      console.warn('`implementation=0` has been deprecated, and now defaults to ' + '`implementation=1`. Please update your layer call.');\n    }\n\n    args.cell = new GRUCell(args);\n    super(args); // TODO(cais): Add activityRegularizer.\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState = kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {\n        mask,\n        training,\n        initialState\n      });\n    });\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n\n    return new cls(config);\n  }\n\n}\n/** @nocollapse */\n\nGRU.className = 'GRU';\nserialization.registerClass(GRU);\nexport class LSTMCell extends RNNCell {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_ACTIVATION = 'tanh';\n    this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n    this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(args.activation === undefined ? this.DEFAULT_ACTIVATION : args.activation);\n    this.recurrentActivation = getActivation(args.recurrentActivation === undefined ? this.DEFAULT_RECURRENT_ACTIVATION : args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.unitForgetBias = args.unitForgetBias;\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([1, math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])]);\n    this.implementation = args.implementation;\n    this.stateSize = [this.units, this.units];\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  build(inputShape) {\n    var _a;\n\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight('kernel', [inputDim, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n    let biasInitializer;\n\n    if (this.useBias) {\n      if (this.unitForgetBias) {\n        const capturedBiasInit = this.biasInitializer;\n        const capturedUnits = this.units;\n        biasInitializer = new (_a = class CustomInit extends Initializer {\n          apply(shape, dtype) {\n            // TODO(cais): More informative variable names?\n            const bI = capturedBiasInit.apply([capturedUnits]);\n            const bF = new Ones().apply([capturedUnits]);\n            const bCAndH = capturedBiasInit.apply([capturedUnits * 2]);\n            return K.concatAlongFirstAxis(K.concatAlongFirstAxis(bI, bF), bCAndH);\n          }\n\n        },\n        /** @nocollapse */\n        _a.className = 'CustomInit', _a)();\n      } else {\n        biasInitializer = this.biasInitializer;\n      }\n\n      this.bias = this.addWeight('bias', [this.units * 4], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    } // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n\n\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      inputs = inputs;\n\n      if (inputs.length !== 3) {\n        throw new ValueError(`LSTMCell expects 3 input Tensors (inputs, h, c), got ` + `${inputs.length}.`);\n      }\n\n      let hTMinus1 = inputs[1]; // Previous memory state.\n\n      const cTMinus1 = inputs[2]; // Previous carry state.\n\n      inputs = inputs[0];\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(inputs),\n          rate: this.dropout,\n          training,\n          count: 4\n        });\n      }\n\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(hTMinus1),\n          rate: this.recurrentDropout,\n          training,\n          count: 4\n        });\n      }\n\n      const dpMask = this.dropoutMask;\n      const recDpMask = this.recurrentDropoutMask; // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2 regardless of the actual value of\n      // config.implementation.\n\n      let i;\n      let f;\n      let c;\n      let o;\n\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n\n      let z = K.dot(inputs, this.kernel.read());\n\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n\n      z = tfc.add(z, K.dot(hTMinus1, this.recurrentKernel.read()));\n\n      if (this.useBias) {\n        z = K.biasAdd(z, this.bias.read());\n      }\n\n      const [z0, z1, z2, z3] = tfc.split(z, 4, z.rank - 1);\n      i = this.recurrentActivation.apply(z0);\n      f = this.recurrentActivation.apply(z1);\n      c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(z2)));\n      o = this.recurrentActivation.apply(z3);\n      const h = tfc.mul(o, this.activation.apply(c)); // TODO(cais): Add use_learning_phase flag properly.\n\n      return [h, h, c];\n    });\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      unitForgetBias: this.unitForgetBias,\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation\n    };\n    return Object.assign({}, baseConfig, config);\n  }\n\n}\n/** @nocollapse */\n\nLSTMCell.className = 'LSTMCell';\nserialization.registerClass(LSTMCell);\nexport class LSTM extends RNN {\n  constructor(args) {\n    if (args.implementation === 0) {\n      console.warn('`implementation=0` has been deprecated, and now defaults to ' + '`implementation=1`. Please update your layer call.');\n    }\n\n    args.cell = new LSTMCell(args);\n    super(args); // TODO(cais): Add activityRegularizer.\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState = kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {\n        mask,\n        training,\n        initialState\n      });\n    });\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n\n    return new cls(config);\n  }\n\n}\n/** @nocollapse */\n\nLSTM.className = 'LSTM';\nserialization.registerClass(LSTM);\nexport class StackedRNNCells extends RNNCell {\n  constructor(args) {\n    super(args);\n    this.cells = args.cells;\n  }\n\n  get stateSize() {\n    // States are a flat list in reverse order of the cell stack.\n    // This allows perserving the requirement `stack.statesize[0] ===\n    // outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,\n    // assuming one LSTM has states `[h, c]`.\n    const stateSize = [];\n\n    for (const cell of this.cells.slice().reverse()) {\n      if (Array.isArray(cell.stateSize)) {\n        stateSize.push(...cell.stateSize);\n      } else {\n        stateSize.push(cell.stateSize);\n      }\n    }\n\n    return stateSize;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = inputs;\n      let states = inputs.slice(1); // Recover per-cell states.\n\n      const nestedStates = [];\n\n      for (const cell of this.cells.slice().reverse()) {\n        if (Array.isArray(cell.stateSize)) {\n          nestedStates.push(states.splice(0, cell.stateSize.length));\n        } else {\n          nestedStates.push(states.splice(0, 1));\n        }\n      }\n\n      nestedStates.reverse(); // Call the cells in order and store the returned states.\n\n      const newNestedStates = [];\n      let callInputs;\n\n      for (let i = 0; i < this.cells.length; ++i) {\n        const cell = this.cells[i];\n        states = nestedStates[i]; // TODO(cais): Take care of constants.\n\n        if (i === 0) {\n          callInputs = [inputs[0]].concat(states);\n        } else {\n          callInputs = [callInputs[0]].concat(states);\n        }\n\n        callInputs = cell.call(callInputs, kwargs);\n        newNestedStates.push(callInputs.slice(1));\n      } // Format the new states as a flat list in reverse cell order.\n\n\n      states = [];\n\n      for (const cellStates of newNestedStates.slice().reverse()) {\n        states.push(...cellStates);\n      }\n\n      return [callInputs[0]].concat(states);\n    });\n  }\n\n  build(inputShape) {\n    if (isArrayOfShapes(inputShape)) {\n      // TODO(cais): Take care of input constants.\n      // const constantShape = inputShape.slice(1);\n      inputShape = inputShape[0];\n    }\n\n    inputShape = inputShape;\n    let outputDim;\n    this.cells.forEach((cell, i) => {\n      nameScope(`RNNCell_${i}`, () => {\n        // TODO(cais): Take care of input constants.\n        cell.build(inputShape);\n\n        if (Array.isArray(cell.stateSize)) {\n          outputDim = cell.stateSize[0];\n        } else {\n          outputDim = cell.stateSize;\n        }\n\n        inputShape = [inputShape[0], outputDim];\n      });\n    });\n    this.built = true;\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n\n    const getCellConfig = cell => {\n      return {\n        'className': cell.getClassName(),\n        'config': cell.getConfig()\n      };\n    };\n\n    const cellConfigs = this.cells.map(getCellConfig);\n    const config = {\n      'cells': cellConfigs\n    };\n    return Object.assign({}, baseConfig, config);\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config, customObjects = {}) {\n    const cells = [];\n\n    for (const cellConfig of config['cells']) {\n      cells.push(deserialize(cellConfig, customObjects));\n    }\n\n    return new cls({\n      cells\n    });\n  }\n\n  get trainableWeights() {\n    if (!this.trainable) {\n      return [];\n    }\n\n    const weights = [];\n\n    for (const cell of this.cells) {\n      weights.push(...cell.trainableWeights);\n    }\n\n    return weights;\n  }\n\n  get nonTrainableWeights() {\n    const weights = [];\n\n    for (const cell of this.cells) {\n      weights.push(...cell.nonTrainableWeights);\n    }\n\n    if (!this.trainable) {\n      const trainableWeights = [];\n\n      for (const cell of this.cells) {\n        trainableWeights.push(...cell.trainableWeights);\n      }\n\n      return trainableWeights.concat(weights);\n    }\n\n    return weights;\n  }\n  /**\n   * Retrieve the weights of a the model.\n   *\n   * @returns A flat `Array` of `tf.Tensor`s.\n   */\n\n\n  getWeights() {\n    const weights = [];\n\n    for (const cell of this.cells) {\n      weights.push(...cell.weights);\n    }\n\n    return batchGetValue(weights);\n  }\n  /**\n   * Set the weights of the model.\n   *\n   * @param weights An `Array` of `tf.Tensor`s with shapes and types matching\n   *     the output of `getWeights()`.\n   */\n\n\n  setWeights(weights) {\n    const tuples = [];\n\n    for (const cell of this.cells) {\n      const numParams = cell.weights.length;\n      const inputWeights = weights.splice(numParams);\n\n      for (let i = 0; i < cell.weights.length; ++i) {\n        tuples.push([cell.weights[i], inputWeights[i]]);\n      }\n    }\n\n    batchSetValue(tuples);\n  }\n\n}\n/** @nocollapse */\n\nStackedRNNCells.className = 'StackedRNNCells';\nserialization.registerClass(StackedRNNCells);\nexport function generateDropoutMask(args) {\n  const {\n    ones,\n    rate,\n    training = false,\n    count = 1\n  } = args;\n\n  const droppedInputs = () => K.dropout(ones(), rate);\n\n  const createMask = () => K.inTrainPhase(droppedInputs, ones, training); // just in case count is provided with null or undefined\n\n\n  if (!count || count <= 1) {\n    return tfc.keep(createMask().clone());\n  }\n\n  const masks = Array(count).fill(undefined).map(createMask);\n  return masks.map(m => tfc.keep(m.clone()));\n}","map":{"version":3,"sources":["../../src/layers/recurrent.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Recurrent Neural Network Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport { nameScope } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, SymbolicTensor } from '../engine/topology';\nimport { Layer } from '../engine/topology';\nimport { AttributeError, NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, Initializer, Ones, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor, isArrayOfShapes } from '../utils/types_utils';\nimport { batchGetValue, batchSetValue } from '../variables';\nimport { deserialize } from './serialization';\n/**\n * Standardize `apply()` args to a single list of tensor inputs.\n *\n * When running a model loaded from file, the input tensors `initialState` and\n * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the\n * dedicated kwargs fields. `inputs` consists of\n * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this\n * case.\n * This method makes sure that arguments are\n * separated and that `initialState` and `constants` are `Array`s of tensors\n * (or None).\n *\n * @param inputs Tensor or `Array` of  tensors.\n * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.\n * @param constants Tensor or `Array` of tensors or `null`/`undefined`.\n * @returns An object consisting of\n *   inputs: A tensor.\n *   initialState: `Array` of tensors or `null`.\n *   constants: `Array` of tensors or `null`.\n * @throws ValueError, if `inputs` is an `Array` but either `initialState` or\n *   `constants` is provided.\n */\nexport function standardizeArgs(inputs, initialState, constants, numConstants) {\n    if (Array.isArray(inputs)) {\n        if (initialState != null || constants != null) {\n            throw new ValueError('When inputs is an array, neither initialState or constants ' +\n                'should be provided');\n        }\n        if (numConstants != null) {\n            constants = inputs.slice(inputs.length - numConstants, inputs.length);\n            inputs = inputs.slice(0, inputs.length - numConstants);\n        }\n        if (inputs.length > 1) {\n            initialState = inputs.slice(1, inputs.length);\n        }\n        inputs = inputs[0];\n    }\n    function toListOrNull(x) {\n        if (x == null || Array.isArray(x)) {\n            return x;\n        }\n        else {\n            return [x];\n        }\n    }\n    initialState = toListOrNull(initialState);\n    constants = toListOrNull(constants);\n    return { inputs, initialState, constants };\n}\n/**\n * Iterates over the time dimension of a tensor.\n *\n * @param stepFunction RNN step function.\n *   Parameters:\n *     inputs: tensor with shape `[samples, ...]` (no time dimension),\n *       representing input for the batch of samples at a certain time step.\n *     states: an Array of tensors.\n *   Returns:\n *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).\n *     newStates: list of tensors, same length and shapes as `states`. The first\n *       state in the list must be the output tensor at the previous timestep.\n * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at\n *   least 3D).\n * @param initialStates Tensor with shape `[samples, outputDim]` (no time\n *   dimension), containing the initial values of the states used in the step\n *   function.\n * @param goBackwards If `true`, do the iteration over the time dimension in\n *   reverse order and return the reversed sequence.\n * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for\n *   every element that is masked.\n * @param constants An Array of constant values passed at each step.\n * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*\n *   applicable to this imperative deeplearn.js backend. Its value is ignored.\n * @param needPerStepOutputs Whether the per-step outputs are to be\n *   concatenated into a single tensor and returned (as the second return\n *   value). Default: `false`. This arg is included so that the relatively\n *   expensive concatenation of the stepwise outputs can be omitted unless\n *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which\n *   `returnSequence` is `true`.)\n * @returns An Array: `[lastOutput, outputs, newStates]`.\n *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.\n *   outputs: tensor with shape `[samples, time, ...]` where each entry\n *     `output[s, t]` is the output of the step function at time `t` for sample\n *     `s`. This return value is provided if and only if the\n *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this\n *     return value will be `undefined`.\n *   newStates: Array of tensors, latest states returned by the step function,\n *      of shape `(samples, ...)`.\n * @throws ValueError If input dimension is less than 3.\n *\n * TODO(nielsene): This needs to be tidy-ed.\n */\nexport function rnn(stepFunction, inputs, initialStates, goBackwards = false, mask, constants, unroll = false, needPerStepOutputs = false) {\n    return tfc.tidy(() => {\n        const ndim = inputs.shape.length;\n        if (ndim < 3) {\n            throw new ValueError(`Input should be at least 3D, but is ${ndim}D.`);\n        }\n        // Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,\n        // ...].\n        const axes = [1, 0].concat(math_utils.range(2, ndim));\n        inputs = tfc.transpose(inputs, axes);\n        if (constants != null) {\n            throw new NotImplementedError('The rnn() functoin of the deeplearn.js backend does not support ' +\n                'constants yet.');\n        }\n        // Porting Note: the unroll option is ignored by the imperative backend.\n        if (unroll) {\n            console.warn('Backend rnn(): the unroll = true option is not applicable to the ' +\n                'imperative deeplearn.js backend.');\n        }\n        if (mask != null) {\n            mask = mask.asType('bool').asType('float32');\n            if (mask.rank === ndim - 1) {\n                mask = tfc.expandDims(mask, -1);\n            }\n            mask = tfc.transpose(mask, axes);\n        }\n        if (goBackwards) {\n            inputs = tfc.reverse(inputs, 0);\n            if (mask != null) {\n                mask = tfc.reverse(mask, 0);\n            }\n        }\n        // Porting Note: PyKeras with TensorFlow backend uses a symbolic loop\n        //   (tf.while_loop). But for the imperative deeplearn.js backend, we just\n        //   use the usual TypeScript control flow to iterate over the time steps in\n        //   the inputs.\n        // Porting Note: PyKeras patches a \"_use_learning_phase\" attribute to\n        // outputs.\n        //   This is not idiomatic in TypeScript. The info regarding whether we are\n        //   in a learning (i.e., training) phase for RNN is passed in a different\n        //   way.\n        const perStepOutputs = [];\n        let lastOutput;\n        let states = initialStates;\n        const timeSteps = inputs.shape[0];\n        const perStepInputs = tfc.unstack(inputs);\n        let perStepMasks;\n        if (mask != null) {\n            perStepMasks = tfc.unstack(mask);\n        }\n        for (let t = 0; t < timeSteps; ++t) {\n            const currentInput = perStepInputs[t];\n            const stepOutputs = tfc.tidy(() => stepFunction(currentInput, states));\n            if (mask == null) {\n                lastOutput = stepOutputs[0];\n                states = stepOutputs[1];\n            }\n            else {\n                const maskedOutputs = tfc.tidy(() => {\n                    const stepMask = perStepMasks[t];\n                    const negStepMask = tfc.onesLike(stepMask).sub(stepMask);\n                    // TODO(cais): Would tfc.where() be better for performance?\n                    const output = stepOutputs[0].mul(stepMask).add(states[0].mul(negStepMask));\n                    const newStates = states.map((state, i) => {\n                        return stepOutputs[1][i].mul(stepMask).add(state.mul(negStepMask));\n                    });\n                    return { output, newStates };\n                });\n                lastOutput = maskedOutputs.output;\n                states = maskedOutputs.newStates;\n            }\n            if (needPerStepOutputs) {\n                perStepOutputs.push(lastOutput);\n            }\n        }\n        let outputs;\n        if (needPerStepOutputs) {\n            const axis = 1;\n            outputs = tfc.stack(perStepOutputs, axis);\n        }\n        return [lastOutput, outputs, states];\n    });\n}\nexport class RNN extends Layer {\n    constructor(args) {\n        super(args);\n        let cell;\n        if (args.cell == null) {\n            throw new ValueError('cell property is missing for the constructor of RNN.');\n        }\n        else if (Array.isArray(args.cell)) {\n            cell = new StackedRNNCells({ cells: args.cell });\n        }\n        else {\n            cell = args.cell;\n        }\n        if (cell.stateSize == null) {\n            throw new ValueError('The RNN cell should have an attribute `stateSize` (tuple of ' +\n                'integers, one integer per RNN state).');\n        }\n        this.cell = cell;\n        this.returnSequences =\n            args.returnSequences == null ? false : args.returnSequences;\n        this.returnState = args.returnState == null ? false : args.returnState;\n        this.goBackwards = args.goBackwards == null ? false : args.goBackwards;\n        this._stateful = args.stateful == null ? false : args.stateful;\n        this.unroll = args.unroll == null ? false : args.unroll;\n        this.supportsMasking = true;\n        this.inputSpec = [new InputSpec({ ndim: 3 })];\n        this.stateSpec = null;\n        this.states_ = null;\n        // TODO(cais): Add constantsSpec and numConstants.\n        this.numConstants = null;\n        // TODO(cais): Look into the use of initial_state in the kwargs of the\n        //   constructor.\n        this.keptStates = [];\n    }\n    // Porting Note: This is the equivalent of `RNN.states` property getter in\n    //   PyKeras.\n    getStates() {\n        if (this.states_ == null) {\n            const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n            return math_utils.range(0, numStates).map(x => null);\n        }\n        else {\n            return this.states_;\n        }\n    }\n    // Porting Note: This is the equivalent of the `RNN.states` property setter in\n    //   PyKeras.\n    setStates(states) {\n        this.states_ = states;\n    }\n    computeOutputShape(inputShape) {\n        if (isArrayOfShapes(inputShape)) {\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        // TODO(cais): Remove the casting once stacked RNN cells become supported.\n        let stateSize = this.cell.stateSize;\n        if (!Array.isArray(stateSize)) {\n            stateSize = [stateSize];\n        }\n        const outputDim = stateSize[0];\n        let outputShape;\n        if (this.returnSequences) {\n            outputShape = [inputShape[0], inputShape[1], outputDim];\n        }\n        else {\n            outputShape = [inputShape[0], outputDim];\n        }\n        if (this.returnState) {\n            const stateShape = [];\n            for (const dim of stateSize) {\n                stateShape.push([inputShape[0], dim]);\n            }\n            return [outputShape].concat(stateShape);\n        }\n        else {\n            return outputShape;\n        }\n    }\n    computeMask(inputs, mask) {\n        return tfc.tidy(() => {\n            if (Array.isArray(mask)) {\n                mask = mask[0];\n            }\n            const outputMask = this.returnSequences ? mask : null;\n            if (this.returnState) {\n                const stateMask = this.states.map(s => null);\n                return [outputMask].concat(stateMask);\n            }\n            else {\n                return outputMask;\n            }\n        });\n    }\n    /**\n     * Get the current state tensors of the RNN.\n     *\n     * If the state hasn't been set, return an array of `null`s of the correct\n     * length.\n     */\n    get states() {\n        if (this.states_ == null) {\n            const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n            const output = [];\n            for (let i = 0; i < numStates; ++i) {\n                output.push(null);\n            }\n            return output;\n        }\n        else {\n            return this.states_;\n        }\n    }\n    set states(s) {\n        this.states_ = s;\n    }\n    build(inputShape) {\n        // Note inputShape will be an Array of Shapes of initial states and\n        // constants if these are passed in apply().\n        const constantShape = null;\n        if (this.numConstants != null) {\n            throw new NotImplementedError('Constants support is not implemented in RNN yet.');\n        }\n        if (isArrayOfShapes(inputShape)) {\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        const batchSize = this.stateful ? inputShape[0] : null;\n        const inputDim = inputShape.slice(2);\n        this.inputSpec[0] = new InputSpec({ shape: [batchSize, null, ...inputDim] });\n        // Allow cell (if RNNCell Layer) to build before we set or validate\n        // stateSpec.\n        const stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n        if (constantShape != null) {\n            throw new NotImplementedError('Constants support is not implemented in RNN yet.');\n        }\n        else {\n            this.cell.build(stepInputShape);\n        }\n        // Set or validate stateSpec.\n        let stateSize;\n        if (Array.isArray(this.cell.stateSize)) {\n            stateSize = this.cell.stateSize;\n        }\n        else {\n            stateSize = [this.cell.stateSize];\n        }\n        if (this.stateSpec != null) {\n            if (!util.arraysEqual(this.stateSpec.map(spec => spec.shape[spec.shape.length - 1]), stateSize)) {\n                throw new ValueError(`An initialState was passed that is not compatible with ` +\n                    `cell.stateSize. Received stateSpec=${this.stateSpec}; ` +\n                    `However cell.stateSize is ${this.cell.stateSize}`);\n            }\n        }\n        else {\n            this.stateSpec =\n                stateSize.map(dim => new InputSpec({ shape: [null, dim] }));\n        }\n        if (this.stateful) {\n            this.resetStates();\n        }\n    }\n    /**\n     * Reset the state tensors of the RNN.\n     *\n     * If the `states` argument is `undefined` or `null`, will set the\n     * state tensor(s) of the RNN to all-zero tensors of the appropriate\n     * shape(s).\n     *\n     * If `states` is provided, will set the state tensors of the RNN to its\n     * value.\n     *\n     * @param states Optional externally-provided initial states.\n     * @param training Whether this call is done during training. For stateful\n     *   RNNs, this affects whether the old states are kept or discarded. In\n     *   particular, if `training` is `true`, the old states will be kept so\n     *   that subsequent backpropgataion through time (BPTT) may work properly.\n     *   Else, the old states will be discarded.\n     */\n    resetStates(states, training = false) {\n        tidy(() => {\n            if (!this.stateful) {\n                throw new AttributeError('Cannot call resetStates() on an RNN Layer that is not stateful.');\n            }\n            const batchSize = this.inputSpec[0].shape[0];\n            if (batchSize == null) {\n                throw new ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' +\n                    'the batch size of your input tensors: \\n' +\n                    '- If using a Sequential model, specify the batch size by ' +\n                    'passing a `batchInputShape` option to your first layer.\\n' +\n                    '- If using the functional API, specify the batch size by ' +\n                    'passing a `batchShape` option to your Input layer.');\n            }\n            // Initialize state if null.\n            if (this.states_ == null) {\n                if (Array.isArray(this.cell.stateSize)) {\n                    this.states_ =\n                        this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n                }\n                else {\n                    this.states_ = [tfc.zeros([batchSize, this.cell.stateSize])];\n                }\n            }\n            else if (states == null) {\n                // Dispose old state tensors.\n                tfc.dispose(this.states_);\n                // For stateful RNNs, fully dispose kept old states.\n                if (this.keptStates != null) {\n                    tfc.dispose(this.keptStates);\n                    this.keptStates = [];\n                }\n                if (Array.isArray(this.cell.stateSize)) {\n                    this.states_ =\n                        this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n                }\n                else {\n                    this.states_[0] = tfc.zeros([batchSize, this.cell.stateSize]);\n                }\n            }\n            else {\n                if (!Array.isArray(states)) {\n                    states = [states];\n                }\n                if (states.length !== this.states_.length) {\n                    throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), ` +\n                        `but it received ${states.length} state value(s). Input ` +\n                        `received: ${states}`);\n                }\n                if (training === true) {\n                    // Store old state tensors for complete disposal later, i.e., during\n                    // the next no-arg call to this method. We do not dispose the old\n                    // states immediately because that BPTT (among other things) require\n                    // them.\n                    this.keptStates.push(this.states_.slice());\n                }\n                else {\n                    tfc.dispose(this.states_);\n                }\n                for (let index = 0; index < this.states_.length; ++index) {\n                    const value = states[index];\n                    const dim = Array.isArray(this.cell.stateSize) ?\n                        this.cell.stateSize[index] :\n                        this.cell.stateSize;\n                    const expectedShape = [batchSize, dim];\n                    if (!util.arraysEqual(value.shape, expectedShape)) {\n                        throw new ValueError(`State ${index} is incompatible with layer ${this.name}: ` +\n                            `expected shape=${expectedShape}, received shape=${value.shape}`);\n                    }\n                    this.states_[index] = value;\n                }\n            }\n            this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n        });\n    }\n    apply(inputs, kwargs) {\n        // TODO(cais): Figure out whether initialState is in kwargs or inputs.\n        let initialState = kwargs == null ? null : kwargs['initialState'];\n        let constants = kwargs == null ? null : kwargs['constants'];\n        if (kwargs == null) {\n            kwargs = {};\n        }\n        const standardized = standardizeArgs(inputs, initialState, constants, this.numConstants);\n        inputs = standardized.inputs;\n        initialState = standardized.initialState;\n        constants = standardized.constants;\n        // If any of `initial_state` or `constants` are specified and are\n        // `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify\n        // the input_spec to include them.\n        let additionalInputs = [];\n        let additionalSpecs = [];\n        if (initialState != null) {\n            kwargs['initialState'] = initialState;\n            additionalInputs = additionalInputs.concat(initialState);\n            this.stateSpec = [];\n            for (const state of initialState) {\n                this.stateSpec.push(new InputSpec({ shape: state.shape }));\n            }\n            // TODO(cais): Use the following instead.\n            // this.stateSpec = initialState.map(state => new InputSpec({shape:\n            // state.shape}));\n            additionalSpecs = additionalSpecs.concat(this.stateSpec);\n        }\n        if (constants != null) {\n            kwargs['constants'] = constants;\n            additionalInputs = additionalInputs.concat(constants);\n            // TODO(cais): Add this.constantsSpec.\n            this.numConstants = constants.length;\n        }\n        const isTensor = additionalInputs[0] instanceof SymbolicTensor;\n        if (isTensor) {\n            // Compute full input spec, including state and constants.\n            const fullInput = [inputs].concat(additionalInputs);\n            const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n            // Perform the call with temporarily replaced inputSpec.\n            const originalInputSpec = this.inputSpec;\n            this.inputSpec = fullInputSpec;\n            const output = super.apply(fullInput, kwargs);\n            this.inputSpec = originalInputSpec;\n            return output;\n        }\n        else {\n            return super.apply(inputs, kwargs);\n        }\n    }\n    // tslint:disable-next-line:no-any\n    call(inputs, kwargs) {\n        // Input shape: `[samples, time (padded with zeros), input_dim]`.\n        // Note that the .build() method of subclasses **must** define\n        // this.inputSpec and this.stateSpec owith complete input shapes.\n        return tidy(() => {\n            const mask = kwargs == null ? null : kwargs['mask'];\n            const training = kwargs == null ? null : kwargs['training'];\n            let initialState = kwargs == null ? null : kwargs['initialState'];\n            inputs = getExactlyOneTensor(inputs);\n            if (initialState == null) {\n                if (this.stateful) {\n                    initialState = this.states_;\n                }\n                else {\n                    initialState = this.getInitialState(inputs);\n                }\n            }\n            const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n            if (initialState.length !== numStates) {\n                throw new ValueError(`RNN Layer has ${numStates} state(s) but was passed ` +\n                    `${initialState.length} initial state(s).`);\n            }\n            if (this.unroll) {\n                console.warn('Ignoring unroll = true for RNN layer, due to imperative backend.');\n            }\n            const cellCallKwargs = { training };\n            // TODO(cais): Add support for constants.\n            const step = (inputs, states) => {\n                // `inputs` and `states` are concatenated to form a single `Array` of\n                // `tf.Tensor`s as the input to `cell.call()`.\n                const outputs = this.cell.call([inputs].concat(states), cellCallKwargs);\n                // Marshall the return value into output and new states.\n                return [outputs[0], outputs.slice(1)];\n            };\n            // TODO(cais): Add support for constants.\n            const rnnOutputs = rnn(step, inputs, initialState, this.goBackwards, mask, null, this.unroll, this.returnSequences);\n            const lastOutput = rnnOutputs[0];\n            const outputs = rnnOutputs[1];\n            const states = rnnOutputs[2];\n            if (this.stateful) {\n                this.resetStates(states, training);\n            }\n            const output = this.returnSequences ? outputs : lastOutput;\n            // TODO(cais): Porperty set learning phase flag.\n            if (this.returnState) {\n                return [output].concat(states);\n            }\n            else {\n                return output;\n            }\n        });\n    }\n    getInitialState(inputs) {\n        return tidy(() => {\n            // Build an all-zero tensor of shape [samples, outputDim].\n            // [Samples, timeSteps, inputDim].\n            let initialState = tfc.zeros(inputs.shape);\n            // [Samples].\n            initialState = tfc.sum(initialState, [1, 2]);\n            initialState = K.expandDims(initialState); // [Samples, 1].\n            if (Array.isArray(this.cell.stateSize)) {\n                return this.cell.stateSize.map(dim => dim > 1 ? K.tile(initialState, [1, dim]) : initialState);\n            }\n            else {\n                return this.cell.stateSize > 1 ?\n                    [K.tile(initialState, [1, this.cell.stateSize])] :\n                    [initialState];\n            }\n        });\n    }\n    get trainableWeights() {\n        if (!this.trainable) {\n            return [];\n        }\n        // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n        return this.cell.trainableWeights;\n    }\n    get nonTrainableWeights() {\n        // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n        if (!this.trainable) {\n            return this.cell.weights;\n        }\n        return this.cell.nonTrainableWeights;\n    }\n    setFastWeightInitDuringBuild(value) {\n        super.setFastWeightInitDuringBuild(value);\n        if (this.cell != null) {\n            this.cell.setFastWeightInitDuringBuild(value);\n        }\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = {\n            returnSequences: this.returnSequences,\n            returnState: this.returnState,\n            goBackwards: this.goBackwards,\n            stateful: this.stateful,\n            unroll: this.unroll,\n        };\n        if (this.numConstants != null) {\n            config['numConstants'] = this.numConstants;\n        }\n        const cellConfig = this.cell.getConfig();\n        if (this.getClassName() === RNN.className) {\n            config['cell'] = {\n                'className': this.cell.getClassName(),\n                'config': cellConfig,\n            };\n        }\n        // this order is necessary, to prevent cell name from replacing layer name\n        return Object.assign({}, cellConfig, baseConfig, config);\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config, customObjects = {}) {\n        const cellConfig = config['cell'];\n        const cell = deserialize(cellConfig, customObjects);\n        return new cls(Object.assign(config, { cell }));\n    }\n}\n/** @nocollapse */\nRNN.className = 'RNN';\nserialization.registerClass(RNN);\n// Porting Note: This is a common parent class for RNN cells. There is no\n// equivalent of this in PyKeras. Having a common parent class forgoes the\n//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.\n/**\n * An RNNCell layer.\n *\n * @doc {heading: 'Layers', subheading: 'Classes'}\n */\nexport class RNNCell extends Layer {\n}\nexport class SimpleRNNCell extends RNNCell {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_ACTIVATION = 'tanh';\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        this.units = args.units;\n        assertPositiveInteger(this.units, `units`);\n        this.activation = getActivation(args.activation == null ? this.DEFAULT_ACTIVATION : args.activation);\n        this.useBias = args.useBias == null ? true : args.useBias;\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n        this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n        this.recurrentDropout = math_utils.min([\n            1,\n            math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n        ]);\n        this.stateSize = this.units;\n        this.dropoutMask = null;\n        this.recurrentDropoutMask = null;\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        // TODO(cais): Use regularizer.\n        this.kernel = this.addWeight('kernel', [inputShape[inputShape.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.built = true;\n    }\n    // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:\n    //   `inputs` and `states`. Here, the two tensors are combined into an\n    //   `Tensor[]` Array as the first input argument.\n    //   Similarly, PyKeras' equivalent of this method returns two values:\n    //    `output` and `[output]`. Here the two are combined into one length-2\n    //    `Tensor[]`, consisting of `output` repeated.\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = inputs;\n            if (inputs.length !== 2) {\n                throw new ValueError(`SimpleRNNCell expects 2 input Tensors, got ${inputs.length}.`);\n            }\n            let prevOutput = inputs[1];\n            inputs = inputs[0];\n            const training = kwargs['training'] == null ? false : kwargs['training'];\n            if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n                this.dropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(inputs),\n                    rate: this.dropout,\n                    training\n                });\n            }\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n                this.recurrentDropoutMask == null) {\n                this.recurrentDropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(prevOutput),\n                    rate: this.recurrentDropout,\n                    training\n                });\n            }\n            let h;\n            const dpMask = this.dropoutMask;\n            const recDpMask = this.recurrentDropoutMask;\n            if (dpMask != null) {\n                h = K.dot(tfc.mul(inputs, dpMask), this.kernel.read());\n            }\n            else {\n                h = K.dot(inputs, this.kernel.read());\n            }\n            if (this.bias != null) {\n                h = K.biasAdd(h, this.bias.read());\n            }\n            if (recDpMask != null) {\n                prevOutput = tfc.mul(prevOutput, recDpMask);\n            }\n            let output = tfc.add(h, K.dot(prevOutput, this.recurrentKernel.read()));\n            if (this.activation != null) {\n                output = this.activation.apply(output);\n            }\n            // TODO(cais): Properly set learning phase on output tensor?\n            return [output, output];\n        });\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = {\n            units: this.units,\n            activation: serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n            biasConstraint: serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n        };\n        return Object.assign({}, baseConfig, config);\n    }\n}\n/** @nocollapse */\nSimpleRNNCell.className = 'SimpleRNNCell';\nserialization.registerClass(SimpleRNNCell);\nexport class SimpleRNN extends RNN {\n    constructor(args) {\n        args.cell = new SimpleRNNCell(args);\n        super(args);\n        // TODO(cais): Add activityRegularizer.\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            if (this.cell.dropoutMask != null) {\n                tfc.dispose(this.cell.dropoutMask);\n                this.cell.dropoutMask = null;\n            }\n            if (this.cell.recurrentDropoutMask != null) {\n                tfc.dispose(this.cell.recurrentDropoutMask);\n                this.cell.recurrentDropoutMask = null;\n            }\n            const mask = kwargs == null ? null : kwargs['mask'];\n            const training = kwargs == null ? null : kwargs['training'];\n            const initialState = kwargs == null ? null : kwargs['initialState'];\n            return super.call(inputs, { mask, training, initialState });\n        });\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config);\n    }\n}\n/** @nocollapse */\nSimpleRNN.className = 'SimpleRNN';\nserialization.registerClass(SimpleRNN);\nexport class GRUCell extends RNNCell {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_ACTIVATION = 'tanh';\n        this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        if (args.resetAfter) {\n            throw new ValueError(`GRUCell does not support reset_after parameter set to true.`);\n        }\n        this.units = args.units;\n        assertPositiveInteger(this.units, 'units');\n        this.activation = getActivation(args.activation === undefined ? this.DEFAULT_ACTIVATION :\n            args.activation);\n        this.recurrentActivation = getActivation(args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n        this.useBias = args.useBias == null ? true : args.useBias;\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n        this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n        this.recurrentDropout = math_utils.min([\n            1,\n            math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n        ]);\n        this.implementation = args.implementation;\n        this.stateSize = this.units;\n        this.dropoutMask = null;\n        this.recurrentDropoutMask = null;\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const inputDim = inputShape[inputShape.length - 1];\n        this.kernel = this.addWeight('kernel', [inputDim, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n        //   of the weights and bias in the call() method, at execution time.\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = inputs;\n            if (inputs.length !== 2) {\n                throw new ValueError(`GRUCell expects 2 input Tensors (inputs, h, c), got ` +\n                    `${inputs.length}.`);\n            }\n            const training = kwargs['training'] == null ? false : kwargs['training'];\n            let hTMinus1 = inputs[1]; // Previous memory state.\n            inputs = inputs[0];\n            // Note: For superior performance, TensorFlow.js always uses\n            // implementation 2, regardless of the actual value of\n            // config.implementation.\n            if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n                this.dropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(inputs),\n                    rate: this.dropout,\n                    training,\n                    count: 3\n                });\n            }\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n                this.recurrentDropoutMask == null) {\n                this.recurrentDropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(hTMinus1),\n                    rate: this.recurrentDropout,\n                    training,\n                    count: 3\n                });\n            }\n            const dpMask = this.dropoutMask;\n            const recDpMask = this.recurrentDropoutMask;\n            let z;\n            let r;\n            let hh;\n            if (0 < this.dropout && this.dropout < 1) {\n                inputs = tfc.mul(inputs, dpMask[0]);\n            }\n            let matrixX = K.dot(inputs, this.kernel.read());\n            if (this.useBias) {\n                matrixX = K.biasAdd(matrixX, this.bias.read());\n            }\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n                hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n            }\n            const recurrentKernelValue = this.recurrentKernel.read();\n            const [rk1, rk2] = tfc.split(recurrentKernelValue, [2 * this.units, this.units], recurrentKernelValue.rank - 1);\n            const matrixInner = K.dot(hTMinus1, rk1);\n            const [xZ, xR, xH] = tfc.split(matrixX, 3, matrixX.rank - 1);\n            const [recurrentZ, recurrentR] = tfc.split(matrixInner, 2, matrixInner.rank - 1);\n            z = this.recurrentActivation.apply(tfc.add(xZ, recurrentZ));\n            r = this.recurrentActivation.apply(tfc.add(xR, recurrentR));\n            const recurrentH = K.dot(tfc.mul(r, hTMinus1), rk2);\n            hh = this.activation.apply(tfc.add(xH, recurrentH));\n            const h = tfc.add(tfc.mul(z, hTMinus1), tfc.mul(tfc.add(1, tfc.neg(z)), hh));\n            // TODO(cais): Add use_learning_phase flag properly.\n            return [h, h];\n        });\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = {\n            units: this.units,\n            activation: serializeActivation(this.activation),\n            recurrentActivation: serializeActivation(this.recurrentActivation),\n            useBias: this.useBias,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n            biasConstraint: serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation,\n            resetAfter: false\n        };\n        return Object.assign({}, baseConfig, config);\n    }\n}\n/** @nocollapse */\nGRUCell.className = 'GRUCell';\nserialization.registerClass(GRUCell);\nexport class GRU extends RNN {\n    constructor(args) {\n        if (args.implementation === 0) {\n            console.warn('`implementation=0` has been deprecated, and now defaults to ' +\n                '`implementation=1`. Please update your layer call.');\n        }\n        args.cell = new GRUCell(args);\n        super(args);\n        // TODO(cais): Add activityRegularizer.\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            if (this.cell.dropoutMask != null) {\n                tfc.dispose(this.cell.dropoutMask);\n                this.cell.dropoutMask = null;\n            }\n            if (this.cell.recurrentDropoutMask != null) {\n                tfc.dispose(this.cell.recurrentDropoutMask);\n                this.cell.recurrentDropoutMask = null;\n            }\n            const mask = kwargs == null ? null : kwargs['mask'];\n            const training = kwargs == null ? null : kwargs['training'];\n            const initialState = kwargs == null ? null : kwargs['initialState'];\n            return super.call(inputs, { mask, training, initialState });\n        });\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        if (config['implmentation'] === 0) {\n            config['implementation'] = 1;\n        }\n        return new cls(config);\n    }\n}\n/** @nocollapse */\nGRU.className = 'GRU';\nserialization.registerClass(GRU);\nexport class LSTMCell extends RNNCell {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_ACTIVATION = 'tanh';\n        this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        this.units = args.units;\n        assertPositiveInteger(this.units, 'units');\n        this.activation = getActivation(args.activation === undefined ? this.DEFAULT_ACTIVATION :\n            args.activation);\n        this.recurrentActivation = getActivation(args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n        this.useBias = args.useBias == null ? true : args.useBias;\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.unitForgetBias = args.unitForgetBias;\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n        this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n        this.recurrentDropout = math_utils.min([\n            1,\n            math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n        ]);\n        this.implementation = args.implementation;\n        this.stateSize = [this.units, this.units];\n        this.dropoutMask = null;\n        this.recurrentDropoutMask = null;\n    }\n    build(inputShape) {\n        var _a;\n        inputShape = getExactlyOneShape(inputShape);\n        const inputDim = inputShape[inputShape.length - 1];\n        this.kernel = this.addWeight('kernel', [inputDim, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        let biasInitializer;\n        if (this.useBias) {\n            if (this.unitForgetBias) {\n                const capturedBiasInit = this.biasInitializer;\n                const capturedUnits = this.units;\n                biasInitializer = new (_a = class CustomInit extends Initializer {\n                        apply(shape, dtype) {\n                            // TODO(cais): More informative variable names?\n                            const bI = capturedBiasInit.apply([capturedUnits]);\n                            const bF = (new Ones()).apply([capturedUnits]);\n                            const bCAndH = capturedBiasInit.apply([capturedUnits * 2]);\n                            return K.concatAlongFirstAxis(K.concatAlongFirstAxis(bI, bF), bCAndH);\n                        }\n                    },\n                    /** @nocollapse */\n                    _a.className = 'CustomInit',\n                    _a)();\n            }\n            else {\n                biasInitializer = this.biasInitializer;\n            }\n            this.bias = this.addWeight('bias', [this.units * 4], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n        //   of the weights and bias in the call() method, at execution time.\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const training = kwargs['training'] == null ? false : kwargs['training'];\n            inputs = inputs;\n            if (inputs.length !== 3) {\n                throw new ValueError(`LSTMCell expects 3 input Tensors (inputs, h, c), got ` +\n                    `${inputs.length}.`);\n            }\n            let hTMinus1 = inputs[1]; // Previous memory state.\n            const cTMinus1 = inputs[2]; // Previous carry state.\n            inputs = inputs[0];\n            if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n                this.dropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(inputs),\n                    rate: this.dropout,\n                    training,\n                    count: 4\n                });\n            }\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n                this.recurrentDropoutMask == null) {\n                this.recurrentDropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(hTMinus1),\n                    rate: this.recurrentDropout,\n                    training,\n                    count: 4\n                });\n            }\n            const dpMask = this.dropoutMask;\n            const recDpMask = this.recurrentDropoutMask;\n            // Note: For superior performance, TensorFlow.js always uses\n            // implementation 2 regardless of the actual value of\n            // config.implementation.\n            let i;\n            let f;\n            let c;\n            let o;\n            if (0 < this.dropout && this.dropout < 1) {\n                inputs = tfc.mul(inputs, dpMask[0]);\n            }\n            let z = K.dot(inputs, this.kernel.read());\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n                hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n            }\n            z = tfc.add(z, K.dot(hTMinus1, this.recurrentKernel.read()));\n            if (this.useBias) {\n                z = K.biasAdd(z, this.bias.read());\n            }\n            const [z0, z1, z2, z3] = tfc.split(z, 4, z.rank - 1);\n            i = this.recurrentActivation.apply(z0);\n            f = this.recurrentActivation.apply(z1);\n            c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(z2)));\n            o = this.recurrentActivation.apply(z3);\n            const h = tfc.mul(o, this.activation.apply(c));\n            // TODO(cais): Add use_learning_phase flag properly.\n            return [h, h, c];\n        });\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = {\n            units: this.units,\n            activation: serializeActivation(this.activation),\n            recurrentActivation: serializeActivation(this.recurrentActivation),\n            useBias: this.useBias,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            unitForgetBias: this.unitForgetBias,\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n            biasConstraint: serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation,\n        };\n        return Object.assign({}, baseConfig, config);\n    }\n}\n/** @nocollapse */\nLSTMCell.className = 'LSTMCell';\nserialization.registerClass(LSTMCell);\nexport class LSTM extends RNN {\n    constructor(args) {\n        if (args.implementation === 0) {\n            console.warn('`implementation=0` has been deprecated, and now defaults to ' +\n                '`implementation=1`. Please update your layer call.');\n        }\n        args.cell = new LSTMCell(args);\n        super(args);\n        // TODO(cais): Add activityRegularizer.\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            if (this.cell.dropoutMask != null) {\n                tfc.dispose(this.cell.dropoutMask);\n                this.cell.dropoutMask = null;\n            }\n            if (this.cell.recurrentDropoutMask != null) {\n                tfc.dispose(this.cell.recurrentDropoutMask);\n                this.cell.recurrentDropoutMask = null;\n            }\n            const mask = kwargs == null ? null : kwargs['mask'];\n            const training = kwargs == null ? null : kwargs['training'];\n            const initialState = kwargs == null ? null : kwargs['initialState'];\n            return super.call(inputs, { mask, training, initialState });\n        });\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        if (config['implmentation'] === 0) {\n            config['implementation'] = 1;\n        }\n        return new cls(config);\n    }\n}\n/** @nocollapse */\nLSTM.className = 'LSTM';\nserialization.registerClass(LSTM);\nexport class StackedRNNCells extends RNNCell {\n    constructor(args) {\n        super(args);\n        this.cells = args.cells;\n    }\n    get stateSize() {\n        // States are a flat list in reverse order of the cell stack.\n        // This allows perserving the requirement `stack.statesize[0] ===\n        // outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,\n        // assuming one LSTM has states `[h, c]`.\n        const stateSize = [];\n        for (const cell of this.cells.slice().reverse()) {\n            if (Array.isArray(cell.stateSize)) {\n                stateSize.push(...cell.stateSize);\n            }\n            else {\n                stateSize.push(cell.stateSize);\n            }\n        }\n        return stateSize;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = inputs;\n            let states = inputs.slice(1);\n            // Recover per-cell states.\n            const nestedStates = [];\n            for (const cell of this.cells.slice().reverse()) {\n                if (Array.isArray(cell.stateSize)) {\n                    nestedStates.push(states.splice(0, cell.stateSize.length));\n                }\n                else {\n                    nestedStates.push(states.splice(0, 1));\n                }\n            }\n            nestedStates.reverse();\n            // Call the cells in order and store the returned states.\n            const newNestedStates = [];\n            let callInputs;\n            for (let i = 0; i < this.cells.length; ++i) {\n                const cell = this.cells[i];\n                states = nestedStates[i];\n                // TODO(cais): Take care of constants.\n                if (i === 0) {\n                    callInputs = [inputs[0]].concat(states);\n                }\n                else {\n                    callInputs = [callInputs[0]].concat(states);\n                }\n                callInputs = cell.call(callInputs, kwargs);\n                newNestedStates.push(callInputs.slice(1));\n            }\n            // Format the new states as a flat list in reverse cell order.\n            states = [];\n            for (const cellStates of newNestedStates.slice().reverse()) {\n                states.push(...cellStates);\n            }\n            return [callInputs[0]].concat(states);\n        });\n    }\n    build(inputShape) {\n        if (isArrayOfShapes(inputShape)) {\n            // TODO(cais): Take care of input constants.\n            // const constantShape = inputShape.slice(1);\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        let outputDim;\n        this.cells.forEach((cell, i) => {\n            nameScope(`RNNCell_${i}`, () => {\n                // TODO(cais): Take care of input constants.\n                cell.build(inputShape);\n                if (Array.isArray(cell.stateSize)) {\n                    outputDim = cell.stateSize[0];\n                }\n                else {\n                    outputDim = cell.stateSize;\n                }\n                inputShape = [inputShape[0], outputDim];\n            });\n        });\n        this.built = true;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const getCellConfig = (cell) => {\n            return {\n                'className': cell.getClassName(),\n                'config': cell.getConfig(),\n            };\n        };\n        const cellConfigs = this.cells.map(getCellConfig);\n        const config = { 'cells': cellConfigs };\n        return Object.assign({}, baseConfig, config);\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config, customObjects = {}) {\n        const cells = [];\n        for (const cellConfig of config['cells']) {\n            cells.push(deserialize(cellConfig, customObjects));\n        }\n        return new cls({ cells });\n    }\n    get trainableWeights() {\n        if (!this.trainable) {\n            return [];\n        }\n        const weights = [];\n        for (const cell of this.cells) {\n            weights.push(...cell.trainableWeights);\n        }\n        return weights;\n    }\n    get nonTrainableWeights() {\n        const weights = [];\n        for (const cell of this.cells) {\n            weights.push(...cell.nonTrainableWeights);\n        }\n        if (!this.trainable) {\n            const trainableWeights = [];\n            for (const cell of this.cells) {\n                trainableWeights.push(...cell.trainableWeights);\n            }\n            return trainableWeights.concat(weights);\n        }\n        return weights;\n    }\n    /**\n     * Retrieve the weights of a the model.\n     *\n     * @returns A flat `Array` of `tf.Tensor`s.\n     */\n    getWeights() {\n        const weights = [];\n        for (const cell of this.cells) {\n            weights.push(...cell.weights);\n        }\n        return batchGetValue(weights);\n    }\n    /**\n     * Set the weights of the model.\n     *\n     * @param weights An `Array` of `tf.Tensor`s with shapes and types matching\n     *     the output of `getWeights()`.\n     */\n    setWeights(weights) {\n        const tuples = [];\n        for (const cell of this.cells) {\n            const numParams = cell.weights.length;\n            const inputWeights = weights.splice(numParams);\n            for (let i = 0; i < cell.weights.length; ++i) {\n                tuples.push([cell.weights[i], inputWeights[i]]);\n            }\n        }\n        batchSetValue(tuples);\n    }\n}\n/** @nocollapse */\nStackedRNNCells.className = 'StackedRNNCells';\nserialization.registerClass(StackedRNNCells);\nexport function generateDropoutMask(args) {\n    const { ones, rate, training = false, count = 1 } = args;\n    const droppedInputs = () => K.dropout(ones(), rate);\n    const createMask = () => K.inTrainPhase(droppedInputs, ones, training);\n    // just in case count is provided with null or undefined\n    if (!count || count <= 1) {\n        return tfc.keep(createMask().clone());\n    }\n    const masks = Array(count).fill(undefined).map(createMask);\n    return masks.map(m => tfc.keep(m.clone()));\n}\n//# sourceMappingURL=recurrent.js.map"]},"metadata":{},"sourceType":"module"}