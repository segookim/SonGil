{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Multinomial } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Creates a `tf.Tensor` with values drawn from a multinomial distribution.\n *\n * ```js\n * const probs = tf.tensor([.75, .25]);\n * tf.multinomial(probs, 3).print();\n * ```\n *\n * @param logits 1D array with unnormalized log-probabilities, or\n *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\n *     parameter.\n * @param numSamples Number of samples to draw for each row slice.\n * @param seed The seed number.\n * @param normalized Whether the provided `logits` are normalized true\n *     probabilities (sum to 1). Defaults to false.\n * @return 1D array of shape `[numSamples]`, or 2D array of shape\n *     `[batchSize, numSamples]`, depending on the rank of the input.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\n\nfunction multinomial_(logits, numSamples, seed, normalized = false) {\n  const $logits = convertToTensor(logits, 'logits', 'multinomial');\n  const numOutcomes = $logits.size;\n  const origRank = $logits.rank;\n\n  if (numOutcomes < 2) {\n    throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ` + `${numOutcomes}.`);\n  }\n\n  if (origRank > 2) {\n    throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);\n  } // TODO(lina128): Investigate correct seed behavior. The code seems not allow\n  // setting see to 0.\n\n\n  seed = seed || Math.random(); // The kernel only accepts (and returns) rank 2 tensors.\n\n  const logits2D = origRank === 1 ? reshape($logits, [1, -1]) : $logits;\n  const inputs = {\n    logits: logits2D\n  };\n  const attrs = {\n    numSamples,\n    seed,\n    normalized\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  const res = ENGINE.runKernel(Multinomial, inputs, attrs); // tslint:disable-next-line:no-unnecessary-type-assertion\n\n  return origRank === 1 ? reshape(res, [res.size]) : res;\n}\n\nexport const multinomial = op({\n  multinomial_\n});","map":{"version":3,"sources":["../../src/ops/multinomial.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,WAAR,QAA+D,iBAA/D;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA;;;;;;;;;;;;;;;;;;;AAmBG;;AACH,SAAS,YAAT,CACI,MADJ,EAC0C,UAD1C,EAC8D,IAD9D,EAEI,UAAU,GAAG,KAFjB,EAEsB;AACpB,QAAM,OAAO,GAAG,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,aAAnB,CAA/B;AACA,QAAM,WAAW,GAAG,OAAO,CAAC,IAA5B;AACA,QAAM,QAAQ,GAAG,OAAO,CAAC,IAAzB;;AACA,MAAI,WAAW,GAAG,CAAlB,EAAqB;AACnB,UAAM,IAAI,KAAJ,CACF,8DAAA,GACA,GAAG,WAAW,GAFZ,CAAN;AAGD;;AACD,MAAI,QAAQ,GAAG,CAAf,EAAkB;AAChB,UAAM,IAAI,KAAJ,CAAU,gDAAgD,QAAQ,EAAlE,CAAN;AACD,GAXmB,CAYpB;AACA;;;AACA,EAAA,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,MAAL,EAAf,CAdoB,CAgBpB;;AACA,QAAM,QAAQ,GACV,QAAQ,KAAK,CAAb,GAAiB,OAAO,CAAC,OAAD,EAAU,CAAC,CAAD,EAAI,CAAC,CAAL,CAAV,CAAxB,GAA6C,OADjD;AAGA,QAAM,MAAM,GAAsB;AAAC,IAAA,MAAM,EAAE;AAAT,GAAlC;AACA,QAAM,KAAK,GAAqB;AAAC,IAAA,UAAD;AAAa,IAAA,IAAb;AAAmB,IAAA;AAAnB,GAAhC,CArBoB,CAuBpB;;AACA,QAAM,GAAG,GAAG,MAAM,CAAC,SAAP,CACI,WADJ,EACiB,MADjB,EAEI,KAFJ,CAAZ,CAxBoB,CA4BpB;;AACA,SAAO,QAAQ,KAAK,CAAb,GAAiB,OAAO,CAAC,GAAD,EAAM,CAAC,GAAG,CAAC,IAAL,CAAN,CAAxB,GAAwD,GAA/D;AACD;;AAED,OAAO,MAAM,WAAW,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAtB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Multinomial } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Creates a `tf.Tensor` with values drawn from a multinomial distribution.\n *\n * ```js\n * const probs = tf.tensor([.75, .25]);\n * tf.multinomial(probs, 3).print();\n * ```\n *\n * @param logits 1D array with unnormalized log-probabilities, or\n *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\n *     parameter.\n * @param numSamples Number of samples to draw for each row slice.\n * @param seed The seed number.\n * @param normalized Whether the provided `logits` are normalized true\n *     probabilities (sum to 1). Defaults to false.\n * @return 1D array of shape `[numSamples]`, or 2D array of shape\n *     `[batchSize, numSamples]`, depending on the rank of the input.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction multinomial_(logits, numSamples, seed, normalized = false) {\n    const $logits = convertToTensor(logits, 'logits', 'multinomial');\n    const numOutcomes = $logits.size;\n    const origRank = $logits.rank;\n    if (numOutcomes < 2) {\n        throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ` +\n            `${numOutcomes}.`);\n    }\n    if (origRank > 2) {\n        throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);\n    }\n    // TODO(lina128): Investigate correct seed behavior. The code seems not allow\n    // setting see to 0.\n    seed = seed || Math.random();\n    // The kernel only accepts (and returns) rank 2 tensors.\n    const logits2D = origRank === 1 ? reshape($logits, [1, -1]) : $logits;\n    const inputs = { logits: logits2D };\n    const attrs = { numSamples, seed, normalized };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(Multinomial, inputs, attrs);\n    // tslint:disable-next-line:no-unnecessary-type-assertion\n    return origRank === 1 ? reshape(res, [res.size]) : res;\n}\nexport const multinomial = op({ multinomial_ });\n//# sourceMappingURL=multinomial.js.map"]},"metadata":{},"sourceType":"module"}