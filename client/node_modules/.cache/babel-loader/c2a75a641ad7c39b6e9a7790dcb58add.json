{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function scatterNd(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    indices,\n    updates\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(updates, indices, shape);\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceRank]\n    }\n  });\n  const flattenX = reshape({\n    inputs: {\n      x: updates\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceSize]\n    }\n  });\n  const defaultValue = backend.makeTensorInfo([], 'float32', new Float32Array([0])); // scalar(0)\n\n  const program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);\n  const res = backend.runWebGLProgram(program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n  return reshaped;\n}\nexport const scatterNdConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd\n};","map":{"version":3,"sources":["../../src/kernels/ScatterNd.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAgD,SAAhD,QAA6G,uBAA7G;AAGA,SAAQ,cAAR,QAA6B,gBAA7B;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAIL;AACC,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA,OAAT;AAAkB,IAAA;AAAlB,MAA2B,IAAjC;AACA,QAAM;AAAC,IAAA,OAAD;AAAU,IAAA;AAAV,MAAqB,MAA3B;AACA,QAAM;AAAC,IAAA;AAAD,MAAU,KAAhB;AAEA,QAAM;AAAC,IAAA,SAAD;AAAY,IAAA,UAAZ;AAAwB,IAAA,SAAxB;AAAmC,IAAA,OAAnC;AAA4C,IAAA;AAA5C,MACF,YAAY,CAAC,eAAb,CAA6B,OAA7B,EAAsC,OAAtC,EAA+C,KAA/C,CADJ;AAGA,QAAM,YAAY,GAAG,CAAC,UAAU,GAAG,SAAd,EAAyB,SAAzB,CAArB;;AAEA,MAAI,UAAU,KAAK,CAAnB,EAAsB;AACpB,WAAO,OAAO,CAAC,cAAR,CAAuB,KAAvB,EAA8B,OAAO,CAAC,KAAtC,CAAP;AACD;;AAED,QAAM,cAAc,GAAG,OAAO,CAC1B;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAuB,IAAA,OAAvB;AAAgC,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE,CAAC,UAAD,EAAa,SAAb;AAAR;AAAvC,GAD0B,CAA9B;AAEA,QAAM,QAAQ,GAAG,OAAO,CACpB;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAuB,IAAA,OAAvB;AAAgC,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE,CAAC,UAAD,EAAa,SAAb;AAAR;AAAvC,GADoB,CAAxB;AAGA,QAAM,YAAY,GAAG,OAAO,CAAC,cAAR,CACjB,EADiB,EACb,SADa,EACF,IAAI,YAAJ,CAAiB,CAAC,CAAD,CAAjB,CADE,CAArB,CAnBD,CAoB6C;;AAC5C,QAAM,OAAO,GAAG,IAAI,cAAJ,CACZ,UADY,EACA,SADA,EACW,cAAc,CAAC,KAAf,CAAqB,MADhC,EACwC,QAAQ,CAAC,KAAT,CAAe,MADvD,EAEZ,OAFY,EAEH,YAFG,CAAhB;AAGA,QAAM,GAAG,GAAG,OAAO,CAAC,eAAR,CACR,OADQ,EACC,CAAC,QAAD,EAAW,cAAX,EAA2B,YAA3B,CADD,EAC2C,QAAQ,CAAC,KADpD,CAAZ;AAGA,QAAM,QAAQ,GAAG,OAAO,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAmB,IAAA,OAAnB;AAA4B,IAAA,KAAK,EAAE;AAAC,MAAA;AAAD;AAAnC,GAAD,CAAxB;AAEA,EAAA,OAAO,CAAC,6BAAR,CAAsC,cAAtC;AACA,EAAA,OAAO,CAAC,6BAAR,CAAsC,QAAtC;AACA,EAAA,OAAO,CAAC,6BAAR,CAAsC,GAAtC;AACA,EAAA,OAAO,CAAC,6BAAR,CAAsC,YAAtC;AAEA,SAAO,QAAP;AACD;AAED,OAAO,MAAM,eAAe,GAAiB;AAC3C,EAAA,UAAU,EAAE,SAD+B;AAE3C,EAAA,WAAW,EAAE,OAF8B;AAG3C,EAAA,UAAU,EAAE;AAH+B,CAAtC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function scatterNd(args) {\n    const { inputs, backend, attrs } = args;\n    const { indices, updates } = inputs;\n    const { shape } = attrs;\n    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(updates, indices, shape);\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n    if (outputSize === 0) {\n        return backend.makeTensorInfo(shape, indices.dtype);\n    }\n    const flattenIndices = reshape({ inputs: { x: indices }, backend, attrs: { shape: [numUpdates, sliceRank] } });\n    const flattenX = reshape({ inputs: { x: updates }, backend, attrs: { shape: [numUpdates, sliceSize] } });\n    const defaultValue = backend.makeTensorInfo([], 'float32', new Float32Array([0])); // scalar(0)\n    const program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);\n    const res = backend.runWebGLProgram(program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n    const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape } });\n    backend.disposeIntermediateTensorInfo(flattenIndices);\n    backend.disposeIntermediateTensorInfo(flattenX);\n    backend.disposeIntermediateTensorInfo(res);\n    backend.disposeIntermediateTensorInfo(defaultValue);\n    return reshaped;\n}\nexport const scatterNdConfig = {\n    kernelName: ScatterNd,\n    backendName: 'webgl',\n    kernelFunc: scatterNd\n};\n//# sourceMappingURL=ScatterNd.js.map"]},"metadata":{},"sourceType":"module"}