{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GatherV2 } from '../kernel_names';\nimport { getUndoAxesPermutation } from '../ops/axis_util';\nimport { reshape } from '../ops/reshape';\nimport { transpose } from '../ops/transpose';\nimport { unsortedSegmentSum } from '../ops/unsorted_segment_sum';\nimport { parseAxisParam } from '../util';\nexport const gatherGradConfig = {\n  kernelName: GatherV2,\n  inputsToSave: ['x', 'indices'],\n  gradFunc: (dy, saved, attrs) => {\n    const [x, indices] = saved;\n    const {\n      axis\n    } = attrs;\n    const parsedAxis = parseAxisParam(axis, x.shape)[0];\n\n    const derX = () => {\n      const paramsShape = x.shape;\n      const indicesSize = indices.size;\n      const outerShape = paramsShape.slice(0, parsedAxis);\n      const outerDims = outerShape.length;\n      const innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);\n      const innerDims = innerShape.length;\n      const outerAxesIndices = arrayRange(0, outerDims);\n      const innerAxesIndices = arrayRange(outerDims + 1, outerDims + 1 + innerDims);\n      const valuesShape = arrayConcat([outerShape, [indicesSize], innerShape]);\n      const values = reshape(dy, valuesShape);\n      const reshapedIndices = reshape(indices, [indicesSize]);\n      const transposeDims = arrayConcat([[outerDims], outerAxesIndices, innerAxesIndices]);\n      const valuesTranspose = transpose(values, transposeDims);\n      let paramsGrad = unsortedSegmentSum(valuesTranspose, reshapedIndices, x.shape[parsedAxis]);\n      const invertTransposeDims = getUndoAxesPermutation(transposeDims);\n      paramsGrad = transpose(paramsGrad, invertTransposeDims);\n      return paramsGrad;\n    };\n\n    return {\n      x: derX,\n      indices: () => indices\n    };\n  }\n};\n\nfunction arrayRange(start, stop) {\n  const result = [];\n\n  for (let i = start; i < stop; ++i) {\n    result.push(i);\n  }\n\n  return result;\n}\n\nfunction arrayConcat(arrays) {\n  const result = [];\n\n  for (let i = 0; i < arrays.length; ++i) {\n    for (let j = 0; j < arrays[i].length; ++j) {\n      result.push(arrays[i][j]);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../src/gradients/GatherV2_grad.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GatherV2 } from '../kernel_names';\nimport { getUndoAxesPermutation } from '../ops/axis_util';\nimport { reshape } from '../ops/reshape';\nimport { transpose } from '../ops/transpose';\nimport { unsortedSegmentSum } from '../ops/unsorted_segment_sum';\nimport { parseAxisParam } from '../util';\nexport const gatherGradConfig = {\n    kernelName: GatherV2,\n    inputsToSave: ['x', 'indices'],\n    gradFunc: (dy, saved, attrs) => {\n        const [x, indices] = saved;\n        const { axis } = attrs;\n        const parsedAxis = parseAxisParam(axis, x.shape)[0];\n        const derX = () => {\n            const paramsShape = x.shape;\n            const indicesSize = indices.size;\n            const outerShape = paramsShape.slice(0, parsedAxis);\n            const outerDims = outerShape.length;\n            const innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);\n            const innerDims = innerShape.length;\n            const outerAxesIndices = arrayRange(0, outerDims);\n            const innerAxesIndices = arrayRange(outerDims + 1, outerDims + 1 + innerDims);\n            const valuesShape = arrayConcat([outerShape, [indicesSize], innerShape]);\n            const values = reshape(dy, valuesShape);\n            const reshapedIndices = reshape(indices, [indicesSize]);\n            const transposeDims = arrayConcat([[outerDims], outerAxesIndices, innerAxesIndices]);\n            const valuesTranspose = transpose(values, transposeDims);\n            let paramsGrad = unsortedSegmentSum(valuesTranspose, reshapedIndices, x.shape[parsedAxis]);\n            const invertTransposeDims = getUndoAxesPermutation(transposeDims);\n            paramsGrad = transpose(paramsGrad, invertTransposeDims);\n            return paramsGrad;\n        };\n        return { x: derX, indices: () => indices };\n    }\n};\nfunction arrayRange(start, stop) {\n    const result = [];\n    for (let i = start; i < stop; ++i) {\n        result.push(i);\n    }\n    return result;\n}\nfunction arrayConcat(arrays) {\n    const result = [];\n    for (let i = 0; i < arrays.length; ++i) {\n        for (let j = 0; j < arrays[i].length; ++j) {\n            result.push(arrays[i][j]);\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=GatherV2_grad.js.map"]},"metadata":{},"sourceType":"module"}