{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose as _dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { fill } from '../ops/fill';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\n\nexport var AdagradOptimizer = /*#__PURE__*/function (_Optimizer) {\n  _inherits(AdagradOptimizer, _Optimizer);\n\n  var _super = _createSuper(AdagradOptimizer);\n\n  function AdagradOptimizer(learningRate) {\n    var _this;\n\n    var initialAccumulatorValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.1;\n\n    _classCallCheck(this, AdagradOptimizer);\n\n    _this = _super.call(this);\n    _this.learningRate = learningRate;\n    _this.initialAccumulatorValue = initialAccumulatorValue;\n    _this.accumulatedGrads = [];\n    return _this;\n  }\n\n  _createClass(AdagradOptimizer, [{\n    key: \"applyGradients\",\n    value: function applyGradients(variableGradients) {\n      var _this2 = this;\n\n      var variableNames = Array.isArray(variableGradients) ? variableGradients.map(function (item) {\n        return item.name;\n      }) : Object.keys(variableGradients);\n      variableNames.forEach(function (name, i) {\n        var value = ENGINE.registeredVariables[name];\n\n        if (_this2.accumulatedGrads[i] == null) {\n          var trainable = false;\n          _this2.accumulatedGrads[i] = {\n            originalName: \"\".concat(name, \"/accumulator\"),\n            variable: tidy(function () {\n              return fill(value.shape, _this2.initialAccumulatorValue).variable(trainable);\n            })\n          };\n        }\n\n        var gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n        if (gradient == null) {\n          return;\n        }\n\n        var accumulatedGrad = _this2.accumulatedGrads[i].variable;\n        tidy(function () {\n          var newAccumulatedGrad = add(accumulatedGrad, square(gradient));\n          accumulatedGrad.assign(newAccumulatedGrad);\n          var newValue = add(mul(div(gradient, sqrt(add(newAccumulatedGrad, ENGINE.backend.epsilon()))), -_this2.learningRate), value);\n          value.assign(newValue);\n        });\n      });\n      this.incrementIterations();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.accumulatedGrads != null) {\n        _dispose(this.accumulatedGrads.map(function (v) {\n          return v.variable;\n        }));\n      }\n    }\n  }, {\n    key: \"getWeights\",\n    value: function () {\n      var _getWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.saveIterations();\n\n              case 2:\n                _context.t0 = _context.sent;\n                return _context.abrupt(\"return\", [_context.t0].concat(this.accumulatedGrads.map(function (v) {\n                  return {\n                    name: v.originalName,\n                    tensor: v.variable\n                  };\n                })));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getWeights() {\n        return _getWeights.apply(this, arguments);\n      }\n\n      return getWeights;\n    }()\n  }, {\n    key: \"setWeights\",\n    value: function () {\n      var _setWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(weightValues) {\n        var trainable;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.extractIterations(weightValues);\n\n              case 2:\n                weightValues = _context2.sent;\n                trainable = false;\n                this.accumulatedGrads = weightValues.map(function (v) {\n                  return {\n                    originalName: v.name,\n                    variable: v.tensor.variable(trainable)\n                  };\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setWeights(_x) {\n        return _setWeights.apply(this, arguments);\n      }\n\n      return setWeights;\n    }()\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        'learningRate': this.learningRate,\n        'initialAccumulatorValue': this.initialAccumulatorValue\n      };\n    }\n    /** @nocollapse */\n\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls(config['learningRate'], config['initialAccumulatorValue']);\n    }\n  }]);\n\n  return AdagradOptimizer;\n}(Optimizer);\n/** @nocollapse */\n\nAdagradOptimizer.className = 'Adagrad'; // Note: Name matters for Python compatibility.\n\nregisterClass(AdagradOptimizer);","map":{"version":3,"sources":["../../src/optimizers/adagrad_optimizer.ts"],"names":[],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,OAAO,IAAP,QAAR,EAAiB,IAAjB,QAA4B,YAA5B;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,IAAR,QAAmB,aAAnB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,IAAR,QAAmB,aAAnB;AACA,SAAQ,MAAR,QAAqB,eAArB;AACA,SAAoB,aAApB,QAA+E,kBAA/E;AAGA,SAAQ,SAAR,QAA2C,aAA3C;AAEA;;AACA,WAAa,gBAAb;AAAA;;AAAA;;AAME,4BACc,YADd,EACyE;AAAA;;AAAA,QAA7B,uBAA6B,uEAAH,GAAG;;AAAA;;AACvE;AADY,UAAA,YAAA,GAAA,YAAA;AAA8B,UAAA,uBAAA,GAAA,uBAAA;AAHpC,UAAA,gBAAA,GAAwC,EAAxC;AAGiE;AAExE;;AATH;AAAA;AAAA,WAWE,wBAAe,iBAAf,EAAgE;AAAA;;AAC9D,UAAM,aAAa,GAAG,KAAK,CAAC,OAAN,CAAc,iBAAd,IAClB,iBAAiB,CAAC,GAAlB,CAAsB,UAAA,IAAI;AAAA,eAAI,IAAI,CAAC,IAAT;AAAA,OAA1B,CADkB,GAElB,MAAM,CAAC,IAAP,CAAY,iBAAZ,CAFJ;AAIA,MAAA,aAAa,CAAC,OAAd,CAAsB,UAAC,IAAD,EAAO,CAAP,EAAY;AAChC,YAAM,KAAK,GAAG,MAAM,CAAC,mBAAP,CAA2B,IAA3B,CAAd;;AACA,YAAI,MAAI,CAAC,gBAAL,CAAsB,CAAtB,KAA4B,IAAhC,EAAsC;AACpC,cAAM,SAAS,GAAG,KAAlB;AACA,UAAA,MAAI,CAAC,gBAAL,CAAsB,CAAtB,IAA2B;AACzB,YAAA,YAAY,YAAK,IAAL,iBADa;AAEzB,YAAA,QAAQ,EAAE,IAAI,CACV;AAAA,qBAAM,IAAI,CAAC,KAAK,CAAC,KAAP,EAAc,MAAI,CAAC,uBAAnB,CAAJ,CACK,QADL,CACc,SADd,CAAN;AAAA,aADU;AAFW,WAA3B;AAMD;;AAED,YAAM,QAAQ,GAAG,KAAK,CAAC,OAAN,CAAc,iBAAd,IACb,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,MADR,GAEb,iBAAiB,CAAC,IAAD,CAFrB;;AAGA,YAAI,QAAQ,IAAI,IAAhB,EAAsB;AACpB;AACD;;AAED,YAAM,eAAe,GAAG,MAAI,CAAC,gBAAL,CAAsB,CAAtB,EAAyB,QAAjD;AAEA,QAAA,IAAI,CAAC,YAAK;AACR,cAAM,kBAAkB,GAAG,GAAG,CAAC,eAAD,EAAkB,MAAM,CAAC,QAAD,CAAxB,CAA9B;AACA,UAAA,eAAe,CAAC,MAAhB,CAAuB,kBAAvB;AAEA,cAAM,QAAQ,GAAG,GAAG,CAChB,GAAG,CAAC,GAAG,CAAC,QAAD,EACC,IAAI,CAAC,GAAG,CAAC,kBAAD,EAAqB,MAAM,CAAC,OAAP,CAAe,OAAf,EAArB,CAAJ,CADL,CAAJ,EAEC,CAAC,MAAI,CAAC,YAFP,CADa,EAIhB,KAJgB,CAApB;AAKA,UAAA,KAAK,CAAC,MAAN,CAAa,QAAb;AACD,SAVG,CAAJ;AAWD,OAhCD;AAiCA,WAAK,mBAAL;AACD;AAlDH;AAAA;AAAA,WAoDE,mBAAO;AACL,UAAI,KAAK,gBAAL,IAAyB,IAA7B,EAAmC;AACjC,QAAA,QAAO,CAAC,KAAK,gBAAL,CAAsB,GAAtB,CAA0B,UAAA,CAAC;AAAA,iBAAI,CAAC,CAAC,QAAN;AAAA,SAA3B,CAAD,CAAP;AACD;AACF;AAxDH;AAAA;AAAA;AAAA,iFA0DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEgB,KAAK,cAAL,EAFhB;;AAAA;AAAA;AAAA,+DAEuC,MAFvC,CAE8C,KAAK,gBAAL,CAAsB,GAAtB,CACxC,UAAA,CAAC;AAAA,yBAAK;AAAC,oBAAA,IAAI,EAAE,CAAC,CAAC,YAAT;AAAuB,oBAAA,MAAM,EAAE,CAAC,CAAC;AAAjC,mBAAL;AAAA,iBADuC,CAF9C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA1DF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFAgEE,kBAAiB,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACuB,KAAK,iBAAL,CAAuB,YAAvB,CADvB;;AAAA;AACE,gBAAA,YADF;AAEQ,gBAAA,SAFR,GAEoB,KAFpB;AAGE,qBAAK,gBAAL,GAAwB,YAAY,CAAC,GAAb,CACpB,UAAA,CAAC;AAAA,yBAAK;AAAC,oBAAA,YAAY,EAAE,CAAC,CAAC,IAAjB;AAAuB,oBAAA,QAAQ,EAAE,CAAC,CAAC,MAAF,CAAS,QAAT,CAAkB,SAAlB;AAAjC,mBAAL;AAAA,iBADmB,CAAxB;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAhEF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WAuEE,qBAAS;AACP,aAAO;AACL,wBAAgB,KAAK,YADhB;AAEL,mCAA2B,KAAK;AAF3B,OAAP;AAID;AAED;;AA9EF;AAAA;AAAA,WA+EE,oBACI,GADJ,EACqC,MADrC,EACuD;AACrD,aAAO,IAAI,GAAJ,CAAQ,MAAM,CAAC,cAAD,CAAd,EAAgC,MAAM,CAAC,yBAAD,CAAtC,CAAP;AACD;AAlFH;;AAAA;AAAA,EAAsC,SAAtC;AACE;;AACO,gBAAA,CAAA,SAAA,GAAY,SAAZ,C,CAAwB;;AAkFjC,aAAa,CAAC,gBAAD,CAAb","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { fill } from '../ops/fill';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\nexport class AdagradOptimizer extends Optimizer {\n    constructor(learningRate, initialAccumulatorValue = 0.1) {\n        super();\n        this.learningRate = learningRate;\n        this.initialAccumulatorValue = initialAccumulatorValue;\n        this.accumulatedGrads = [];\n    }\n    applyGradients(variableGradients) {\n        const variableNames = Array.isArray(variableGradients) ?\n            variableGradients.map(item => item.name) :\n            Object.keys(variableGradients);\n        variableNames.forEach((name, i) => {\n            const value = ENGINE.registeredVariables[name];\n            if (this.accumulatedGrads[i] == null) {\n                const trainable = false;\n                this.accumulatedGrads[i] = {\n                    originalName: `${name}/accumulator`,\n                    variable: tidy(() => fill(value.shape, this.initialAccumulatorValue)\n                        .variable(trainable))\n                };\n            }\n            const gradient = Array.isArray(variableGradients) ?\n                variableGradients[i].tensor :\n                variableGradients[name];\n            if (gradient == null) {\n                return;\n            }\n            const accumulatedGrad = this.accumulatedGrads[i].variable;\n            tidy(() => {\n                const newAccumulatedGrad = add(accumulatedGrad, square(gradient));\n                accumulatedGrad.assign(newAccumulatedGrad);\n                const newValue = add(mul(div(gradient, sqrt(add(newAccumulatedGrad, ENGINE.backend.epsilon()))), -this.learningRate), value);\n                value.assign(newValue);\n            });\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        if (this.accumulatedGrads != null) {\n            dispose(this.accumulatedGrads.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        // Order matters for Python compatibility.\n        return [await this.saveIterations()].concat(this.accumulatedGrads.map(v => ({ name: v.originalName, tensor: v.variable })));\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        const trainable = false;\n        this.accumulatedGrads = weightValues.map(v => ({ originalName: v.name, variable: v.tensor.variable(trainable) }));\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'initialAccumulatorValue': this.initialAccumulatorValue,\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['initialAccumulatorValue']);\n    }\n}\n/** @nocollapse */\nAdagradOptimizer.className = 'Adagrad'; // Note: Name matters for Python compatibility.\nregisterClass(AdagradOptimizer);\n//# sourceMappingURL=adagrad_optimizer.js.map"]},"metadata":{},"sourceType":"module"}