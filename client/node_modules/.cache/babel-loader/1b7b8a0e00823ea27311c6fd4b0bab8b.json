{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial, util } from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport { assertNotComplex } from '../cpu_util';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    numSamples,\n    seed,\n    normalized\n  } = attrs;\n  assertNotComplex(logits, 'multinomial');\n  const probabilities = normalized ? logits : softmax({\n    inputs: {\n      logits\n    },\n    backend,\n    attrs: {\n      dim: -1\n    }\n  });\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values;\n  const resShape = [batchSize, numSamples];\n  const resVals = util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents; // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random(); // Assume last event happened by default.\n\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\nexport const multinomialConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial\n};","map":{"version":3,"sources":["../../src/kernels/Multinomial.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial, util } from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport { assertNotComplex } from '../cpu_util';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n    const { inputs, backend, attrs } = args;\n    const { logits } = inputs;\n    const { numSamples, seed, normalized } = attrs;\n    assertNotComplex(logits, 'multinomial');\n    const probabilities = normalized ?\n        logits :\n        softmax({ inputs: { logits }, backend, attrs: { dim: -1 } });\n    const batchSize = probabilities.shape[0];\n    const numEvents = probabilities.shape[1];\n    const probVals = backend.data.get(probabilities.dataId).values;\n    const resShape = [batchSize, numSamples];\n    const resVals = util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n    for (let b = 0; b < batchSize; ++b) {\n        const offset = b * numEvents;\n        // The cdf won't include the last event. It will be implicit if no other\n        // event happened.\n        const cdf = new Float32Array(numEvents - 1);\n        cdf[0] = probVals[offset];\n        for (let event = 1; event < cdf.length; ++event) {\n            cdf[event] = cdf[event - 1] + probVals[offset + event];\n        }\n        const random = seedrandom.alea(seed.toString());\n        const outOffset = b * numSamples;\n        for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n            const r = random();\n            // Assume last event happened by default.\n            resVals[outOffset + sampleId] = cdf.length;\n            for (let event = 0; event < cdf.length; event++) {\n                if (r < cdf[event]) {\n                    resVals[outOffset + sampleId] = event;\n                    break;\n                }\n            }\n        }\n    }\n    if (!normalized) {\n        backend.disposeIntermediateTensorInfo(probabilities);\n    }\n    return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\nexport const multinomialConfig = {\n    kernelName: Multinomial,\n    backendName: 'cpu',\n    kernelFunc: multinomial\n};\n//# sourceMappingURL=Multinomial.js.map"]},"metadata":{},"sourceType":"module"}