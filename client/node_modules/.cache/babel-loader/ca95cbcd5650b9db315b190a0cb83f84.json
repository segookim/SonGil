{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode\n  } = attrs;\n  assertNotComplex([x, filter], 'conv2d');\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false\n  /* depthwise */\n  , $dataFormat);\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const y = new TensorBuffer(convInfo.outShape, x.dtype);\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n  const xVals = backend.data.get(x.dataId).values;\n  const wVals = backend.data.get(filter.dataId).values;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] += xVal * wVals[wOffset3 + d2];\n              }\n\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\nexport const conv2DConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D\n};","map":{"version":3,"sources":["../../src/kernels/Conv2D.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode } = attrs;\n    assertNotComplex([x, filter], 'conv2d');\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const y = new TensorBuffer(convInfo.outShape, x.dtype);\n    const xStrides = util.computeStrides(x.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    const xBatchStride = xStrides[0];\n    const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n    const xColStride = isChannelsLast ? xStrides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n    const yBatchStride = y.strides[0];\n    const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n    const yColStride = isChannelsLast ? y.strides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n    const xVals = backend.data.get(x.dataId).values;\n    const wVals = backend.data.get(filter.dataId).values;\n    const yVals = y.values;\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        const xOffset1 = b * xBatchStride;\n        const yOffset1 = b * yBatchStride;\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n            const yOffset2 = yOffset1 + yR * yRowStride;\n            const xRCorner = yR * convInfo.strideHeight - padTop;\n            for (let wR = 0; wR < filterHeight; ++wR) {\n                const xR = xRCorner + wR * dilationHeight;\n                if (xR < 0 || xR >= convInfo.inHeight) {\n                    continue;\n                }\n                const wOffset1 = wR * filterStrides[0];\n                const xOffset2 = xOffset1 + xR * xRowStride;\n                for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                    const yOffset3 = yOffset2 + yC * yColStride;\n                    const xCCorner = yC * convInfo.strideWidth - padLeft;\n                    for (let wC = 0; wC < filterWidth; ++wC) {\n                        const xC = xCCorner + wC * dilationWidth;\n                        if (xC < 0 || xC >= convInfo.inWidth) {\n                            continue;\n                        }\n                        const wOffset2 = wOffset1 + wC * filterStrides[1];\n                        const xOffset3 = xOffset2 + xC * xColStride;\n                        let wOffset3 = wOffset2;\n                        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                            const xVal = xVals[xOffset3 + d1 * xChannelStride];\n                            for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                yVals[yOffset3 + d2 * yChannelStride] +=\n                                    xVal * wVals[wOffset3 + d2];\n                            }\n                            wOffset3 += convInfo.outChannels;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\nexport const conv2DConfig = {\n    kernelName: Conv2D,\n    backendName: 'cpu',\n    kernelFunc: conv2D\n};\n//# sourceMappingURL=Conv2D.js.map"]},"metadata":{},"sourceType":"module"}