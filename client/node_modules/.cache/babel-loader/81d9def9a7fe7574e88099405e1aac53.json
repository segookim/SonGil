{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport * as shader_compiler from './shader_compiler';\nexport function compileProgram(gpgpu, program, inputs, output) {\n  const userCode = program.userCode;\n  const inputInfos = inputs.map((input, i) => {\n    const shapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n\n    if (input.texData != null && input.texData.slice != null && input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n\n    return {\n      name: program.variableNames[i],\n      shapeInfo\n    };\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, userCode, program.packedInputs);\n  const webGLProgram = gpgpu.createProgram(source); // Add special uniforms (NAN, INFINITY)\n\n  let infLoc = null;\n  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  } // Add user-defined uniforms\n\n\n  const uniformLocations = {};\n\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    const shouldThrow = false;\n    uniformLocations[varName] = gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] = gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n  }\n\n  return {\n    program,\n    source,\n    webGLProgram,\n    uniformLocations,\n    inShapeInfos,\n    outShapeInfo,\n    infLoc,\n    nanLoc\n  };\n}\n\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` + `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(`Binary was compiled with different shapes than ` + `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    } // The input is uploaded as uniform.\n\n\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(`Binary was compiled with different texture shapes than the` + ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram(gpgpu, binary, inputs, output, customSetup) {\n  validateBinaryAndProgram(binary.inShapeInfos, inputs);\n  validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  }\n\n  gpgpu.setProgram(binary.webGLProgram); // Set special uniforms (NAN, INFINITY)\n\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  } // Set user-defined inputs\n\n\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n\n      return;\n    } // If the input was sliced, upload the flat offset index.\n\n\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n  });\n\n  if (customSetup != null) {\n    customSetup(gpgpu, binary.webGLProgram);\n  }\n\n  gpgpu.executeProgram();\n}\nexport function makeShaderKey(program, inputs, output) {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null && x.texData.slice.flatOffset > 0;\n    const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n    keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name; // Fast string concat. See https://jsperf.com/string-concatenation/14.\n\n  key += '_' + keyInputs + '_' + keyUserCode;\n  return key;\n}","map":{"version":3,"sources":["../src/gpgpu_math.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport * as shader_compiler from './shader_compiler';\nexport function compileProgram(gpgpu, program, inputs, output) {\n    const userCode = program.userCode;\n    const inputInfos = inputs.map((input, i) => {\n        const shapeInfo = {\n            logicalShape: input.shape,\n            texShape: input.isUniform ? null : input.texData.texShape,\n            isUniform: input.isUniform,\n            isPacked: input.isUniform ? false : input.texData.isPacked,\n            flatOffset: null\n        };\n        if (input.texData != null && input.texData.slice != null &&\n            input.texData.slice.flatOffset > 0) {\n            shapeInfo.flatOffset = input.texData.slice.flatOffset;\n        }\n        return { name: program.variableNames[i], shapeInfo };\n    });\n    const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n    const outShapeInfo = {\n        logicalShape: output.shape,\n        texShape: output.texData.texShape,\n        isUniform: false,\n        isPacked: output.texData.isPacked,\n        flatOffset: null\n    };\n    const source = shader_compiler.makeShader(inputInfos, outShapeInfo, userCode, program.packedInputs);\n    const webGLProgram = gpgpu.createProgram(source);\n    // Add special uniforms (NAN, INFINITY)\n    let infLoc = null;\n    const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n    }\n    // Add user-defined uniforms\n    const uniformLocations = {};\n    for (let i = 0; i < program.variableNames.length; i++) {\n        const varName = program.variableNames[i];\n        const shouldThrow = false;\n        uniformLocations[varName] =\n            gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n        uniformLocations[`offset${varName}`] =\n            gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n    }\n    return {\n        program,\n        source,\n        webGLProgram,\n        uniformLocations,\n        inShapeInfos,\n        outShapeInfo,\n        infLoc,\n        nanLoc,\n    };\n}\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n    if (shapeInfos.length !== inputs.length) {\n        throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` +\n            `was executed with ${inputs.length} inputs`);\n    }\n    shapeInfos.forEach((s, i) => {\n        const shapeA = s.logicalShape;\n        const input = inputs[i];\n        const shapeB = input.shape;\n        if (!util.arraysEqual(shapeA, shapeB)) {\n            throw Error(`Binary was compiled with different shapes than ` +\n                `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n        }\n        // The input is uploaded as uniform.\n        if (s.isUniform && input.isUniform) {\n            return;\n        }\n        const texShapeA = s.texShape;\n        const texShapeB = input.isUniform ? null : input.texData.texShape;\n        if (!util.arraysEqual(texShapeA, texShapeB)) {\n            throw Error(`Binary was compiled with different texture shapes than the` +\n                ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n        }\n    });\n}\nexport function runProgram(gpgpu, binary, inputs, output, customSetup) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n    const outTex = output.texData.texture;\n    const outTexShape = output.texData.texShape;\n    if (output.texData.isPacked) {\n        gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n    }\n    else {\n        gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n    }\n    gpgpu.setProgram(binary.webGLProgram);\n    // Set special uniforms (NAN, INFINITY)\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        if (binary.infLoc !== null) {\n            gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n        }\n    }\n    if (binary.nanLoc !== null) {\n        gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n    }\n    // Set user-defined inputs\n    inputs.forEach((input, i) => {\n        const varName = binary.program.variableNames[i];\n        const varLoc = binary.uniformLocations[varName];\n        const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n        if (varLoc == null) {\n            // The compiler inferred that this variable is not used in this shader.\n            return;\n        }\n        if (input.isUniform) {\n            // Upload the values of the tensor as uniform.\n            if (util.sizeFromShape(input.shape) < 2) {\n                gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n            }\n            else {\n                let vals = input.uniformValues;\n                if (!(vals instanceof Float32Array)) {\n                    vals = new Float32Array(vals);\n                }\n                gpgpu.gl.uniform1fv(varLoc, vals);\n            }\n            return;\n        }\n        // If the input was sliced, upload the flat offset index.\n        if (input.texData.slice != null && varOffsetLoc != null) {\n            gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n        }\n        gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n    });\n    if (customSetup != null) {\n        customSetup(gpgpu, binary.webGLProgram);\n    }\n    gpgpu.executeProgram();\n}\nexport function makeShaderKey(program, inputs, output) {\n    let keyInputs = '';\n    inputs.concat(output).forEach(x => {\n        const hasOffset = x.texData != null && x.texData.slice != null &&\n            x.texData.slice.flatOffset > 0;\n        const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n        keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    });\n    const keyUserCode = program.userCode;\n    let key = program.constructor.name;\n    // Fast string concat. See https://jsperf.com/string-concatenation/14.\n    key += '_' + keyInputs + '_' + keyUserCode;\n    return key;\n}\n//# sourceMappingURL=gpgpu_math.js.map"]},"metadata":{},"sourceType":"module"}