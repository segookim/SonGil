{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { EluGrad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function eluGrad(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    dy,\n    y\n  } = inputs;\n  assertNotComplex([dy, y], 'eluGrad');\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values;\n  const dyValues = backend.data.get(dy.dataId).values;\n\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\nexport const eluGradConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad\n};","map":{"version":3,"sources":["../../src/kernels/EluGrad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,OAAR,EAAkF,IAAlF,QAA6F,uBAA7F;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAAwE;AAE5E,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA;AAAT,MAAoB,IAA1B;AACA,QAAM;AAAC,IAAA,EAAD;AAAK,IAAA;AAAL,MAAU,MAAhB;AAEA,EAAA,gBAAgB,CAAC,CAAC,EAAD,EAAK,CAAL,CAAD,EAAU,SAAV,CAAhB;AAEA,QAAM,YAAY,GAAG,IAAI,YAAJ,CAAiB,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,CAAjB,CAArB;AACA,QAAM,MAAM,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAA1C;AACA,QAAM,QAAQ,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,EAAE,CAAC,MAApB,EAA4B,MAA7C;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,EAAE,CAArC,EAAwC;AACtC,UAAM,CAAC,GAAG,MAAM,CAAC,CAAD,CAAhB;;AACA,QAAI,CAAC,IAAI,CAAT,EAAY;AACV,MAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,QAAQ,CAAC,CAAD,CAA1B;AACD,KAFD,MAEO;AACL,MAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,QAAQ,CAAC,CAAD,CAAR,IAAe,CAAC,GAAG,CAAnB,CAAlB;AACD;AACF;;AAED,SAAO,OAAO,CAAC,cAAR,CAAuB,CAAC,CAAC,KAAzB,EAAgC,SAAhC,EAA2C,YAA3C,CAAP;AACD;AAED,OAAO,MAAM,aAAa,GAAiB;AACzC,EAAA,UAAU,EAAE,OAD6B;AAEzC,EAAA,WAAW,EAAE,KAF4B;AAGzC,EAAA,UAAU,EAAE;AAH6B,CAApC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { EluGrad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function eluGrad(args) {\n    const { inputs, backend } = args;\n    const { dy, y } = inputs;\n    assertNotComplex([dy, y], 'eluGrad');\n    const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n    const values = backend.data.get(y.dataId).values;\n    const dyValues = backend.data.get(dy.dataId).values;\n    for (let i = 0; i < values.length; ++i) {\n        const v = values[i];\n        if (v >= 1) {\n            resultValues[i] = dyValues[i];\n        }\n        else {\n            resultValues[i] = dyValues[i] * (v + 1);\n        }\n    }\n    return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\nexport const eluGradConfig = {\n    kernelName: EluGrad,\n    backendName: 'cpu',\n    kernelFunc: eluGrad\n};\n//# sourceMappingURL=EluGrad.js.map"]},"metadata":{},"sourceType":"module"}