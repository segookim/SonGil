{"ast":null,"code":"import _classCallCheck from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var SliceProgram = /*#__PURE__*/function () {\n  function SliceProgram(destSize) {\n    _classCallCheck(this, SliceProgram);\n\n    this.variableNames = ['source'];\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    var dtype = getCoordsDataType(this.rank);\n    var uniformPart = \"uniform int start[\".concat(this.rank, \"];\");\n    var sourceCoords = getCoords(this.rank);\n    var body;\n    var coordSum = destSize.map(function (_, i) {\n      return \"sourceLoc.\".concat(coords[i], \" = start[\").concat(i, \"] + coords.\").concat(coords[i], \";\");\n    });\n    body = \"\\n        \".concat(dtype, \" sourceLoc;\\n        \").concat(dtype, \" coords = getOutputCoords();\\n        \").concat(coordSum.join('\\n'), \"\\n      \");\n    this.userCode = \"\\n      \".concat(uniformPart, \"\\n      void main() {\\n        \").concat(body, \"\\n        setOutput(getSource(\").concat(sourceCoords, \"));\\n      }\\n    \");\n  }\n\n  _createClass(SliceProgram, [{\n    key: \"getCustomSetupFunc\",\n    value: function getCustomSetupFunc(start) {\n      var _this = this;\n\n      if (start.length !== this.rank) {\n        throw Error(\"The rank (\".concat(this.rank, \") of the program must match the \") + \"length of start (\".concat(start.length, \")\"));\n      }\n\n      return function (gpgpu, webGLProgram) {\n        if (_this.startLoc == null) {\n          _this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n\n          if (_this.startLoc == null) {\n            // This means the compiler has optimized and realized it doesn't need\n            // the uniform.\n            return;\n          }\n        }\n\n        gpgpu.gl.uniform1iv(_this.startLoc, start);\n      };\n    }\n  }]);\n\n  return SliceProgram;\n}();\nvar coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank) {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(function (x) {\n      return 'sourceLoc.' + x;\n    }).join(',');\n  } else {\n    throw Error(\"Slicing for rank \".concat(rank, \" is not yet supported\"));\n  }\n}","map":{"version":3,"sources":["../src/slice_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAIH,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,WAAa,YAAb;AASE,wBAAY,QAAZ,EAA8B;AAAA;;AAR9B,SAAA,aAAA,GAAgB,CAAC,QAAD,CAAhB;AASE,SAAK,WAAL,GAAmB,QAAnB;AACA,SAAK,IAAL,GAAY,QAAQ,CAAC,MAArB;AAEA,QAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,IAAN,CAA/B;AACA,QAAM,WAAW,+BAAwB,KAAK,IAA7B,OAAjB;AACA,QAAM,YAAY,GAAG,SAAS,CAAC,KAAK,IAAN,CAA9B;AAEA,QAAI,IAAJ;AACA,QAAM,QAAQ,GAAG,QAAQ,CAAC,GAAT,CAAa,UAAC,CAAD,EAAI,CAAJ,EAAS;AACrC,iCAAoB,MAAM,CAAC,CAAD,CAA1B,sBAAyC,CAAzC,wBAAwD,MAAM,CAAC,CAAD,CAA9D;AACD,KAFgB,CAAjB;AAGA,IAAA,IAAI,uBACE,KADF,kCAEE,KAFF,mDAGE,QAAQ,CAAC,IAAT,CAAc,IAAd,CAHF,aAAJ;AAKA,SAAK,QAAL,qBACI,WADJ,4CAGM,IAHN,2CAI0B,YAJ1B;AAOD;;AAjCH;AAAA;AAAA,WAmCE,4BAAmB,KAAnB,EAAkC;AAAA;;AAChC,UAAI,KAAK,CAAC,MAAN,KAAiB,KAAK,IAA1B,EAAgC;AAC9B,cAAM,KAAK,CACP,oBAAa,KAAK,IAAlB,mEACoB,KAAK,CAAC,MAD1B,MADO,CAAX;AAGD;;AACD,aAAO,UAAC,KAAD,EAAsB,YAAtB,EAAoD;AACzD,YAAI,KAAI,CAAC,QAAL,IAAiB,IAArB,EAA2B;AACzB,UAAA,KAAI,CAAC,QAAL,GAAgB,KAAK,CAAC,yBAAN,CAAgC,YAAhC,EAA8C,OAA9C,CAAhB;;AACA,cAAI,KAAI,CAAC,QAAL,IAAiB,IAArB,EAA2B;AACzB;AACA;AACA;AACD;AACF;;AACD,QAAA,KAAK,CAAC,EAAN,CAAS,UAAT,CAAoB,KAAI,CAAC,QAAzB,EAAmC,KAAnC;AACD,OAVD;AAWD;AApDH;;AAAA;AAAA;AAuDA,IAAM,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAf;;AAEA,SAAS,SAAT,CAAmB,IAAnB,EAA+B;AAC7B,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd,WAAO,WAAP;AACD,GAFD,MAEO,IAAI,IAAI,IAAI,CAAZ,EAAe;AACpB,WAAO,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,IAAhB,EAAsB,GAAtB,CAA0B,UAAA,CAAC;AAAA,aAAI,eAAe,CAAnB;AAAA,KAA3B,EAAiD,IAAjD,CAAsD,GAAtD,CAAP;AACD,GAFM,MAEA;AACL,UAAM,KAAK,4BAAqB,IAArB,2BAAX;AACD;AACF","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SliceProgram {\n    constructor(destSize) {\n        this.variableNames = ['source'];\n        this.outputShape = destSize;\n        this.rank = destSize.length;\n        const dtype = getCoordsDataType(this.rank);\n        const uniformPart = `uniform int start[${this.rank}];`;\n        const sourceCoords = getCoords(this.rank);\n        let body;\n        const coordSum = destSize.map((_, i) => {\n            return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n        });\n        body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n        this.userCode = `\n      ${uniformPart}\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n    }\n    getCustomSetupFunc(start) {\n        if (start.length !== this.rank) {\n            throw Error(`The rank (${this.rank}) of the program must match the ` +\n                `length of start (${start.length})`);\n        }\n        return (gpgpu, webGLProgram) => {\n            if (this.startLoc == null) {\n                this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n                if (this.startLoc == null) {\n                    // This means the compiler has optimized and realized it doesn't need\n                    // the uniform.\n                    return;\n                }\n            }\n            gpgpu.gl.uniform1iv(this.startLoc, start);\n        };\n    }\n}\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\nfunction getCoords(rank) {\n    if (rank === 1) {\n        return 'sourceLoc';\n    }\n    else if (rank <= 6) {\n        return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n    }\n    else {\n        throw Error(`Slicing for rank ${rank} is not yet supported`);\n    }\n}\n//# sourceMappingURL=slice_gpu.js.map"]},"metadata":{},"sourceType":"module"}