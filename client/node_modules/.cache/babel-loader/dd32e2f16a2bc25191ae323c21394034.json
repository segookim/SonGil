{"ast":null,"code":"import _createClass from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* original source: keras/regularizers.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { abs, add, serialization, sum, tidy, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\n\nfunction assertObjectArgs(args) {\n  if (args != null && typeof args !== 'object') {\n    throw new Error(\"Argument to L1L2 regularizer's constructor is expected to be an \" + \"object, but received: \".concat(args));\n  }\n}\n/**\n * Regularizer base class.\n */\n\n\nexport var Regularizer = /*#__PURE__*/function (_serialization$Serial) {\n  _inherits(Regularizer, _serialization$Serial);\n\n  var _super = _createSuper(Regularizer);\n\n  function Regularizer() {\n    _classCallCheck(this, Regularizer);\n\n    return _super.apply(this, arguments);\n  }\n\n  return Regularizer;\n}(serialization.Serializable);\nexport var L1L2 = /*#__PURE__*/function (_Regularizer) {\n  _inherits(L1L2, _Regularizer);\n\n  var _super2 = _createSuper(L1L2);\n\n  function L1L2(args) {\n    var _this;\n\n    _classCallCheck(this, L1L2);\n\n    _this = _super2.call(this);\n    assertObjectArgs(args);\n    _this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;\n    _this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;\n    _this.hasL1 = _this.l1 !== 0;\n    _this.hasL2 = _this.l2 !== 0;\n    return _this;\n  }\n  /**\n   * Porting note: Renamed from __call__.\n   * @param x Variable of which to calculate the regularization score.\n   */\n\n\n  _createClass(L1L2, [{\n    key: \"apply\",\n    value: function apply(x) {\n      var _this2 = this;\n\n      return tidy(function () {\n        var regularization = zeros([1]);\n\n        if (_this2.hasL1) {\n          regularization = add(regularization, sum(tfc.mul(_this2.l1, abs(x))));\n        }\n\n        if (_this2.hasL2) {\n          regularization = add(regularization, sum(tfc.mul(_this2.l2, K.square(x))));\n        }\n\n        return regularization.asScalar();\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        'l1': this.l1,\n        'l2': this.l2\n      };\n    }\n    /** @nocollapse */\n\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls({\n        l1: config['l1'],\n        l2: config['l2']\n      });\n    }\n  }]);\n\n  return L1L2;\n}(Regularizer);\n/** @nocollapse */\n\nL1L2.className = 'L1L2';\nserialization.registerClass(L1L2);\nexport function l1(args) {\n  assertObjectArgs(args);\n  return new L1L2({\n    l1: args != null ? args.l1 : null,\n    l2: 0\n  });\n}\nexport function l2(args) {\n  assertObjectArgs(args);\n  return new L1L2({\n    l2: args != null ? args.l2 : null,\n    l1: 0\n  });\n} // Maps the JavaScript-like identifier keys to the corresponding keras symbols.\n\nexport var REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'l1l2': 'L1L2'\n};\nexport function serializeRegularizer(constraint) {\n  return serializeKerasObject(constraint);\n}\nexport function deserializeRegularizer(config) {\n  var customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'regularizer');\n}\nexport function getRegularizer(identifier) {\n  if (identifier == null) {\n    return null;\n  }\n\n  if (typeof identifier === 'string') {\n    var className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    var config = {\n      className: className,\n      config: {}\n    };\n    return deserializeRegularizer(config);\n  } else if (identifier instanceof Regularizer) {\n    return identifier;\n  } else {\n    return deserializeRegularizer(identifier);\n  }\n}","map":{"version":3,"sources":["../src/regularizers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* original source: keras/regularizers.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { abs, add, serialization, sum, tidy, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nfunction assertObjectArgs(args) {\n    if (args != null && typeof args !== 'object') {\n        throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an ` +\n            `object, but received: ${args}`);\n    }\n}\n/**\n * Regularizer base class.\n */\nexport class Regularizer extends serialization.Serializable {\n}\nexport class L1L2 extends Regularizer {\n    constructor(args) {\n        super();\n        assertObjectArgs(args);\n        this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;\n        this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;\n        this.hasL1 = this.l1 !== 0;\n        this.hasL2 = this.l2 !== 0;\n    }\n    /**\n     * Porting note: Renamed from __call__.\n     * @param x Variable of which to calculate the regularization score.\n     */\n    apply(x) {\n        return tidy(() => {\n            let regularization = zeros([1]);\n            if (this.hasL1) {\n                regularization = add(regularization, sum(tfc.mul(this.l1, abs(x))));\n            }\n            if (this.hasL2) {\n                regularization =\n                    add(regularization, sum(tfc.mul(this.l2, K.square(x))));\n            }\n            return regularization.asScalar();\n        });\n    }\n    getConfig() {\n        return { 'l1': this.l1, 'l2': this.l2 };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls({ l1: config['l1'], l2: config['l2'] });\n    }\n}\n/** @nocollapse */\nL1L2.className = 'L1L2';\nserialization.registerClass(L1L2);\nexport function l1(args) {\n    assertObjectArgs(args);\n    return new L1L2({ l1: args != null ? args.l1 : null, l2: 0 });\n}\nexport function l2(args) {\n    assertObjectArgs(args);\n    return new L1L2({ l2: args != null ? args.l2 : null, l1: 0 });\n}\n// Maps the JavaScript-like identifier keys to the corresponding keras symbols.\nexport const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'l1l2': 'L1L2'\n};\nexport function serializeRegularizer(constraint) {\n    return serializeKerasObject(constraint);\n}\nexport function deserializeRegularizer(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'regularizer');\n}\nexport function getRegularizer(identifier) {\n    if (identifier == null) {\n        return null;\n    }\n    if (typeof identifier === 'string') {\n        const className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        const config = { className, config: {} };\n        return deserializeRegularizer(config);\n    }\n    else if (identifier instanceof Regularizer) {\n        return identifier;\n    }\n    else {\n        return deserializeRegularizer(identifier);\n    }\n}\n//# sourceMappingURL=regularizers.js.map"]},"metadata":{},"sourceType":"module"}