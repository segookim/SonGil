{"ast":null,"code":"import _slicedToArray from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Sum, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { zeros } from '../utils/zeros_impl';\nimport { cast } from './Cast';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function sum(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var axis = attrs.axis,\n      keepDims = attrs.keepDims;\n  assertNotComplex(x, 'sum');\n  var $x;\n\n  if (x.dtype === 'bool') {\n    $x = cast({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        dtype: 'int32'\n      }\n    });\n  } else {\n    $x = identity({\n      inputs: {\n        x: x\n      },\n      backend: backend\n    });\n  }\n\n  var xRank = $x.shape.length;\n  var axes = util.parseAxisParam(axis, $x.shape);\n  var permutation = backend_util.getAxesPermutation(axes, xRank);\n  var reductionAxes = axes;\n  var permutedX = $x;\n\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x: $x\n      },\n      backend: backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', reductionAxes, permutedX.shape.length);\n\n  var _backend_util$compute = backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes),\n      _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n      outShape = _backend_util$compute2[0],\n      reduceShape = _backend_util$compute2[1];\n\n  var resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  var result = zeros(backend, outShape, resultDtype);\n  var reduceSize = util.sizeFromShape(reduceShape);\n  var vals = backend.data.get(result.dataId).values;\n  var aVals = backend.data.get(permutedX.dataId).values;\n\n  for (var i = 0; i < vals.length; ++i) {\n    var offset = i * reduceSize;\n    var _sum = 0;\n\n    for (var j = 0; j < reduceSize; ++j) {\n      _sum += aVals[offset + j];\n    }\n\n    vals[i] = _sum;\n  }\n\n  if (keepDims) {\n    var newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    var oldResult = result;\n    result = reshape({\n      inputs: {\n        x: result\n      },\n      backend: backend,\n      attrs: {\n        shape: newShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\nexport var sumConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum\n};","map":{"version":3,"sources":["../../src/kernels/Sum.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Sum, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { zeros } from '../utils/zeros_impl';\nimport { cast } from './Cast';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function sum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'sum');\n    let $x;\n    if (x.dtype === 'bool') {\n        $x = cast({ inputs: { x }, backend, attrs: { dtype: 'int32' } });\n    }\n    else {\n        $x = identity({ inputs: { x }, backend });\n    }\n    const xRank = $x.shape.length;\n    const axes = util.parseAxisParam(axis, $x.shape);\n    const permutation = backend_util.getAxesPermutation(axes, xRank);\n    let reductionAxes = axes;\n    let permutedX = $x;\n    if (permutation != null) {\n        permutedX =\n            transpose({ inputs: { x: $x }, backend, attrs: { perm: permutation } });\n        reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('sum', reductionAxes, permutedX.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n    const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n    let result = zeros(backend, outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = backend.data.get(result.dataId).values;\n    const aVals = backend.data.get(permutedX.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let sum = 0;\n        for (let j = 0; j < reduceSize; ++j) {\n            sum += aVals[offset + j];\n        }\n        vals[i] = sum;\n    }\n    if (keepDims) {\n        const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n        const oldResult = result;\n        result = reshape({ inputs: { x: result }, backend, attrs: { shape: newShape } });\n        backend.disposeIntermediateTensorInfo(oldResult);\n    }\n    backend.disposeIntermediateTensorInfo($x);\n    if (permutation != null) {\n        backend.disposeIntermediateTensorInfo(permutedX);\n    }\n    return result;\n}\nexport const sumConfig = {\n    kernelName: Sum,\n    backendName: 'cpu',\n    kernelFunc: sum\n};\n//# sourceMappingURL=Sum.js.map"]},"metadata":{},"sourceType":"module"}