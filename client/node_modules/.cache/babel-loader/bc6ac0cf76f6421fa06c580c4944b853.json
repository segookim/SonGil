{"ast":null,"code":"import _slicedToArray from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n  var isContinous = slice_util.isSliceContinous(shape, begin, size);\n  var length = util.sizeFromShape(size);\n  var xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    var flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return vals.slice(flatOffset, flatOffset + length);\n    }\n\n    return vals.subarray(flatOffset, flatOffset + length);\n  }\n\n  var decodedData = dtype === 'string' ? backend_util.fromUint8ToStringArray(vals) : vals;\n  var inBuf = buffer(shape, dtype, decodedData);\n  var outBuf = buffer(size, dtype);\n\n  for (var i = 0; i < outBuf.size; ++i) {\n    var outLoc = outBuf.indexToLoc(i);\n    var inLoc = outLoc.map(function (idx, j) {\n      return idx + begin[j];\n    });\n    outBuf.set.apply(outBuf, [inBuf.get.apply(inBuf, _toConsumableArray(inLoc))].concat(_toConsumableArray(outLoc)));\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values);\n  }\n\n  return outBuf.values;\n}\nexport function slice(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var begin = attrs.begin,\n      size = attrs.size;\n  assertNotComplex(x, 'slice');\n\n  var _slice_util$parseSlic = slice_util.parseSliceParams(x, begin, size),\n      _slice_util$parseSlic2 = _slicedToArray(_slice_util$parseSlic, 2),\n      $begin = _slice_util$parseSlic2[0],\n      $size = _slice_util$parseSlic2[1];\n\n  slice_util.assertParamsValid(x, $begin, $size);\n  var vals = backend.data.get(x.dataId).values;\n  var outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport var sliceConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice\n};","map":{"version":3,"sources":["../../src/kernels/Slice.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n    const isContinous = slice_util.isSliceContinous(shape, begin, size);\n    const length = util.sizeFromShape(size);\n    const xStrides = util.computeStrides(shape);\n    if (isContinous) {\n        const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n        if (dtype === 'string') {\n            return vals.slice(flatOffset, flatOffset + length);\n        }\n        return vals.subarray(flatOffset, flatOffset + length);\n    }\n    const decodedData = dtype === 'string' ?\n        backend_util.fromUint8ToStringArray(vals) :\n        vals;\n    const inBuf = buffer(shape, dtype, decodedData);\n    const outBuf = buffer(size, dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const outLoc = outBuf.indexToLoc(i);\n        const inLoc = outLoc.map((idx, j) => idx + begin[j]);\n        outBuf.set(inBuf.get(...inLoc), ...outLoc);\n    }\n    if (dtype === 'string') {\n        return backend_util.fromStringArrayToUint8(outBuf.values);\n    }\n    return outBuf.values;\n}\nexport function slice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, size } = attrs;\n    assertNotComplex(x, 'slice');\n    const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n    slice_util.assertParamsValid(x, $begin, $size);\n    const vals = backend.data.get(x.dataId).values;\n    const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport const sliceConfig = {\n    kernelName: Slice,\n    backendName: 'cpu',\n    kernelFunc: slice\n};\n//# sourceMappingURL=Slice.js.map"]},"metadata":{},"sourceType":"module"}