{"ast":null,"code":"import _slicedToArray from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prelu } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nvar preluImpl = createSimpleBinaryKernelImpl(function (xValue, aValue) {\n  return xValue < 0 ? aValue * xValue : xValue;\n});\nexport function prelu(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var x = inputs.x,\n      alpha = inputs.alpha;\n  assertNotComplex([x, alpha], 'prelu');\n  var aVals = backend.data.get(x.dataId).values;\n  var bVals = backend.data.get(alpha.dataId).values;\n\n  var _preluImpl = preluImpl(x.shape, alpha.shape, aVals, bVals, x.dtype),\n      _preluImpl2 = _slicedToArray(_preluImpl, 2),\n      resultData = _preluImpl2[0],\n      resultShape = _preluImpl2[1];\n\n  return backend.makeTensorInfo(resultShape, x.dtype, resultData);\n}\nexport var preluConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu\n};","map":{"version":3,"sources":["../../src/kernels/Prelu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAsB,KAAtB,QAAuE,uBAAvE;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AACA,SAAQ,4BAAR,QAA2C,sBAA3C;AAEA,IAAM,SAAS,GAAG,4BAA4B,CAC1C,UAAC,MAAD,EAAiB,MAAjB;AAAA,SAAoC,MAAM,GAAG,CAAT,GAAa,MAAM,GAAG,MAAtB,GAA+B,MAAnE;AAAA,CAD0C,CAA9C;AAGA,OAAM,SAAU,KAAV,CAAgB,IAAhB,EAAoE;AAAA,MAEjE,MAFiE,GAE9C,IAF8C,CAEjE,MAFiE;AAAA,MAEzD,OAFyD,GAE9C,IAF8C,CAEzD,OAFyD;AAAA,MAGjE,CAHiE,GAGrD,MAHqD,CAGjE,CAHiE;AAAA,MAG9D,KAH8D,GAGrD,MAHqD,CAG9D,KAH8D;AAKxE,EAAA,gBAAgB,CAAC,CAAC,CAAD,EAAI,KAAJ,CAAD,EAAa,OAAb,CAAhB;AAEA,MAAM,KAAK,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAAzC;AACA,MAAM,KAAK,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,KAAK,CAAC,MAAvB,EAA+B,MAA7C;;AARwE,mBAWpE,SAAS,CAAC,CAAC,CAAC,KAAH,EAAU,KAAK,CAAC,KAAhB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,CAAC,CAAC,KAAvC,CAX2D;AAAA;AAAA,MAUjE,UAViE;AAAA,MAUrD,WAVqD;;AAaxE,SAAO,OAAO,CAAC,cAAR,CAAuB,WAAvB,EAAoC,CAAC,CAAC,KAAtC,EAA6C,UAA7C,CAAP;AACD;AAED,OAAO,IAAM,WAAW,GAAiB;AACvC,EAAA,UAAU,EAAE,KAD2B;AAEvC,EAAA,WAAW,EAAE,KAF0B;AAGvC,EAAA,UAAU,EAAE;AAH2B,CAAlC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prelu } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nconst preluImpl = createSimpleBinaryKernelImpl((xValue, aValue) => xValue < 0 ? aValue * xValue : xValue);\nexport function prelu(args) {\n    const { inputs, backend } = args;\n    const { x, alpha } = inputs;\n    assertNotComplex([x, alpha], 'prelu');\n    const aVals = backend.data.get(x.dataId).values;\n    const bVals = backend.data.get(alpha.dataId).values;\n    const [resultData, resultShape] = preluImpl(x.shape, alpha.shape, aVals, bVals, x.dtype);\n    return backend.makeTensorInfo(resultShape, x.dtype, resultData);\n}\nexport const preluConfig = {\n    kernelName: Prelu,\n    backendName: 'cpu',\n    kernelFunc: prelu,\n};\n//# sourceMappingURL=Prelu.js.map"]},"metadata":{},"sourceType":"module"}