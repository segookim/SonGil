{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _defineProperty from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Basic Layers.\n */\nimport { any, notEqual, serialization, tidy, transpose, util } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { assertPositiveInteger, mapActivationToFusedKernel } from '../utils/generic_utils';\nimport { arrayProd, range } from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport var Dropout = /*#__PURE__*/function (_Layer) {\n  _inherits(Dropout, _Layer);\n\n  var _super = _createSuper(Dropout);\n\n  function Dropout(args) {\n    var _this;\n\n    _classCallCheck(this, Dropout);\n\n    _this = _super.call(this, args);\n    _this.rate = Math.max(Math.min(args.rate, 1), 0); // So that the scalar doesn't get tidied up between executions.\n\n    _this.noiseShape = args.noiseShape;\n    _this.seed = args.seed;\n    _this.supportsMasking = true;\n    return _this;\n  }\n\n  _createClass(Dropout, [{\n    key: \"getNoiseShape\",\n    value: function getNoiseShape(input) {\n      if (this.noiseShape == null) {\n        return this.noiseShape;\n      }\n\n      var inputShape = input.shape;\n      var noiseShape = [];\n\n      for (var i = 0; i < this.noiseShape.length; ++i) {\n        noiseShape.push(this.noiseShape[i] == null ? inputShape[i] : this.noiseShape[i]);\n      }\n\n      return noiseShape;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this2 = this;\n\n      return tidy(function () {\n        _this2.invokeCallHook(inputs, kwargs);\n\n        var input = getExactlyOneTensor(inputs);\n\n        if (0 < _this2.rate && _this2.rate < 1) {\n          var training = kwargs['training'] == null ? false : kwargs['training'];\n\n          var noiseShape = _this2.getNoiseShape(input);\n\n          var output = K.inTrainPhase(function () {\n            return K.dropout(input, _this2.rate, noiseShape, _this2.seed);\n          }, function () {\n            return input;\n          }, training);\n          return output;\n        }\n\n        return inputs;\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        rate: this.rate,\n        noiseShape: this.noiseShape,\n        seed: this.seed\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Dropout.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      return _get(_getPrototypeOf(Dropout.prototype), \"dispose\", this).call(this);\n    }\n  }]);\n\n  return Dropout;\n}(Layer);\n/** @nocollapse */\n\nDropout.className = 'Dropout';\nserialization.registerClass(Dropout);\nexport var SpatialDropout1D = /*#__PURE__*/function (_Dropout) {\n  _inherits(SpatialDropout1D, _Dropout);\n\n  var _super2 = _createSuper(SpatialDropout1D);\n\n  function SpatialDropout1D(args) {\n    var _this3;\n\n    _classCallCheck(this, SpatialDropout1D);\n\n    _this3 = _super2.call(this, args);\n    _this3.inputSpec = [{\n      ndim: 3\n    }];\n    return _this3;\n  }\n\n  _createClass(SpatialDropout1D, [{\n    key: \"getNoiseShape\",\n    value: function getNoiseShape(input) {\n      var inputShape = input.shape;\n      return [inputShape[0], 1, inputShape[2]];\n    }\n  }]);\n\n  return SpatialDropout1D;\n}(Dropout);\n/** @nocollapse */\n\nSpatialDropout1D.className = 'SpatialDropout1D';\nserialization.registerClass(SpatialDropout1D);\nexport var Dense = /*#__PURE__*/function (_Layer2) {\n  _inherits(Dense, _Layer2);\n\n  var _super3 = _createSuper(Dense);\n\n  function Dense(args) {\n    var _this4;\n\n    _classCallCheck(this, Dense);\n\n    _this4 = _super3.call(this, args); // Default activation: Linear (none).\n\n    _this4.activation = null;\n    _this4.useBias = true;\n    _this4.kernel = null;\n    _this4.bias = null;\n    _this4.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    _this4.DEFAULT_BIAS_INITIALIZER = 'zeros';\n\n    if (args.batchInputShape == null && args.inputShape == null && args.inputDim != null) {\n      // This logic is copied from Layer's constructor, since we can't\n      // do exactly what the Python constructor does for Dense().\n      var batchSize = null;\n\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n\n      _this4.batchInputShape = [batchSize, args.inputDim];\n    }\n\n    _this4.units = args.units;\n    assertPositiveInteger(_this4.units, 'units');\n    _this4.activation = getActivation(args.activation);\n\n    if (args.useBias != null) {\n      _this4.useBias = args.useBias;\n    }\n\n    _this4.kernelInitializer = getInitializer(args.kernelInitializer || _this4.DEFAULT_KERNEL_INITIALIZER);\n    _this4.biasInitializer = getInitializer(args.biasInitializer || _this4.DEFAULT_BIAS_INITIALIZER);\n    _this4.kernelConstraint = getConstraint(args.kernelConstraint);\n    _this4.biasConstraint = getConstraint(args.biasConstraint);\n    _this4.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    _this4.biasRegularizer = getRegularizer(args.biasRegularizer);\n    _this4.activityRegularizer = getRegularizer(args.activityRegularizer);\n    _this4.supportsMasking = true;\n    _this4.inputSpec = [{\n      minNDim: 2\n    }];\n    return _this4;\n  }\n\n  _createClass(Dense, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var inputLastDim = inputShape[inputShape.length - 1];\n\n      if (this.kernel == null) {\n        this.kernel = this.addWeight('kernel', [inputLastDim, this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n\n        if (this.useBias) {\n          this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n      }\n\n      this.inputSpec = [{\n        minNDim: 2,\n        axes: _defineProperty({}, -1, inputLastDim)\n      }];\n      this.built = true;\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var outputShape = inputShape.slice();\n      outputShape[outputShape.length - 1] = this.units;\n      return outputShape;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this5 = this;\n\n      return tidy(function () {\n        _this5.invokeCallHook(inputs, kwargs); // Dense layer accepts only a single input.\n\n\n        var input = getExactlyOneTensor(inputs);\n        var fusedActivationName = mapActivationToFusedKernel(_this5.activation.getClassName());\n        var output;\n\n        if (fusedActivationName != null) {\n          output = K.dot(input, _this5.kernel.read(), fusedActivationName, _this5.bias ? _this5.bias.read() : null);\n        } else {\n          output = K.dot(input, _this5.kernel.read());\n\n          if (_this5.bias != null) {\n            output = K.biasAdd(output, _this5.bias.read());\n          }\n\n          if (_this5.activation != null) {\n            output = _this5.activation.apply(output);\n          }\n        }\n\n        return output;\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        units: this.units,\n        activation: serializeActivation(this.activation),\n        useBias: this.useBias,\n        kernelInitializer: serializeInitializer(this.kernelInitializer),\n        biasInitializer: serializeInitializer(this.biasInitializer),\n        kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n        biasRegularizer: serializeRegularizer(this.biasRegularizer),\n        activityRegularizer: serializeRegularizer(this.activityRegularizer),\n        kernelConstraint: serializeConstraint(this.kernelConstraint),\n        biasConstraint: serializeConstraint(this.biasConstraint)\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Dense.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return Dense;\n}(Layer);\n/** @nocollapse */\n\nDense.className = 'Dense';\nserialization.registerClass(Dense);\nexport var Flatten = /*#__PURE__*/function (_Layer3) {\n  _inherits(Flatten, _Layer3);\n\n  var _super4 = _createSuper(Flatten);\n\n  function Flatten(args) {\n    var _this6;\n\n    _classCallCheck(this, Flatten);\n\n    args = args || {};\n    _this6 = _super4.call(this, args);\n    _this6.inputSpec = [{\n      minNDim: 3\n    }];\n    _this6.dataFormat = args.dataFormat;\n    return _this6;\n  }\n\n  _createClass(Flatten, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n\n      var _iterator = _createForOfIteratorHelper(inputShape.slice(1)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var dim = _step.value;\n\n          if (dim == null) {\n            throw new ValueError(\"The shape of the input to \\\"Flatten\\\" is not fully defined \" + \"(got \".concat(inputShape.slice(1), \"). Make sure to pass a complete \") + \"\\\"input_shape\\\" or \\\"batch_input_shape\\\" argument to the first \" + \"layer in your model.\");\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return [inputShape[0], arrayProd(inputShape, 1)];\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this7 = this;\n\n      return tidy(function () {\n        _this7.invokeCallHook(inputs, kwargs);\n\n        var input = getExactlyOneTensor(inputs);\n\n        if (_this7.dataFormat === 'channelsFirst' && input.rank > 1) {\n          var permutation = [0];\n\n          for (var i = 2; i < input.rank; ++i) {\n            permutation.push(i);\n          }\n\n          permutation.push(1);\n          input = input.transpose(permutation);\n        }\n\n        return K.batchFlatten(input);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {};\n\n      if (this.dataFormat != null) {\n        config['dataFormat'] = this.dataFormat;\n      }\n\n      var baseConfig = _get(_getPrototypeOf(Flatten.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return Flatten;\n}(Layer);\n/** @nocollapse */\n\nFlatten.className = 'Flatten';\nserialization.registerClass(Flatten);\nexport var Activation = /*#__PURE__*/function (_Layer4) {\n  _inherits(Activation, _Layer4);\n\n  var _super5 = _createSuper(Activation);\n\n  function Activation(args) {\n    var _this8;\n\n    _classCallCheck(this, Activation);\n\n    _this8 = _super5.call(this, args);\n    _this8.supportsMasking = true;\n    _this8.activation = getActivation(args.activation);\n    return _this8;\n  }\n\n  _createClass(Activation, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this9 = this;\n\n      return tidy(function () {\n        _this9.invokeCallHook(inputs, kwargs);\n\n        var input = getExactlyOneTensor(inputs);\n        return _this9.activation.apply(input);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        activation: serializeActivation(this.activation)\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Activation.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return Activation;\n}(Layer);\n/** @nocollapse */\n\nActivation.className = 'Activation';\nserialization.registerClass(Activation);\nexport var RepeatVector = /*#__PURE__*/function (_Layer5) {\n  _inherits(RepeatVector, _Layer5);\n\n  var _super6 = _createSuper(RepeatVector);\n\n  function RepeatVector(args) {\n    var _this10;\n\n    _classCallCheck(this, RepeatVector);\n\n    _this10 = _super6.call(this, args);\n    _this10.n = args.n;\n    _this10.inputSpec = [{\n      ndim: 2\n    }];\n    return _this10;\n  }\n\n  _createClass(RepeatVector, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      return [inputShape[0], this.n, inputShape[1]];\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this11 = this;\n\n      return tidy(function () {\n        inputs = getExactlyOneTensor(inputs);\n        return K.repeat(inputs, _this11.n);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        n: this.n\n      };\n\n      var baseConfig = _get(_getPrototypeOf(RepeatVector.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return RepeatVector;\n}(Layer);\n/** @nocollapse */\n\nRepeatVector.className = 'RepeatVector';\nserialization.registerClass(RepeatVector);\nexport var Reshape = /*#__PURE__*/function (_Layer6) {\n  _inherits(Reshape, _Layer6);\n\n  var _super7 = _createSuper(Reshape);\n\n  function Reshape(args) {\n    var _this12;\n\n    _classCallCheck(this, Reshape);\n\n    _this12 = _super7.call(this, args);\n    _this12.targetShape = args.targetShape; // Make sure that all unknown dimensions are represented as `null`.\n\n    for (var i = 0; i < _this12.targetShape.length; ++i) {\n      if (_this12.isUnknown(_this12.targetShape[i])) {\n        _this12.targetShape[i] = null;\n      }\n    }\n\n    return _this12;\n  }\n\n  _createClass(Reshape, [{\n    key: \"isUnknown\",\n    value: function isUnknown(dim) {\n      return dim < 0 || dim == null;\n    }\n    /**\n     * Finds and replaces a missing dimension in output shape.\n     *\n     * This is a near direct port of the internal Numpy function\n     * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.\n     *\n     * @param inputShape: Original shape of array begin reshape.\n     * @param outputShape: Target shape of the array, with at most a single\n     * `null` or negative number, which indicates an underdetermined dimension\n     * that should be derived from `inputShape` and the known dimensions of\n     *   `outputShape`.\n     * @returns: The output shape with `null` replaced with its computed value.\n     * @throws: ValueError: If `inputShape` and `outputShape` do not match.\n     */\n\n  }, {\n    key: \"fixUnknownDimension\",\n    value: function fixUnknownDimension(inputShape, outputShape) {\n      var errorMsg = 'Total size of new array must be unchanged.';\n      var finalShape = outputShape.slice();\n      var known = 1;\n      var unknown = null;\n\n      for (var i = 0; i < finalShape.length; ++i) {\n        var dim = finalShape[i];\n\n        if (this.isUnknown(dim)) {\n          if (unknown === null) {\n            unknown = i;\n          } else {\n            throw new ValueError('Can only specifiy one unknown dimension.');\n          }\n        } else {\n          known *= dim;\n        }\n      }\n\n      var originalSize = arrayProd(inputShape);\n\n      if (unknown !== null) {\n        if (known === 0 || originalSize % known !== 0) {\n          throw new ValueError(errorMsg);\n        }\n\n        finalShape[unknown] = originalSize / known;\n      } else if (originalSize !== known) {\n        throw new ValueError(errorMsg);\n      }\n\n      return finalShape;\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      var anyUnknownDims = false;\n\n      for (var i = 0; i < inputShape.length; ++i) {\n        if (this.isUnknown(inputShape[i])) {\n          anyUnknownDims = true;\n          break;\n        }\n      }\n\n      if (anyUnknownDims) {\n        return inputShape.slice(0, 1).concat(this.targetShape);\n      } else {\n        return inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n      }\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this13 = this;\n\n      return tidy(function () {\n        _this13.invokeCallHook(inputs, kwargs);\n\n        var input = getExactlyOneTensor(inputs);\n        var inputShape = input.shape;\n        var outputShape = inputShape.slice(0, 1).concat(_this13.fixUnknownDimension(inputShape.slice(1), _this13.targetShape));\n        return input.reshape(outputShape);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        targetShape: this.targetShape\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Reshape.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return Reshape;\n}(Layer);\n/** @nocollapse */\n\nReshape.className = 'Reshape';\nserialization.registerClass(Reshape);\nexport var Permute = /*#__PURE__*/function (_Layer7) {\n  _inherits(Permute, _Layer7);\n\n  var _super8 = _createSuper(Permute);\n\n  function Permute(args) {\n    var _this14;\n\n    _classCallCheck(this, Permute);\n\n    _this14 = _super8.call(this, args);\n\n    if (args.dims == null) {\n      throw new Error('Required configuration field `dims` is missing during Permute ' + 'constructor call.');\n    }\n\n    if (!Array.isArray(args.dims)) {\n      throw new Error('Permute constructor requires `dims` to be an Array, but received ' + \"\".concat(args.dims, \" instead.\"));\n    } // Check the validity of the permutation indices.\n\n\n    var expectedSortedIndices = range(1, args.dims.length + 1);\n\n    if (!util.arraysEqual(args.dims.slice().sort(), expectedSortedIndices)) {\n      throw new Error('Invalid permutation `dims`: ' + JSON.stringify(args.dims) + ' `dims` must contain consecutive integers starting from 1.');\n    }\n\n    _this14.dims = args.dims;\n    _this14.dimsIncludingBatch = [0].concat(_this14.dims);\n    _this14.inputSpec = [new InputSpec({\n      ndim: _this14.dims.length + 1\n    })];\n    return _this14;\n  }\n\n  _createClass(Permute, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var outputShape = inputShape.slice();\n      this.dims.forEach(function (dim, i) {\n        outputShape[i + 1] = inputShape[dim];\n      });\n      return outputShape;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      return transpose(getExactlyOneTensor(inputs), this.dimsIncludingBatch);\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        dims: this.dims\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Permute.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return Permute;\n}(Layer);\n/** @nocollapse */\n\nPermute.className = 'Permute';\nserialization.registerClass(Permute);\nexport var Masking = /*#__PURE__*/function (_Layer8) {\n  _inherits(Masking, _Layer8);\n\n  var _super9 = _createSuper(Masking);\n\n  function Masking(args) {\n    var _this15;\n\n    _classCallCheck(this, Masking);\n\n    _this15 = _super9.call(this, args == null ? {} : args);\n    _this15.supportsMasking = true;\n\n    if (args != null) {\n      _this15.maskValue = args.maskValue == null ? 0 : args.maskValue;\n    } else {\n      _this15.maskValue = 0;\n    }\n\n    return _this15;\n  }\n\n  _createClass(Masking, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      return inputShape;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var baseConfig = _get(_getPrototypeOf(Masking.prototype), \"getConfig\", this).call(this);\n\n      var config = {\n        maskValue: this.maskValue\n      };\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }, {\n    key: \"computeMask\",\n    value: function computeMask(inputs, mask) {\n      var input = getExactlyOneTensor(inputs);\n      var axis = -1;\n      return any(notEqual(input, this.maskValue), axis);\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this16 = this;\n\n      return tidy(function () {\n        _this16.invokeCallHook(inputs, kwargs);\n\n        var input = getExactlyOneTensor(inputs);\n        var axis = -1;\n        var keepDims = true;\n        var booleanMask = any(notEqual(input, _this16.maskValue), axis, keepDims);\n        var output = input.mul(booleanMask.asType(input.dtype));\n        return output;\n      });\n    }\n  }]);\n\n  return Masking;\n}(Layer);\n/** @nocollapse */\n\nMasking.className = 'Masking';\nserialization.registerClass(Masking);","map":{"version":3,"sources":["../../src/layers/core.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Basic Layers.\n */\nimport { any, notEqual, serialization, tidy, transpose, util } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { assertPositiveInteger, mapActivationToFusedKernel } from '../utils/generic_utils';\nimport { arrayProd, range } from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport class Dropout extends Layer {\n    constructor(args) {\n        super(args);\n        this.rate = Math.max(Math.min(args.rate, 1), 0);\n        // So that the scalar doesn't get tidied up between executions.\n        this.noiseShape = args.noiseShape;\n        this.seed = args.seed;\n        this.supportsMasking = true;\n    }\n    getNoiseShape(input) {\n        if (this.noiseShape == null) {\n            return this.noiseShape;\n        }\n        const inputShape = input.shape;\n        const noiseShape = [];\n        for (let i = 0; i < this.noiseShape.length; ++i) {\n            noiseShape.push(this.noiseShape[i] == null ? inputShape[i] : this.noiseShape[i]);\n        }\n        return noiseShape;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            if (0 < this.rate && this.rate < 1) {\n                const training = kwargs['training'] == null ? false : kwargs['training'];\n                const noiseShape = this.getNoiseShape(input);\n                const output = K.inTrainPhase(() => K.dropout(input, this.rate, noiseShape, this.seed), () => input, training);\n                return output;\n            }\n            return inputs;\n        });\n    }\n    getConfig() {\n        const config = {\n            rate: this.rate,\n            noiseShape: this.noiseShape,\n            seed: this.seed,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    dispose() {\n        return super.dispose();\n    }\n}\n/** @nocollapse */\nDropout.className = 'Dropout';\nserialization.registerClass(Dropout);\nexport class SpatialDropout1D extends Dropout {\n    constructor(args) {\n        super(args);\n        this.inputSpec = [{ ndim: 3 }];\n    }\n    getNoiseShape(input) {\n        const inputShape = input.shape;\n        return [inputShape[0], 1, inputShape[2]];\n    }\n}\n/** @nocollapse */\nSpatialDropout1D.className = 'SpatialDropout1D';\nserialization.registerClass(SpatialDropout1D);\nexport class Dense extends Layer {\n    constructor(args) {\n        super(args);\n        // Default activation: Linear (none).\n        this.activation = null;\n        this.useBias = true;\n        this.kernel = null;\n        this.bias = null;\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        if (args.batchInputShape == null && args.inputShape == null &&\n            args.inputDim != null) {\n            // This logic is copied from Layer's constructor, since we can't\n            // do exactly what the Python constructor does for Dense().\n            let batchSize = null;\n            if (args.batchSize != null) {\n                batchSize = args.batchSize;\n            }\n            this.batchInputShape = [batchSize, args.inputDim];\n        }\n        this.units = args.units;\n        assertPositiveInteger(this.units, 'units');\n        this.activation = getActivation(args.activation);\n        if (args.useBias != null) {\n            this.useBias = args.useBias;\n        }\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.activityRegularizer = getRegularizer(args.activityRegularizer);\n        this.supportsMasking = true;\n        this.inputSpec = [{ minNDim: 2 }];\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const inputLastDim = inputShape[inputShape.length - 1];\n        if (this.kernel == null) {\n            this.kernel = this.addWeight('kernel', [inputLastDim, this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n            if (this.useBias) {\n                this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n            }\n        }\n        this.inputSpec = [{ minNDim: 2, axes: { [-1]: inputLastDim } }];\n        this.built = true;\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const outputShape = inputShape.slice();\n        outputShape[outputShape.length - 1] = this.units;\n        return outputShape;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            // Dense layer accepts only a single input.\n            const input = getExactlyOneTensor(inputs);\n            const fusedActivationName = mapActivationToFusedKernel(this.activation.getClassName());\n            let output;\n            if (fusedActivationName != null) {\n                output = K.dot(input, this.kernel.read(), fusedActivationName, this.bias ? this.bias.read() : null);\n            }\n            else {\n                output = K.dot(input, this.kernel.read());\n                if (this.bias != null) {\n                    output = K.biasAdd(output, this.bias.read());\n                }\n                if (this.activation != null) {\n                    output = this.activation.apply(output);\n                }\n            }\n            return output;\n        });\n    }\n    getConfig() {\n        const config = {\n            units: this.units,\n            activation: serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint),\n            biasConstraint: serializeConstraint(this.biasConstraint)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nDense.className = 'Dense';\nserialization.registerClass(Dense);\nexport class Flatten extends Layer {\n    constructor(args) {\n        args = args || {};\n        super(args);\n        this.inputSpec = [{ minNDim: 3 }];\n        this.dataFormat = args.dataFormat;\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        for (const dim of inputShape.slice(1)) {\n            if (dim == null) {\n                throw new ValueError(`The shape of the input to \"Flatten\" is not fully defined ` +\n                    `(got ${inputShape.slice(1)}). Make sure to pass a complete ` +\n                    `\"input_shape\" or \"batch_input_shape\" argument to the first ` +\n                    `layer in your model.`);\n            }\n        }\n        return [inputShape[0], arrayProd(inputShape, 1)];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            let input = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsFirst' && input.rank > 1) {\n                const permutation = [0];\n                for (let i = 2; i < input.rank; ++i) {\n                    permutation.push(i);\n                }\n                permutation.push(1);\n                input = input.transpose(permutation);\n            }\n            return K.batchFlatten(input);\n        });\n    }\n    getConfig() {\n        const config = {};\n        if (this.dataFormat != null) {\n            config['dataFormat'] = this.dataFormat;\n        }\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nFlatten.className = 'Flatten';\nserialization.registerClass(Flatten);\nexport class Activation extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.activation = getActivation(args.activation);\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            return this.activation.apply(input);\n        });\n    }\n    getConfig() {\n        const config = { activation: serializeActivation(this.activation) };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nActivation.className = 'Activation';\nserialization.registerClass(Activation);\nexport class RepeatVector extends Layer {\n    constructor(args) {\n        super(args);\n        this.n = args.n;\n        this.inputSpec = [{ ndim: 2 }];\n    }\n    computeOutputShape(inputShape) {\n        return [inputShape[0], this.n, inputShape[1]];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            return K.repeat(inputs, this.n);\n        });\n    }\n    getConfig() {\n        const config = {\n            n: this.n,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nRepeatVector.className = 'RepeatVector';\nserialization.registerClass(RepeatVector);\nexport class Reshape extends Layer {\n    constructor(args) {\n        super(args);\n        this.targetShape = args.targetShape;\n        // Make sure that all unknown dimensions are represented as `null`.\n        for (let i = 0; i < this.targetShape.length; ++i) {\n            if (this.isUnknown(this.targetShape[i])) {\n                this.targetShape[i] = null;\n            }\n        }\n    }\n    isUnknown(dim) {\n        return dim < 0 || dim == null;\n    }\n    /**\n     * Finds and replaces a missing dimension in output shape.\n     *\n     * This is a near direct port of the internal Numpy function\n     * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.\n     *\n     * @param inputShape: Original shape of array begin reshape.\n     * @param outputShape: Target shape of the array, with at most a single\n     * `null` or negative number, which indicates an underdetermined dimension\n     * that should be derived from `inputShape` and the known dimensions of\n     *   `outputShape`.\n     * @returns: The output shape with `null` replaced with its computed value.\n     * @throws: ValueError: If `inputShape` and `outputShape` do not match.\n     */\n    fixUnknownDimension(inputShape, outputShape) {\n        const errorMsg = 'Total size of new array must be unchanged.';\n        const finalShape = outputShape.slice();\n        let known = 1;\n        let unknown = null;\n        for (let i = 0; i < finalShape.length; ++i) {\n            const dim = finalShape[i];\n            if (this.isUnknown(dim)) {\n                if (unknown === null) {\n                    unknown = i;\n                }\n                else {\n                    throw new ValueError('Can only specifiy one unknown dimension.');\n                }\n            }\n            else {\n                known *= dim;\n            }\n        }\n        const originalSize = arrayProd(inputShape);\n        if (unknown !== null) {\n            if (known === 0 || originalSize % known !== 0) {\n                throw new ValueError(errorMsg);\n            }\n            finalShape[unknown] = originalSize / known;\n        }\n        else if (originalSize !== known) {\n            throw new ValueError(errorMsg);\n        }\n        return finalShape;\n    }\n    computeOutputShape(inputShape) {\n        let anyUnknownDims = false;\n        for (let i = 0; i < inputShape.length; ++i) {\n            if (this.isUnknown(inputShape[i])) {\n                anyUnknownDims = true;\n                break;\n            }\n        }\n        if (anyUnknownDims) {\n            return inputShape.slice(0, 1).concat(this.targetShape);\n        }\n        else {\n            return inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            const inputShape = input.shape;\n            const outputShape = inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n            return input.reshape(outputShape);\n        });\n    }\n    getConfig() {\n        const config = {\n            targetShape: this.targetShape,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nReshape.className = 'Reshape';\nserialization.registerClass(Reshape);\nexport class Permute extends Layer {\n    constructor(args) {\n        super(args);\n        if (args.dims == null) {\n            throw new Error('Required configuration field `dims` is missing during Permute ' +\n                'constructor call.');\n        }\n        if (!Array.isArray(args.dims)) {\n            throw new Error('Permute constructor requires `dims` to be an Array, but received ' +\n                `${args.dims} instead.`);\n        }\n        // Check the validity of the permutation indices.\n        const expectedSortedIndices = range(1, args.dims.length + 1);\n        if (!util.arraysEqual(args.dims.slice().sort(), expectedSortedIndices)) {\n            throw new Error('Invalid permutation `dims`: ' + JSON.stringify(args.dims) +\n                ' `dims` must contain consecutive integers starting from 1.');\n        }\n        this.dims = args.dims;\n        this.dimsIncludingBatch = [0].concat(this.dims);\n        this.inputSpec = [new InputSpec({ ndim: this.dims.length + 1 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const outputShape = inputShape.slice();\n        this.dims.forEach((dim, i) => {\n            outputShape[i + 1] = inputShape[dim];\n        });\n        return outputShape;\n    }\n    call(inputs, kwargs) {\n        return transpose(getExactlyOneTensor(inputs), this.dimsIncludingBatch);\n    }\n    getConfig() {\n        const config = {\n            dims: this.dims,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nPermute.className = 'Permute';\nserialization.registerClass(Permute);\nexport class Masking extends Layer {\n    constructor(args) {\n        super(args == null ? {} : args);\n        this.supportsMasking = true;\n        if (args != null) {\n            this.maskValue = args.maskValue == null ? 0 : args.maskValue;\n        }\n        else {\n            this.maskValue = 0;\n        }\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { maskValue: this.maskValue };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    computeMask(inputs, mask) {\n        const input = getExactlyOneTensor(inputs);\n        const axis = -1;\n        return any(notEqual(input, this.maskValue), axis);\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            const axis = -1;\n            const keepDims = true;\n            const booleanMask = any(notEqual(input, this.maskValue), axis, keepDims);\n            const output = input.mul(booleanMask.asType(input.dtype));\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nMasking.className = 'Masking';\nserialization.registerClass(Masking);\n//# sourceMappingURL=core.js.map"]},"metadata":{},"sourceType":"module"}