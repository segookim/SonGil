{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose, mul, tensor1d, tidy } from '@tensorflow/tfjs-core';\n\nfunction standardizeSampleOrClassWeights(xWeight, outputNames, weightType) {\n  var numOutputs = outputNames.length;\n\n  if (xWeight == null || Array.isArray(xWeight) && xWeight.length === 0) {\n    return outputNames.map(function (name) {\n      return null;\n    });\n  }\n\n  if (numOutputs === 1) {\n    if (Array.isArray(xWeight) && xWeight.length === 1) {\n      return xWeight;\n    } else if (typeof xWeight === 'object' && outputNames[0] in xWeight) {\n      return [xWeight[outputNames[0]]];\n    } else {\n      return [xWeight];\n    }\n  }\n\n  if (Array.isArray(xWeight)) {\n    if (xWeight.length !== numOutputs) {\n      throw new Error(\"Provided \".concat(weightType, \" is an array of \").concat(xWeight.length, \" \") + \"element(s), but the model has \".concat(numOutputs, \" outputs. \") + \"Make sure a set of weights is provided for each model output.\");\n    }\n\n    return xWeight;\n  } else if (typeof xWeight === 'object' && Object.keys(xWeight).length > 0 && typeof xWeight[Object.keys(xWeight)[0]] === 'object') {\n    var output = [];\n    outputNames.forEach(function (outputName) {\n      if (outputName in xWeight) {\n        output.push(xWeight[outputName]);\n      } else {\n        output.push(null);\n      }\n    });\n    return output;\n  } else {\n    throw new Error(\"The model has multiple (\".concat(numOutputs, \") outputs, \") + \"so \".concat(weightType, \" must be either an array with \") + \"\".concat(numOutputs, \" elements or an object with \").concat(outputNames, \" keys. \") + \"Provided \".concat(weightType, \" not understood: \").concat(JSON.stringify(xWeight)));\n  }\n}\n/**\n * Standardize class weighting objects.\n *\n * This function takes a single class-weighting object, an array of them,\n * or a map from output name to class-weighting object. It compares it to the\n * output name(s) of the model, base on which it outputs an array of\n * class-weighting objects of which the length matches the number of outputs.\n *\n * @param classWeight Input class-weighting object(s).\n * @param outputNames All output name(s) of the model.\n * @return An array of class-weighting objects. The length of the array matches\n *   the model's number of outputs.\n */\n\n\nexport function standardizeClassWeights(classWeight, outputNames) {\n  return standardizeSampleOrClassWeights(classWeight, outputNames, 'classWeight');\n}\nexport function standardizeSampleWeights(classWeight, outputNames) {\n  return standardizeSampleOrClassWeights(classWeight, outputNames, 'sampleWeight');\n}\n/**\n * Standardize by-sample and/or by-class weights for training.\n *\n * Note that this function operates on one model output at a time. For a model\n * with multiple outputs, you must call this function multiple times.\n *\n * @param y The target tensor that the by-sample and/or by-class weight is for.\n *     The values of y are assumed to encode the classes, either directly\n *     as an integer index, or as one-hot encoding.\n * @param sampleWeight By-sample weights.\n * @param classWeight By-class weights: an object mapping class indices\n *     (integers) to a weight (float) to apply to the model's loss for the\n *     samples from this class during training. This can be useful to tell the\n *     model to \"pay more attention\" to samples from an under-represented class.\n * @param sampleWeightMode The mode for the sample weights.\n * @return A Promise of weight tensor, of which the size of the first dimension\n *     matches that of `y`.\n */\n\nexport function standardizeWeights(_x, _x2, _x3, _x4) {\n  return _standardizeWeights.apply(this, arguments);\n}\n/**\n * Apply per-sample weights on the loss values from a number of samples.\n *\n * @param losses Loss tensor of shape `[batchSize]`.\n * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.\n * @returns Tensor of the same shape as`losses`.\n */\n\nfunction _standardizeWeights() {\n  _standardizeWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(y, sampleWeight, classWeight, sampleWeightMode) {\n    var yClasses, yClassIndices, classSampleWeight;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(sampleWeight != null || sampleWeightMode != null)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error('Support sampleWeight is not implemented yet');\n\n          case 2:\n            if (!(classWeight != null)) {\n              _context.next = 15;\n              break;\n            }\n\n            // Apply class weights per sample.\n            yClasses = tidy(function () {\n              if (y.shape.length === 1) {\n                // Assume class indices.\n                return y.clone();\n              } else if (y.shape.length === 2) {\n                if (y.shape[1] > 1) {\n                  // Assume one-hot encoding of classes.\n                  var axis = 1;\n                  return y.argMax(axis);\n                } else if (y.shape[1] === 1) {\n                  // Class index.\n                  return y.reshape([y.shape[0]]);\n                } else {\n                  throw new Error(\"Encountered unexpected last-dimension size (\".concat(y.shape[1], \") \") + \"during handling of class weights. The size is expected to be \" + \">= 1.\");\n                }\n              } else {\n                throw new Error(\"Unexpected rank of target (y) tensor (\".concat(y.rank, \") during \") + \"handling of class weights. The rank is expected to be 1 or 2.\");\n              }\n            });\n            _context.t0 = Array;\n            _context.next = 7;\n            return yClasses.data();\n\n          case 7:\n            _context.t1 = _context.sent;\n            yClassIndices = _context.t0.from.call(_context.t0, _context.t1);\n            dispose(yClasses);\n            classSampleWeight = [];\n            yClassIndices.forEach(function (classIndex) {\n              if (classWeight[classIndex] == null) {\n                throw new Error(\"classWeight must contain all classes in the training data. \" + \"The class \".concat(classIndex, \" exists in the data but not in \") + \"classWeight\");\n              } else {\n                classSampleWeight.push(classWeight[classIndex]);\n              }\n            });\n            return _context.abrupt(\"return\", tensor1d(classSampleWeight, 'float32'));\n\n          case 15:\n            return _context.abrupt(\"return\", null);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _standardizeWeights.apply(this, arguments);\n}\n\nexport function computeWeightedLoss(losses, sampleWeights) {\n  return mul(losses, sampleWeights);\n}","map":{"version":3,"sources":["../../src/engine/training_utils.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;AAQG;AAEH,SAAQ,OAAR,EAAiB,GAAjB,EAAwC,QAAxC,EAAkD,IAAlD,QAA6D,uBAA7D;;AAuBA,SAAS,+BAAT,CACI,OADJ,EACuD,WADvD,EAEI,UAFJ,EAE4C;AAC1C,MAAM,UAAU,GAAG,WAAW,CAAC,MAA/B;;AACA,MAAI,OAAO,IAAI,IAAX,IAAoB,KAAK,CAAC,OAAN,CAAc,OAAd,KAA0B,OAAO,CAAC,MAAR,KAAmB,CAArE,EAAyE;AACvE,WAAO,WAAW,CAAC,GAAZ,CAAgB,UAAA,IAAI;AAAA,aAAI,IAAJ;AAAA,KAApB,CAAP;AACD;;AACD,MAAI,UAAU,KAAK,CAAnB,EAAsB;AACpB,QAAI,KAAK,CAAC,OAAN,CAAc,OAAd,KAA0B,OAAO,CAAC,MAAR,KAAmB,CAAjD,EAAoD;AAClD,aAAO,OAAP;AACD,KAFD,MAEO,IAAI,OAAO,OAAP,KAAmB,QAAnB,IAA+B,WAAW,CAAC,CAAD,CAAX,IAAkB,OAArD,EAA8D;AACnE,aAAO,CAAE,OAA0B,CAAC,WAAW,CAAC,CAAD,CAAZ,CAA5B,CAAP;AACD,KAFM,MAEA;AACL,aAAO,CAAC,OAAD,CAAP;AACD;AACF;;AACD,MAAI,KAAK,CAAC,OAAN,CAAc,OAAd,CAAJ,EAA4B;AAC1B,QAAI,OAAO,CAAC,MAAR,KAAmB,UAAvB,EAAmC;AACjC,YAAM,IAAI,KAAJ,CACF,mBAAY,UAAZ,6BAAyC,OAAO,CAAC,MAAjD,iDACiC,UADjC,iFADE,CAAN;AAID;;AACD,WAAO,OAAP;AACD,GARD,MAQO,IACH,OAAO,OAAP,KAAmB,QAAnB,IAA+B,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,MAArB,GAA8B,CAA7D,IACA,OAAQ,OAA0B,CAAC,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,CAArB,CAAD,CAAlC,KACI,QAHD,EAGW;AAChB,QAAM,MAAM,GAAkB,EAA9B;AACA,IAAA,WAAW,CAAC,OAAZ,CAAoB,UAAA,UAAU,EAAG;AAC/B,UAAI,UAAU,IAAI,OAAlB,EAA2B;AACzB,QAAA,MAAM,CAAC,IAAP,CAAa,OAA0B,CAAC,UAAD,CAAvC;AACD,OAFD,MAEO;AACL,QAAA,MAAM,CAAC,IAAP,CAAY,IAAZ;AACD;AACF,KAND;AAOA,WAAO,MAAP;AACD,GAbM,MAaA;AACL,UAAM,IAAI,KAAJ,CACF,kCAA2B,UAA3B,gCACM,UADN,gDAEG,UAFH,yCAE4C,WAF5C,kCAGY,UAHZ,8BAG0C,IAAI,CAAC,SAAL,CAAe,OAAf,CAH1C,CADE,CAAN;AAKD;AACF;AAED;;;;;;;;;;;;AAYG;;;AACH,OAAM,SAAU,uBAAV,CACF,WADE,EAEF,WAFE,EAEmB;AACvB,SAAO,+BAA+B,CAClC,WADkC,EACrB,WADqB,EACR,aADQ,CAAtC;AAED;AAED,OAAM,SAAU,wBAAV,CACF,WADE,EAEF,WAFE,EAEmB;AACvB,SAAO,+BAA+B,CAClC,WADkC,EACrB,WADqB,EACR,cADQ,CAAtC;AAED;AAED;;;;;;;;;;;;;;;;;AAiBG;;AACH,gBAAsB,kBAAtB;AAAA;AAAA;AAwDA;;;;;;AAMG;;;iFA9DI,iBACH,CADG,EACQ,YADR,EAC+B,WAD/B,EAEH,gBAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGD,YAAY,IAAI,IAAhB,IAAwB,gBAAgB,IAAI,IAH3C;AAAA;AAAA;AAAA;;AAAA,kBAMG,IAAI,KAAJ,CAAU,6CAAV,CANH;;AAAA;AAAA,kBASD,WAAW,IAAI,IATd;AAAA;AAAA;AAAA;;AAUH;AACM,YAAA,QAXH,GAWwB,IAAI,CAAC,YAAK;AACnC,kBAAI,CAAC,CAAC,KAAF,CAAQ,MAAR,KAAmB,CAAvB,EAA0B;AACxB;AACA,uBAAO,CAAC,CAAC,KAAF,EAAP;AACD,eAHD,MAGO,IAAI,CAAC,CAAC,KAAF,CAAQ,MAAR,KAAmB,CAAvB,EAA0B;AAC/B,oBAAI,CAAC,CAAC,KAAF,CAAQ,CAAR,IAAa,CAAjB,EAAoB;AAClB;AACA,sBAAM,IAAI,GAAG,CAAb;AACA,yBAAO,CAAC,CAAC,MAAF,CAAS,IAAT,CAAP;AACD,iBAJD,MAIO,IAAI,CAAC,CAAC,KAAF,CAAQ,CAAR,MAAe,CAAnB,EAAsB;AAC3B;AACA,yBAAO,CAAC,CAAC,OAAF,CAAU,CAAC,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAD,CAAV,CAAP;AACD,iBAHM,MAGA;AACL,wBAAM,IAAI,KAAJ,CACF,sDAA+C,CAAC,CAAC,KAAF,CAAQ,CAAR,CAA/C,mFADE,CAAN;AAID;AACF,eAdM,MAcA;AACL,sBAAM,IAAI,KAAJ,CACF,gDAAyC,CAAC,CAAC,IAA3C,gFADE,CAAN;AAGD;AACF,aAvB8B,CAX5B;AAAA,0BAoCmB,KApCnB;AAAA;AAAA,mBAoCoC,QAAQ,CAAC,IAAT,EApCpC;;AAAA;AAAA;AAoCG,YAAA,aApCH,eAoCyB,IApCzB;AAqCH,YAAA,OAAO,CAAC,QAAD,CAAP;AACM,YAAA,iBAtCH,GAsCiC,EAtCjC;AAuCH,YAAA,aAAa,CAAC,OAAd,CAAsB,UAAA,UAAU,EAAG;AACjC,kBAAI,WAAW,CAAC,UAAD,CAAX,IAA2B,IAA/B,EAAqC;AACnC,sBAAM,IAAI,KAAJ,CACF,oFACa,UADb,oDADE,CAAN;AAID,eALD,MAKO;AACL,gBAAA,iBAAiB,CAAC,IAAlB,CAAuB,WAAW,CAAC,UAAD,CAAlC;AACD;AACF,aATD;AAvCG,6CAkDI,QAAQ,CAAC,iBAAD,EAAoB,SAApB,CAlDZ;;AAAA;AAAA,6CAoDI,IApDJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA+DP,OAAM,SAAU,mBAAV,CAA8B,MAA9B,EAA8C,aAA9C,EAAmE;AACvE,SAAO,GAAG,CAAC,MAAD,EAAS,aAAT,CAAV;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose, mul, tensor1d, tidy } from '@tensorflow/tfjs-core';\nfunction standardizeSampleOrClassWeights(xWeight, outputNames, weightType) {\n    const numOutputs = outputNames.length;\n    if (xWeight == null || (Array.isArray(xWeight) && xWeight.length === 0)) {\n        return outputNames.map(name => null);\n    }\n    if (numOutputs === 1) {\n        if (Array.isArray(xWeight) && xWeight.length === 1) {\n            return xWeight;\n        }\n        else if (typeof xWeight === 'object' && outputNames[0] in xWeight) {\n            return [xWeight[outputNames[0]]];\n        }\n        else {\n            return [xWeight];\n        }\n    }\n    if (Array.isArray(xWeight)) {\n        if (xWeight.length !== numOutputs) {\n            throw new Error(`Provided ${weightType} is an array of ${xWeight.length} ` +\n                `element(s), but the model has ${numOutputs} outputs. ` +\n                `Make sure a set of weights is provided for each model output.`);\n        }\n        return xWeight;\n    }\n    else if (typeof xWeight === 'object' && Object.keys(xWeight).length > 0 &&\n        typeof xWeight[Object.keys(xWeight)[0]] ===\n            'object') {\n        const output = [];\n        outputNames.forEach(outputName => {\n            if (outputName in xWeight) {\n                output.push(xWeight[outputName]);\n            }\n            else {\n                output.push(null);\n            }\n        });\n        return output;\n    }\n    else {\n        throw new Error(`The model has multiple (${numOutputs}) outputs, ` +\n            `so ${weightType} must be either an array with ` +\n            `${numOutputs} elements or an object with ${outputNames} keys. ` +\n            `Provided ${weightType} not understood: ${JSON.stringify(xWeight)}`);\n    }\n}\n/**\n * Standardize class weighting objects.\n *\n * This function takes a single class-weighting object, an array of them,\n * or a map from output name to class-weighting object. It compares it to the\n * output name(s) of the model, base on which it outputs an array of\n * class-weighting objects of which the length matches the number of outputs.\n *\n * @param classWeight Input class-weighting object(s).\n * @param outputNames All output name(s) of the model.\n * @return An array of class-weighting objects. The length of the array matches\n *   the model's number of outputs.\n */\nexport function standardizeClassWeights(classWeight, outputNames) {\n    return standardizeSampleOrClassWeights(classWeight, outputNames, 'classWeight');\n}\nexport function standardizeSampleWeights(classWeight, outputNames) {\n    return standardizeSampleOrClassWeights(classWeight, outputNames, 'sampleWeight');\n}\n/**\n * Standardize by-sample and/or by-class weights for training.\n *\n * Note that this function operates on one model output at a time. For a model\n * with multiple outputs, you must call this function multiple times.\n *\n * @param y The target tensor that the by-sample and/or by-class weight is for.\n *     The values of y are assumed to encode the classes, either directly\n *     as an integer index, or as one-hot encoding.\n * @param sampleWeight By-sample weights.\n * @param classWeight By-class weights: an object mapping class indices\n *     (integers) to a weight (float) to apply to the model's loss for the\n *     samples from this class during training. This can be useful to tell the\n *     model to \"pay more attention\" to samples from an under-represented class.\n * @param sampleWeightMode The mode for the sample weights.\n * @return A Promise of weight tensor, of which the size of the first dimension\n *     matches that of `y`.\n */\nexport async function standardizeWeights(y, sampleWeight, classWeight, sampleWeightMode) {\n    if (sampleWeight != null || sampleWeightMode != null) {\n        // TODO(cais): Once 'temporal' mode is implemented, document it in the doc\n        // string.\n        throw new Error('Support sampleWeight is not implemented yet');\n    }\n    if (classWeight != null) {\n        // Apply class weights per sample.\n        const yClasses = tidy(() => {\n            if (y.shape.length === 1) {\n                // Assume class indices.\n                return y.clone();\n            }\n            else if (y.shape.length === 2) {\n                if (y.shape[1] > 1) {\n                    // Assume one-hot encoding of classes.\n                    const axis = 1;\n                    return y.argMax(axis);\n                }\n                else if (y.shape[1] === 1) {\n                    // Class index.\n                    return y.reshape([y.shape[0]]);\n                }\n                else {\n                    throw new Error(`Encountered unexpected last-dimension size (${y.shape[1]}) ` +\n                        `during handling of class weights. The size is expected to be ` +\n                        `>= 1.`);\n                }\n            }\n            else {\n                throw new Error(`Unexpected rank of target (y) tensor (${y.rank}) during ` +\n                    `handling of class weights. The rank is expected to be 1 or 2.`);\n            }\n        });\n        const yClassIndices = Array.from(await yClasses.data());\n        dispose(yClasses);\n        const classSampleWeight = [];\n        yClassIndices.forEach(classIndex => {\n            if (classWeight[classIndex] == null) {\n                throw new Error(`classWeight must contain all classes in the training data. ` +\n                    `The class ${classIndex} exists in the data but not in ` +\n                    `classWeight`);\n            }\n            else {\n                classSampleWeight.push(classWeight[classIndex]);\n            }\n        });\n        return tensor1d(classSampleWeight, 'float32');\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Apply per-sample weights on the loss values from a number of samples.\n *\n * @param losses Loss tensor of shape `[batchSize]`.\n * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.\n * @returns Tensor of the same shape as`losses`.\n */\nexport function computeWeightedLoss(losses, sampleWeights) {\n    return mul(losses, sampleWeights);\n}\n//# sourceMappingURL=training_utils.js.map"]},"metadata":{},"sourceType":"module"}