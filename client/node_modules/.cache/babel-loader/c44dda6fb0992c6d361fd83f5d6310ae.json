{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { expandDims } from './expand_dims';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { tile } from './tile';\n/**\n * Create an identity matrix.\n *\n * @param numRows Number of rows.\n * @param numColumns Number of columns. Defaults to `numRows`.\n * @param batchShape If provided, will add the batch shape to the beginning\n *   of the shape of the returned `tf.Tensor` by repeating the identity\n *   matrix.\n * @param dtype Data type.\n * @returns Identity matrix of the specified size and data type, possibly\n *   with batch repetition if `batchShape` is specified.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\n\nfunction eye_(numRows, numColumns, batchShape, dtype = 'float32') {\n  if (numColumns == null) {\n    numColumns = numRows;\n  }\n\n  const buff = buffer([numRows, numColumns], dtype);\n  const n = numRows <= numColumns ? numRows : numColumns;\n\n  for (let i = 0; i < n; ++i) {\n    buff.set(1, i, i);\n  }\n\n  const out = reshape(buff.toTensor(), [numRows, numColumns]);\n\n  if (batchShape == null) {\n    return out;\n  } else {\n    if (batchShape.length === 1) {\n      return tile(expandDims(out, 0), [batchShape[0], 1, 1]);\n    } else if (batchShape.length === 2) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      return tile(expandDims(expandDims(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);\n    } else if (batchShape.length === 3) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      return tile(expandDims(expandDims(expandDims(out, 0), 0), 0), [batchShape[0], batchShape[1], batchShape[2], 1, 1]);\n    } else {\n      throw new Error(`eye() currently supports only 1D and 2D ` + // tslint:disable-next-line:no-any\n      `batchShapes, but received ${batchShape.length}D.`);\n    }\n  }\n}\n\nexport const eye = op({\n  eye_\n});","map":{"version":3,"sources":["../../src/ops/eye.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAKH,SAAQ,MAAR,QAAqB,UAArB;AACA,SAAQ,UAAR,QAAyB,eAAzB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,IAAR,QAAmB,QAAnB;AAEA;;;;;;;;;;;;;AAaG;;AACH,SAAS,IAAT,CACI,OADJ,EACqB,UADrB,EAEI,UAFJ,EAOI,KAAA,GAAkB,SAPtB,EAO+B;AAC7B,MAAI,UAAU,IAAI,IAAlB,EAAwB;AACtB,IAAA,UAAU,GAAG,OAAb;AACD;;AACD,QAAM,IAAI,GAAG,MAAM,CAAC,CAAC,OAAD,EAAU,UAAV,CAAD,EAAwB,KAAxB,CAAnB;AACA,QAAM,CAAC,GAAG,OAAO,IAAI,UAAX,GAAwB,OAAxB,GAAkC,UAA5C;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AAC1B,IAAA,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf;AACD;;AACD,QAAM,GAAG,GAAa,OAAO,CAAC,IAAI,CAAC,QAAL,EAAD,EAAkB,CAAC,OAAD,EAAU,UAAV,CAAlB,CAA7B;;AACA,MAAI,UAAU,IAAI,IAAlB,EAAwB;AACtB,WAAO,GAAP;AACD,GAFD,MAEO;AACL,QAAI,UAAU,CAAC,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,aAAO,IAAI,CAAC,UAAU,CAAC,GAAD,EAAM,CAAN,CAAX,EAAqB,CAAC,UAAU,CAAC,CAAD,CAAX,EAAgB,CAAhB,EAAmB,CAAnB,CAArB,CAAX;AACD,KAFD,MAEO,IAAI,UAAU,CAAC,MAAX,KAAsB,CAA1B,EAA6B;AAClC;AACA,aAAO,IAAI,CACA,UAAU,CAAC,UAAU,CAAC,GAAD,EAAM,CAAN,CAAX,EAAqB,CAArB,CADV,EAEA,CAAC,UAAU,CAAC,CAAD,CAAX,EAAgB,UAAU,CAAC,CAAD,CAA1B,EAA+B,CAA/B,EAAkC,CAAlC,CAFA,CAAX;AAGD,KALM,MAKA,IAAI,UAAU,CAAC,MAAX,KAAsB,CAA1B,EAA6B;AAClC;AACA,aAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,GAAD,EAAM,CAAN,CAAX,EAAqB,CAArB,CAAX,EAAoC,CAApC,CAAX,EAAmD,CACrD,UAAU,CAAC,CAAD,CAD2C,EACtC,UAAU,CAAC,CAAD,CAD4B,EACvB,UAAU,CAAC,CAAD,CADa,EACR,CADQ,EACL,CADK,CAAnD,CAAX;AAGD,KALM,MAKA;AACL,YAAM,IAAI,KAAJ,CACF,0CAAA,GACA;AACA,mCAA8B,UAAkB,CAAC,MAAM,IAHrD,CAAN;AAID;AACF;AACF;;AAED,OAAO,MAAM,GAAG,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAd","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { expandDims } from './expand_dims';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { tile } from './tile';\n/**\n * Create an identity matrix.\n *\n * @param numRows Number of rows.\n * @param numColumns Number of columns. Defaults to `numRows`.\n * @param batchShape If provided, will add the batch shape to the beginning\n *   of the shape of the returned `tf.Tensor` by repeating the identity\n *   matrix.\n * @param dtype Data type.\n * @returns Identity matrix of the specified size and data type, possibly\n *   with batch repetition if `batchShape` is specified.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction eye_(numRows, numColumns, batchShape, dtype = 'float32') {\n    if (numColumns == null) {\n        numColumns = numRows;\n    }\n    const buff = buffer([numRows, numColumns], dtype);\n    const n = numRows <= numColumns ? numRows : numColumns;\n    for (let i = 0; i < n; ++i) {\n        buff.set(1, i, i);\n    }\n    const out = reshape(buff.toTensor(), [numRows, numColumns]);\n    if (batchShape == null) {\n        return out;\n    }\n    else {\n        if (batchShape.length === 1) {\n            return tile(expandDims(out, 0), [batchShape[0], 1, 1]);\n        }\n        else if (batchShape.length === 2) {\n            // tslint:disable-next-line:no-unnecessary-type-assertion\n            return tile(expandDims(expandDims(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);\n        }\n        else if (batchShape.length === 3) {\n            // tslint:disable-next-line:no-unnecessary-type-assertion\n            return tile(expandDims(expandDims(expandDims(out, 0), 0), 0), [\n                batchShape[0], batchShape[1], batchShape[2], 1, 1\n            ]);\n        }\n        else {\n            throw new Error(`eye() currently supports only 1D and 2D ` +\n                // tslint:disable-next-line:no-any\n                `batchShapes, but received ${batchShape.length}D.`);\n        }\n    }\n}\nexport const eye = op({ eye_ });\n//# sourceMappingURL=eye.js.map"]},"metadata":{},"sourceType":"module"}