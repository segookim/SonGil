{"ast":null,"code":"import _classCallCheck from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var ArgMinMaxProgram = function ArgMinMaxProgram(reduceInfo, op, firstPass) {\n  _classCallCheck(this, ArgMinMaxProgram);\n\n  this.variableNames = ['A'];\n  var windowSize = reduceInfo.windowSize,\n      batchSize = reduceInfo.batchSize,\n      outSize = reduceInfo.outSize;\n\n  if (!firstPass) {\n    this.variableNames.push('bestIndicesA');\n  }\n\n  this.outputShape = [batchSize, outSize];\n  var compOp = op === 'max' ? '>' : '<';\n  var indexSnippet = firstPass ? 'inOffset + i;' : 'round(getBestIndicesA(batch, inOffset + i));';\n  this.userCode = \"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \".concat(windowSize, \";\\n\\n        int bestIndex = inOffset;\\n        float bestValue = getA(batch, bestIndex);\\n\\n        for (int i = 0; i < \").concat(windowSize, \"; i++) {\\n          int inIdx = \").concat(indexSnippet, \";\\n          float candidate = getA(batch, inIdx);\\n          if (candidate \").concat(compOp, \" bestValue) {\\n            bestValue = candidate;\\n            bestIndex = inIdx;\\n          }\\n        }\\n        setOutput(float(bestIndex));\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/argminmax_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAKH,WAAa,gBAAb,GAKE,0BACI,UADJ,EACyC,EADzC,EAEI,SAFJ,EAEsB;AAAA;;AANtB,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAMsB,MACb,UADa,GACqB,UADrB,CACb,UADa;AAAA,MACD,SADC,GACqB,UADrB,CACD,SADC;AAAA,MACU,OADV,GACqB,UADrB,CACU,OADV;;AAEpB,MAAI,CAAC,SAAL,EAAgB;AACd,SAAK,aAAL,CAAmB,IAAnB,CAAwB,cAAxB;AACD;;AACD,OAAK,WAAL,GAAmB,CAAC,SAAD,EAAY,OAAZ,CAAnB;AACA,MAAM,MAAM,GAAI,EAAE,KAAK,KAAR,GAAiB,GAAjB,GAAuB,GAAtC;AACA,MAAM,YAAY,GAAG,SAAS,GAC1B,eAD0B,GAE1B,8CAFJ;AAIA,OAAK,QAAL,gLAK8B,UAL9B,sIAU0B,UAV1B,6CAWoB,YAXpB,yFAasB,MAbtB;AAqBD,CAvCH","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ArgMinMaxProgram {\n    constructor(reduceInfo, op, firstPass) {\n        this.variableNames = ['A'];\n        const { windowSize, batchSize, outSize } = reduceInfo;\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        this.outputShape = [batchSize, outSize];\n        const compOp = (op === 'max') ? '>' : '<';\n        const indexSnippet = firstPass ?\n            'inOffset + i;' :\n            'round(getBestIndicesA(batch, inOffset + i));';\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=argminmax_gpu.js.map"]},"metadata":{},"sourceType":"module"}