{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nimport { StringIterator } from './string_iterator';\nexport class ByteChunkIterator extends LazyIterator {\n  /**\n   * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n   *\n   * The byte arrays producetd from the ByteChunkIterator on which this is\n   * called will be interpreted as concatenated.  No assumptions are made about\n   * the boundaries of the incoming chunks, so a multi-byte UTF8 encoding of a\n   * character may span the boundary between chunks.  This naturally happens,\n   * for instance, when reading fixed-size byte arrays from a file.\n   */\n  decodeUTF8() {\n    return new Utf8Iterator(this);\n  }\n\n} // ============================================================================\n// The following private classes serve to implement the chainable methods\n// on ByteChunkIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class Utf8Iterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\n\nclass Utf8Iterator extends StringIterator {\n  constructor(upstream) {\n    super();\n    this.upstream = upstream;\n    this.impl = new Utf8IteratorImpl(upstream);\n  }\n\n  summary() {\n    return this.impl.summary();\n  }\n\n  async next() {\n    return this.impl.next();\n  }\n\n}\n/**\n * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n *\n * This is tricky because the incoming byte array boundaries may disrupt a\n * multi-byte UTF8 character. Thus any incomplete character data at the end of\n * a chunk must be carried over and prepended to the next chunk before\n * decoding. Luckily with native decoder, TextDecoder in browser and\n * string_decoder in node, byte array boundaries are handled automatically.\n *\n * In the context of an input pipeline for machine learning, UTF8 decoding is\n * needed to parse text files containing training examples or prediction\n * requests (e.g., formatted as CSV or JSON). We cannot use the built-in\n * decoding provided by FileReader.readAsText() because here we are in a\n * streaming context, which FileReader does not support.\n *\n * @param upstream A `LazyIterator` of `Uint8Arrays` containing UTF8-encoded\n *   text, which should be interpreted as concatenated.  No assumptions are\n *   made about the boundaries of the incoming chunks, so a multi-byte UTF8\n *   encoding of a character may span the boundary between chunks.  This\n *   naturally happens, for instance, when reading fixed-size byte arrays from a\n *   file.\n */\n\n\nclass Utf8IteratorImpl extends OneToManyIterator {\n  constructor(upstream) {\n    super();\n    this.upstream = upstream;\n\n    if (env().get('IS_BROWSER')) {\n      this.decoder = new TextDecoder('utf-8');\n    } else {\n      // tslint:disable-next-line:no-require-imports\n      const {\n        StringDecoder\n      } = require('string_decoder');\n\n      this.decoder = new StringDecoder('utf8');\n    }\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Utf8`;\n  }\n\n  async pump() {\n    const chunkResult = await this.upstream.next();\n    let chunk;\n\n    if (chunkResult.done) {\n      return false;\n    } else {\n      chunk = chunkResult.value;\n    }\n\n    let text;\n\n    if (env().get('IS_BROWSER')) {\n      text = this.decoder.decode(chunk, {\n        stream: true\n      });\n    } else {\n      text = this.decoder.write(Buffer.from(chunk.buffer));\n    }\n\n    this.outputQueue.push(text);\n    return true;\n  }\n\n}","map":{"version":3,"sources":["../../src/iterators/byte_chunk_iterator.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,GAAR,QAAkB,uBAAlB;AACA,SAAQ,YAAR,EAAsB,iBAAtB,QAA8C,iBAA9C;AACA,SAAQ,cAAR,QAA6B,mBAA7B;AAEA,OAAM,MAAgB,iBAAhB,SAA0C,YAA1C,CAAkE;AACtE;;;;;;;;AAQG;AACH,EAAA,UAAU,GAAA;AACR,WAAO,IAAI,YAAJ,CAAiB,IAAjB,CAAP;AACD;;AAZqE,C,CAexE;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,MAAM,YAAN,SAA2B,cAA3B,CAAyC;AAGvC,EAAA,WAAA,CAAsB,QAAtB,EAAwD;AACtD;AADoB,SAAA,QAAA,GAAA,QAAA;AAEpB,SAAK,IAAL,GAAY,IAAI,gBAAJ,CAAqB,QAArB,CAAZ;AACD;;AAED,EAAA,OAAO,GAAA;AACL,WAAO,KAAK,IAAL,CAAU,OAAV,EAAP;AACD;;AAES,QAAJ,IAAI,GAAA;AACR,WAAO,KAAK,IAAL,CAAU,IAAV,EAAP;AACD;;AAdsC;AAiBzC;;;;;;;;;;;;;;;;;;;;;AAqBG;;;AACH,MAAM,gBAAN,SAA+B,iBAA/B,CAAwD;AAMtD,EAAA,WAAA,CAA+B,QAA/B,EAAiE;AAC/D;AAD6B,SAAA,QAAA,GAAA,QAAA;;AAE7B,QAAI,GAAG,GAAG,GAAN,CAAU,YAAV,CAAJ,EAA6B;AAC3B,WAAK,OAAL,GAAe,IAAI,WAAJ,CAAgB,OAAhB,CAAf;AACD,KAFD,MAEO;AACL;AACA,YAAM;AAAC,QAAA;AAAD,UAAkB,OAAO,CAAC,gBAAD,CAA/B;;AACA,WAAK,OAAL,GAAe,IAAI,aAAJ,CAAkB,MAAlB,CAAf;AACD;AACF;;AACD,EAAA,OAAO,GAAA;AACL,WAAO,GAAG,KAAK,QAAL,CAAc,OAAd,EAAuB,UAAjC;AACD;;AAES,QAAJ,IAAI,GAAA;AACR,UAAM,WAAW,GAAG,MAAM,KAAK,QAAL,CAAc,IAAd,EAA1B;AACA,QAAI,KAAJ;;AACA,QAAI,WAAW,CAAC,IAAhB,EAAsB;AACpB,aAAO,KAAP;AACD,KAFD,MAEO;AACL,MAAA,KAAK,GAAG,WAAW,CAAC,KAApB;AACD;;AAED,QAAI,IAAJ;;AACA,QAAI,GAAG,GAAG,GAAN,CAAU,YAAV,CAAJ,EAA6B;AAC3B,MAAA,IAAI,GAAG,KAAK,OAAL,CAAa,MAAb,CAAoB,KAApB,EAA2B;AAAC,QAAA,MAAM,EAAE;AAAT,OAA3B,CAAP;AACD,KAFD,MAEO;AACL,MAAA,IAAI,GAAG,KAAK,OAAL,CAAa,KAAb,CAAmB,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,MAAlB,CAAnB,CAAP;AACD;;AACD,SAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB;AACA,WAAO,IAAP;AACD;;AArCqD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nimport { StringIterator } from './string_iterator';\nexport class ByteChunkIterator extends LazyIterator {\n    /**\n     * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n     *\n     * The byte arrays producetd from the ByteChunkIterator on which this is\n     * called will be interpreted as concatenated.  No assumptions are made about\n     * the boundaries of the incoming chunks, so a multi-byte UTF8 encoding of a\n     * character may span the boundary between chunks.  This naturally happens,\n     * for instance, when reading fixed-size byte arrays from a file.\n     */\n    decodeUTF8() {\n        return new Utf8Iterator(this);\n    }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on ByteChunkIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class Utf8Iterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nclass Utf8Iterator extends StringIterator {\n    constructor(upstream) {\n        super();\n        this.upstream = upstream;\n        this.impl = new Utf8IteratorImpl(upstream);\n    }\n    summary() {\n        return this.impl.summary();\n    }\n    async next() {\n        return this.impl.next();\n    }\n}\n/**\n * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n *\n * This is tricky because the incoming byte array boundaries may disrupt a\n * multi-byte UTF8 character. Thus any incomplete character data at the end of\n * a chunk must be carried over and prepended to the next chunk before\n * decoding. Luckily with native decoder, TextDecoder in browser and\n * string_decoder in node, byte array boundaries are handled automatically.\n *\n * In the context of an input pipeline for machine learning, UTF8 decoding is\n * needed to parse text files containing training examples or prediction\n * requests (e.g., formatted as CSV or JSON). We cannot use the built-in\n * decoding provided by FileReader.readAsText() because here we are in a\n * streaming context, which FileReader does not support.\n *\n * @param upstream A `LazyIterator` of `Uint8Arrays` containing UTF8-encoded\n *   text, which should be interpreted as concatenated.  No assumptions are\n *   made about the boundaries of the incoming chunks, so a multi-byte UTF8\n *   encoding of a character may span the boundary between chunks.  This\n *   naturally happens, for instance, when reading fixed-size byte arrays from a\n *   file.\n */\nclass Utf8IteratorImpl extends OneToManyIterator {\n    constructor(upstream) {\n        super();\n        this.upstream = upstream;\n        if (env().get('IS_BROWSER')) {\n            this.decoder = new TextDecoder('utf-8');\n        }\n        else {\n            // tslint:disable-next-line:no-require-imports\n            const { StringDecoder } = require('string_decoder');\n            this.decoder = new StringDecoder('utf8');\n        }\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Utf8`;\n    }\n    async pump() {\n        const chunkResult = await this.upstream.next();\n        let chunk;\n        if (chunkResult.done) {\n            return false;\n        }\n        else {\n            chunk = chunkResult.value;\n        }\n        let text;\n        if (env().get('IS_BROWSER')) {\n            text = this.decoder.decode(chunk, { stream: true });\n        }\n        else {\n            text = this.decoder.write(Buffer.from(chunk.buffer));\n        }\n        this.outputQueue.push(text);\n        return true;\n    }\n}\n//# sourceMappingURL=byte_chunk_iterator.js.map"]},"metadata":{},"sourceType":"module"}