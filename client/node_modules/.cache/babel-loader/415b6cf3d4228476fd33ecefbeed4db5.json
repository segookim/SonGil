{"ast":null,"code":"/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  constructor(weightMap = {}, tensorArrayMap = {}, tensorListMap = {}, functionMap = {}) {\n    this.weightMap = weightMap;\n    this.tensorArrayMap = tensorArrayMap;\n    this.tensorListMap = tensorListMap;\n    this.functionMap = functionMap;\n    this.rootContext = {\n      id: 0,\n      frameName: '',\n      iterationId: 0\n    };\n    this.contexts = [this.rootContext];\n    this.lastId = 0;\n    this.generateCurrentContextIds();\n  }\n\n  newFrame(id, frameName) {\n    return {\n      id,\n      frameName,\n      iterationId: 0\n    };\n  }\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n\n\n  set currentContext(contexts) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext() {\n    return this.contexts;\n  }\n  /**\n   * Returns the current context in string format.\n   */\n\n\n  get currentContextId() {\n    return this._currentContextIds[0];\n  }\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n\n\n  get currentContextIds() {\n    return this._currentContextIds;\n  }\n\n  generateCurrentContextIds() {\n    const names = [];\n\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  contextIdforContexts(contexts) {\n    return contexts ? contexts.map(context => context.id === 0 && context.iterationId === 0 ? '' : `${context.frameName}-${context.iterationId}`).join('/') : '';\n  }\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n\n\n  enterFrame(frameId) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n\n\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n\n\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context = Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n\n      this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name) {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id) {\n    return this.tensorArrayMap[id];\n  }\n\n  addTensorList(tensorList) {\n    this.tensorListMap[tensorList.id] = tensorList;\n  }\n\n  getTensorList(id) {\n    return this.tensorListMap[id];\n  }\n\n  dispose(keepIds) {\n    for (const key in this.tensorArrayMap) {\n      this.tensorArrayMap[key].clearAndClose(keepIds);\n    }\n\n    for (const key in this.tensorListMap) {\n      this.tensorListMap[key].clearAndClose(keepIds);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../src/executor/execution_context.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n    constructor(weightMap = {}, tensorArrayMap = {}, tensorListMap = {}, functionMap = {}) {\n        this.weightMap = weightMap;\n        this.tensorArrayMap = tensorArrayMap;\n        this.tensorListMap = tensorListMap;\n        this.functionMap = functionMap;\n        this.rootContext = { id: 0, frameName: '', iterationId: 0 };\n        this.contexts = [this.rootContext];\n        this.lastId = 0;\n        this.generateCurrentContextIds();\n    }\n    newFrame(id, frameName) {\n        return { id, frameName, iterationId: 0 };\n    }\n    /**\n     * Set the current context\n     * @param contexts: ExecutionContextInfo[] the current path of execution\n     * frames\n     */\n    set currentContext(contexts) {\n        if (this.contexts !== contexts) {\n            this.contexts = contexts;\n            this.generateCurrentContextIds();\n        }\n    }\n    get currentContext() {\n        return this.contexts;\n    }\n    /**\n     * Returns the current context in string format.\n     */\n    get currentContextId() {\n        return this._currentContextIds[0];\n    }\n    /**\n     * Returns the current context and all parent contexts in string format.\n     * This allow access to the nodes in the current and parent frames.\n     */\n    get currentContextIds() {\n        return this._currentContextIds;\n    }\n    generateCurrentContextIds() {\n        const names = [];\n        for (let i = 0; i < this.contexts.length - 1; i++) {\n            const contexts = this.contexts.slice(0, this.contexts.length - i);\n            names.push(this.contextIdforContexts(contexts));\n        }\n        names.push('');\n        this._currentContextIds = names;\n    }\n    contextIdforContexts(contexts) {\n        return contexts ?\n            contexts\n                .map(context => (context.id === 0 && context.iterationId === 0) ?\n                '' :\n                `${context.frameName}-${context.iterationId}`)\n                .join('/') :\n            '';\n    }\n    /**\n     * Enter a new frame, a new context is pushed on the current context list.\n     * @param frameId new frame id\n     */\n    enterFrame(frameId) {\n        if (this.contexts) {\n            this.lastId++;\n            this.contexts = this.contexts.slice();\n            this.contexts.push(this.newFrame(this.lastId, frameId));\n            this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n        }\n    }\n    /**\n     * Exit the current frame, the last context is removed from the current\n     * context list.\n     */\n    exitFrame() {\n        if (this.contexts && this.contexts.length > 1) {\n            this.contexts = this.contexts.slice();\n            this.contexts.splice(-1);\n            this.currentContextIds.shift();\n        }\n        else {\n            throw new Error('Cannot exit frame, the context is empty');\n        }\n    }\n    /**\n     * Enter the next iteration of a loop, the iteration id of last context is\n     * increased.\n     */\n    nextIteration() {\n        if (this.contexts && this.contexts.length > 0) {\n            this.contexts = this.contexts.slice();\n            this.lastId++;\n            const context = Object.assign({}, this.contexts[this.contexts.length - 1]);\n            context.iterationId += 1;\n            context.id = this.lastId;\n            this.contexts.splice(-1, 1, context);\n            this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));\n        }\n        else {\n            throw new Error('Cannot increase frame iteration, the context is empty');\n        }\n    }\n    getWeight(name) {\n        return this.weightMap[name];\n    }\n    addTensorArray(tensorArray) {\n        this.tensorArrayMap[tensorArray.id] = tensorArray;\n    }\n    getTensorArray(id) {\n        return this.tensorArrayMap[id];\n    }\n    addTensorList(tensorList) {\n        this.tensorListMap[tensorList.id] = tensorList;\n    }\n    getTensorList(id) {\n        return this.tensorListMap[id];\n    }\n    dispose(keepIds) {\n        for (const key in this.tensorArrayMap) {\n            this.tensorArrayMap[key].clearAndClose(keepIds);\n        }\n        for (const key in this.tensorListMap) {\n            this.tensorListMap[key].clearAndClose(keepIds);\n        }\n    }\n}\n//# sourceMappingURL=execution_context.js.map"]},"metadata":{},"sourceType":"module"}