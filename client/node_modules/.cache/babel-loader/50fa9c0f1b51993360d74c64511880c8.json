{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkInterpolationFormat, checkPaddingMode } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength, deconvLength, normalizeArray } from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\n\nexport function preprocessConv2DInput(x, dataFormat) {\n  // TODO(cais): Cast type to float32 if not.\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 1]); // NCHW -> NHWC.\n    } else {\n      return x;\n    }\n  });\n}\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\n\nexport function preprocessConv3DInput(x, dataFormat) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 4, 1]); // NCDHW -> NDHWC.\n    } else {\n      return x;\n    }\n  });\n}\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\n\nexport function conv1dWithBias(x, kernel, bias, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat); // Check the ranks of x, kernel and bias.\n\n    if (x.shape.length !== 3) {\n      throw new ValueError(`The input of a conv1dWithBias operation should be 3, but is ` + `${x.shape.length} instead.`);\n    }\n\n    if (kernel.shape.length !== 3) {\n      throw new ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ` + `${kernel.shape.length} instead`);\n    }\n\n    if (bias != null && bias.shape.length !== 1) {\n      throw new ValueError(`The bias for a conv1dWithBias operation should be 1, but is ` + `${kernel.shape.length} instead`);\n    } // TODO(cais): Support CAUSAL padding mode.\n\n\n    if (dataFormat === 'channelsFirst') {\n      x = tfc.transpose(x, [0, 2, 1]); // NCW -> NWC.\n    }\n\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');\n    }\n\n    let y = tfc.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n\n    return y;\n  });\n}\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\n\nexport function conv1d(x, kernel, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\n\nexport function conv2d(x, kernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv2dWithBiasActivation(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\n\nexport function conv2dWithBiasActivation(x, kernel, bias, strides = [1, 1], padding = 'valid', dataFormat, dilationRate, activation = null) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat);\n\n    if (x.rank !== 3 && x.rank !== 4) {\n      throw new ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, ` + `but received ${x.rank}.`);\n    }\n\n    if (kernel.rank !== 3 && kernel.rank !== 4) {\n      throw new ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` + `but received ${x.rank}.`);\n    }\n\n    let y = preprocessConv2DInput(x, dataFormat);\n\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');\n    }\n\n    y = tfc.fused.conv2d({\n      x: y,\n      filter: kernel,\n      strides: strides,\n      pad: padding === 'same' ? 'same' : 'valid',\n      dilations: dilationRate,\n      dataFormat: 'NHWC',\n      bias,\n      activation\n    });\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n\n    return y;\n  });\n}\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\n\nexport function conv3d(x, kernel, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv3dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\n\nexport function conv3dWithBias(x, kernel, bias, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat);\n\n    if (x.rank !== 4 && x.rank !== 5) {\n      throw new ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ` + `${x.rank}.`);\n    }\n\n    if (kernel.rank !== 4 && kernel.rank !== 5) {\n      throw new ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ` + `${x.rank}.`);\n    }\n\n    let y = preprocessConv3DInput(x, dataFormat);\n\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv3dWithBias is not ' + 'implemented yet.');\n    }\n\n    y = tfc.conv3d(y, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n    }\n\n    return y;\n  });\n}\n/**\n * Abstract convolution layer.\n */\n\nexport class BaseConv extends Layer {\n  constructor(rank, args) {\n    super(args);\n    this.bias = null;\n    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    BaseConv.verifyArgs(args);\n    this.rank = rank;\n    generic_utils.assertPositiveInteger(this.rank, 'rank');\n\n    if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n      throw new NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is ` + `not implemented yet.`);\n    }\n\n    this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n    this.strides = normalizeArray(args.strides == null ? 1 : args.strides, rank, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.activation = getActivation(args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.dilationRate = normalizeArray(args.dilationRate == null ? 1 : args.dilationRate, rank, 'dilationRate');\n\n    if (this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1) {\n      throw new ValueError(`dilationRate must be a number or an array of a single number ` + `for 1D convolution, but received ` + `${JSON.stringify(this.dilationRate)}`);\n    } else if (this.rank === 2) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 2) {\n        throw new ValueError(`dilationRate must be a number or array of two numbers for 2D ` + `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    } else if (this.rank === 3) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 3) {\n        throw new ValueError(`dilationRate must be a number or array of three numbers for 3D ` + `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    }\n  }\n\n  static verifyArgs(args) {\n    // Check config.kernelSize type and shape.\n    generic_utils.assert('kernelSize' in args, `required key 'kernelSize' not in config`);\n\n    if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 3)) {\n      throw new ValueError(`BaseConv expects config.kernelSize to be number or number[] with ` + `length 1, 2, or 3, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n  getConfig() {\n    const config = {\n      kernelSize: this.kernelSize,\n      strides: this.strides,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\n\nexport class Conv extends BaseConv {\n  constructor(rank, args) {\n    super(rank, args);\n    this.kernel = null;\n    Conv.verifyArgs(args);\n    this.filters = args.filters;\n    generic_utils.assertPositiveInteger(this.filters, 'filters');\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(`The channel dimension of the input should be defined. ` + `Found ${inputShape[channelAxis]}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n    this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.inputSpec = [{\n      ndim: this.rank + 2,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    }];\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs;\n      const biasValue = this.bias == null ? null : this.bias.read();\n      const fusedActivationName = generic_utils.mapActivationToFusedKernel(this.activation.getClassName());\n\n      if (fusedActivationName != null && this.rank === 2) {\n        outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate, fusedActivationName);\n      } else {\n        if (this.rank === 1) {\n          outputs = conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);\n        } else if (this.rank === 2) {\n          // TODO(cais): Move up to constructor.\n          outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n        } else if (this.rank === 3) {\n          outputs = conv3dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n        } else {\n          throw new NotImplementedError('convolutions greater than 3D are not implemented yet.');\n        }\n\n        if (this.activation != null) {\n          outputs = this.activation.apply(outputs);\n        }\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const newSpace = [];\n    const space = this.dataFormat === 'channelsLast' ? inputShape.slice(1, inputShape.length - 1) : inputShape.slice(2);\n\n    for (let i = 0; i < space.length; ++i) {\n      const newDim = convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate : this.dilationRate[i]);\n      newSpace.push(newDim);\n    }\n\n    let outputShape = [inputShape[0]];\n\n    if (this.dataFormat === 'channelsLast') {\n      outputShape = outputShape.concat(newSpace);\n      outputShape.push(this.filters);\n    } else {\n      outputShape.push(this.filters);\n      outputShape = outputShape.concat(newSpace);\n    }\n\n    return outputShape;\n  }\n\n  getConfig() {\n    const config = {\n      filters: this.filters,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  static verifyArgs(args) {\n    // Check config.filters type, shape, and value.\n    if (!('filters' in args) || typeof args.filters !== 'number' || args.filters < 1) {\n      throw new ValueError(`Convolution layer expected config.filters to be a 'number' > 0 ` + `but got ${JSON.stringify(args.filters)}`);\n    }\n  }\n\n}\nexport class Conv2D extends Conv {\n  constructor(args) {\n    super(2, args);\n    Conv2D.verifyArgs(args);\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  static verifyArgs(args) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 2)) {\n      throw new ValueError(`Conv2D expects config.kernelSize to be number or number[] with ` + `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n}\n/** @nocollapse */\n\nConv2D.className = 'Conv2D';\nserialization.registerClass(Conv2D);\nexport class Conv3D extends Conv {\n  constructor(args) {\n    super(3, args);\n    Conv3D.verifyArgs(args);\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  static verifyArgs(args) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number') {\n      if (!(Array.isArray(args.kernelSize) && (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n        throw new ValueError(`Conv3D expects config.kernelSize to be number or` + ` [number, number, number], but received ${JSON.stringify(args.kernelSize)}.`);\n      }\n    }\n  }\n\n}\n/** @nocollapse */\n\nConv3D.className = 'Conv3D';\nserialization.registerClass(Conv3D);\nexport class Conv2DTranspose extends Conv2D {\n  constructor(args) {\n    super(args);\n    this.inputSpec = [new InputSpec({\n      ndim: 4\n    })];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(`Conv2DTranspose currently supports only padding modes 'same' ` + `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 4) {\n      throw new ValueError('Input should have rank 4; Received input shape: ' + JSON.stringify(inputShape));\n    }\n\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError('The channel dimension of the inputs should be defined. ' + 'Found `None`.');\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n    this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } // Set input spec.\n\n\n    this.inputSpec = [new InputSpec({\n      ndim: 4,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    })];\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n\n      if (input.shape.length !== 4) {\n        throw new ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but ` + `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n      let hAxis;\n      let wAxis;\n\n      if (this.dataFormat === 'channelsFirst') {\n        hAxis = 2;\n        wAxis = 3;\n      } else {\n        hAxis = 1;\n        wAxis = 2;\n      }\n\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelH = this.kernelSize[0];\n      const kernelW = this.kernelSize[1];\n      const strideH = this.strides[0];\n      const strideW = this.strides[1]; // Infer the dynamic output shape.\n\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding); // Porting Note: We don't branch based on `this.dataFormat` here,\n      // because\n      //   the tjfs-core function `conv2dTranspose` called below always\n      //   assumes channelsLast.\n\n      const outputShape = [batchSize, outHeight, outWidth, this.filters];\n\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n      }\n\n      let outputs = tfc.conv2dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);\n\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n      }\n\n      if (this.bias != null) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    let channelAxis;\n    let heightAxis;\n    let widthAxis;\n\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    } else {\n      channelAxis = 3;\n      heightAxis = 1;\n      widthAxis = 2;\n    }\n\n    const kernelH = this.kernelSize[0];\n    const kernelW = this.kernelSize[1];\n    const strideH = this.strides[0];\n    const strideW = this.strides[1];\n    outputShape[channelAxis] = this.filters;\n    outputShape[heightAxis] = deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] = deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nConv2DTranspose.className = 'Conv2DTranspose';\nserialization.registerClass(Conv2DTranspose);\nexport class SeparableConv extends Conv {\n  constructor(rank, config) {\n    super(rank, config);\n    this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';\n    this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';\n    this.depthwiseKernel = null;\n    this.pointwiseKernel = null;\n\n    if (config.filters == null) {\n      throw new ValueError('The `filters` configuration field is required by SeparableConv, ' + 'but is unspecified.');\n    }\n\n    if (config.kernelInitializer != null || config.kernelRegularizer != null || config.kernelConstraint != null) {\n      throw new ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' + 'are invalid for SeparableConv2D. Use depthwiseInitializer, ' + 'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' + 'pointwiseRegularizer and pointwiseConstraint instead.');\n    }\n\n    if (config.padding != null && config.padding !== 'same' && config.padding !== 'valid') {\n      throw new ValueError(`SeparableConv${this.rank}D supports only padding modes: ` + `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n    }\n\n    this.depthMultiplier = config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n    this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n    this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n    this.pointwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n    this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n    this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length < this.rank + 2) {\n      throw new ValueError(`Inputs to SeparableConv${this.rank}D should have rank ` + `${this.rank + 2}, but received input shape: ` + `${JSON.stringify(inputShape)}`);\n    }\n\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(`The channel dimension of the inputs should be defined, ` + `but found ${JSON.stringify(inputShape[channelAxis])}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);\n    const pointwiseKernelShape = [];\n\n    for (let i = 0; i < this.rank; ++i) {\n      pointwiseKernelShape.push(1);\n    }\n\n    pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n    const trainable = true;\n    this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, 'float32', this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);\n    this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, 'float32', this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.inputSpec = [new InputSpec({\n      ndim: this.rank + 2,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    })];\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let output;\n\n      if (this.rank === 1) {\n        throw new NotImplementedError('1D separable convolution is not implemented yet.');\n      } else if (this.rank === 2) {\n        if (this.dataFormat === 'channelsFirst') {\n          inputs = tfc.transpose(inputs, [0, 2, 3, 1]); // NCHW -> NHWC.\n        }\n\n        output = tfc.separableConv2d(inputs, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, 'NHWC');\n      }\n\n      if (this.useBias) {\n        output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n      }\n\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      if (this.dataFormat === 'channelsFirst') {\n        output = tfc.transpose(output, [0, 3, 1, 2]); // NHWC -> NCHW.\n      }\n\n      return output;\n    });\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['kernelInitializer'];\n    delete config['kernelRegularizer'];\n    delete config['kernelConstraint'];\n    config['depthwiseInitializer'] = serializeInitializer(this.depthwiseInitializer);\n    config['pointwiseInitializer'] = serializeInitializer(this.pointwiseInitializer);\n    config['depthwiseRegularizer'] = serializeRegularizer(this.depthwiseRegularizer);\n    config['pointwiseRegularizer'] = serializeRegularizer(this.pointwiseRegularizer);\n    config['depthwiseConstraint'] = serializeConstraint(this.depthwiseConstraint);\n    config['pointwiseConstraint'] = serializeConstraint(this.pointwiseConstraint);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nSeparableConv.className = 'SeparableConv';\nexport class SeparableConv2D extends SeparableConv {\n  constructor(args) {\n    super(2, args);\n  }\n\n}\n/** @nocollapse */\n\nSeparableConv2D.className = 'SeparableConv2D';\nserialization.registerClass(SeparableConv2D);\nexport class Conv1D extends Conv {\n  constructor(args) {\n    super(1, args);\n    Conv1D.verifyArgs(args);\n    this.inputSpec = [{\n      ndim: 3\n    }];\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['dataFormat'];\n    return config;\n  }\n\n  static verifyArgs(args) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 1)) {\n      throw new ValueError(`Conv1D expects config.kernelSize to be number or number[] with ` + `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n}\n/** @nocollapse */\n\nConv1D.className = 'Conv1D';\nserialization.registerClass(Conv1D);\nexport class Cropping2D extends Layer {\n  constructor(args) {\n    super(args);\n\n    if (typeof args.cropping === 'number') {\n      this.cropping = [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n    } else if (typeof args.cropping[0] === 'number') {\n      this.cropping = [[args.cropping[0], args.cropping[0]], [args.cropping[1], args.cropping[1]]];\n    } else {\n      this.cropping = args.cropping;\n    }\n\n    this.dataFormat = args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n    this.inputSpec = [{\n      ndim: 4\n    }];\n  }\n\n  computeOutputShape(inputShape) {\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], inputShape[1], inputShape[2] - this.cropping[0][0] - this.cropping[0][1], inputShape[3] - this.cropping[1][0] - this.cropping[1][1]];\n    } else {\n      return [inputShape[0], inputShape[1] - this.cropping[0][0] - this.cropping[0][1], inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]];\n    }\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      if (this.dataFormat === 'channelsLast') {\n        const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n        return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n      } else {\n        const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n        return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n      }\n    });\n  }\n\n  getConfig() {\n    const config = {\n      cropping: this.cropping,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nCropping2D.className = 'Cropping2D';\nserialization.registerClass(Cropping2D);\nexport class UpSampling2D extends Layer {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_SIZE = [2, 2];\n    this.inputSpec = [{\n      ndim: 4\n    }];\n    this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n    this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.interpolation = args.interpolation == null ? 'nearest' : args.interpolation;\n    checkInterpolationFormat(this.interpolation);\n  }\n\n  computeOutputShape(inputShape) {\n    if (this.dataFormat === 'channelsFirst') {\n      const height = inputShape[2] == null ? null : this.size[0] * inputShape[2];\n      const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n      return [inputShape[0], inputShape[1], height, width];\n    } else {\n      const height = inputShape[1] == null ? null : this.size[0] * inputShape[1];\n      const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n      return [inputShape[0], height, width, inputShape[3]];\n    }\n  }\n\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n\n      if (this.dataFormat === 'channelsFirst') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n        const height = this.size[0] * inputShape[2];\n        const width = this.size[1] * inputShape[3];\n        const resized = this.interpolation === 'nearest' ? input.resizeNearestNeighbor([height, width]) : input.resizeBilinear([height, width]);\n        return tfc.transpose(resized, [0, 3, 1, 2]);\n      } else {\n        const height = this.size[0] * inputShape[1];\n        const width = this.size[1] * inputShape[2];\n        return this.interpolation === 'nearest' ? input.resizeNearestNeighbor([height, width]) : input.resizeBilinear([height, width]);\n      }\n    });\n  }\n\n  getConfig() {\n    const config = {\n      size: this.size,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nUpSampling2D.className = 'UpSampling2D';\nserialization.registerClass(UpSampling2D);","map":{"version":3,"sources":["../../src/layers/convolutional.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAQG;;AAEH;;AAEG;AAEH,OAAO,KAAK,GAAZ,MAAqB,uBAArB;AACA,SAAe,aAAf,EAA8E,IAA9E,QAAyF,uBAAzF;AAEA,SAAoB,aAApB,EAAmC,mBAAnC,QAA6D,gBAA7D;AACA,SAAQ,eAAR,QAA8B,mBAA9B;AACA,OAAO,KAAK,CAAZ,MAAmB,yBAAnB;AACA,SAAQ,eAAR,EAAyB,wBAAzB,EAAmD,gBAAnD,QAA0E,WAA1E;AACA,SAA0C,aAA1C,EAAyD,mBAAzD,QAAmF,gBAAnF;AACA,SAAQ,SAAR,EAAmB,KAAnB,QAA0C,oBAA1C;AACA,SAAQ,mBAAR,EAA6B,UAA7B,QAA8C,WAA9C;AACA,SAAQ,cAAR,EAA4D,oBAA5D,QAAuF,iBAAvF;AAGA,SAAQ,cAAR,EAA4D,oBAA5D,QAAuF,iBAAvF;AAEA,SAAQ,gBAAR,EAA0B,YAA1B,EAAwC,cAAxC,QAA6D,qBAA7D;AACA,OAAO,KAAK,aAAZ,MAA+B,wBAA/B;AACA,SAAQ,kBAAR,EAA4B,mBAA5B,QAAsD,sBAAtD;AAGA;;;;AAIG;;AACH,OAAM,SAAU,qBAAV,CACF,CADE,EACS,UADT,EAC+B;AACnC;AACA,SAAO,IAAI,CAAC,MAAK;AACf,IAAA,eAAe,CAAC,UAAD,CAAf;;AACA,QAAI,UAAU,KAAK,eAAnB,EAAoC;AAClC,aAAO,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAjB,CAAP,CADkC,CACM;AACzC,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAPU,CAAX;AAQD;AAED;;;;AAIG;;AACH,OAAM,SAAU,qBAAV,CACF,CADE,EACS,UADT,EAC+B;AACnC,SAAO,IAAI,CAAC,MAAK;AACf,IAAA,eAAe,CAAC,UAAD,CAAf;;AACA,QAAI,UAAU,KAAK,eAAnB,EAAoC;AAClC,aAAO,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAjB,CAAP,CADkC,CACS;AAC5C,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAPU,CAAX;AAQD;AAED;;;;;;;;;;;;;;;AAeG;;AACH,OAAM,SAAU,cAAV,CACF,CADE,EACS,MADT,EACyB,IADzB,EACuC,OAAO,GAAG,CADjD,EACoD,OAAO,GAAG,OAD9D,EAEF,UAFE,EAEuB,YAAY,GAAG,CAFtC,EAEuC;AAC3C,SAAO,IAAI,CAAC,MAAK;AACf,QAAI,UAAU,IAAI,IAAlB,EAAwB;AACtB,MAAA,UAAU,GAAG,eAAe,EAA5B;AACD;;AACD,IAAA,eAAe,CAAC,UAAD,CAAf,CAJe,CAKf;;AACA,QAAI,CAAC,CAAC,KAAF,CAAQ,MAAR,KAAmB,CAAvB,EAA0B;AACxB,YAAM,IAAI,UAAJ,CACF,8DAAA,GACA,GAAG,CAAC,CAAC,KAAF,CAAQ,MAAM,WAFf,CAAN;AAGD;;AACD,QAAI,MAAM,CAAC,KAAP,CAAa,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,YAAM,IAAI,UAAJ,CACF,gEAAA,GACA,GAAG,MAAM,CAAC,KAAP,CAAa,MAAM,UAFpB,CAAN;AAGD;;AACD,QAAI,IAAI,IAAI,IAAR,IAAgB,IAAI,CAAC,KAAL,CAAW,MAAX,KAAsB,CAA1C,EAA6C;AAC3C,YAAM,IAAI,UAAJ,CACF,8DAAA,GACA,GAAG,MAAM,CAAC,KAAP,CAAa,MAAM,UAFpB,CAAN;AAGD,KApBc,CAqBf;;;AACA,QAAI,UAAU,KAAK,eAAnB,EAAoC;AAClC,MAAA,CAAC,GAAG,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB,CAAJ,CADkC,CACA;AACnC;;AACD,QAAI,OAAO,KAAK,QAAhB,EAA0B;AACxB,YAAM,IAAI,mBAAJ,CACF,kEACA,kBAFE,CAAN;AAGD;;AACD,QAAI,CAAC,GAAW,GAAG,CAAC,MAAJ,CACZ,CADY,EACc,MADd,EACkC,OADlC,EAEZ,OAAO,KAAK,MAAZ,GAAqB,MAArB,GAA8B,OAFlB,EAE2B,KAF3B,EAEkC,YAFlC,CAAhB;;AAGA,QAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB,MAAA,CAAC,GAAG,CAAC,CAAC,OAAF,CAAU,CAAV,EAAa,IAAb,CAAJ;AACD;;AACD,WAAO,CAAP;AACD,GArCU,CAAX;AAsCD;AAED;;;;;;;;;;;AAWG;;AACH,OAAM,SAAU,MAAV,CACF,CADE,EACS,MADT,EACyB,OAAO,GAAG,CADnC,EACsC,OAAO,GAAG,OADhD,EAEF,UAFE,EAEuB,YAAY,GAAG,CAFtC,EAEuC;AAC3C,SAAO,IAAI,CAAC,MAAK;AACf,IAAA,eAAe,CAAC,UAAD,CAAf;AACA,WAAO,cAAc,CACjB,CADiB,EACd,MADc,EACN,IADM,EACA,OADA,EACS,OADT,EACkB,UADlB,EAC8B,YAD9B,CAArB;AAED,GAJU,CAAX;AAKD;AAED;;;;;;;;;AASG;;AACH,OAAM,SAAU,MAAV,CACF,CADE,EACS,MADT,EACyB,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,CADnC,EAC2C,OAAO,GAAG,OADrD,EAEF,UAFE,EAEuB,YAFvB,EAEsD;AAC1D,SAAO,IAAI,CAAC,MAAK;AACf,IAAA,eAAe,CAAC,UAAD,CAAf;AACA,WAAO,wBAAwB,CAC3B,CAD2B,EACxB,MADwB,EAChB,IADgB,EACV,OADU,EACD,OADC,EACQ,UADR,EACoB,YADpB,CAA/B;AAED,GAJU,CAAX;AAKD;AAED;;;;AAIG;;AACH,OAAM,SAAU,wBAAV,CACF,CADE,EACS,MADT,EACyB,IADzB,EACuC,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,CADjD,EAEF,OAAO,GAAG,OAFR,EAEiB,UAFjB,EAE0C,YAF1C,EAGF,UAAA,GAA+B,IAH7B,EAGiC;AACrC,SAAO,IAAI,CAAC,MAAK;AACf,QAAI,UAAU,IAAI,IAAlB,EAAwB;AACtB,MAAA,UAAU,GAAG,eAAe,EAA5B;AACD;;AACD,IAAA,eAAe,CAAC,UAAD,CAAf;;AACA,QAAI,CAAC,CAAC,IAAF,KAAW,CAAX,IAAgB,CAAC,CAAC,IAAF,KAAW,CAA/B,EAAkC;AAChC,YAAM,IAAI,UAAJ,CACF,+DAAA,GACA,gBAAgB,CAAC,CAAC,IAAI,GAFpB,CAAN;AAGD;;AACD,QAAI,MAAM,CAAC,IAAP,KAAgB,CAAhB,IAAqB,MAAM,CAAC,IAAP,KAAgB,CAAzC,EAA4C;AAC1C,YAAM,IAAI,UAAJ,CACF,gEAAA,GACA,gBAAgB,CAAC,CAAC,IAAI,GAFpB,CAAN;AAGD;;AACD,QAAI,CAAC,GAAG,qBAAqB,CAAC,CAAD,EAAI,UAAJ,CAA7B;;AACA,QAAI,OAAO,KAAK,QAAhB,EAA0B;AACxB,YAAM,IAAI,mBAAJ,CACF,kEACA,kBAFE,CAAN;AAGD;;AACD,IAAA,CAAC,GAAG,GAAG,CAAC,KAAJ,CAAU,MAAV,CAAiB;AACnB,MAAA,CAAC,EAAE,CADgB;AAEnB,MAAA,MAAM,EAAE,MAFW;AAGnB,MAAA,OAAO,EAAE,OAHU;AAInB,MAAA,GAAG,EAAE,OAAO,KAAK,MAAZ,GAAqB,MAArB,GAA8B,OAJhB;AAKnB,MAAA,SAAS,EAAE,YALQ;AAMnB,MAAA,UAAU,EAAE,MANO;AAOnB,MAAA,IAPmB;AAQnB,MAAA;AARmB,KAAjB,CAAJ;;AAUA,QAAI,UAAU,KAAK,eAAnB,EAAoC;AAClC,MAAA,CAAC,GAAG,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAjB,CAAJ;AACD;;AACD,WAAO,CAAP;AACD,GAnCU,CAAX;AAoCD;AAED;;;;;;;;;AASG;;AACH,OAAM,SAAU,MAAV,CACF,CADE,EACS,MADT,EACyB,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADnC,EAC8C,OAAO,GAAG,OADxD,EAEF,UAFE,EAEuB,YAFvB,EAE8D;AAClE,SAAO,IAAI,CAAC,MAAK;AACf,IAAA,eAAe,CAAC,UAAD,CAAf;AACA,WAAO,cAAc,CACjB,CADiB,EACd,MADc,EACN,IADM,EACA,OADA,EACS,OADT,EACkB,UADlB,EAC8B,YAD9B,CAArB;AAED,GAJU,CAAX;AAKD;AAED;;;;AAIG;;AACH,OAAM,SAAU,cAAV,CACF,CADE,EACS,MADT,EACyB,IADzB,EACuC,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADjD,EAEF,OAAO,GAAG,OAFR,EAEiB,UAFjB,EAGF,YAHE,EAGqC;AACzC,SAAO,IAAI,CAAC,MAAK;AACf,QAAI,UAAU,IAAI,IAAlB,EAAwB;AACtB,MAAA,UAAU,GAAG,eAAe,EAA5B;AACD;;AACD,IAAA,eAAe,CAAC,UAAD,CAAf;;AACA,QAAI,CAAC,CAAC,IAAF,KAAW,CAAX,IAAgB,CAAC,CAAC,IAAF,KAAW,CAA/B,EAAkC;AAChC,YAAM,IAAI,UAAJ,CACF,kEAAA,GACA,GAAG,CAAC,CAAC,IAAI,GAFP,CAAN;AAGD;;AACD,QAAI,MAAM,CAAC,IAAP,KAAgB,CAAhB,IAAqB,MAAM,CAAC,IAAP,KAAgB,CAAzC,EAA4C;AAC1C,YAAM,IAAI,UAAJ,CACF,mEAAA,GACA,GAAG,CAAC,CAAC,IAAI,GAFP,CAAN;AAGD;;AACD,QAAI,CAAC,GAAG,qBAAqB,CAAC,CAAD,EAAI,UAAJ,CAA7B;;AACA,QAAI,OAAO,KAAK,QAAhB,EAA0B;AACxB,YAAM,IAAI,mBAAJ,CACF,kEACA,kBAFE,CAAN;AAGD;;AACD,IAAA,CAAC,GAAG,GAAG,CAAC,MAAJ,CACA,CADA,EAEA,MAFA,EAEmC,OAFnC,EAGA,OAAO,KAAK,MAAZ,GAAqB,MAArB,GAA8B,OAH9B,EAGuC,OAHvC,EAGgD,YAHhD,CAAJ;;AAIA,QAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB,MAAA,CAAC,GAAG,CAAC,CAAC,OAAF,CAAU,CAAV,EAAa,IAAb,CAAJ;AACD;;AACD,QAAI,UAAU,KAAK,eAAnB,EAAoC;AAClC,MAAA,CAAC,GAAG,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAjB,CAAJ;AACD;;AACD,WAAO,CAAP;AACD,GAhCU,CAAX;AAiCD;AA8GD;;AAEG;;AACH,OAAM,MAAgB,QAAhB,SAAiC,KAAjC,CAAsC;AAwB1C,EAAA,WAAA,CAAY,IAAZ,EAA0B,IAA1B,EAAiD;AAC/C,UAAM,IAAN;AANQ,SAAA,IAAA,GAAsB,IAAtB;AAED,SAAA,0BAAA,GAAoD,cAApD;AACA,SAAA,wBAAA,GAAkD,OAAlD;AAIP,IAAA,QAAQ,CAAC,UAAT,CAAoB,IAApB;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,IAAA,aAAa,CAAC,qBAAd,CAAoC,KAAK,IAAzC,EAA+C,MAA/C;;AACA,QAAI,KAAK,IAAL,KAAc,CAAd,IAAmB,KAAK,IAAL,KAAc,CAAjC,IAAsC,KAAK,IAAL,KAAc,CAAxD,EAA2D;AACzD,YAAM,IAAI,mBAAJ,CACF,qDACI,KAAK,IAAI,OADb,GAEA,sBAHE,CAAN;AAID;;AACD,SAAK,UAAL,GAAkB,cAAc,CAAC,IAAI,CAAC,UAAN,EAAkB,IAAlB,EAAwB,YAAxB,CAAhC;AACA,SAAK,OAAL,GAAe,cAAc,CACzB,IAAI,CAAC,OAAL,IAAgB,IAAhB,GAAuB,CAAvB,GAA2B,IAAI,CAAC,OADP,EACgB,IADhB,EACsB,SADtB,CAA7B;AAEA,SAAK,OAAL,GAAe,IAAI,CAAC,OAAL,IAAgB,IAAhB,GAAuB,OAAvB,GAAiC,IAAI,CAAC,OAArD;AACA,IAAA,gBAAgB,CAAC,KAAK,OAAN,CAAhB;AACA,SAAK,UAAL,GACI,IAAI,CAAC,UAAL,IAAmB,IAAnB,GAA0B,cAA1B,GAA2C,IAAI,CAAC,UADpD;AAEA,IAAA,eAAe,CAAC,KAAK,UAAN,CAAf;AACA,SAAK,UAAL,GAAkB,aAAa,CAAC,IAAI,CAAC,UAAN,CAA/B;AACA,SAAK,OAAL,GAAe,IAAI,CAAC,OAAL,IAAgB,IAAhB,GAAuB,IAAvB,GAA8B,IAAI,CAAC,OAAlD;AACA,SAAK,eAAL,GACI,cAAc,CAAC,IAAI,CAAC,eAAL,IAAwB,KAAK,wBAA9B,CADlB;AAEA,SAAK,cAAL,GAAsB,aAAa,CAAC,IAAI,CAAC,cAAN,CAAnC;AACA,SAAK,eAAL,GAAuB,cAAc,CAAC,IAAI,CAAC,eAAN,CAArC;AACA,SAAK,mBAAL,GAA2B,cAAc,CAAC,IAAI,CAAC,mBAAN,CAAzC;AACA,SAAK,YAAL,GAAoB,cAAc,CAC9B,IAAI,CAAC,YAAL,IAAqB,IAArB,GAA4B,CAA5B,GAAgC,IAAI,CAAC,YADP,EACqB,IADrB,EAE9B,cAF8B,CAAlC;;AAGA,QAAI,KAAK,IAAL,KAAc,CAAd,IACC,KAAK,CAAC,OAAN,CAAc,KAAK,YAAnB,KAAoC,KAAK,YAAL,CAAkB,MAAlB,KAA6B,CADtE,EAC0E;AACxE,YAAM,IAAI,UAAJ,CACF,+DAAA,GACA,mCADA,GAEA,GAAG,IAAI,CAAC,SAAL,CAAe,KAAK,YAApB,CAAiC,EAHlC,CAAN;AAID,KAND,MAMO,IAAI,KAAK,IAAL,KAAc,CAAlB,EAAqB;AAC1B,UAAI,OAAO,KAAK,YAAZ,KAA6B,QAAjC,EAA2C;AACzC,aAAK,YAAL,GAAoB,CAAC,KAAK,YAAN,EAAoB,KAAK,YAAzB,CAApB;AACD,OAFD,MAEO,IAAI,KAAK,YAAL,CAAkB,MAAlB,KAA6B,CAAjC,EAAoC;AACzC,cAAM,IAAI,UAAJ,CACF,+DAAA,GACA,6BAA6B,IAAI,CAAC,SAAL,CAAe,KAAK,YAApB,CAAiC,EAF5D,CAAN;AAGD;AACF,KARM,MAQA,IAAI,KAAK,IAAL,KAAc,CAAlB,EAAqB;AAC1B,UAAI,OAAO,KAAK,YAAZ,KAA6B,QAAjC,EAA2C;AACzC,aAAK,YAAL,GACI,CAAC,KAAK,YAAN,EAAoB,KAAK,YAAzB,EAAuC,KAAK,YAA5C,CADJ;AAED,OAHD,MAGO,IAAI,KAAK,YAAL,CAAkB,MAAlB,KAA6B,CAAjC,EAAoC;AACzC,cAAM,IAAI,UAAJ,CACF,iEAAA,GACA,6BAA6B,IAAI,CAAC,SAAL,CAAe,KAAK,YAApB,CAAiC,EAF5D,CAAN;AAGD;AACF;AACF;;AAE0B,SAAV,UAAU,CAAC,IAAD,EAAwB;AACjD;AACA,IAAA,aAAa,CAAC,MAAd,CACI,gBAAgB,IADpB,EAC0B,yCAD1B;;AAEA,QAAI,OAAO,IAAI,CAAC,UAAZ,KAA2B,QAA3B,IACA,CAAC,aAAa,CAAC,uBAAd,CACG,IAAI,CAAC,UADR,EACoB,QADpB,EAC8B,CAD9B,EACiC,CADjC,CADL,EAE0C;AACxC,YAAM,IAAI,UAAJ,CACF,mEAAA,GACA,mCACI,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,UAApB,CAA+B,GAHjC,CAAN;AAID;AACF;;AAED,EAAA,SAAS,GAAA;AACP,UAAM,MAAM,GAA6B;AACvC,MAAA,UAAU,EAAE,KAAK,UADsB;AAEvC,MAAA,OAAO,EAAE,KAAK,OAFyB;AAGvC,MAAA,OAAO,EAAE,KAAK,OAHyB;AAIvC,MAAA,UAAU,EAAE,KAAK,UAJsB;AAKvC,MAAA,YAAY,EAAE,KAAK,YALoB;AAMvC,MAAA,UAAU,EAAE,mBAAmB,CAAC,KAAK,UAAN,CANQ;AAOvC,MAAA,OAAO,EAAE,KAAK,OAPyB;AAQvC,MAAA,eAAe,EAAE,oBAAoB,CAAC,KAAK,eAAN,CARE;AASvC,MAAA,eAAe,EAAE,oBAAoB,CAAC,KAAK,eAAN,CATE;AAUvC,MAAA,mBAAmB,EAAE,oBAAoB,CAAC,KAAK,mBAAN,CAVF;AAWvC,MAAA,cAAc,EAAE,mBAAmB,CAAC,KAAK,cAAN;AAXI,KAAzC;AAaA,UAAM,UAAU,GAAG,MAAM,SAAN,EAAnB;AACA,IAAA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,UAAtB;AACA,WAAO,MAAP;AACD;;AA9GyC;AAiH5C;;;AAGG;;AACH,OAAM,MAAgB,IAAhB,SAA6B,QAA7B,CAAqC;AAczC,EAAA,WAAA,CAAY,IAAZ,EAA0B,IAA1B,EAA6C;AAC3C,UAAM,IAAN,EAAY,IAAZ;AAZQ,SAAA,MAAA,GAAwB,IAAxB;AAaR,IAAA,IAAI,CAAC,UAAL,CAAgB,IAAhB;AACA,SAAK,OAAL,GAAe,IAAI,CAAC,OAApB;AACA,IAAA,aAAa,CAAC,qBAAd,CAAoC,KAAK,OAAzC,EAAkD,SAAlD;AACA,SAAK,iBAAL,GAAyB,cAAc,CACnC,IAAI,CAAC,iBAAL,IAA0B,KAAK,0BADI,CAAvC;AAEA,SAAK,gBAAL,GAAwB,aAAa,CAAC,IAAI,CAAC,gBAAN,CAArC;AACA,SAAK,iBAAL,GAAyB,cAAc,CAAC,IAAI,CAAC,iBAAN,CAAvC;AACD;;AAED,EAAA,KAAK,CAAC,UAAD,EAA0B;AAC7B,IAAA,UAAU,GAAG,kBAAkB,CAAC,UAAD,CAA/B;AACA,UAAM,WAAW,GACb,KAAK,UAAL,KAAoB,eAApB,GAAsC,CAAtC,GAA0C,UAAU,CAAC,MAAX,GAAoB,CADlE;;AAEA,QAAI,UAAU,CAAC,WAAD,CAAV,IAA2B,IAA/B,EAAqC;AACnC,YAAM,IAAI,UAAJ,CACF,wDAAA,GACA,SAAS,UAAU,CAAC,WAAD,CAAa,EAF9B,CAAN;AAGD;;AACD,UAAM,QAAQ,GAAG,UAAU,CAAC,WAAD,CAA3B;AAEA,UAAM,WAAW,GAAG,KAAK,UAAL,CAAgB,MAAhB,CAAuB,CAAC,QAAD,EAAW,KAAK,OAAhB,CAAvB,CAApB;AAEA,SAAK,MAAL,GAAc,KAAK,SAAL,CACV,QADU,EACA,WADA,EACa,IADb,EACmB,KAAK,iBADxB,EAEV,KAAK,iBAFK,EAEc,IAFd,EAEoB,KAAK,gBAFzB,CAAd;;AAGA,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,IAAL,GAAY,KAAK,SAAL,CACR,MADQ,EACA,CAAC,KAAK,OAAN,CADA,EACgB,IADhB,EACsB,KAAK,eAD3B,EAER,KAAK,eAFG,EAEc,IAFd,EAEoB,KAAK,cAFzB,CAAZ;AAGD;;AAED,SAAK,SAAL,GAAiB,CAAC;AAAC,MAAA,IAAI,EAAE,KAAK,IAAL,GAAY,CAAnB;AAAsB,MAAA,IAAI,EAAE;AAAC,SAAC,WAAD,GAAe;AAAhB;AAA5B,KAAD,CAAjB;AACA,SAAK,KAAL,GAAa,IAAb;AACD;;AAED,EAAA,IAAI,CAAC,MAAD,EAA0B,MAA1B,EAAwC;AAC1C,WAAO,IAAI,CAAC,MAAK;AACf,MAAA,MAAM,GAAG,mBAAmB,CAAC,MAAD,CAA5B;AACA,UAAI,OAAJ;AACA,YAAM,SAAS,GAAG,KAAK,IAAL,IAAa,IAAb,GAAoB,IAApB,GAA2B,KAAK,IAAL,CAAU,IAAV,EAA7C;AACA,YAAM,mBAAmB,GAAG,aAAa,CAAC,0BAAd,CACxB,KAAK,UAAL,CAAgB,YAAhB,EADwB,CAA5B;;AAGA,UAAI,mBAAmB,IAAI,IAAvB,IAA+B,KAAK,IAAL,KAAc,CAAjD,EAAoD;AAClD,QAAA,OAAO,GAAG,wBAAwB,CAC9B,MAD8B,EACtB,KAAK,MAAL,CAAY,IAAZ,EADsB,EACF,SADE,EACS,KAAK,OADd,EACuB,KAAK,OAD5B,EAE9B,KAAK,UAFyB,EAEb,KAAK,YAFQ,EAG9B,mBAH8B,CAAlC;AAID,OALD,MAKO;AACL,YAAI,KAAK,IAAL,KAAc,CAAlB,EAAqB;AACnB,UAAA,OAAO,GAAG,cAAc,CACpB,MADoB,EACZ,KAAK,MAAL,CAAY,IAAZ,EADY,EACQ,SADR,EACmB,KAAK,OAAL,CAAa,CAAb,CADnB,EAEpB,KAAK,OAFe,EAEN,KAAK,UAFC,EAEW,KAAK,YAAL,CAAkB,CAAlB,CAFX,CAAxB;AAGD,SAJD,MAIO,IAAI,KAAK,IAAL,KAAc,CAAlB,EAAqB;AAC1B;AACA,UAAA,OAAO,GAAG,wBAAwB,CAC9B,MAD8B,EACtB,KAAK,MAAL,CAAY,IAAZ,EADsB,EACF,SADE,EACS,KAAK,OADd,EACuB,KAAK,OAD5B,EAE9B,KAAK,UAFyB,EAEb,KAAK,YAFQ,CAAlC;AAGD,SALM,MAKA,IAAI,KAAK,IAAL,KAAc,CAAlB,EAAqB;AAC1B,UAAA,OAAO,GAAG,cAAc,CACpB,MADoB,EACZ,KAAK,MAAL,CAAY,IAAZ,EADY,EACQ,SADR,EACmB,KAAK,OADxB,EACiC,KAAK,OADtC,EAEpB,KAAK,UAFe,EAEH,KAAK,YAFF,CAAxB;AAGD,SAJM,MAIA;AACL,gBAAM,IAAI,mBAAJ,CACF,uDADE,CAAN;AAED;;AAED,YAAI,KAAK,UAAL,IAAmB,IAAvB,EAA6B;AAC3B,UAAA,OAAO,GAAG,KAAK,UAAL,CAAgB,KAAhB,CAAsB,OAAtB,CAAV;AACD;AACF;;AAED,aAAO,OAAP;AACD,KArCU,CAAX;AAsCD;;AAED,EAAA,kBAAkB,CAAC,UAAD,EAA0B;AAC1C,IAAA,UAAU,GAAG,kBAAkB,CAAC,UAAD,CAA/B;AACA,UAAM,QAAQ,GAAa,EAA3B;AACA,UAAM,KAAK,GAAI,KAAK,UAAL,KAAoB,cAArB,GACV,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,UAAU,CAAC,MAAX,GAAoB,CAAxC,CADU,GAEV,UAAU,CAAC,KAAX,CAAiB,CAAjB,CAFJ;;AAGA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,EAAE,CAApC,EAAuC;AACrC,YAAM,MAAM,GAAG,gBAAgB,CAC3B,KAAK,CAAC,CAAD,CADsB,EACjB,KAAK,UAAL,CAAgB,CAAhB,CADiB,EACG,KAAK,OADR,EACiB,KAAK,OAAL,CAAa,CAAb,CADjB,EAE3B,OAAO,KAAK,YAAZ,KAA6B,QAA7B,GAAwC,KAAK,YAA7C,GACwC,KAAK,YAAL,CAAkB,CAAlB,CAHb,CAA/B;AAIA,MAAA,QAAQ,CAAC,IAAT,CAAc,MAAd;AACD;;AAED,QAAI,WAAW,GAAG,CAAC,UAAU,CAAC,CAAD,CAAX,CAAlB;;AACA,QAAI,KAAK,UAAL,KAAoB,cAAxB,EAAwC;AACtC,MAAA,WAAW,GAAG,WAAW,CAAC,MAAZ,CAAmB,QAAnB,CAAd;AACA,MAAA,WAAW,CAAC,IAAZ,CAAiB,KAAK,OAAtB;AACD,KAHD,MAGO;AACL,MAAA,WAAW,CAAC,IAAZ,CAAiB,KAAK,OAAtB;AACA,MAAA,WAAW,GAAG,WAAW,CAAC,MAAZ,CAAmB,QAAnB,CAAd;AACD;;AACD,WAAO,WAAP;AACD;;AAED,EAAA,SAAS,GAAA;AACP,UAAM,MAAM,GAAG;AACb,MAAA,OAAO,EAAE,KAAK,OADD;AAEb,MAAA,iBAAiB,EAAE,oBAAoB,CAAC,KAAK,iBAAN,CAF1B;AAGb,MAAA,iBAAiB,EAAE,oBAAoB,CAAC,KAAK,iBAAN,CAH1B;AAIb,MAAA,gBAAgB,EAAE,mBAAmB,CAAC,KAAK,gBAAN;AAJxB,KAAf;AAMA,UAAM,UAAU,GAAG,MAAM,SAAN,EAAnB;AACA,IAAA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,UAAtB;AACA,WAAO,MAAP;AACD;;AAE0B,SAAV,UAAU,CAAC,IAAD,EAAoB;AAC7C;AACA,QAAI,EAAE,aAAa,IAAf,KAAwB,OAAO,IAAI,CAAC,OAAZ,KAAwB,QAAhD,IACA,IAAI,CAAC,OAAL,GAAe,CADnB,EACsB;AACpB,YAAM,IAAI,UAAJ,CACF,iEAAA,GACA,WAAW,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,OAApB,CAA4B,EAFrC,CAAN;AAGD;AACF;;AAzIwC;AA4I3C,OAAM,MAAO,MAAP,SAAsB,IAAtB,CAA0B;AAG9B,EAAA,WAAA,CAAY,IAAZ,EAA+B;AAC7B,UAAM,CAAN,EAAS,IAAT;AACA,IAAA,MAAM,CAAC,UAAP,CAAkB,IAAlB;AACD;;AAED,EAAA,SAAS,GAAA;AACP,UAAM,MAAM,GAAG,MAAM,SAAN,EAAf;AACA,WAAO,MAAM,CAAC,MAAD,CAAb;AACA,WAAO,MAAP;AACD;;AAE0B,SAAV,UAAU,CAAC,IAAD,EAAoB;AAC7C;AACA,QAAK,OAAO,IAAI,CAAC,UAAZ,KAA2B,QAA5B,IACA,CAAC,aAAa,CAAC,uBAAd,CACG,IAAI,CAAC,UADR,EACoB,QADpB,EAC8B,CAD9B,EACiC,CADjC,CADL,EAE0C;AACxC,YAAM,IAAI,UAAJ,CACF,iEAAA,GACA,+BAA+B,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,UAApB,CAA+B,GAF5D,CAAN;AAGD;AACF;;AAvB6B;AAC9B;;AACO,MAAA,CAAA,SAAA,GAAY,QAAZ;AAuBT,aAAa,CAAC,aAAd,CAA4B,MAA5B;AAEA,OAAM,MAAO,MAAP,SAAsB,IAAtB,CAA0B;AAG9B,EAAA,WAAA,CAAY,IAAZ,EAA+B;AAC7B,UAAM,CAAN,EAAS,IAAT;AACA,IAAA,MAAM,CAAC,UAAP,CAAkB,IAAlB;AACD;;AAED,EAAA,SAAS,GAAA;AACP,UAAM,MAAM,GAAG,MAAM,SAAN,EAAf;AACA,WAAO,MAAM,CAAC,MAAD,CAAb;AACA,WAAO,MAAP;AACD;;AAE0B,SAAV,UAAU,CAAC,IAAD,EAAoB;AAC7C;AACA,QAAI,OAAO,IAAI,CAAC,UAAZ,KAA2B,QAA/B,EAAyC;AACvC,UAAI,EAAE,KAAK,CAAC,OAAN,CAAc,IAAI,CAAC,UAAnB,MACC,IAAI,CAAC,UAAL,CAAgB,MAAhB,KAA2B,CAA3B,IAAgC,IAAI,CAAC,UAAL,CAAgB,MAAhB,KAA2B,CAD5D,CAAF,CAAJ,EACuE;AACrE,cAAM,IAAI,UAAJ,CACF,kDAAA,GACA,2CACI,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,UAApB,CAA+B,GAHjC,CAAN;AAID;AACF;AACF;;AAzB6B;AAC9B;;AACO,MAAA,CAAA,SAAA,GAAY,QAAZ;AAyBT,aAAa,CAAC,aAAd,CAA4B,MAA5B;AAEA,OAAM,MAAO,eAAP,SAA+B,MAA/B,CAAqC;AAKzC,EAAA,WAAA,CAAY,IAAZ,EAA+B;AAC7B,UAAM,IAAN;AACA,SAAK,SAAL,GAAiB,CAAC,IAAI,SAAJ,CAAc;AAAC,MAAA,IAAI,EAAE;AAAP,KAAd,CAAD,CAAjB;;AAEA,QAAI,KAAK,OAAL,KAAiB,MAAjB,IAA2B,KAAK,OAAL,KAAiB,OAAhD,EAAyD;AACvD,YAAM,IAAI,UAAJ,CACF,+DAAA,GACA,0CAA0C,KAAK,OAAO,EAFpD,CAAN;AAGD;AACF;;AAED,EAAA,KAAK,CAAC,UAAD,EAA0B;AAC7B,IAAA,UAAU,GAAG,kBAAkB,CAAC,UAAD,CAA/B;;AAEA,QAAI,UAAU,CAAC,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,YAAM,IAAI,UAAJ,CACF,qDACA,IAAI,CAAC,SAAL,CAAe,UAAf,CAFE,CAAN;AAGD;;AAED,UAAM,WAAW,GACb,KAAK,UAAL,KAAoB,eAApB,GAAsC,CAAtC,GAA0C,UAAU,CAAC,MAAX,GAAoB,CADlE;;AAEA,QAAI,UAAU,CAAC,WAAD,CAAV,IAA2B,IAA/B,EAAqC;AACnC,YAAM,IAAI,UAAJ,CACF,4DACA,eAFE,CAAN;AAGD;;AACD,UAAM,QAAQ,GAAG,UAAU,CAAC,WAAD,CAA3B;AACA,UAAM,WAAW,GAAG,KAAK,UAAL,CAAgB,MAAhB,CAAuB,CAAC,KAAK,OAAN,EAAe,QAAf,CAAvB,CAApB;AAEA,SAAK,MAAL,GAAc,KAAK,SAAL,CACV,QADU,EACA,WADA,EACa,SADb,EACwB,KAAK,iBAD7B,EAEV,KAAK,iBAFK,EAEc,IAFd,EAEoB,KAAK,gBAFzB,CAAd;;AAGA,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,IAAL,GAAY,KAAK,SAAL,CACR,MADQ,EACA,CAAC,KAAK,OAAN,CADA,EACgB,SADhB,EAC2B,KAAK,eADhC,EAER,KAAK,eAFG,EAEc,IAFd,EAEoB,KAAK,cAFzB,CAAZ;AAGD,KA1B4B,CA4B7B;;;AACA,SAAK,SAAL,GACI,CAAC,IAAI,SAAJ,CAAc;AAAC,MAAA,IAAI,EAAE,CAAP;AAAU,MAAA,IAAI,EAAE;AAAC,SAAC,WAAD,GAAe;AAAhB;AAAhB,KAAd,CAAD,CADJ;AAEA,SAAK,KAAL,GAAa,IAAb;AACD;;AAED,EAAA,IAAI,CAAC,MAAD,EAA0B,MAA1B,EAAwC;AAC1C,WAAO,GAAG,CAAC,IAAJ,CAAS,MAAK;AACnB,UAAI,KAAK,GAAG,mBAAmB,CAAC,MAAD,CAA/B;;AACA,UAAI,KAAK,CAAC,KAAN,CAAY,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,cAAM,IAAI,UAAJ,CACF,gEAAA,GACA,6BAA6B,KAAK,CAAC,KAAN,CAAY,MAAM,EAF7C,CAAN;AAGD;;AAED,YAAM,UAAU,GAAG,KAAK,CAAC,KAAzB;AACA,YAAM,SAAS,GAAG,UAAU,CAAC,CAAD,CAA5B;AAEA,UAAI,KAAJ;AACA,UAAI,KAAJ;;AACA,UAAI,KAAK,UAAL,KAAoB,eAAxB,EAAyC;AACvC,QAAA,KAAK,GAAG,CAAR;AACA,QAAA,KAAK,GAAG,CAAR;AACD,OAHD,MAGO;AACL,QAAA,KAAK,GAAG,CAAR;AACA,QAAA,KAAK,GAAG,CAAR;AACD;;AAED,YAAM,MAAM,GAAG,UAAU,CAAC,KAAD,CAAzB;AACA,YAAM,KAAK,GAAG,UAAU,CAAC,KAAD,CAAxB;AACA,YAAM,OAAO,GAAG,KAAK,UAAL,CAAgB,CAAhB,CAAhB;AACA,YAAM,OAAO,GAAG,KAAK,UAAL,CAAgB,CAAhB,CAAhB;AACA,YAAM,OAAO,GAAG,KAAK,OAAL,CAAa,CAAb,CAAhB;AACA,YAAM,OAAO,GAAG,KAAK,OAAL,CAAa,CAAb,CAAhB,CA1BmB,CA4BnB;;AACA,YAAM,SAAS,GAAG,YAAY,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,EAA2B,KAAK,OAAhC,CAA9B;AACA,YAAM,QAAQ,GAAG,YAAY,CAAC,KAAD,EAAQ,OAAR,EAAiB,OAAjB,EAA0B,KAAK,OAA/B,CAA7B,CA9BmB,CAgCnB;AACA;AACA;AACA;;AACA,YAAM,WAAW,GACb,CAAC,SAAD,EAAY,SAAZ,EAAuB,QAAvB,EAAiC,KAAK,OAAtC,CADJ;;AAGA,UAAI,KAAK,UAAL,KAAoB,cAAxB,EAAwC;AACtC,QAAA,KAAK,GAAG,GAAG,CAAC,SAAJ,CAAc,KAAd,EAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAArB,CAAR;AACD;;AACD,UAAI,OAAO,GAAG,GAAG,CAAC,eAAJ,CACV,KADU,EACS,KAAK,MAAL,CAAY,IAAZ,EADT,EACyC,WADzC,EAEV,KAAK,OAFK,EAEwB,KAAK,OAF7B,CAAd;;AAGA,UAAI,KAAK,UAAL,KAAoB,cAAxB,EAAwC;AACtC,QAAA,OAAO,GAAG,GAAG,CAAC,SAAJ,CAAc,OAAd,EAAuB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAvB,CAAV;AACD;;AAED,UAAI,KAAK,IAAL,IAAa,IAAjB,EAAuB;AACrB,QAAA,OAAO,GACH,CAAC,CAAC,OAAF,CAAU,OAAV,EAAmB,KAAK,IAAL,CAAU,IAAV,EAAnB,EAAqC,KAAK,UAA1C,CADJ;AAED;;AACD,UAAI,KAAK,UAAL,IAAmB,IAAvB,EAA6B;AAC3B,QAAA,OAAO,GAAG,KAAK,UAAL,CAAgB,KAAhB,CAAsB,OAAtB,CAAV;AACD;;AACD,aAAO,OAAP;AACD,KAzDM,CAAP;AA0DD;;AAED,EAAA,kBAAkB,CAAC,UAAD,EAA0B;AAC1C,IAAA,UAAU,GAAG,kBAAkB,CAAC,UAAD,CAA/B;AACA,UAAM,WAAW,GAAG,UAAU,CAAC,KAAX,EAApB;AAEA,QAAI,WAAJ;AACA,QAAI,UAAJ;AACA,QAAI,SAAJ;;AACA,QAAI,KAAK,UAAL,KAAoB,eAAxB,EAAyC;AACvC,MAAA,WAAW,GAAG,CAAd;AACA,MAAA,UAAU,GAAG,CAAb;AACA,MAAA,SAAS,GAAG,CAAZ;AACD,KAJD,MAIO;AACL,MAAA,WAAW,GAAG,CAAd;AACA,MAAA,UAAU,GAAG,CAAb;AACA,MAAA,SAAS,GAAG,CAAZ;AACD;;AAED,UAAM,OAAO,GAAG,KAAK,UAAL,CAAgB,CAAhB,CAAhB;AACA,UAAM,OAAO,GAAG,KAAK,UAAL,CAAgB,CAAhB,CAAhB;AACA,UAAM,OAAO,GAAG,KAAK,OAAL,CAAa,CAAb,CAAhB;AACA,UAAM,OAAO,GAAG,KAAK,OAAL,CAAa,CAAb,CAAhB;AAEA,IAAA,WAAW,CAAC,WAAD,CAAX,GAA2B,KAAK,OAAhC;AACA,IAAA,WAAW,CAAC,UAAD,CAAX,GACI,YAAY,CAAC,WAAW,CAAC,UAAD,CAAZ,EAA0B,OAA1B,EAAmC,OAAnC,EAA4C,KAAK,OAAjD,CADhB;AAEA,IAAA,WAAW,CAAC,SAAD,CAAX,GACI,YAAY,CAAC,WAAW,CAAC,SAAD,CAAZ,EAAyB,OAAzB,EAAkC,OAAlC,EAA2C,KAAK,OAAhD,CADhB;AAEA,WAAO,WAAP;AACD;;AAED,EAAA,SAAS,GAAA;AACP,UAAM,MAAM,GAAG,MAAM,SAAN,EAAf;AACA,WAAO,MAAM,CAAC,cAAD,CAAb;AACA,WAAO,MAAP;AACD;;AAjJwC;AACzC;;AACO,eAAA,CAAA,SAAA,GAAY,iBAAZ;AAiJT,aAAa,CAAC,aAAd,CAA4B,eAA5B;AA0CA,OAAM,MAAO,aAAP,SAA6B,IAA7B,CAAiC;AAqBrC,EAAA,WAAA,CAAY,IAAZ,EAA0B,MAA1B,EAAyD;AACvD,UAAM,IAAN,EAAY,MAAZ;AATO,SAAA,6BAAA,GACL,eADK;AAEA,SAAA,6BAAA,GACL,eADK;AAGC,SAAA,eAAA,GAAiC,IAAjC;AACA,SAAA,eAAA,GAAiC,IAAjC;;AAKR,QAAI,MAAM,CAAC,OAAP,IAAkB,IAAtB,EAA4B;AAC1B,YAAM,IAAI,UAAJ,CACF,qEACA,qBAFE,CAAN;AAGD;;AACD,QAAI,MAAM,CAAC,iBAAP,IAA4B,IAA5B,IAAoC,MAAM,CAAC,iBAAP,IAA4B,IAAhE,IACA,MAAM,CAAC,gBAAP,IAA2B,IAD/B,EACqC;AACnC,YAAM,IAAI,UAAJ,CACF,sEACA,6DADA,GAEA,mEAFA,GAGA,uDAJE,CAAN;AAKD;;AACD,QAAI,MAAM,CAAC,OAAP,IAAkB,IAAlB,IAA0B,MAAM,CAAC,OAAP,KAAmB,MAA7C,IACA,MAAM,CAAC,OAAP,KAAmB,OADvB,EACgC;AAC9B,YAAM,IAAI,UAAJ,CACF,gBAAgB,KAAK,IAAI,iCAAzB,GACA,oCAAoC,IAAI,CAAC,SAAL,CAAe,MAAM,CAAC,OAAtB,CAA8B,EAFhE,CAAN;AAGD;;AAED,SAAK,eAAL,GACI,MAAM,CAAC,eAAP,IAA0B,IAA1B,GAAiC,CAAjC,GAAqC,MAAM,CAAC,eADhD;AAEA,SAAK,oBAAL,GAA4B,cAAc,CACtC,MAAM,CAAC,oBAAP,IAA+B,KAAK,6BADE,CAA1C;AAEA,SAAK,oBAAL,GAA4B,cAAc,CAAC,MAAM,CAAC,oBAAR,CAA1C;AACA,SAAK,mBAAL,GAA2B,aAAa,CAAC,MAAM,CAAC,mBAAR,CAAxC;AACA,SAAK,oBAAL,GAA4B,cAAc,CACtC,MAAM,CAAC,oBAAP,IAA+B,KAAK,6BADE,CAA1C;AAEA,SAAK,oBAAL,GAA4B,cAAc,CAAC,MAAM,CAAC,oBAAR,CAA1C;AACA,SAAK,mBAAL,GAA2B,aAAa,CAAC,MAAM,CAAC,mBAAR,CAAxC;AACD;;AAED,EAAA,KAAK,CAAC,UAAD,EAA0B;AAC7B,IAAA,UAAU,GAAG,kBAAkB,CAAC,UAAD,CAA/B;;AACA,QAAI,UAAU,CAAC,MAAX,GAAoB,KAAK,IAAL,GAAY,CAApC,EAAuC;AACrC,YAAM,IAAI,UAAJ,CACF,0BAA0B,KAAK,IAAI,qBAAnC,GACA,GAAG,KAAK,IAAL,GAAY,CAAC,8BADhB,GAEA,GAAG,IAAI,CAAC,SAAL,CAAe,UAAf,CAA0B,EAH3B,CAAN;AAID;;AACD,UAAM,WAAW,GACb,KAAK,UAAL,KAAoB,eAApB,GAAsC,CAAtC,GAA0C,UAAU,CAAC,MAAX,GAAoB,CADlE;;AAEA,QAAI,UAAU,CAAC,WAAD,CAAV,IAA2B,IAA3B,IAAmC,UAAU,CAAC,WAAD,CAAV,GAA0B,CAAjE,EAAoE;AAClE,YAAM,IAAI,UAAJ,CACF,yDAAA,GACA,aAAa,IAAI,CAAC,SAAL,CAAe,UAAU,CAAC,WAAD,CAAzB,CAAuC,EAFlD,CAAN;AAGD;;AAED,UAAM,QAAQ,GAAG,UAAU,CAAC,WAAD,CAA3B;AACA,UAAM,oBAAoB,GACtB,KAAK,UAAL,CAAgB,MAAhB,CAAuB,CAAC,QAAD,EAAW,KAAK,eAAhB,CAAvB,CADJ;AAEA,UAAM,oBAAoB,GAAG,EAA7B;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,IAAzB,EAA+B,EAAE,CAAjC,EAAoC;AAClC,MAAA,oBAAoB,CAAC,IAArB,CAA0B,CAA1B;AACD;;AACD,IAAA,oBAAoB,CAAC,IAArB,CAA0B,QAAQ,GAAG,KAAK,eAA1C,EAA2D,KAAK,OAAhE;AAEA,UAAM,SAAS,GAAG,IAAlB;AACA,SAAK,eAAL,GAAuB,KAAK,SAAL,CACnB,kBADmB,EACC,oBADD,EACuB,SADvB,EAEnB,KAAK,oBAFc,EAEQ,KAAK,oBAFb,EAEmC,SAFnC,EAGnB,KAAK,mBAHc,CAAvB;AAIA,SAAK,eAAL,GAAuB,KAAK,SAAL,CACnB,kBADmB,EACC,oBADD,EACuB,SADvB,EAEnB,KAAK,oBAFc,EAEQ,KAAK,oBAFb,EAEmC,SAFnC,EAGnB,KAAK,mBAHc,CAAvB;;AAIA,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,IAAL,GAAY,KAAK,SAAL,CACR,MADQ,EACA,CAAC,KAAK,OAAN,CADA,EACgB,SADhB,EAC2B,KAAK,eADhC,EAER,KAAK,eAFG,EAEc,SAFd,EAEyB,KAAK,cAF9B,CAAZ;AAGD,KAJD,MAIO;AACL,WAAK,IAAL,GAAY,IAAZ;AACD;;AAED,SAAK,SAAL,GACI,CAAC,IAAI,SAAJ,CAAc;AAAC,MAAA,IAAI,EAAE,KAAK,IAAL,GAAY,CAAnB;AAAsB,MAAA,IAAI,EAAE;AAAC,SAAC,WAAD,GAAe;AAAhB;AAA5B,KAAd,CAAD,CADJ;AAEA,SAAK,KAAL,GAAa,IAAb;AACD;;AAED,EAAA,IAAI,CAAC,MAAD,EAA0B,MAA1B,EAAwC;AAC1C,WAAO,IAAI,CAAC,MAAK;AACf,MAAA,MAAM,GAAG,mBAAmB,CAAC,MAAD,CAA5B;AAEA,UAAI,MAAJ;;AACA,UAAI,KAAK,IAAL,KAAc,CAAlB,EAAqB;AACnB,cAAM,IAAI,mBAAJ,CACF,kDADE,CAAN;AAED,OAHD,MAGO,IAAI,KAAK,IAAL,KAAc,CAAlB,EAAqB;AAC1B,YAAI,KAAK,UAAL,KAAoB,eAAxB,EAAyC;AACvC,UAAA,MAAM,GAAG,GAAG,CAAC,SAAJ,CAAc,MAAd,EAAsB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAtB,CAAT,CADuC,CACQ;AAChD;;AAED,QAAA,MAAM,GAAG,GAAG,CAAC,eAAJ,CACL,MADK,EACe,KAAK,eAAL,CAAqB,IAArB,EADf,EAEL,KAAK,eAAL,CAAqB,IAArB,EAFK,EAGL,KAAK,OAHA,EAG6B,KAAK,OAHlC,EAIL,KAAK,YAJA,EAIkC,MAJlC,CAAT;AAKD;;AAED,UAAI,KAAK,OAAT,EAAkB;AAChB,QAAA,MAAM,GAAG,CAAC,CAAC,OAAF,CAAU,MAAV,EAAkB,KAAK,IAAL,CAAU,IAAV,EAAlB,EAAoC,KAAK,UAAzC,CAAT;AACD;;AACD,UAAI,KAAK,UAAL,IAAmB,IAAvB,EAA6B;AAC3B,QAAA,MAAM,GAAG,KAAK,UAAL,CAAgB,KAAhB,CAAsB,MAAtB,CAAT;AACD;;AAED,UAAI,KAAK,UAAL,KAAoB,eAAxB,EAAyC;AACvC,QAAA,MAAM,GAAG,GAAG,CAAC,SAAJ,CAAc,MAAd,EAAsB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAtB,CAAT,CADuC,CACQ;AAChD;;AACD,aAAO,MAAP;AACD,KA9BU,CAAX;AA+BD;;AAED,EAAA,SAAS,GAAA;AACP,UAAM,MAAM,GAAG,MAAM,SAAN,EAAf;AACA,WAAO,MAAM,CAAC,MAAD,CAAb;AACA,WAAO,MAAM,CAAC,mBAAD,CAAb;AACA,WAAO,MAAM,CAAC,mBAAD,CAAb;AACA,WAAO,MAAM,CAAC,kBAAD,CAAb;AACA,IAAA,MAAM,CAAC,sBAAD,CAAN,GACI,oBAAoB,CAAC,KAAK,oBAAN,CADxB;AAEA,IAAA,MAAM,CAAC,sBAAD,CAAN,GACI,oBAAoB,CAAC,KAAK,oBAAN,CADxB;AAEA,IAAA,MAAM,CAAC,sBAAD,CAAN,GACI,oBAAoB,CAAC,KAAK,oBAAN,CADxB;AAEA,IAAA,MAAM,CAAC,sBAAD,CAAN,GACI,oBAAoB,CAAC,KAAK,oBAAN,CADxB;AAEA,IAAA,MAAM,CAAC,qBAAD,CAAN,GACI,mBAAmB,CAAC,KAAK,mBAAN,CADvB;AAEA,IAAA,MAAM,CAAC,qBAAD,CAAN,GACI,mBAAmB,CAAC,KAAK,mBAAN,CADvB;AAEA,WAAO,MAAP;AACD;;AA5JoC;AACrC;;AACO,aAAA,CAAA,SAAA,GAAY,eAAZ;AA6JT,OAAM,MAAO,eAAP,SAA+B,aAA/B,CAA4C;AAGhD,EAAA,WAAA,CAAY,IAAZ,EAAyC;AACvC,UAAM,CAAN,EAAS,IAAT;AACD;;AAL+C;AAChD;;AACO,eAAA,CAAA,SAAA,GAAY,iBAAZ;AAKT,aAAa,CAAC,aAAd,CAA4B,eAA5B;AAEA,OAAM,MAAO,MAAP,SAAsB,IAAtB,CAA0B;AAG9B,EAAA,WAAA,CAAY,IAAZ,EAA+B;AAC7B,UAAM,CAAN,EAAS,IAAT;AACA,IAAA,MAAM,CAAC,UAAP,CAAkB,IAAlB;AACA,SAAK,SAAL,GAAiB,CAAC;AAAC,MAAA,IAAI,EAAE;AAAP,KAAD,CAAjB;AACD;;AAED,EAAA,SAAS,GAAA;AACP,UAAM,MAAM,GAAG,MAAM,SAAN,EAAf;AACA,WAAO,MAAM,CAAC,MAAD,CAAb;AACA,WAAO,MAAM,CAAC,YAAD,CAAb;AACA,WAAO,MAAP;AACD;;AAE0B,SAAV,UAAU,CAAC,IAAD,EAAoB;AAC7C;AACA,QAAI,OAAO,IAAI,CAAC,UAAZ,KAA2B,QAA3B,IACA,CAAC,aAAa,CAAC,uBAAd,CACG,IAAI,CAAC,UADR,EACoB,QADpB,EAC8B,CAD9B,EACiC,CADjC,CADL,EAE0C;AACxC,YAAM,IAAI,UAAJ,CACF,iEAAA,GACA,0BAA0B,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,UAApB,CAA+B,GAFvD,CAAN;AAGD;AACF;;AAzB6B;AAC9B;;AACO,MAAA,CAAA,SAAA,GAAY,QAAZ;AAyBT,aAAa,CAAC,aAAd,CAA4B,MAA5B;AAgCA,OAAM,MAAO,UAAP,SAA0B,KAA1B,CAA+B;AAMnC,EAAA,WAAA,CAAY,IAAZ,EAAqC;AACnC,UAAM,IAAN;;AACA,QAAI,OAAO,IAAI,CAAC,QAAZ,KAAyB,QAA7B,EAAuC;AACrC,WAAK,QAAL,GACI,CAAC,CAAC,IAAI,CAAC,QAAN,EAAgB,IAAI,CAAC,QAArB,CAAD,EAAiC,CAAC,IAAI,CAAC,QAAN,EAAgB,IAAI,CAAC,QAArB,CAAjC,CADJ;AAED,KAHD,MAGO,IAAI,OAAO,IAAI,CAAC,QAAL,CAAc,CAAd,CAAP,KAA4B,QAAhC,EAA0C;AAC/C,WAAK,QAAL,GAAgB,CACd,CAAC,IAAI,CAAC,QAAL,CAAc,CAAd,CAAD,EAAmB,IAAI,CAAC,QAAL,CAAc,CAAd,CAAnB,CADc,EAEd,CAAC,IAAI,CAAC,QAAL,CAAc,CAAd,CAAD,EAA6B,IAAI,CAAC,QAAL,CAAc,CAAd,CAA7B,CAFc,CAAhB;AAID,KALM,MAKA;AACL,WAAK,QAAL,GAAgB,IAAI,CAAC,QAArB;AACD;;AACD,SAAK,UAAL,GACI,IAAI,CAAC,UAAL,KAAoB,SAApB,GAAgC,cAAhC,GAAiD,IAAI,CAAC,UAD1D;AAEA,SAAK,SAAL,GAAiB,CAAC;AAAC,MAAA,IAAI,EAAE;AAAP,KAAD,CAAjB;AACD;;AAED,EAAA,kBAAkB,CAAC,UAAD,EAAkB;AAClC,QAAI,KAAK,UAAL,KAAoB,eAAxB,EAAyC;AACvC,aAAO,CACL,UAAU,CAAC,CAAD,CADL,EACU,UAAU,CAAC,CAAD,CADpB,EAEL,UAAU,CAAC,CAAD,CAAV,GAAgB,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAhB,GAAsC,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAFjC,EAGL,UAAU,CAAC,CAAD,CAAV,GAAgB,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAhB,GAAsC,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAHjC,CAAP;AAKD,KAND,MAMO;AACL,aAAO,CACL,UAAU,CAAC,CAAD,CADL,EAEL,UAAU,CAAC,CAAD,CAAV,GAAgB,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAhB,GAAsC,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAFjC,EAGL,UAAU,CAAC,CAAD,CAAV,GAAgB,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAhB,GAAsC,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAHjC,EAGsD,UAAU,CAAC,CAAD,CAHhE,CAAP;AAKD;AACF;;AAED,EAAA,IAAI,CAAC,MAAD,EAA0B,MAA1B,EAAwC;AAC1C,WAAO,IAAI,CAAC,MAAK;AACf,MAAA,MAAM,GAAG,mBAAmB,CAAC,MAAD,CAA5B;;AAEA,UAAI,KAAK,UAAL,KAAoB,cAAxB,EAAwC;AACtC,cAAM,OAAO,GAAG,CAAC,CAAC,cAAF,CACZ,MADY,EACJ,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CADI,EAEZ,MAAM,CAAC,KAAP,CAAa,CAAb,IAAkB,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAlB,GAAwC,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAF5B,EAEiD,CAFjD,CAAhB;AAGA,eAAO,CAAC,CAAC,cAAF,CACH,OADG,EACM,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CADN,EAEH,MAAM,CAAC,KAAP,CAAa,CAAb,IAAkB,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAlB,GAAwC,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAFrC,EAE0D,CAF1D,CAAP;AAGD,OAPD,MAOO;AACL,cAAM,OAAO,GAAG,CAAC,CAAC,cAAF,CACZ,MADY,EACJ,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CADI,EAEZ,MAAM,CAAC,KAAP,CAAa,CAAb,IAAkB,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAlB,GAAwC,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAF5B,EAEiD,CAFjD,CAAhB;AAGA,eAAO,CAAC,CAAC,cAAF,CACH,OADG,EACM,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CADN,EAEH,MAAM,CAAC,KAAP,CAAa,CAAb,IAAkB,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAlB,GAAwC,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAFrC,EAE0D,CAF1D,CAAP;AAGD;AACF,KAlBU,CAAX;AAmBD;;AAED,EAAA,SAAS,GAAA;AACP,UAAM,MAAM,GAAG;AAAC,MAAA,QAAQ,EAAE,KAAK,QAAhB;AAA0B,MAAA,UAAU,EAAE,KAAK;AAA3C,KAAf;AACA,UAAM,UAAU,GAAG,MAAM,SAAN,EAAnB;AACA,IAAA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,UAAtB;AACA,WAAO,MAAP;AACD;;AAnEkC;AACnC;;AACO,UAAA,CAAA,SAAA,GAAY,YAAZ;AAmET,aAAa,CAAC,aAAd,CAA4B,UAA5B;AA6BA,OAAM,MAAO,YAAP,SAA4B,KAA5B,CAAiC;AAQrC,EAAA,WAAA,CAAY,IAAZ,EAAuC;AACrC,UAAM,IAAN;AANiB,SAAA,YAAA,GAAe,CAAC,CAAD,EAAI,CAAJ,CAAf;AAOjB,SAAK,SAAL,GAAiB,CAAC;AAAC,MAAA,IAAI,EAAE;AAAP,KAAD,CAAjB;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,IAAL,IAAa,IAAb,GAAoB,KAAK,YAAzB,GAAwC,IAAI,CAAC,IAAzD;AACA,SAAK,UAAL,GACI,IAAI,CAAC,UAAL,IAAmB,IAAnB,GAA0B,cAA1B,GAA2C,IAAI,CAAC,UADpD;AAEA,IAAA,eAAe,CAAC,KAAK,UAAN,CAAf;AACA,SAAK,aAAL,GACI,IAAI,CAAC,aAAL,IAAsB,IAAtB,GAA6B,SAA7B,GAAyC,IAAI,CAAC,aADlD;AAEA,IAAA,wBAAwB,CAAC,KAAK,aAAN,CAAxB;AACD;;AAED,EAAA,kBAAkB,CAAC,UAAD,EAAkB;AAClC,QAAI,KAAK,UAAL,KAAoB,eAAxB,EAAyC;AACvC,YAAM,MAAM,GACR,UAAU,CAAC,CAAD,CAAV,IAAiB,IAAjB,GAAwB,IAAxB,GAA+B,KAAK,IAAL,CAAU,CAAV,IAAe,UAAU,CAAC,CAAD,CAD5D;AAEA,YAAM,KAAK,GAAG,UAAU,CAAC,CAAD,CAAV,IAAiB,IAAjB,GAAwB,IAAxB,GAA+B,KAAK,IAAL,CAAU,CAAV,IAAe,UAAU,CAAC,CAAD,CAAtE;AACA,aAAO,CAAC,UAAU,CAAC,CAAD,CAAX,EAAgB,UAAU,CAAC,CAAD,CAA1B,EAA+B,MAA/B,EAAuC,KAAvC,CAAP;AACD,KALD,MAKO;AACL,YAAM,MAAM,GACR,UAAU,CAAC,CAAD,CAAV,IAAiB,IAAjB,GAAwB,IAAxB,GAA+B,KAAK,IAAL,CAAU,CAAV,IAAe,UAAU,CAAC,CAAD,CAD5D;AAEA,YAAM,KAAK,GAAG,UAAU,CAAC,CAAD,CAAV,IAAiB,IAAjB,GAAwB,IAAxB,GAA+B,KAAK,IAAL,CAAU,CAAV,IAAe,UAAU,CAAC,CAAD,CAAtE;AACA,aAAO,CAAC,UAAU,CAAC,CAAD,CAAX,EAAgB,MAAhB,EAAwB,KAAxB,EAA+B,UAAU,CAAC,CAAD,CAAzC,CAAP;AACD;AACF;;AAED,EAAA,IAAI,CAAC,MAAD,EAA0B,MAA1B,EAAwC;AAC1C,WAAO,GAAG,CAAC,IAAJ,CAAS,MAAK;AACnB,UAAI,KAAK,GAAG,mBAAmB,CAAC,MAAD,CAA/B;AACA,YAAM,UAAU,GAAG,KAAK,CAAC,KAAzB;;AAEA,UAAI,KAAK,UAAL,KAAoB,eAAxB,EAAyC;AACvC,QAAA,KAAK,GAAG,GAAG,CAAC,SAAJ,CAAc,KAAd,EAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAArB,CAAR;AACA,cAAM,MAAM,GAAG,KAAK,IAAL,CAAU,CAAV,IAAe,UAAU,CAAC,CAAD,CAAxC;AACA,cAAM,KAAK,GAAG,KAAK,IAAL,CAAU,CAAV,IAAe,UAAU,CAAC,CAAD,CAAvC;AAEA,cAAM,OAAO,GAAG,KAAK,aAAL,KAAuB,SAAvB,GACZ,KAAK,CAAC,qBAAN,CAA4B,CAAC,MAAD,EAAS,KAAT,CAA5B,CADY,GAEZ,KAAK,CAAC,cAAN,CAAqB,CAAC,MAAD,EAAS,KAAT,CAArB,CAFJ;AAGA,eAAO,GAAG,CAAC,SAAJ,CAAc,OAAd,EAAuB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAvB,CAAP;AACD,OATD,MASO;AACL,cAAM,MAAM,GAAG,KAAK,IAAL,CAAU,CAAV,IAAe,UAAU,CAAC,CAAD,CAAxC;AACA,cAAM,KAAK,GAAG,KAAK,IAAL,CAAU,CAAV,IAAe,UAAU,CAAC,CAAD,CAAvC;AACA,eAAO,KAAK,aAAL,KAAuB,SAAvB,GACH,KAAK,CAAC,qBAAN,CAA4B,CAAC,MAAD,EAAS,KAAT,CAA5B,CADG,GAEH,KAAK,CAAC,cAAN,CAAqB,CAAC,MAAD,EAAS,KAAT,CAArB,CAFJ;AAGD;AACF,KApBM,CAAP;AAqBD;;AAED,EAAA,SAAS,GAAA;AACP,UAAM,MAAM,GAAG;AAAC,MAAA,IAAI,EAAE,KAAK,IAAZ;AAAkB,MAAA,UAAU,EAAE,KAAK;AAAnC,KAAf;AACA,UAAM,UAAU,GAAG,MAAM,SAAN,EAAnB;AACA,IAAA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,UAAtB;AACA,WAAO,MAAP;AACD;;AA/DoC;AACrC;;AACO,YAAA,CAAA,SAAA,GAAY,cAAZ;AA+DT,aAAa,CAAC,aAAd,CAA4B,YAA5B","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkInterpolationFormat, checkPaddingMode } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength, deconvLength, normalizeArray } from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv2DInput(x, dataFormat) {\n    // TODO(cais): Cast type to float32 if not.\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        if (dataFormat === 'channelsFirst') {\n            return tfc.transpose(x, [0, 2, 3, 1]); // NCHW -> NHWC.\n        }\n        else {\n            return x;\n        }\n    });\n}\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv3DInput(x, dataFormat) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        if (dataFormat === 'channelsFirst') {\n            return tfc.transpose(x, [0, 2, 3, 4, 1]); // NCDHW -> NDHWC.\n        }\n        else {\n            return x;\n        }\n    });\n}\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1dWithBias(x, kernel, bias, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        // Check the ranks of x, kernel and bias.\n        if (x.shape.length !== 3) {\n            throw new ValueError(`The input of a conv1dWithBias operation should be 3, but is ` +\n                `${x.shape.length} instead.`);\n        }\n        if (kernel.shape.length !== 3) {\n            throw new ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ` +\n                `${kernel.shape.length} instead`);\n        }\n        if (bias != null && bias.shape.length !== 1) {\n            throw new ValueError(`The bias for a conv1dWithBias operation should be 1, but is ` +\n                `${kernel.shape.length} instead`);\n        }\n        // TODO(cais): Support CAUSAL padding mode.\n        if (dataFormat === 'channelsFirst') {\n            x = tfc.transpose(x, [0, 2, 1]); // NCW -> NWC.\n        }\n        if (padding === 'causal') {\n            throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' +\n                'implemented yet.');\n        }\n        let y = tfc.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n        if (bias != null) {\n            y = K.biasAdd(y, bias);\n        }\n        return y;\n    });\n}\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1d(x, kernel, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\nexport function conv2d(x, kernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        return conv2dWithBiasActivation(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\nexport function conv2dWithBiasActivation(x, kernel, bias, strides = [1, 1], padding = 'valid', dataFormat, dilationRate, activation = null) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        if (x.rank !== 3 && x.rank !== 4) {\n            throw new ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, ` +\n                `but received ${x.rank}.`);\n        }\n        if (kernel.rank !== 3 && kernel.rank !== 4) {\n            throw new ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` +\n                `but received ${x.rank}.`);\n        }\n        let y = preprocessConv2DInput(x, dataFormat);\n        if (padding === 'causal') {\n            throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' +\n                'implemented yet.');\n        }\n        y = tfc.fused.conv2d({\n            x: y,\n            filter: kernel,\n            strides: strides,\n            pad: padding === 'same' ? 'same' : 'valid',\n            dilations: dilationRate,\n            dataFormat: 'NHWC',\n            bias,\n            activation\n        });\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]);\n        }\n        return y;\n    });\n}\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\nexport function conv3d(x, kernel, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        return conv3dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\nexport function conv3dWithBias(x, kernel, bias, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        if (x.rank !== 4 && x.rank !== 5) {\n            throw new ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ` +\n                `${x.rank}.`);\n        }\n        if (kernel.rank !== 4 && kernel.rank !== 5) {\n            throw new ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ` +\n                `${x.rank}.`);\n        }\n        let y = preprocessConv3DInput(x, dataFormat);\n        if (padding === 'causal') {\n            throw new NotImplementedError('The support for CAUSAL padding mode in conv3dWithBias is not ' +\n                'implemented yet.');\n        }\n        y = tfc.conv3d(y, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n        if (bias != null) {\n            y = K.biasAdd(y, bias);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n        }\n        return y;\n    });\n}\n/**\n * Abstract convolution layer.\n */\nexport class BaseConv extends Layer {\n    constructor(rank, args) {\n        super(args);\n        this.bias = null;\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        BaseConv.verifyArgs(args);\n        this.rank = rank;\n        generic_utils.assertPositiveInteger(this.rank, 'rank');\n        if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n            throw new NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is ` +\n                `not implemented yet.`);\n        }\n        this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n        this.strides = normalizeArray(args.strides == null ? 1 : args.strides, rank, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        checkPaddingMode(this.padding);\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        this.activation = getActivation(args.activation);\n        this.useBias = args.useBias == null ? true : args.useBias;\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.activityRegularizer = getRegularizer(args.activityRegularizer);\n        this.dilationRate = normalizeArray(args.dilationRate == null ? 1 : args.dilationRate, rank, 'dilationRate');\n        if (this.rank === 1 &&\n            (Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)) {\n            throw new ValueError(`dilationRate must be a number or an array of a single number ` +\n                `for 1D convolution, but received ` +\n                `${JSON.stringify(this.dilationRate)}`);\n        }\n        else if (this.rank === 2) {\n            if (typeof this.dilationRate === 'number') {\n                this.dilationRate = [this.dilationRate, this.dilationRate];\n            }\n            else if (this.dilationRate.length !== 2) {\n                throw new ValueError(`dilationRate must be a number or array of two numbers for 2D ` +\n                    `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n            }\n        }\n        else if (this.rank === 3) {\n            if (typeof this.dilationRate === 'number') {\n                this.dilationRate =\n                    [this.dilationRate, this.dilationRate, this.dilationRate];\n            }\n            else if (this.dilationRate.length !== 3) {\n                throw new ValueError(`dilationRate must be a number or array of three numbers for 3D ` +\n                    `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n            }\n        }\n    }\n    static verifyArgs(args) {\n        // Check config.kernelSize type and shape.\n        generic_utils.assert('kernelSize' in args, `required key 'kernelSize' not in config`);\n        if (typeof args.kernelSize !== 'number' &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 3)) {\n            throw new ValueError(`BaseConv expects config.kernelSize to be number or number[] with ` +\n                `length 1, 2, or 3, but received ${JSON.stringify(args.kernelSize)}.`);\n        }\n    }\n    getConfig() {\n        const config = {\n            kernelSize: this.kernelSize,\n            strides: this.strides,\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n            dilationRate: this.dilationRate,\n            activation: serializeActivation(this.activation),\n            useBias: this.useBias,\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            biasConstraint: serializeConstraint(this.biasConstraint)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\nexport class Conv extends BaseConv {\n    constructor(rank, args) {\n        super(rank, args);\n        this.kernel = null;\n        Conv.verifyArgs(args);\n        this.filters = args.filters;\n        generic_utils.assertPositiveInteger(this.filters, 'filters');\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new ValueError(`The channel dimension of the input should be defined. ` +\n                `Found ${inputShape[channelAxis]}`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n        this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        this.inputSpec = [{ ndim: this.rank + 2, axes: { [channelAxis]: inputDim } }];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            let outputs;\n            const biasValue = this.bias == null ? null : this.bias.read();\n            const fusedActivationName = generic_utils.mapActivationToFusedKernel(this.activation.getClassName());\n            if (fusedActivationName != null && this.rank === 2) {\n                outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate, fusedActivationName);\n            }\n            else {\n                if (this.rank === 1) {\n                    outputs = conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);\n                }\n                else if (this.rank === 2) {\n                    // TODO(cais): Move up to constructor.\n                    outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n                }\n                else if (this.rank === 3) {\n                    outputs = conv3dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n                }\n                else {\n                    throw new NotImplementedError('convolutions greater than 3D are not implemented yet.');\n                }\n                if (this.activation != null) {\n                    outputs = this.activation.apply(outputs);\n                }\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const newSpace = [];\n        const space = (this.dataFormat === 'channelsLast') ?\n            inputShape.slice(1, inputShape.length - 1) :\n            inputShape.slice(2);\n        for (let i = 0; i < space.length; ++i) {\n            const newDim = convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate :\n                this.dilationRate[i]);\n            newSpace.push(newDim);\n        }\n        let outputShape = [inputShape[0]];\n        if (this.dataFormat === 'channelsLast') {\n            outputShape = outputShape.concat(newSpace);\n            outputShape.push(this.filters);\n        }\n        else {\n            outputShape.push(this.filters);\n            outputShape = outputShape.concat(newSpace);\n        }\n        return outputShape;\n    }\n    getConfig() {\n        const config = {\n            filters: this.filters,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    static verifyArgs(args) {\n        // Check config.filters type, shape, and value.\n        if (!('filters' in args) || typeof args.filters !== 'number' ||\n            args.filters < 1) {\n            throw new ValueError(`Convolution layer expected config.filters to be a 'number' > 0 ` +\n                `but got ${JSON.stringify(args.filters)}`);\n        }\n    }\n}\nexport class Conv2D extends Conv {\n    constructor(args) {\n        super(2, args);\n        Conv2D.verifyArgs(args);\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        return config;\n    }\n    static verifyArgs(args) {\n        // config.kernelSize must be a number or array of numbers.\n        if ((typeof args.kernelSize !== 'number') &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 2)) {\n            throw new ValueError(`Conv2D expects config.kernelSize to be number or number[] with ` +\n                `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n        }\n    }\n}\n/** @nocollapse */\nConv2D.className = 'Conv2D';\nserialization.registerClass(Conv2D);\nexport class Conv3D extends Conv {\n    constructor(args) {\n        super(3, args);\n        Conv3D.verifyArgs(args);\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        return config;\n    }\n    static verifyArgs(args) {\n        // config.kernelSize must be a number or array of numbers.\n        if (typeof args.kernelSize !== 'number') {\n            if (!(Array.isArray(args.kernelSize) &&\n                (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n                throw new ValueError(`Conv3D expects config.kernelSize to be number or` +\n                    ` [number, number, number], but received ${JSON.stringify(args.kernelSize)}.`);\n            }\n        }\n    }\n}\n/** @nocollapse */\nConv3D.className = 'Conv3D';\nserialization.registerClass(Conv3D);\nexport class Conv2DTranspose extends Conv2D {\n    constructor(args) {\n        super(args);\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n        if (this.padding !== 'same' && this.padding !== 'valid') {\n            throw new ValueError(`Conv2DTranspose currently supports only padding modes 'same' ` +\n                `and 'valid', but received padding mode ${this.padding}`);\n        }\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length !== 4) {\n            throw new ValueError('Input should have rank 4; Received input shape: ' +\n                JSON.stringify(inputShape));\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new ValueError('The channel dimension of the inputs should be defined. ' +\n                'Found `None`.');\n        }\n        const inputDim = inputShape[channelAxis];\n        const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n        this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        // Set input spec.\n        this.inputSpec =\n            [new InputSpec({ ndim: 4, axes: { [channelAxis]: inputDim } })];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            let input = getExactlyOneTensor(inputs);\n            if (input.shape.length !== 4) {\n                throw new ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but ` +\n                    `received a tensor of rank-${input.shape.length}`);\n            }\n            const inputShape = input.shape;\n            const batchSize = inputShape[0];\n            let hAxis;\n            let wAxis;\n            if (this.dataFormat === 'channelsFirst') {\n                hAxis = 2;\n                wAxis = 3;\n            }\n            else {\n                hAxis = 1;\n                wAxis = 2;\n            }\n            const height = inputShape[hAxis];\n            const width = inputShape[wAxis];\n            const kernelH = this.kernelSize[0];\n            const kernelW = this.kernelSize[1];\n            const strideH = this.strides[0];\n            const strideW = this.strides[1];\n            // Infer the dynamic output shape.\n            const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n            const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n            // Porting Note: We don't branch based on `this.dataFormat` here,\n            // because\n            //   the tjfs-core function `conv2dTranspose` called below always\n            //   assumes channelsLast.\n            const outputShape = [batchSize, outHeight, outWidth, this.filters];\n            if (this.dataFormat !== 'channelsLast') {\n                input = tfc.transpose(input, [0, 2, 3, 1]);\n            }\n            let outputs = tfc.conv2dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);\n            if (this.dataFormat !== 'channelsLast') {\n                outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n            }\n            if (this.bias != null) {\n                outputs =\n                    K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation != null) {\n                outputs = this.activation.apply(outputs);\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const outputShape = inputShape.slice();\n        let channelAxis;\n        let heightAxis;\n        let widthAxis;\n        if (this.dataFormat === 'channelsFirst') {\n            channelAxis = 1;\n            heightAxis = 2;\n            widthAxis = 3;\n        }\n        else {\n            channelAxis = 3;\n            heightAxis = 1;\n            widthAxis = 2;\n        }\n        const kernelH = this.kernelSize[0];\n        const kernelW = this.kernelSize[1];\n        const strideH = this.strides[0];\n        const strideW = this.strides[1];\n        outputShape[channelAxis] = this.filters;\n        outputShape[heightAxis] =\n            deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n        outputShape[widthAxis] =\n            deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n        return outputShape;\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['dilationRate'];\n        return config;\n    }\n}\n/** @nocollapse */\nConv2DTranspose.className = 'Conv2DTranspose';\nserialization.registerClass(Conv2DTranspose);\nexport class SeparableConv extends Conv {\n    constructor(rank, config) {\n        super(rank, config);\n        this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';\n        this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';\n        this.depthwiseKernel = null;\n        this.pointwiseKernel = null;\n        if (config.filters == null) {\n            throw new ValueError('The `filters` configuration field is required by SeparableConv, ' +\n                'but is unspecified.');\n        }\n        if (config.kernelInitializer != null || config.kernelRegularizer != null ||\n            config.kernelConstraint != null) {\n            throw new ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +\n                'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +\n                'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +\n                'pointwiseRegularizer and pointwiseConstraint instead.');\n        }\n        if (config.padding != null && config.padding !== 'same' &&\n            config.padding !== 'valid') {\n            throw new ValueError(`SeparableConv${this.rank}D supports only padding modes: ` +\n                `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n        }\n        this.depthMultiplier =\n            config.depthMultiplier == null ? 1 : config.depthMultiplier;\n        this.depthwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n        this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n        this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n        this.pointwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n        this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n        this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length < this.rank + 2) {\n            throw new ValueError(`Inputs to SeparableConv${this.rank}D should have rank ` +\n                `${this.rank + 2}, but received input shape: ` +\n                `${JSON.stringify(inputShape)}`);\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new ValueError(`The channel dimension of the inputs should be defined, ` +\n                `but found ${JSON.stringify(inputShape[channelAxis])}`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);\n        const pointwiseKernelShape = [];\n        for (let i = 0; i < this.rank; ++i) {\n            pointwiseKernelShape.push(1);\n        }\n        pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n        const trainable = true;\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, 'float32', this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);\n        this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, 'float32', this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.inputSpec =\n            [new InputSpec({ ndim: this.rank + 2, axes: { [channelAxis]: inputDim } })];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            let output;\n            if (this.rank === 1) {\n                throw new NotImplementedError('1D separable convolution is not implemented yet.');\n            }\n            else if (this.rank === 2) {\n                if (this.dataFormat === 'channelsFirst') {\n                    inputs = tfc.transpose(inputs, [0, 2, 3, 1]); // NCHW -> NHWC.\n                }\n                output = tfc.separableConv2d(inputs, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, 'NHWC');\n            }\n            if (this.useBias) {\n                output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation != null) {\n                output = this.activation.apply(output);\n            }\n            if (this.dataFormat === 'channelsFirst') {\n                output = tfc.transpose(output, [0, 3, 1, 2]); // NHWC -> NCHW.\n            }\n            return output;\n        });\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        delete config['kernelInitializer'];\n        delete config['kernelRegularizer'];\n        delete config['kernelConstraint'];\n        config['depthwiseInitializer'] =\n            serializeInitializer(this.depthwiseInitializer);\n        config['pointwiseInitializer'] =\n            serializeInitializer(this.pointwiseInitializer);\n        config['depthwiseRegularizer'] =\n            serializeRegularizer(this.depthwiseRegularizer);\n        config['pointwiseRegularizer'] =\n            serializeRegularizer(this.pointwiseRegularizer);\n        config['depthwiseConstraint'] =\n            serializeConstraint(this.depthwiseConstraint);\n        config['pointwiseConstraint'] =\n            serializeConstraint(this.pointwiseConstraint);\n        return config;\n    }\n}\n/** @nocollapse */\nSeparableConv.className = 'SeparableConv';\nexport class SeparableConv2D extends SeparableConv {\n    constructor(args) {\n        super(2, args);\n    }\n}\n/** @nocollapse */\nSeparableConv2D.className = 'SeparableConv2D';\nserialization.registerClass(SeparableConv2D);\nexport class Conv1D extends Conv {\n    constructor(args) {\n        super(1, args);\n        Conv1D.verifyArgs(args);\n        this.inputSpec = [{ ndim: 3 }];\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        delete config['dataFormat'];\n        return config;\n    }\n    static verifyArgs(args) {\n        // config.kernelSize must be a number or array of numbers.\n        if (typeof args.kernelSize !== 'number' &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 1)) {\n            throw new ValueError(`Conv1D expects config.kernelSize to be number or number[] with ` +\n                `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n        }\n    }\n}\n/** @nocollapse */\nConv1D.className = 'Conv1D';\nserialization.registerClass(Conv1D);\nexport class Cropping2D extends Layer {\n    constructor(args) {\n        super(args);\n        if (typeof args.cropping === 'number') {\n            this.cropping =\n                [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n        }\n        else if (typeof args.cropping[0] === 'number') {\n            this.cropping = [\n                [args.cropping[0], args.cropping[0]],\n                [args.cropping[1], args.cropping[1]]\n            ];\n        }\n        else {\n            this.cropping = args.cropping;\n        }\n        this.dataFormat =\n            args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n        this.inputSpec = [{ ndim: 4 }];\n    }\n    computeOutputShape(inputShape) {\n        if (this.dataFormat === 'channelsFirst') {\n            return [\n                inputShape[0], inputShape[1],\n                inputShape[2] - this.cropping[0][0] - this.cropping[0][1],\n                inputShape[3] - this.cropping[1][0] - this.cropping[1][1]\n            ];\n        }\n        else {\n            return [\n                inputShape[0],\n                inputShape[1] - this.cropping[0][0] - this.cropping[0][1],\n                inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]\n            ];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsLast') {\n                const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n                return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n            }\n            else {\n                const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n                return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n            }\n        });\n    }\n    getConfig() {\n        const config = { cropping: this.cropping, dataFormat: this.dataFormat };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nCropping2D.className = 'Cropping2D';\nserialization.registerClass(Cropping2D);\nexport class UpSampling2D extends Layer {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_SIZE = [2, 2];\n        this.inputSpec = [{ ndim: 4 }];\n        this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        this.interpolation =\n            args.interpolation == null ? 'nearest' : args.interpolation;\n        checkInterpolationFormat(this.interpolation);\n    }\n    computeOutputShape(inputShape) {\n        if (this.dataFormat === 'channelsFirst') {\n            const height = inputShape[2] == null ? null : this.size[0] * inputShape[2];\n            const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n            return [inputShape[0], inputShape[1], height, width];\n        }\n        else {\n            const height = inputShape[1] == null ? null : this.size[0] * inputShape[1];\n            const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n            return [inputShape[0], height, width, inputShape[3]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            let input = getExactlyOneTensor(inputs);\n            const inputShape = input.shape;\n            if (this.dataFormat === 'channelsFirst') {\n                input = tfc.transpose(input, [0, 2, 3, 1]);\n                const height = this.size[0] * inputShape[2];\n                const width = this.size[1] * inputShape[3];\n                const resized = this.interpolation === 'nearest' ?\n                    input.resizeNearestNeighbor([height, width]) :\n                    input.resizeBilinear([height, width]);\n                return tfc.transpose(resized, [0, 3, 1, 2]);\n            }\n            else {\n                const height = this.size[0] * inputShape[1];\n                const width = this.size[1] * inputShape[2];\n                return this.interpolation === 'nearest' ?\n                    input.resizeNearestNeighbor([height, width]) :\n                    input.resizeBilinear([height, width]);\n            }\n        });\n    }\n    getConfig() {\n        const config = { size: this.size, dataFormat: this.dataFormat };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nUpSampling2D.className = 'UpSampling2D';\nserialization.registerClass(UpSampling2D);\n//# sourceMappingURL=convolutional.js.map"]},"metadata":{},"sourceType":"module"}