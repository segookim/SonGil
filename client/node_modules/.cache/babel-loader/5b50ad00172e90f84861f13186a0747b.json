{"ast":null,"code":"import _toConsumableArray from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reverse, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { identity } from './Identity';\nexport function reverse(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var dims = attrs.dims;\n  assertNotComplex(x, 'reverse');\n  var xRank = x.shape.length;\n  var $dims = util.parseAxisParam(dims, x.shape);\n\n  if (xRank === 0) {\n    return identity({\n      inputs: {\n        x: x\n      },\n      backend: backend\n    });\n  }\n\n  var outBuf = new TensorBuffer(x.shape, x.dtype);\n  var xBuf = backend.bufferSync(x);\n\n  var _loop = function _loop(i) {\n    var outLoc = outBuf.indexToLoc(i);\n    var inLoc = outLoc.slice();\n    $dims.forEach(function (d) {\n      return inLoc[d] = x.shape[d] - 1 - inLoc[d];\n    });\n    outBuf.set.apply(outBuf, [xBuf.get.apply(xBuf, _toConsumableArray(inLoc))].concat(_toConsumableArray(outLoc)));\n  };\n\n  for (var i = 0; i < outBuf.size; i++) {\n    _loop(i);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nexport var reverseConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse\n};","map":{"version":3,"sources":["../../src/kernels/Reverse.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,OAAlC,EAAwE,YAAxE,EAAkG,IAAlG,QAA6G,uBAA7G;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AACA,SAAQ,QAAR,QAAuB,YAAvB;AAEA,OAAM,SAAU,OAAV,CACF,IADE,EAEuE;AAAA,MAEpE,MAFoE,GAE1C,IAF0C,CAEpE,MAFoE;AAAA,MAE5D,OAF4D,GAE1C,IAF0C,CAE5D,OAF4D;AAAA,MAEnD,KAFmD,GAE1C,IAF0C,CAEnD,KAFmD;AAAA,MAGpE,CAHoE,GAG/D,MAH+D,CAGpE,CAHoE;AAAA,MAIpE,IAJoE,GAI5D,KAJ4D,CAIpE,IAJoE;AAM3E,EAAA,gBAAgB,CAAC,CAAD,EAAI,SAAJ,CAAhB;AAEA,MAAM,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,MAAtB;AAEA,MAAM,KAAK,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,CAAC,CAAC,KAA5B,CAAd;;AACA,MAAI,KAAK,KAAK,CAAd,EAAiB;AACf,WAAO,QAAQ,CAAC;AAAC,MAAA,MAAM,EAAE;AAAC,QAAA,CAAC,EAAD;AAAD,OAAT;AAAc,MAAA,OAAO,EAAP;AAAd,KAAD,CAAf;AACD;;AAED,MAAM,MAAM,GAAG,IAAI,YAAJ,CAAiB,CAAC,CAAC,KAAnB,EAA0B,CAAC,CAAC,KAA5B,CAAf;AACA,MAAM,IAAI,GAAG,OAAO,CAAC,UAAR,CAAmB,CAAnB,CAAb;;AAhB2E,6BAkBlE,CAlBkE;AAmBzE,QAAM,MAAM,GAAG,MAAM,CAAC,UAAP,CAAkB,CAAlB,CAAf;AACA,QAAM,KAAK,GAAG,MAAM,CAAC,KAAP,EAAd;AACA,IAAA,KAAK,CAAC,OAAN,CAAc,UAAA,CAAC;AAAA,aAAI,KAAK,CAAC,CAAD,CAAL,GAAW,CAAC,CAAC,KAAF,CAAQ,CAAR,IAAa,CAAb,GAAiB,KAAK,CAAC,CAAD,CAArC;AAAA,KAAf;AACA,IAAA,MAAM,CAAC,GAAP,OAAA,MAAM,GAAK,IAAI,CAAC,GAAL,OAAA,IAAI,qBAAQ,KAAR,EAAT,4BAA4B,MAA5B,GAAN;AAtByE;;AAkB3E,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,IAA3B,EAAiC,CAAC,EAAlC,EAAsC;AAAA,UAA7B,CAA6B;AAKrC;;AAED,SAAO,OAAO,CAAC,cAAR,CAAuB,MAAM,CAAC,KAA9B,EAAqC,MAAM,CAAC,KAA5C,EAAmD,MAAM,CAAC,MAA1D,CAAP;AACD;AAED,OAAO,IAAM,aAAa,GAAiB;AACzC,EAAA,UAAU,EAAE,OAD6B;AAEzC,EAAA,WAAW,EAAE,KAF4B;AAGzC,EAAA,UAAU,EAAE;AAH6B,CAApC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reverse, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { identity } from './Identity';\nexport function reverse(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dims } = attrs;\n    assertNotComplex(x, 'reverse');\n    const xRank = x.shape.length;\n    const $dims = util.parseAxisParam(dims, x.shape);\n    if (xRank === 0) {\n        return identity({ inputs: { x }, backend });\n    }\n    const outBuf = new TensorBuffer(x.shape, x.dtype);\n    const xBuf = backend.bufferSync(x);\n    for (let i = 0; i < outBuf.size; i++) {\n        const outLoc = outBuf.indexToLoc(i);\n        const inLoc = outLoc.slice();\n        $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n        outBuf.set(xBuf.get(...inLoc), ...outLoc);\n    }\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nexport const reverseConfig = {\n    kernelName: Reverse,\n    backendName: 'cpu',\n    kernelFunc: reverse\n};\n//# sourceMappingURL=Reverse.js.map"]},"metadata":{},"sourceType":"module"}