{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount } from '@tensorflow/tfjs-core';\nimport { bincountImpl, bincountReduceImpl } from './Bincount_impl';\nexport function denseBincount(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      weights = inputs.weights;\n  var size = attrs.size,\n      binaryOutput = attrs.binaryOutput;\n\n  if (x.shape.length === 1) {\n    var xVals = backend.data.get(x.dataId).values;\n    var weightsVals = backend.data.get(weights.dataId).values;\n    var outVals = bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    var xBuf = backend.bufferSync(x);\n    var weightsBuf = backend.bufferSync(weights);\n    var outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\"Error in denseBincount: input must be at most rank 2, but got rank\" + \"\".concat(x.shape.length, \".\"));\n}\nexport var denseBincountConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount\n};","map":{"version":3,"sources":["../../src/kernels/DenseBincount.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,aAAR,QAAuH,uBAAvH;AAGA,SAAQ,YAAR,EAAsB,kBAAtB,QAA+C,iBAA/C;AAEA,OAAM,SAAU,aAAV,CAAwB,IAAxB,EAIL;AAAA,MACQ,MADR,GACkC,IADlC,CACQ,MADR;AAAA,MACgB,OADhB,GACkC,IADlC,CACgB,OADhB;AAAA,MACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,MAEQ,CAFR,GAEsB,MAFtB,CAEQ,CAFR;AAAA,MAEW,OAFX,GAEsB,MAFtB,CAEW,OAFX;AAAA,MAGQ,IAHR,GAG8B,KAH9B,CAGQ,IAHR;AAAA,MAGc,YAHd,GAG8B,KAH9B,CAGc,YAHd;;AAKC,MAAI,CAAC,CAAC,KAAF,CAAQ,MAAR,KAAmB,CAAvB,EAA0B;AACxB,QAAM,KAAK,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAAzC;AACA,QAAM,WAAW,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,OAAO,CAAC,MAAzB,EAAiC,MAArD;AAEA,QAAM,OAAO,GACT,YAAY,CAAC,KAAD,EAAQ,WAAR,EAAqB,OAAO,CAAC,KAA7B,EAAoC,OAAO,CAAC,KAA5C,EAAmD,IAAnD,CADhB;AAGA,WAAO,OAAO,CAAC,cAAR,CAAuB,CAAC,IAAD,CAAvB,EAA+B,OAAO,CAAC,KAAvC,EAA8C,OAA9C,CAAP;AACD,GARD,MAQO,IAAI,CAAC,CAAC,KAAF,CAAQ,MAAR,KAAmB,CAAvB,EAA0B;AAC/B,QAAM,IAAI,GAAG,OAAO,CAAC,UAAR,CAAmB,CAAnB,CAAb;AACA,QAAM,UAAU,GAAG,OAAO,CAAC,UAAR,CAAmB,OAAnB,CAAnB;AAEA,QAAM,MAAM,GAAG,kBAAkB,CAAC,IAAD,EAAO,UAAP,EAAmB,IAAnB,EAAyB,YAAzB,CAAjC;AAEA,WAAO,OAAO,CAAC,cAAR,CAAuB,MAAM,CAAC,KAA9B,EAAqC,OAAO,CAAC,KAA7C,EAAoD,MAAM,CAAC,MAA3D,CAAP;AACD;;AAED,QAAM,IAAI,KAAJ,CACF,iFACG,CAAC,CAAC,KAAF,CAAQ,MADX,MADE,CAAN;AAGD;AAED,OAAO,IAAM,mBAAmB,GAAiB;AAC/C,EAAA,UAAU,EAAE,aADmC;AAE/C,EAAA,WAAW,EAAE,KAFkC;AAG/C,EAAA,UAAU,EAAE;AAHmC,CAA1C","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount } from '@tensorflow/tfjs-core';\nimport { bincountImpl, bincountReduceImpl } from './Bincount_impl';\nexport function denseBincount(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, weights } = inputs;\n    const { size, binaryOutput } = attrs;\n    if (x.shape.length === 1) {\n        const xVals = backend.data.get(x.dataId).values;\n        const weightsVals = backend.data.get(weights.dataId).values;\n        const outVals = bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n        return backend.makeTensorInfo([size], weights.dtype, outVals);\n    }\n    else if (x.shape.length === 2) {\n        const xBuf = backend.bufferSync(x);\n        const weightsBuf = backend.bufferSync(weights);\n        const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n        return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n    }\n    throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` +\n        `${x.shape.length}.`);\n}\nexport const denseBincountConfig = {\n    kernelName: DenseBincount,\n    backendName: 'cpu',\n    kernelFunc: denseBincount\n};\n//# sourceMappingURL=DenseBincount.js.map"]},"metadata":{},"sourceType":"module"}