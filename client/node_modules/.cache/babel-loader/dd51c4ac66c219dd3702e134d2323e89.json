{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n\nfunction nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n  if (iouThreshold == null) {\n    iouThreshold = 0.5;\n  }\n\n  if (scoreThreshold == null) {\n    scoreThreshold = Number.NEGATIVE_INFINITY;\n  }\n\n  if (softNmsSigma == null) {\n    softNmsSigma = 0.0;\n  }\n\n  const numBoxes = boxes.shape[0];\n  maxOutputSize = Math.min(maxOutputSize, numBoxes);\n  util.assert(0 <= iouThreshold && iouThreshold <= 1, () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n  util.assert(boxes.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n  util.assert(boxes.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n  util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');\n  util.assert(scores.shape[0] === numBoxes, () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` + `but was ${scores.shape[0]}`);\n  util.assert(0 <= softNmsSigma && softNmsSigma <= 1, () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);\n  return {\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport { nonMaxSuppSanityCheck };","map":{"version":3,"sources":["../../src/ops/nonmax_util.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,OAAO,KAAK,IAAZ,MAAsB,SAAtB;;AAEA,SAAS,qBAAT,CACI,KADJ,EACqB,MADrB,EACuC,aADvC,EAEI,YAFJ,EAE0B,cAF1B,EAEkD,YAFlD,EAEuE;AAMrE,MAAI,YAAY,IAAI,IAApB,EAA0B;AACxB,IAAA,YAAY,GAAG,GAAf;AACD;;AACD,MAAI,cAAc,IAAI,IAAtB,EAA4B;AAC1B,IAAA,cAAc,GAAG,MAAM,CAAC,iBAAxB;AACD;;AACD,MAAI,YAAY,IAAI,IAApB,EAA0B;AACxB,IAAA,YAAY,GAAG,GAAf;AACD;;AAED,QAAM,QAAQ,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAjB;AACA,EAAA,aAAa,GAAG,IAAI,CAAC,GAAL,CAAS,aAAT,EAAwB,QAAxB,CAAhB;AAEA,EAAA,IAAI,CAAC,MAAL,CACI,KAAK,YAAL,IAAqB,YAAY,IAAI,CADzC,EAEI,MAAM,4CAA4C,YAAY,GAFlE;AAGA,EAAA,IAAI,CAAC,MAAL,CACI,KAAK,CAAC,IAAN,KAAe,CADnB,EAEI,MAAM,+CAA+C,KAAK,CAAC,IAAI,GAFnE;AAGA,EAAA,IAAI,CAAC,MAAL,CACI,KAAK,CAAC,KAAN,CAAY,CAAZ,MAAmB,CADvB,EAEI,MACI,oDAAoD,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAc,EAH1E;AAIA,EAAA,IAAI,CAAC,MAAL,CAAY,MAAM,CAAC,IAAP,KAAgB,CAA5B,EAA+B,MAAM,4BAArC;AACA,EAAA,IAAI,CAAC,MAAL,CACI,MAAM,CAAC,KAAP,CAAa,CAAb,MAAoB,QADxB,EAEI,MAAM,sDAAsD,QAAQ,IAA9D,GACF,WAAW,MAAM,CAAC,KAAP,CAAa,CAAb,CAAe,EAHlC;AAIA,EAAA,IAAI,CAAC,MAAL,CACI,KAAK,YAAL,IAAqB,YAAY,IAAI,CADzC,EAEI,MAAM,4CAA4C,YAAY,GAFlE;AAGA,SAAO;AAAC,IAAA,aAAD;AAAgB,IAAA,YAAhB;AAA8B,IAAA,cAA9B;AAA8C,IAAA;AAA9C,GAAP;AACD;;AAED,SAAQ,qBAAR","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\nfunction nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n    if (iouThreshold == null) {\n        iouThreshold = 0.5;\n    }\n    if (scoreThreshold == null) {\n        scoreThreshold = Number.NEGATIVE_INFINITY;\n    }\n    if (softNmsSigma == null) {\n        softNmsSigma = 0.0;\n    }\n    const numBoxes = boxes.shape[0];\n    maxOutputSize = Math.min(maxOutputSize, numBoxes);\n    util.assert(0 <= iouThreshold && iouThreshold <= 1, () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n    util.assert(boxes.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n    util.assert(boxes.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n    util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');\n    util.assert(scores.shape[0] === numBoxes, () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` +\n        `but was ${scores.shape[0]}`);\n    util.assert(0 <= softNmsSigma && softNmsSigma <= 1, () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);\n    return { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };\n}\nexport { nonMaxSuppSanityCheck };\n//# sourceMappingURL=nonmax_util.js.map"]},"metadata":{},"sourceType":"module"}