{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function batchNorm(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    scale,\n    offset,\n    mean,\n    variance\n  } = inputs;\n  util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.');\n  util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.');\n  util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.');\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n  let {\n    varianceEpsilon\n  } = attrs;\n\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values;\n  const mVals = backend.data.get(mean.dataId).values;\n  const varVals = backend.data.get(variance.dataId).values;\n  const sVals = scale ? backend.data.get(scale.dataId).values : new Float32Array([1]);\n  const offVals = offset ? backend.data.get(offset.dataId).values : new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] + (xVals[i] - mVals[mi++]) * sVals[si++] / Math.sqrt(varVals[vi++] + varianceEpsilon);\n\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n\n    if (si >= sValsLength) {\n      si = 0;\n    }\n\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\nexport const batchNormConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm\n};","map":{"version":3,"sources":["../../src/kernels/BatchNorm.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function batchNorm(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, scale, offset, mean, variance } = inputs;\n    util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' +\n        'equal ranks.');\n    util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' +\n        'equal ranks.');\n    util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' +\n        'equal ranks.');\n    assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n    let { varianceEpsilon } = attrs;\n    if (varianceEpsilon == null) {\n        varianceEpsilon = 0.001;\n    }\n    const xVals = backend.data.get(x.dataId).values;\n    const mVals = backend.data.get(mean.dataId).values;\n    const varVals = backend.data.get(variance.dataId).values;\n    const sVals = scale ? backend.data.get(scale.dataId).values :\n        new Float32Array([1]);\n    const offVals = offset ?\n        backend.data.get(offset.dataId).values :\n        new Float32Array([0]);\n    const outVals = new Float32Array(xVals.length);\n    const offValsLength = offVals.length;\n    const sValsLength = sVals.length;\n    const varValsLength = varVals.length;\n    const mValsLength = mVals.length;\n    let offi = 0;\n    let mi = 0;\n    let si = 0;\n    let vi = 0;\n    for (let i = 0; i < xVals.length; ++i) {\n        outVals[i] = offVals[offi++] +\n            (xVals[i] - mVals[mi++]) * sVals[si++] /\n                Math.sqrt(varVals[vi++] + varianceEpsilon);\n        if (offi >= offValsLength) {\n            offi = 0;\n        }\n        if (mi >= mValsLength) {\n            mi = 0;\n        }\n        if (si >= sValsLength) {\n            si = 0;\n        }\n        if (vi >= varValsLength) {\n            vi = 0;\n        }\n    }\n    return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\nexport const batchNormConfig = {\n    kernelName: FusedBatchNorm,\n    backendName: 'cpu',\n    kernelFunc: batchNorm,\n};\n//# sourceMappingURL=BatchNorm.js.map"]},"metadata":{},"sourceType":"module"}