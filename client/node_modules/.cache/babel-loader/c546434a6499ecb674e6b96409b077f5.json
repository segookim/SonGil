{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Gets the new shape of the input Tensor after it's been reshaped\n * to:\n * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),\n * inputShape[1], ..., inputShape[N-1]]\n *\n * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshaped(inputShape, blockShape, prod, batchToSpace = true) {\n  let reshaped = [];\n\n  if (batchToSpace) {\n    reshaped = reshaped.concat(blockShape.slice(0));\n    reshaped.push(inputShape[0] / prod);\n    reshaped = reshaped.concat(inputShape.slice(1));\n  } else {\n    reshaped = reshaped.concat(inputShape[0]);\n    const spatialLength = blockShape.length;\n\n    for (let i = 0; i < spatialLength; ++i) {\n      reshaped = reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);\n    }\n\n    reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));\n  }\n\n  return reshaped;\n}\n/**\n * Gets the permutation that will transpose the dimensions of the\n * reshaped tensor to shape:\n *\n * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,\n * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\n\nexport function getPermuted(reshapedRank, blockShapeRank, batchToSpace = true) {\n  const permuted = [];\n\n  if (batchToSpace) {\n    permuted.push(blockShapeRank);\n\n    for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {\n      if (i <= 2 * blockShapeRank) {\n        permuted.push(i);\n        permuted.push(i - (blockShapeRank + 1));\n      } else {\n        permuted.push(i);\n      }\n    }\n  } else {\n    const permutedBeforeBatch = [];\n    const permutedAfterBatch = [];\n\n    for (let i = 1; i < reshapedRank; ++i) {\n      if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {\n        permutedAfterBatch.push(i);\n      } else {\n        permutedBeforeBatch.push(i);\n      }\n    }\n\n    permuted.push(...permutedBeforeBatch);\n    permuted.push(0);\n    permuted.push(...permutedAfterBatch);\n  }\n\n  return permuted;\n}\n/**\n * Gets the shape of the reshaped and permuted input Tensor before any cropping\n * is applied.  The new shape will be:\n *\n * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,\n * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\n\nexport function getReshapedPermuted(inputShape, blockShape, prod, batchToSpace = true) {\n  const reshapedPermuted = [];\n\n  if (batchToSpace) {\n    reshapedPermuted.push(inputShape[0] / prod);\n  } else {\n    reshapedPermuted.push(inputShape[0] * prod);\n  }\n\n  for (let i = 1; i < inputShape.length; ++i) {\n    if (i <= blockShape.length) {\n      if (batchToSpace) {\n        reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);\n      } else {\n        reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);\n      }\n    } else {\n      reshapedPermuted.push(inputShape[i]);\n    }\n  }\n\n  return reshapedPermuted;\n}\n/**\n * Converts the crops argument into the beginning coordinates of a slice\n * operation.\n */\n\nexport function getSliceBeginCoords(crops, blockShape) {\n  const sliceBeginCoords = [0];\n\n  for (let i = 0; i < blockShape; ++i) {\n    sliceBeginCoords.push(crops[i][0]);\n  }\n\n  return sliceBeginCoords;\n}\n/**\n * Converts the crops argument into the size of a slice operation.  When\n * combined with getSliceBeginCoords this function allows the reshaped and\n * permuted Tensor to be cropped to its final output shape of:\n *\n * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,\n * inputShape[M] * blockShape[M-1] -crops[M-1,0] -\n * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\n\nexport function getSliceSize(uncroppedShape, crops, blockShape) {\n  const sliceSize = uncroppedShape.slice(0, 1);\n\n  for (let i = 0; i < blockShape; ++i) {\n    sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);\n  }\n\n  return sliceSize;\n}","map":{"version":3,"sources":["../../src/ops/array_ops_util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Gets the new shape of the input Tensor after it's been reshaped\n * to:\n * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),\n * inputShape[1], ..., inputShape[N-1]]\n *\n * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshaped(inputShape, blockShape, prod, batchToSpace = true) {\n    let reshaped = [];\n    if (batchToSpace) {\n        reshaped = reshaped.concat(blockShape.slice(0));\n        reshaped.push(inputShape[0] / prod);\n        reshaped = reshaped.concat(inputShape.slice(1));\n    }\n    else {\n        reshaped = reshaped.concat(inputShape[0]);\n        const spatialLength = blockShape.length;\n        for (let i = 0; i < spatialLength; ++i) {\n            reshaped =\n                reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);\n        }\n        reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));\n    }\n    return reshaped;\n}\n/**\n * Gets the permutation that will transpose the dimensions of the\n * reshaped tensor to shape:\n *\n * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,\n * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getPermuted(reshapedRank, blockShapeRank, batchToSpace = true) {\n    const permuted = [];\n    if (batchToSpace) {\n        permuted.push(blockShapeRank);\n        for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {\n            if (i <= 2 * blockShapeRank) {\n                permuted.push(i);\n                permuted.push(i - (blockShapeRank + 1));\n            }\n            else {\n                permuted.push(i);\n            }\n        }\n    }\n    else {\n        const permutedBeforeBatch = [];\n        const permutedAfterBatch = [];\n        for (let i = 1; i < reshapedRank; ++i) {\n            if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {\n                permutedAfterBatch.push(i);\n            }\n            else {\n                permutedBeforeBatch.push(i);\n            }\n        }\n        permuted.push(...permutedBeforeBatch);\n        permuted.push(0);\n        permuted.push(...permutedAfterBatch);\n    }\n    return permuted;\n}\n/**\n * Gets the shape of the reshaped and permuted input Tensor before any cropping\n * is applied.  The new shape will be:\n *\n * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,\n * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshapedPermuted(inputShape, blockShape, prod, batchToSpace = true) {\n    const reshapedPermuted = [];\n    if (batchToSpace) {\n        reshapedPermuted.push(inputShape[0] / prod);\n    }\n    else {\n        reshapedPermuted.push(inputShape[0] * prod);\n    }\n    for (let i = 1; i < inputShape.length; ++i) {\n        if (i <= blockShape.length) {\n            if (batchToSpace) {\n                reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);\n            }\n            else {\n                reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);\n            }\n        }\n        else {\n            reshapedPermuted.push(inputShape[i]);\n        }\n    }\n    return reshapedPermuted;\n}\n/**\n * Converts the crops argument into the beginning coordinates of a slice\n * operation.\n */\nexport function getSliceBeginCoords(crops, blockShape) {\n    const sliceBeginCoords = [0];\n    for (let i = 0; i < blockShape; ++i) {\n        sliceBeginCoords.push(crops[i][0]);\n    }\n    return sliceBeginCoords;\n}\n/**\n * Converts the crops argument into the size of a slice operation.  When\n * combined with getSliceBeginCoords this function allows the reshaped and\n * permuted Tensor to be cropped to its final output shape of:\n *\n * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,\n * inputShape[M] * blockShape[M-1] -crops[M-1,0] -\n * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getSliceSize(uncroppedShape, crops, blockShape) {\n    const sliceSize = uncroppedShape.slice(0, 1);\n    for (let i = 0; i < blockShape; ++i) {\n        sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);\n    }\n    return sliceSize;\n}\n//# sourceMappingURL=array_ops_util.js.map"]},"metadata":{},"sourceType":"module"}