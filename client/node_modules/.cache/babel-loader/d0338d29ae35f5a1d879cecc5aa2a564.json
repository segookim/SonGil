{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { DataSource } from '../datasource';\nimport { FileChunkIterator } from '../iterators/file_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\n/**\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\n * chunks.\n */\n\nexport var FileDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(FileDataSource, _DataSource);\n\n  var _super = _createSuper(FileDataSource);\n\n  /**\n   * Create a `FileDataSource`.\n   *\n   * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\n   *     read. Local file only works in node environment.\n   * @param options Options passed to the underlying `FileChunkIterator`s,\n   *   such as {chunksize: 1024}.\n   */\n  function FileDataSource(input) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, FileDataSource);\n\n    _this = _super.call(this);\n    _this.input = input;\n    _this.options = options;\n    return _this;\n  }\n\n  _createClass(FileDataSource, [{\n    key: \"iterator\",\n    value: function () {\n      var _iterator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var fs;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (isLocalPath(this.input) && env().get('IS_NODE')) {\n                  // tslint:disable-next-line:no-require-imports\n                  fs = require('fs');\n                  this.input = fs.readFileSync(this.input.substr(7));\n                } // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n                // with file in browser.\n\n\n                return _context.abrupt(\"return\", new FileChunkIterator(this.input, this.options));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function iterator() {\n        return _iterator.apply(this, arguments);\n      }\n\n      return iterator;\n    }()\n  }]);\n\n  return FileDataSource;\n}(DataSource);","map":{"version":3,"sources":["../../src/sources/file_data_source.ts"],"names":[],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,GAAR,QAAkB,uBAAlB;AACA,SAAQ,UAAR,QAAyB,eAAzB;AAEA,SAAQ,iBAAR,QAA0D,kCAA1D;AAEA,SAAQ,WAAR,QAA0B,qBAA1B;AAEA;;;AAGG;;AACH,WAAa,cAAb;AAAA;;AAAA;;AACE;;;;;;;AAOG;AACH,0BACc,KADd,EAE6D;AAAA;;AAAA,QAAtC,OAAsC,uEAAF,EAAE;;AAAA;;AAC3D;AAFY,UAAA,KAAA,GAAA,KAAA;AACS,UAAA,OAAA,GAAA,OAAA;AAAsC;AAE5D;;AAbH;AAAA;AAAA;AAAA,+EAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,oBAAI,WAAW,CAAC,KAAK,KAAN,CAAX,IAA2B,GAAG,GAAG,GAAN,CAAU,SAAV,CAA/B,EAAqD;AACnD;AACM,kBAAA,EAF6C,GAExC,OAAO,CAAC,IAAD,CAFiC;AAGnD,uBAAK,KAAL,GAAa,EAAE,CAAC,YAAH,CAAiB,KAAK,KAAL,CAAsB,MAAtB,CAA6B,CAA7B,CAAjB,CAAb;AACD,iBALH,CAME;AACA;;;AAPF,iDAQS,IAAI,iBAAJ,CAAsB,KAAK,KAA3B,EAAiD,KAAK,OAAtD,CART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAfF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAoC,UAApC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { DataSource } from '../datasource';\nimport { FileChunkIterator } from '../iterators/file_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\n/**\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\n * chunks.\n */\nexport class FileDataSource extends DataSource {\n    /**\n     * Create a `FileDataSource`.\n     *\n     * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\n     *     read. Local file only works in node environment.\n     * @param options Options passed to the underlying `FileChunkIterator`s,\n     *   such as {chunksize: 1024}.\n     */\n    constructor(input, options = {}) {\n        super();\n        this.input = input;\n        this.options = options;\n    }\n    async iterator() {\n        if (isLocalPath(this.input) && env().get('IS_NODE')) {\n            // tslint:disable-next-line:no-require-imports\n            const fs = require('fs');\n            this.input = fs.readFileSync(this.input.substr(7));\n        }\n        // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n        // with file in browser.\n        return new FileChunkIterator(this.input, this.options);\n    }\n}\n//# sourceMappingURL=file_data_source.js.map"]},"metadata":{},"sourceType":"module"}