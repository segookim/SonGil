{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { gatherV2Impl } from './GatherV2_impl';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    indices\n  } = inputs;\n  const {\n    axis,\n    batchDims\n  } = attrs;\n  assertNotComplex([x, indices], 'gatherV2');\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, $batchDims);\n  const flattenX = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize, shapeInfo.sliceSize]\n    }\n  });\n  const flattenIndex = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]\n    }\n  });\n  const flattenOutputShape = [shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize, shapeInfo.sliceSize];\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n  return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\nexport const gatherV2Config = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2\n};","map":{"version":3,"sources":["../../src/kernels/GatherV2.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsB,QAAtB,EAAqG,IAArG,QAAgH,uBAAhH;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AACA,SAAQ,YAAR,QAA2B,iBAA3B;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAU,QAAV,CAAmB,IAAnB,EAIL;AACC,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA,OAAT;AAAkB,IAAA;AAAlB,MAA2B,IAAjC;AACA,QAAM;AAAC,IAAA,CAAD;AAAI,IAAA;AAAJ,MAAe,MAArB;AACA,QAAM;AAAC,IAAA,IAAD;AAAO,IAAA;AAAP,MAAoB,KAA1B;AAEA,EAAA,gBAAgB,CAAC,CAAC,CAAD,EAAI,OAAJ,CAAD,EAAe,UAAf,CAAhB;AAEA,MAAI,UAAU,GAAG,SAAjB;;AAEA,MAAI,SAAS,IAAI,IAAjB,EAAuB;AACrB,IAAA,UAAU,GAAG,CAAb;AACD;;AAED,QAAM,WAAW,GAAG,IAAI,CAAC,aAAL,CAAmB,OAAO,CAAC,KAA3B,CAApB;AAEA,QAAM,UAAU,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,CAAC,CAAC,KAA5B,EAAmC,CAAnC,CAAnB;AACA,QAAM,SAAS,GAAG,YAAY,CAAC,YAAb,CAA0B,wBAA1B,CACd,CADc,EACX,OADW,EACF,UADE,EACU,UADV,CAAlB;AAGA,QAAM,QAAQ,GAAG,OAAO,CAAC;AACvB,IAAA,MAAM,EAAE;AAAC,MAAA;AAAD,KADe;AAEvB,IAAA,OAFuB;AAGvB,IAAA,KAAK,EAAE;AACL,MAAA,KAAK,EAAE,CACL,SAAS,CAAC,SADL,EACgB,SAAS,CAAC,SAD1B,EACqC,SAAS,CAAC,OAD/C,EAEL,SAAS,CAAC,SAFL;AADF;AAHgB,GAAD,CAAxB;AAWA,QAAM,YAAY,GAAG,OAAO,CAAC;AAC3B,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KADmB;AAE3B,IAAA,OAF2B;AAG3B,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE,CAAC,SAAS,CAAC,SAAX,EAAsB,WAAW,GAAG,SAAS,CAAC,SAA9C;AAAR;AAHoB,GAAD,CAA5B;AAMA,QAAM,kBAAkB,GAAG,CACzB,SAAS,CAAC,SADe,EACJ,SAAS,CAAC,SADN,EACiB,WAAW,GAAG,SAAS,CAAC,SADzC,EAEzB,SAAS,CAAC,SAFe,CAA3B;AAKA,QAAM,UAAU,GAAG,OAAO,CAAC,UAAR,CAAmB,YAAnB,CAAnB;AACA,QAAM,IAAI,GAAG,OAAO,CAAC,UAAR,CAAmB,QAAnB,CAAb;AACA,QAAM,MAAM,GAAG,YAAY,CAAC,IAAD,EAAO,UAAP,EAAmB,kBAAnB,CAA3B;AAEA,EAAA,OAAO,CAAC,6BAAR,CAAsC,QAAtC;AACA,EAAA,OAAO,CAAC,6BAAR,CAAsC,YAAtC;AAEA,SAAO,OAAO,CAAC,cAAR,CACH,SAAS,CAAC,WADP,EACoB,MAAM,CAAC,KAD3B,EACkC,MAAM,CAAC,MADzC,CAAP;AAED;AAED,OAAO,MAAM,cAAc,GAAiB;AAC1C,EAAA,UAAU,EAAE,QAD8B;AAE1C,EAAA,WAAW,EAAE,KAF6B;AAG1C,EAAA,UAAU,EAAE;AAH8B,CAArC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { gatherV2Impl } from './GatherV2_impl';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, indices } = inputs;\n    const { axis, batchDims } = attrs;\n    assertNotComplex([x, indices], 'gatherV2');\n    let $batchDims = batchDims;\n    if (batchDims == null) {\n        $batchDims = 0;\n    }\n    const indicesSize = util.sizeFromShape(indices.shape);\n    const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n    const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, $batchDims);\n    const flattenX = reshape({\n        inputs: { x },\n        backend,\n        attrs: {\n            shape: [\n                shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n                shapeInfo.sliceSize\n            ]\n        }\n    });\n    const flattenIndex = reshape({\n        inputs: { x: indices },\n        backend,\n        attrs: { shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize] }\n    });\n    const flattenOutputShape = [\n        shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n        shapeInfo.sliceSize\n    ];\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n    backend.disposeIntermediateTensorInfo(flattenX);\n    backend.disposeIntermediateTensorInfo(flattenIndex);\n    return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\nexport const gatherV2Config = {\n    kernelName: GatherV2,\n    backendName: 'cpu',\n    kernelFunc: gatherV2\n};\n//# sourceMappingURL=GatherV2.js.map"]},"metadata":{},"sourceType":"module"}