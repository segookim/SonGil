{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { DataSource } from '../datasource';\nimport { urlChunkIterator } from '../iterators/url_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\nimport { FileDataSource } from './file_data_source';\n/*\n * Represents a URL readable as a stream of binary data chunks.\n */\n\nexport class URLDataSource extends DataSource {\n  /**\n   * Create a `URLDataSource`.\n   *\n   * @param url A source URL string, or a `Request` object.\n   * @param options Options passed to the underlying `FileChunkIterator`s,\n   *   such as {chunksize: 1024}.\n   */\n  constructor(url, fileOptions = {}) {\n    super();\n    this.url = url;\n    this.fileOptions = fileOptions;\n  } // TODO(soergel): provide appropriate caching options.  Currently this\n  // will download the URL anew for each call to iterator().  Since we have\n  // to treat the downloaded file as a blob/buffer anyway, we may as well retain\n  // it-- but that raises GC issues.  Also we may want a persistent disk cache.\n\n\n  async iterator() {\n    if (isLocalPath(this.url)) {\n      return new FileDataSource(this.url, this.fileOptions).iterator();\n    } else {\n      return urlChunkIterator(this.url, this.fileOptions);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../src/sources/url_data_source.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,UAAR,QAAyB,eAAzB;AAGA,SAAQ,gBAAR,QAA+B,iCAA/B;AACA,SAAQ,WAAR,QAA0B,qBAA1B;AACA,SAAQ,cAAR,QAA6B,oBAA7B;AAEA;;AAEG;;AACH,OAAM,MAAO,aAAP,SAA6B,UAA7B,CAAuC;AAC3C;;;;;;AAMG;AACH,EAAA,WAAA,CACuB,GADvB,EAEuB,WAAA,GAAwC,EAF/D,EAEiE;AAC/D;AAFqB,SAAA,GAAA,GAAA,GAAA;AACA,SAAA,WAAA,GAAA,WAAA;AAEtB,GAZ0C,CAc3C;AACA;AACA;AACA;;;AACc,QAAR,QAAQ,GAAA;AACZ,QAAI,WAAW,CAAC,KAAK,GAAN,CAAf,EAA2B;AACzB,aAAQ,IAAI,cAAJ,CAAmB,KAAK,GAAxB,EAAuC,KAAK,WAA5C,CAAD,CACF,QADE,EAAP;AAED,KAHD,MAGO;AACL,aAAO,gBAAgB,CAAC,KAAK,GAAN,EAAW,KAAK,WAAhB,CAAvB;AACD;AACF;;AAzB0C","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { DataSource } from '../datasource';\nimport { urlChunkIterator } from '../iterators/url_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\nimport { FileDataSource } from './file_data_source';\n/*\n * Represents a URL readable as a stream of binary data chunks.\n */\nexport class URLDataSource extends DataSource {\n    /**\n     * Create a `URLDataSource`.\n     *\n     * @param url A source URL string, or a `Request` object.\n     * @param options Options passed to the underlying `FileChunkIterator`s,\n     *   such as {chunksize: 1024}.\n     */\n    constructor(url, fileOptions = {}) {\n        super();\n        this.url = url;\n        this.fileOptions = fileOptions;\n    }\n    // TODO(soergel): provide appropriate caching options.  Currently this\n    // will download the URL anew for each call to iterator().  Since we have\n    // to treat the downloaded file as a blob/buffer anyway, we may as well retain\n    // it-- but that raises GC issues.  Also we may want a persistent disk cache.\n    async iterator() {\n        if (isLocalPath(this.url)) {\n            return (new FileDataSource(this.url, this.fileOptions))\n                .iterator();\n        }\n        else {\n            return urlChunkIterator(this.url, this.fileOptions);\n        }\n    }\n}\n//# sourceMappingURL=url_data_source.js.map"]},"metadata":{},"sourceType":"module"}