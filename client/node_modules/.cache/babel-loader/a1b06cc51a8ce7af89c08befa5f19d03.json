{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AddN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n *\n * tf.addN([a, b, c]).print();\n * ```\n * @param tensors A list of tensors with the same shape and dtype.\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\n\nfunction addN_(tensors) {\n  util.assert(Array.isArray(tensors), () => 'The argument passed to tf.addN() must be a list of tensors');\n  util.assert(tensors.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ` + `${tensors.length}`);\n  const $tensors = tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));\n  const firstTensor = $tensors[0];\n  $tensors.forEach(t => {\n    if (t.dtype !== firstTensor.dtype) {\n      throw new Error('All tensors passed to tf.addN() must have the same dtype');\n    }\n  });\n  $tensors.forEach(t => {\n    if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n      throw new Error('All tensors passed to tf.addN() must have the same shape');\n    }\n  });\n  const inputs = $tensors;\n  return ENGINE.runKernel(AddN, inputs);\n}\n\nexport const addN = op({\n  addN_\n});","map":{"version":3,"sources":["../../src/ops/add_n.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,IAAR,QAA+B,iBAA/B;AAGA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;AAYG;;AACH,SAAS,KAAT,CAAiC,OAAjC,EAA6D;AAC3D,EAAA,IAAI,CAAC,MAAL,CACI,KAAK,CAAC,OAAN,CAAc,OAAd,CADJ,EAEI,MAAM,4DAFV;AAGA,EAAA,IAAI,CAAC,MAAL,CACI,OAAO,CAAC,MAAR,IAAkB,CADtB,EAEI,MAAM,sDAAA,GACF,GAAG,OAAO,CAAC,MAAM,EAHzB;AAKA,QAAM,QAAQ,GACV,OAAO,CAAC,GAAR,CAAY,CAAC,CAAD,EAAI,CAAJ,KAAU,eAAe,CAAC,CAAD,EAAI,UAAU,CAAC,EAAf,EAAmB,MAAnB,CAArC,CADJ;AAGA,QAAM,WAAW,GAAG,QAAQ,CAAC,CAAD,CAA5B;AACA,EAAA,QAAQ,CAAC,OAAT,CAAiB,CAAC,IAAG;AACnB,QAAI,CAAC,CAAC,KAAF,KAAY,WAAW,CAAC,KAA5B,EAAmC;AACjC,YAAM,IAAI,KAAJ,CACF,0DADE,CAAN;AAED;AACF,GALD;AAOA,EAAA,QAAQ,CAAC,OAAT,CAAiB,CAAC,IAAG;AACnB,QAAI,CAAC,IAAI,CAAC,WAAL,CAAiB,CAAC,CAAC,KAAnB,EAA0B,WAAW,CAAC,KAAtC,CAAL,EAAmD;AACjD,YAAM,IAAI,KAAJ,CACF,0DADE,CAAN;AAED;AACF,GALD;AAOA,QAAM,MAAM,GAAe,QAA3B;AAEA,SAAO,MAAM,CAAC,SAAP,CAAiB,IAAjB,EAAuB,MAAvB,CAAP;AACD;;AAED,OAAO,MAAM,IAAI,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAf","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AddN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n *\n * tf.addN([a, b, c]).print();\n * ```\n * @param tensors A list of tensors with the same shape and dtype.\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction addN_(tensors) {\n    util.assert(Array.isArray(tensors), () => 'The argument passed to tf.addN() must be a list of tensors');\n    util.assert(tensors.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ` +\n        `${tensors.length}`);\n    const $tensors = tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));\n    const firstTensor = $tensors[0];\n    $tensors.forEach(t => {\n        if (t.dtype !== firstTensor.dtype) {\n            throw new Error('All tensors passed to tf.addN() must have the same dtype');\n        }\n    });\n    $tensors.forEach(t => {\n        if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n            throw new Error('All tensors passed to tf.addN() must have the same shape');\n        }\n    });\n    const inputs = $tensors;\n    return ENGINE.runKernel(AddN, inputs);\n}\nexport const addN = op({ addN_ });\n//# sourceMappingURL=add_n.js.map"]},"metadata":{},"sourceType":"module"}