{"ast":null,"code":"import _slicedToArray from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nvar whereImpl = kernel_impls.whereImpl;\nexport var EPSILON_FLOAT32 = 1e-7;\nexport var EPSILON_FLOAT16 = 1e-4;\nvar binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n} // Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\n\nvar CPU_HANDOFF_SIZE_THRESHOLD = 128; // Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\n\nvar BEFORE_PAGING_CONSTANT = 600;\n\nfunction numMBBeforeWarning() {\n  if (env().global.screen == null) {\n    return 1024; // 1 GB.\n  }\n\n  return env().global.screen.height * env().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport var MathBackendWebGL = /*#__PURE__*/function (_KernelBackend) {\n  _inherits(MathBackendWebGL, _KernelBackend);\n\n  var _super = _createSuper(MathBackendWebGL);\n\n  function MathBackendWebGL(gpgpu) {\n    var _this;\n\n    _classCallCheck(this, MathBackendWebGL);\n\n    _this = _super.call(this); // Maps data ids that have a pending read operation, to list of subscribers.\n\n    _this.pendingRead = new WeakMap(); // List of data ids that are scheduled for disposal, but are waiting on a\n    // pending read operation.\n\n    _this.pendingDisposal = new WeakSet(); // Used to count the number of 'shallow' sliced tensors that point to the\n    // same data id.\n\n    _this.dataRefCount = new WeakMap();\n    _this.numBytesInGPU = 0; // Accumulated time spent (including blocking) in uploading data to webgl.\n\n    _this.uploadWaitMs = 0; // Accumulated time spent (including blocking in downloading data from webgl.\n\n    _this.downloadWaitMs = 0;\n    _this.warnedAboutMemory = false;\n    _this.warnedAboutCPUBackend = false;\n    _this.pendingDeletes = 0;\n    _this.disposed = false;\n\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      var gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      _this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      _this.gpgpu = new GPGPUContext(gl);\n      _this.canvas = gl.canvas;\n      _this.gpgpuCreatedLocally = true;\n    } else {\n      _this.gpgpu = gpgpu;\n      _this.binaryCache = {};\n      _this.gpgpuCreatedLocally = false;\n      _this.canvas = gpgpu.gl.canvas;\n    }\n\n    _this.textureManager = new TextureManager(_this.gpgpu);\n    _this.numMBBeforeWarning = numMBBeforeWarning();\n    _this.texData = new DataStorage(_assertThisInitialized(_this), engine());\n    return _this;\n  }\n\n  _createClass(MathBackendWebGL, [{\n    key: \"nextDataId\",\n    value: function nextDataId() {\n      return MathBackendWebGL.nextDataId++;\n    }\n  }, {\n    key: \"numDataIds\",\n    value: function numDataIds() {\n      return this.texData.numDataIds() + (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) - this.pendingDeletes;\n    }\n  }, {\n    key: \"write\",\n    value: function write(values, shape, dtype) {\n      if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || env().getBool('DEBUG')) {\n        this.checkNumericalProblems(values);\n      }\n\n      if (dtype === 'complex64' && values != null) {\n        throw new Error(\"Cannot write to a complex64 dtype. \" + \"Please use tf.complex(real, imag).\");\n      }\n\n      var dataId = {\n        id: this.nextDataId()\n      };\n      this.texData.set(dataId, {\n        shape: shape,\n        dtype: dtype,\n        values: values,\n        usage: TextureUsage.UPLOAD,\n        refCount: 1\n      });\n      return dataId;\n    }\n    /** Return refCount of a `TensorData`. */\n\n  }, {\n    key: \"refCount\",\n    value: function refCount(dataId) {\n      if (this.texData.has(dataId)) {\n        var tensorData = this.texData.get(dataId);\n        return tensorData.refCount;\n      }\n\n      return 0;\n    }\n    /** Increase refCount of a `TextureData`. */\n\n  }, {\n    key: \"incRef\",\n    value: function incRef(dataId) {\n      var texData = this.texData.get(dataId);\n      texData.refCount++;\n    }\n    /** Decrease refCount of a `TextureData`. */\n\n  }, {\n    key: \"decRef\",\n    value: function decRef(dataId) {\n      if (this.texData.has(dataId)) {\n        var texData = this.texData.get(dataId);\n        texData.refCount--;\n      }\n    }\n  }, {\n    key: \"move\",\n    value: function move(dataId, values, shape, dtype, refCount) {\n      if (env().getBool('DEBUG')) {\n        this.checkNumericalProblems(values);\n      }\n\n      if (dtype === 'complex64') {\n        throw new Error(\"Cannot write to a complex64 dtype. \" + \"Please use tf.complex(real, imag).\");\n      }\n\n      this.texData.set(dataId, {\n        shape: shape,\n        dtype: dtype,\n        values: values,\n        usage: TextureUsage.UPLOAD,\n        refCount: refCount\n      });\n    }\n  }, {\n    key: \"disposeIntermediateTensorInfo\",\n    value: function disposeIntermediateTensorInfo(tensorInfo) {\n      this.disposeData(tensorInfo.dataId);\n    }\n  }, {\n    key: \"readSync\",\n    value: function readSync(dataId) {\n      var texData = this.texData.get(dataId);\n      var values = texData.values,\n          dtype = texData.dtype,\n          complexTensorInfos = texData.complexTensorInfos,\n          slice = texData.slice,\n          shape = texData.shape,\n          isPacked = texData.isPacked; // The presence of `slice` indicates this tensor is a shallow slice of a\n      // different tensor, and is using that original tensor's texture. Run\n      // `clone` in order to copy that texture and read from it.\n\n      if (slice != null) {\n        var program;\n\n        if (isPacked) {\n          program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n        } else {\n          program = new UnaryOpProgram(shape, unary_op.CLONE);\n        }\n\n        var res = this.runWebGLProgram(program, [{\n          dataId: dataId,\n          shape: shape,\n          dtype: dtype\n        }], dtype);\n        var data = this.readSync(res.dataId);\n        this.disposeIntermediateTensorInfo(res);\n        return data;\n      }\n\n      if (values != null) {\n        return this.convertAndCacheOnCPU(dataId);\n      }\n\n      if (dtype === 'string') {\n        return values;\n      }\n\n      var shouldTimeProgram = this.activeTimers != null;\n      var start;\n\n      if (shouldTimeProgram) {\n        start = util.now();\n      }\n\n      var result;\n\n      if (dtype === 'complex64') {\n        var realValues = this.readSync(complexTensorInfos.real.dataId);\n        var imagValues = this.readSync(complexTensorInfos.imag.dataId);\n        result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n      } else {\n        result = this.getValuesFromTexture(dataId);\n      }\n\n      if (shouldTimeProgram) {\n        this.downloadWaitMs += util.now() - start;\n      }\n\n      return this.convertAndCacheOnCPU(dataId, result);\n    }\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dataId) {\n        var _subscribers, texData, values, shape, slice, dtype, complexTensorInfos, isPacked, program, res, data, buffer, tmpDownloadTarget, _this$gpgpu, tmpData, vals, ps, realValues, imagValues, size, dTypeVals, subscribers;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.pendingRead.has(dataId)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _subscribers = this.pendingRead.get(dataId);\n                return _context.abrupt(\"return\", new Promise(function (resolve) {\n                  return _subscribers.push(resolve);\n                }));\n\n              case 3:\n                texData = this.texData.get(dataId);\n                values = texData.values, shape = texData.shape, slice = texData.slice, dtype = texData.dtype, complexTensorInfos = texData.complexTensorInfos, isPacked = texData.isPacked; // The presence of `slice` indicates this tensor is a shallow slice of a\n                // different tensor, and is using that original tensor's texture. Run\n                // `clone` in order to copy that texture and read from it.\n\n                if (!(slice != null)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                if (isPacked) {\n                  program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n                } else {\n                  program = new UnaryOpProgram(shape, unary_op.CLONE);\n                }\n\n                res = this.runWebGLProgram(program, [{\n                  dataId: dataId,\n                  shape: shape,\n                  dtype: dtype\n                }], dtype);\n                data = this.read(res.dataId);\n                this.disposeIntermediateTensorInfo(res);\n                return _context.abrupt(\"return\", data);\n\n              case 11:\n                if (!(values != null)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.convertAndCacheOnCPU(dataId));\n\n              case 13:\n                if (!(!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && env().getNumber('WEBGL_VERSION') === 2)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                throw new Error(\"tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and \" + \"WEBGL_VERSION=2 not yet supported.\");\n\n              case 15:\n                buffer = null;\n\n                if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n                  // Possibly copy the texture into a buffer before inserting a fence.\n                  tmpDownloadTarget = this.decode(dataId);\n                  tmpData = this.texData.get(tmpDownloadTarget.dataId);\n                  buffer = (_this$gpgpu = this.gpgpu).createBufferFromTexture.apply(_this$gpgpu, [tmpData.texture].concat(_toConsumableArray(tex_util.getDenseTexShape(shape))));\n                }\n\n                this.pendingRead.set(dataId, []);\n\n                if (!(dtype !== 'complex64')) {\n                  _context.next = 21;\n                  break;\n                }\n\n                _context.next = 21;\n                return this.gpgpu.createAndWaitForFence();\n\n              case 21:\n                if (!(dtype === 'complex64')) {\n                  _context.next = 30;\n                  break;\n                }\n\n                _context.next = 24;\n                return Promise.all([this.read(complexTensorInfos.real.dataId), this.read(complexTensorInfos.imag.dataId)]);\n\n              case 24:\n                ps = _context.sent;\n                realValues = ps[0];\n                imagValues = ps[1];\n                vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n                _context.next = 31;\n                break;\n\n              case 30:\n                if (buffer == null) {\n                  vals = this.getValuesFromTexture(dataId);\n                } else {\n                  size = util.sizeFromShape(shape);\n                  vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n                }\n\n              case 31:\n                if (tmpDownloadTarget != null) {\n                  this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n                }\n\n                dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n                subscribers = this.pendingRead.get(dataId);\n                this.pendingRead.delete(dataId); // Notify all pending reads.\n\n                subscribers.forEach(function (resolve) {\n                  return resolve(dTypeVals);\n                });\n\n                if (this.pendingDisposal.has(dataId)) {\n                  this.pendingDisposal.delete(dataId);\n\n                  if (this.disposeData(dataId)) {\n                    engine().removeDataId(dataId, this);\n                  }\n\n                  this.pendingDeletes--;\n                }\n\n                return _context.abrupt(\"return\", dTypeVals);\n\n              case 38:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function read(_x) {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"bufferSync\",\n    value: function bufferSync(t) {\n      var data = this.readSync(t.dataId);\n      var decodedData = data;\n\n      if (t.dtype === 'string') {\n        try {\n          // Decode the bytes into string.\n          decodedData = data.map(function (d) {\n            return util.decodeString(d);\n          });\n        } catch (_a) {\n          throw new Error('Failed to decode encoded string bytes into utf-8');\n        }\n      }\n\n      return buffer(t.shape, t.dtype, decodedData);\n    }\n  }, {\n    key: \"checkNumericalProblems\",\n    value: function checkNumericalProblems(values) {\n      if (values == null) {\n        return;\n      }\n\n      for (var i = 0; i < values.length; i++) {\n        var num = values[i];\n\n        if (!webgl_util.canBeRepresented(num)) {\n          if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n            throw Error(\"The value \".concat(num, \" cannot be represented with your \") + \"current settings. Consider enabling float32 rendering: \" + \"'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'\");\n          }\n\n          throw Error(\"The value \".concat(num, \" cannot be represented on this device.\"));\n        }\n      }\n    }\n  }, {\n    key: \"getValuesFromTexture\",\n    value: function getValuesFromTexture(dataId) {\n      var _this$texData$get = this.texData.get(dataId),\n          shape = _this$texData$get.shape,\n          dtype = _this$texData$get.dtype,\n          isPacked = _this$texData$get.isPacked;\n\n      var size = util.sizeFromShape(shape);\n\n      if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n        var _this$gpgpu2;\n\n        var tmpTarget = this.decode(dataId);\n\n        var _tmpData = this.texData.get(tmpTarget.dataId);\n\n        var _vals = (_this$gpgpu2 = this.gpgpu).downloadMatrixFromPackedTexture.apply(_this$gpgpu2, [_tmpData.texture].concat(_toConsumableArray(tex_util.getDenseTexShape(shape)))).subarray(0, size);\n\n        this.disposeIntermediateTensorInfo(tmpTarget);\n        return _vals;\n      }\n\n      var shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n      var outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n      var program = shouldUsePackedProgram ? new EncodeFloatPackedProgram(outputShape) : new EncodeFloatProgram(outputShape);\n      var output = this.runWebGLProgram(program, [{\n        shape: outputShape,\n        dtype: dtype,\n        dataId: dataId\n      }], 'float32');\n      var tmpData = this.texData.get(output.dataId);\n      var vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);\n      this.disposeIntermediateTensorInfo(output);\n      return vals;\n    }\n  }, {\n    key: \"timerAvailable\",\n    value: function timerAvailable() {\n      return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n    }\n  }, {\n    key: \"time\",\n    value: function () {\n      var _time = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(f) {\n        var oldActiveTimers, newActiveTimers, outerMostTime, flattenedActiveTimerQueries, flattenedActiveTimerNames, res, kernelMs;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                oldActiveTimers = this.activeTimers;\n                newActiveTimers = [];\n                outerMostTime = false;\n\n                if (this.programTimersStack == null) {\n                  this.programTimersStack = newActiveTimers;\n                  outerMostTime = true;\n                } else {\n                  this.activeTimers.push(newActiveTimers);\n                }\n\n                this.activeTimers = newActiveTimers;\n                f(); // needing to split these up because util.flatten only accepts certain types\n\n                flattenedActiveTimerQueries = util.flatten(this.activeTimers.map(function (d) {\n                  return d.query;\n                })).filter(function (d) {\n                  return d != null;\n                });\n                flattenedActiveTimerNames = util.flatten(this.activeTimers.map(function (d) {\n                  return d.name;\n                })).filter(function (d) {\n                  return d != null;\n                });\n                this.activeTimers = oldActiveTimers;\n\n                if (outerMostTime) {\n                  this.programTimersStack = null;\n                }\n\n                res = {\n                  uploadWaitMs: this.uploadWaitMs,\n                  downloadWaitMs: this.downloadWaitMs,\n                  kernelMs: null,\n                  wallMs: null // will be filled by the engine\n\n                };\n\n                if (!(env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0)) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                _context2.next = 14;\n                return Promise.all(flattenedActiveTimerQueries);\n\n              case 14:\n                kernelMs = _context2.sent;\n                res['kernelMs'] = util.sum(kernelMs);\n\n                res['getExtraProfileInfo'] = function () {\n                  return kernelMs.map(function (d, i) {\n                    return {\n                      name: flattenedActiveTimerNames[i],\n                      ms: d\n                    };\n                  }).map(function (d) {\n                    return \"\".concat(d.name, \": \").concat(d.ms);\n                  }).join(', ');\n                };\n\n                _context2.next = 20;\n                break;\n\n              case 19:\n                res['kernelMs'] = {\n                  error: 'WebGL query timers are not supported in this environment.'\n                };\n\n              case 20:\n                this.uploadWaitMs = 0;\n                this.downloadWaitMs = 0;\n                return _context2.abrupt(\"return\", res);\n\n              case 23:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function time(_x2) {\n        return _time.apply(this, arguments);\n      }\n\n      return time;\n    }()\n  }, {\n    key: \"memory\",\n    value: function memory() {\n      return {\n        unreliable: false,\n        numBytesInGPU: this.numBytesInGPU,\n        numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n        numBytesInGPUFree: this.textureManager.numBytesFree\n      };\n    }\n  }, {\n    key: \"startTimer\",\n    value: function startTimer() {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n        return this.gpgpu.beginQuery();\n      }\n\n      return {\n        startMs: util.now(),\n        endMs: null\n      };\n    }\n  }, {\n    key: \"endTimer\",\n    value: function endTimer(query) {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n        this.gpgpu.endQuery();\n        return query;\n      }\n\n      query.endMs = util.now();\n      return query;\n    }\n  }, {\n    key: \"getQueryTime\",\n    value: function () {\n      var _getQueryTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(query) {\n        var timerQuery;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.gpgpu.waitForQueryAndGetTime(query));\n\n              case 2:\n                timerQuery = query;\n                return _context3.abrupt(\"return\", timerQuery.endMs - timerQuery.startMs);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getQueryTime(_x3) {\n        return _getQueryTime.apply(this, arguments);\n      }\n\n      return getQueryTime;\n    }()\n    /**\n     * Decrease the RefCount on the dataId and dispose the memory if the dataId\n     * has 0 refCount. If there are pending read on the data, the disposal would\n     * added to the pending delete queue. Return true if the dataId is removed\n     * from backend or the backend does not contain the dataId, false if the\n     * dataId is not removed. Memory may or may not be released even when dataId\n     * is removed, which also depends on dataRefCount, see `releaseGPU`.\n     * @param dataId\n     * @oaram force Optional, remove the data regardless of refCount\n     */\n\n  }, {\n    key: \"disposeData\",\n    value: function disposeData(dataId) {\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (this.pendingDisposal.has(dataId)) {\n        return false;\n      } // No-op if already disposed.\n\n\n      if (!this.texData.has(dataId)) {\n        return true;\n      } // if force flag is set, change refCount to 0, this would ensure disposal\n      // when added to the pendingDisposal queue. Memory may or may not be\n      // released, which also depends on dataRefCount, see `releaseGPU`.\n\n\n      if (force) {\n        this.texData.get(dataId).refCount = 0;\n      } else {\n        this.texData.get(dataId).refCount--;\n      }\n\n      if (!force && this.texData.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      if (this.pendingRead.has(dataId)) {\n        this.pendingDisposal.add(dataId);\n        this.pendingDeletes++;\n        return false;\n      }\n\n      this.releaseGPUData(dataId);\n\n      var _this$texData$get2 = this.texData.get(dataId),\n          complexTensorInfos = _this$texData$get2.complexTensorInfos;\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, force);\n        this.disposeData(complexTensorInfos.imag.dataId, force);\n      }\n\n      this.texData.delete(dataId);\n      return true;\n    }\n  }, {\n    key: \"releaseGPUData\",\n    value: function releaseGPUData(dataId) {\n      var _this$texData$get3 = this.texData.get(dataId),\n          texture = _this$texData$get3.texture,\n          dtype = _this$texData$get3.dtype,\n          texShape = _this$texData$get3.texShape,\n          usage = _this$texData$get3.usage,\n          isPacked = _this$texData$get3.isPacked,\n          slice = _this$texData$get3.slice;\n\n      var key = slice && slice.origDataId || dataId;\n      var refCount = this.dataRefCount.get(key);\n\n      if (refCount > 1) {\n        this.dataRefCount.set(key, refCount - 1);\n      } else {\n        this.dataRefCount.delete(key);\n\n        if (texture != null) {\n          this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n          this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n        }\n      }\n\n      var texData = this.texData.get(dataId);\n      texData.texture = null;\n      texData.texShape = null;\n      texData.isPacked = false;\n      texData.slice = null;\n    }\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(dataId) {\n      this.uploadToGPU(dataId);\n      return this.texData.get(dataId).texture;\n    }\n    /**\n     * Returns internal information for the specific data bucket. Used in unit\n     * tests.\n     */\n\n  }, {\n    key: \"getDataInfo\",\n    value: function getDataInfo(dataId) {\n      return this.texData.get(dataId);\n    }\n  }, {\n    key: \"getCPUBackend\",\n    value: function getCPUBackend() {\n      if (!env().getBool('WEBGL_CPU_FORWARD')) {\n        return null;\n      }\n\n      if (this.cpuBackend == null) {\n        this.cpuBackend = engine().findBackend('cpu');\n      }\n\n      return this.cpuBackend;\n    }\n    /*\n    Tests whether all the inputs to an op are small and on the CPU. This heuristic\n    determines when it would be faster to execute a kernel on the CPU. WebGL\n    kernels opt into running this check and forwarding when appropriate.\n    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n    sustainable strategy for optimizing backend execution of ops.\n     */\n\n  }, {\n    key: \"shouldExecuteOnCPU\",\n    value: function shouldExecuteOnCPU(inputs) {\n      var _this2 = this;\n\n      var sizeThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CPU_HANDOFF_SIZE_THRESHOLD;\n      var cpuBackend = this.getCPUBackend();\n\n      if (!env().getBool('IS_TEST') && !this.warnedAboutCPUBackend && cpuBackend == null) {\n        console.warn('Your application contains ops that are small enough to be ' + 'executed on the CPU backend, however the CPU backend cannot ' + 'be found. Consider importing the CPU backend ' + '(@tensorflow/tfjs-backend-cpu) for better performance.');\n        this.warnedAboutCPUBackend = true;\n      }\n\n      return cpuBackend != null && inputs.every(function (input) {\n        return _this2.texData.get(input.dataId).texture == null && util.sizeFromShape(input.shape) < sizeThreshold;\n      });\n    }\n  }, {\n    key: \"getGPGPUContext\",\n    value: function getGPGPUContext() {\n      return this.gpgpu;\n    }\n  }, {\n    key: \"where\",\n    value: function where(condition) {\n      backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');\n      var condVals = condition.dataSync();\n      return whereImpl(condition.shape, condVals);\n    }\n  }, {\n    key: \"packedUnaryOp\",\n    value: function packedUnaryOp(x, op, dtype) {\n      var program = new UnaryOpPackedProgram(x.shape, op);\n      var outInfo = this.compileAndRun(program, [x], dtype);\n      return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    } // TODO(msoulanille) remove this once the backend has been modularized\n    // a copy is needed here to break a circular dependency.\n    // Also remove the op from unary_op.\n\n  }, {\n    key: \"abs\",\n    value: function abs(x) {\n      // TODO: handle cases when x is complex.\n      if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n        var outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n        return this.makeOutput(x.shape, x.dtype, outValues);\n      }\n\n      if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n      }\n\n      var program = new UnaryOpProgram(x.shape, unary_op.ABS);\n      var outInfo = this.compileAndRun(program, [x]);\n      return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n  }, {\n    key: \"makeTensorInfo\",\n    value: function makeTensorInfo(shape, dtype, values) {\n      var dataId;\n\n      if (dtype === 'string' && values != null && values.length > 0 && util.isString(values[0])) {\n        var encodedValues = values.map(function (d) {\n          return util.encodeString(d);\n        });\n        dataId = this.write(encodedValues, shape, dtype);\n      } else {\n        dataId = this.write(values, shape, dtype);\n      }\n\n      this.texData.get(dataId).usage = null;\n      return {\n        dataId: dataId,\n        shape: shape,\n        dtype: dtype\n      };\n    }\n  }, {\n    key: \"makeOutput\",\n    value: function makeOutput(shape, dtype, values) {\n      var _this$makeTensorInfo = this.makeTensorInfo(shape, dtype, values),\n          dataId = _this$makeTensorInfo.dataId;\n\n      return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n  }, {\n    key: \"unpackTensor\",\n    value: function unpackTensor(input) {\n      var program = new UnpackProgram(input.shape);\n      return this.runWebGLProgram(program, [input], input.dtype);\n    }\n  }, {\n    key: \"packTensor\",\n    value: function packTensor(input) {\n      var program = new PackProgram(input.shape);\n      var preventEagerUnpackingOutput = true;\n      return this.runWebGLProgram(program, [input], input.dtype, null\n      /* customSetup */\n      , preventEagerUnpackingOutput);\n    }\n  }, {\n    key: \"packedReshape\",\n    value: function packedReshape(input, afterShape) {\n      var input3DShape = [webgl_util.getBatchDim(input.shape)].concat(_toConsumableArray(webgl_util.getRowsCols(input.shape)));\n      var input3D = {\n        dtype: input.dtype,\n        shape: input3DShape,\n        dataId: input.dataId\n      };\n      var afterShapeAs3D = [webgl_util.getBatchDim(afterShape)].concat(_toConsumableArray(webgl_util.getRowsCols(afterShape)));\n      var program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n      var preventEagerUnpackingOfOutput = true;\n      var output = this.runWebGLProgram(program, [input3D], input.dtype, null\n      /* customSetup */\n      , preventEagerUnpackingOfOutput);\n      return {\n        dataId: output.dataId,\n        shape: afterShape,\n        dtype: output.dtype\n      };\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(dataId) {\n      var texData = this.texData.get(dataId);\n      var isPacked = texData.isPacked,\n          shape = texData.shape,\n          dtype = texData.dtype;\n      var shapeAs3D = webgl_util.getShapeAs3D(shape);\n      var program;\n\n      if (isPacked) {\n        program = new DecodeMatrixPackedProgram(shapeAs3D);\n      } else {\n        program = new DecodeMatrixProgram(shapeAs3D);\n      }\n\n      var preventEagerUnpackingOfOutput = true;\n      var out = this.runWebGLProgram(program, [{\n        shape: shapeAs3D,\n        dtype: dtype,\n        dataId: dataId\n      }], dtype, null\n      /* customSetup */\n      , preventEagerUnpackingOfOutput);\n      return {\n        dtype: dtype,\n        shape: shape,\n        dataId: out.dataId\n      };\n    }\n  }, {\n    key: \"runWebGLProgram\",\n    value: function runWebGLProgram(program, inputs, outputDtype, customSetup) {\n      var _this3 = this;\n\n      var preventEagerUnpackingOfOutput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var output = this.makeTensorInfo(program.outputShape, outputDtype);\n      var outData = this.texData.get(output.dataId);\n\n      if (program.packedOutput) {\n        outData.isPacked = true;\n      }\n\n      if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n        var texelShape = tex_util.getDenseTexShape(program.outputShape); // For a densely packed output, we explicitly set texShape\n        // so it doesn't get assigned later according to our typical packing\n        // scheme wherein a single texel can only contain values from adjacent\n        // rows/cols.\n\n        outData.texShape = texelShape.map(function (d) {\n          return d * 2;\n        });\n      }\n\n      if (program.outTexUsage != null) {\n        outData.usage = program.outTexUsage;\n      }\n\n      if (util.sizeFromShape(output.shape) === 0) {\n        // Short-circuit the computation since the result is empty (has 0 in its\n        // shape).\n        outData.values = util.getTypedArrayFromDType(output.dtype, 0);\n        return output;\n      }\n\n      var dataToDispose = [];\n      var inputsData = inputs.map(function (input) {\n        if (input.dtype === 'complex64') {\n          throw new Error(\"GPGPUProgram does not support complex64 input. For complex64 \" + \"dtypes, please separate the program into real and imaginary \" + \"parts.\");\n        }\n\n        var texData = _this3.texData.get(input.dataId);\n\n        if (texData.texture == null) {\n          if (!program.packedInputs && util.sizeFromShape(input.shape) <= env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n            // Upload small tensors that live on the CPU as uniforms, not as\n            // textures. Do this only when the environment supports 32bit floats\n            // due to problems when comparing 16bit floats with 32bit floats.\n            // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n            // possible for packed shaders to sample from uniforms.\n            return {\n              shape: input.shape,\n              texData: null,\n              isUniform: true,\n              uniformValues: texData.values\n            };\n          } // This ensures that if a packed program's inputs have not yet been\n          // uploaded to the GPU, they get uploaded as packed right off the bat.\n\n\n          if (program.packedInputs) {\n            texData.isPacked = true;\n            texData.shape = input.shape;\n          }\n        } else if (!!texData.isPacked !== !!program.packedInputs) {\n          input = texData.isPacked ? _this3.unpackTensor(input) : _this3.packTensor(input);\n          dataToDispose.push(input);\n          texData = _this3.texData.get(input.dataId);\n        } else if (texData.isPacked && !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n          // This is a special case where a texture exists for a tensor\n          // but the shapes are incompatible (due to packing constraints) because\n          // the tensor did not have a chance to go through the packed reshape\n          // shader. This only happens when we reshape the *same* tensor to form\n          // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n          // case will disappear once packed uploading is the default.\n          var savedInput = input;\n          var targetShape = input.shape;\n          input.shape = texData.shape;\n          input = _this3.packedReshape(input, targetShape);\n          dataToDispose.push(input);\n          texData = _this3.texData.get(input.dataId);\n          savedInput.shape = targetShape;\n        }\n\n        _this3.uploadToGPU(input.dataId);\n\n        return {\n          shape: input.shape,\n          texData: texData,\n          isUniform: false\n        };\n      });\n      this.uploadToGPU(output.dataId);\n      var outputData = {\n        shape: output.shape,\n        texData: outData,\n        isUniform: false\n      };\n      var key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n      var binary = this.getAndSaveBinary(key, function () {\n        return gpgpu_math.compileProgram(_this3.gpgpu, program, inputsData, outputData);\n      });\n      var shouldTimeProgram = this.activeTimers != null;\n      var query;\n\n      if (shouldTimeProgram) {\n        query = this.startTimer();\n      }\n\n      gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);\n      dataToDispose.forEach(function (info) {\n        return _this3.disposeIntermediateTensorInfo(info);\n      });\n\n      if (shouldTimeProgram) {\n        query = this.endTimer(query);\n        this.activeTimers.push({\n          name: program.constructor.name,\n          query: this.getQueryTime(query)\n        });\n      }\n\n      if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {\n        var unpacked = this.unpackTensor(output);\n        this.disposeIntermediateTensorInfo(output);\n        return unpacked;\n      }\n\n      return output;\n    }\n  }, {\n    key: \"compileAndRun\",\n    value: function compileAndRun(program, inputs, outputDtype, customSetup) {\n      var preventEagerUnpackingOfOutput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      outputDtype = outputDtype || inputs[0].dtype;\n      var outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);\n      return outInfo;\n    }\n  }, {\n    key: \"getAndSaveBinary\",\n    value: function getAndSaveBinary(key, getBinary) {\n      if (!(key in this.binaryCache)) {\n        this.binaryCache[key] = getBinary();\n      }\n\n      return this.binaryCache[key];\n    }\n  }, {\n    key: \"getTextureManager\",\n    value: function getTextureManager() {\n      return this.textureManager;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this4 = this;\n\n      if (this.disposed) {\n        return;\n      } // Avoid disposing the compiled webgl programs during unit testing because\n      // it slows down test execution.\n\n\n      if (!env().getBool('IS_TEST')) {\n        var allKeys = Object.keys(this.binaryCache);\n        allKeys.forEach(function (key) {\n          _this4.gpgpu.deleteProgram(_this4.binaryCache[key].webGLProgram);\n\n          delete _this4.binaryCache[key];\n        });\n      }\n\n      this.textureManager.dispose();\n\n      if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {\n        this.canvas.remove();\n      } else {\n        this.canvas = null;\n      }\n\n      if (this.gpgpuCreatedLocally) {\n        this.gpgpu.program = null;\n        this.gpgpu.dispose();\n      }\n\n      this.disposed = true;\n    }\n  }, {\n    key: \"floatPrecision\",\n    value: function floatPrecision() {\n      var _this5 = this;\n\n      if (this.floatPrecisionValue == null) {\n        this.floatPrecisionValue = tidy(function () {\n          if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n            // Momentarily switching DEBUG flag to false so we don't throw an\n            // error trying to upload a small value.\n            var debugFlag = env().getBool('DEBUG');\n            env().set('DEBUG', false);\n\n            var underflowCheckValue = _this5.abs(scalar(1e-8)).dataSync()[0];\n\n            env().set('DEBUG', debugFlag);\n\n            if (underflowCheckValue > 0) {\n              return 32;\n            }\n          }\n\n          return 16;\n        });\n      }\n\n      return this.floatPrecisionValue;\n    }\n    /** Returns the smallest representable number.  */\n\n  }, {\n    key: \"epsilon\",\n    value: function epsilon() {\n      return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n  }, {\n    key: \"uploadToGPU\",\n    value: function uploadToGPU(dataId) {\n      var texData = this.texData.get(dataId);\n      var shape = texData.shape,\n          dtype = texData.dtype,\n          values = texData.values,\n          texture = texData.texture,\n          usage = texData.usage,\n          isPacked = texData.isPacked;\n\n      if (texture != null) {\n        // Array is already on GPU. No-op.\n        return;\n      }\n\n      var shouldTimeProgram = this.activeTimers != null;\n      var start;\n\n      if (shouldTimeProgram) {\n        start = util.now();\n      }\n\n      var texShape = texData.texShape;\n\n      if (texShape == null) {\n        texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n        texData.texShape = texShape;\n      }\n\n      if (values != null) {\n        var shapeAs3D = webgl_util.getShapeAs3D(shape);\n        var program;\n        var width = texShape[1],\n            height = texShape[0];\n        var isByteArray = values instanceof Uint8Array;\n\n        if (isPacked) {\n          var _tex_util$getPackedMa = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n\n          var _tex_util$getPackedMa2 = _slicedToArray(_tex_util$getPackedMa, 2);\n\n          width = _tex_util$getPackedMa2[0];\n          height = _tex_util$getPackedMa2[1];\n          program = new EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);\n        } else {\n          program = new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n        }\n\n        var tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n\n        if (isByteArray) {\n          this.texData.get(tempDenseInputHandle.dataId).usage = TextureUsage.PIXELS;\n        } else {\n          this.texData.get(tempDenseInputHandle.dataId).usage = TextureUsage.UPLOAD;\n        }\n\n        this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values); // We want the output to remain packed regardless of the value of\n        // WEBGL_PACK.\n\n        var preventEagerUnpacking = true;\n        var encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking); // Have the original texture assume the identity of the encoded output.\n\n        var outputTexData = this.texData.get(encodedOutputTarget.dataId);\n        texData.texture = outputTexData.texture;\n        texData.texShape = outputTexData.texShape;\n        texData.isPacked = outputTexData.isPacked;\n        texData.usage = outputTexData.usage;\n        this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n        this.texData.delete(encodedOutputTarget.dataId); // Once uploaded, don't store the values on cpu.\n\n        texData.values = null;\n\n        if (shouldTimeProgram) {\n          this.uploadWaitMs += util.now() - start;\n        }\n      } else {\n        var newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n        texData.texture = newTexture;\n      }\n    }\n  }, {\n    key: \"convertAndCacheOnCPU\",\n    value: function convertAndCacheOnCPU(dataId, float32Values) {\n      var texData = this.texData.get(dataId);\n      var dtype = texData.dtype;\n      this.releaseGPUData(dataId);\n\n      if (float32Values != null) {\n        texData.values = float32ToTypedArray(float32Values, dtype);\n      }\n\n      return texData.values;\n    }\n  }, {\n    key: \"acquireTexture\",\n    value: function acquireTexture(texShape, texType, dtype, isPacked) {\n      this.numBytesInGPU += this.computeBytes(texShape, dtype);\n\n      if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n        var mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n        this.warnedAboutMemory = true;\n        console.warn(\"High memory usage in GPU: \".concat(mb, \" MB, \") + \"most likely due to a memory leak\");\n      }\n\n      return this.textureManager.acquireTexture(texShape, texType, isPacked);\n    }\n  }, {\n    key: \"computeBytes\",\n    value: function computeBytes(shape, dtype) {\n      return shape[0] * shape[1] * util.bytesPerElement(dtype);\n    }\n  }]);\n\n  return MathBackendWebGL;\n}(KernelBackend);\nMathBackendWebGL.nextDataId = 0;\n\nfunction float32ToTypedArray(a, dtype) {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a;\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    var result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);\n\n    for (var i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n\n    return result;\n  } else {\n    throw new Error(\"Unknown dtype \".concat(dtype));\n  }\n}","map":{"version":3,"sources":["../src/backend_webgl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n    if (webGLVersion in binaryCaches) {\n        return binaryCaches[webGLVersion];\n    }\n    binaryCaches[webGLVersion] = {};\n    return binaryCaches[webGLVersion];\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n    if (env().global.screen == null) {\n        return 1024; // 1 GB.\n    }\n    return (env().global.screen.height * env().global.screen.width *\n        window.devicePixelRatio) *\n        BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\nexport class MathBackendWebGL extends KernelBackend {\n    constructor(gpgpu) {\n        super();\n        // Maps data ids that have a pending read operation, to list of subscribers.\n        this.pendingRead = new WeakMap();\n        // List of data ids that are scheduled for disposal, but are waiting on a\n        // pending read operation.\n        this.pendingDisposal = new WeakSet();\n        // Used to count the number of 'shallow' sliced tensors that point to the\n        // same data id.\n        this.dataRefCount = new WeakMap();\n        this.numBytesInGPU = 0;\n        // Accumulated time spent (including blocking) in uploading data to webgl.\n        this.uploadWaitMs = 0;\n        // Accumulated time spent (including blocking in downloading data from webgl.\n        this.downloadWaitMs = 0;\n        this.warnedAboutMemory = false;\n        this.warnedAboutCPUBackend = false;\n        this.pendingDeletes = 0;\n        this.disposed = false;\n        if (!env().getBool('HAS_WEBGL')) {\n            throw new Error('WebGL is not supported on this device');\n        }\n        if (gpgpu == null) {\n            const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n            this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n            this.gpgpu = new GPGPUContext(gl);\n            this.canvas = gl.canvas;\n            this.gpgpuCreatedLocally = true;\n        }\n        else {\n            this.gpgpu = gpgpu;\n            this.binaryCache = {};\n            this.gpgpuCreatedLocally = false;\n            this.canvas = gpgpu.gl.canvas;\n        }\n        this.textureManager = new TextureManager(this.gpgpu);\n        this.numMBBeforeWarning = numMBBeforeWarning();\n        this.texData = new DataStorage(this, engine());\n    }\n    nextDataId() {\n        return MathBackendWebGL.nextDataId++;\n    }\n    numDataIds() {\n        return this.texData.numDataIds() +\n            (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -\n            this.pendingDeletes;\n    }\n    write(values, shape, dtype) {\n        if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n            env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64' && values != null) {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        const dataId = { id: this.nextDataId() };\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1 });\n        return dataId;\n    }\n    /** Return refCount of a `TensorData`. */\n    refCount(dataId) {\n        if (this.texData.has(dataId)) {\n            const tensorData = this.texData.get(dataId);\n            return tensorData.refCount;\n        }\n        return 0;\n    }\n    /** Increase refCount of a `TextureData`. */\n    incRef(dataId) {\n        const texData = this.texData.get(dataId);\n        texData.refCount++;\n    }\n    /** Decrease refCount of a `TextureData`. */\n    decRef(dataId) {\n        if (this.texData.has(dataId)) {\n            const texData = this.texData.get(dataId);\n            texData.refCount--;\n        }\n    }\n    move(dataId, values, shape, dtype, refCount) {\n        if (env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount });\n    }\n    disposeIntermediateTensorInfo(tensorInfo) {\n        this.disposeData(tensorInfo.dataId);\n    }\n    readSync(dataId) {\n        const texData = this.texData.get(dataId);\n        const { values, dtype, complexTensorInfos, slice, shape, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.readSync(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (dtype === 'string') {\n            return values;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let result;\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensorInfos.real.dataId);\n            const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n            result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else {\n            result = this.getValuesFromTexture(dataId);\n        }\n        if (shouldTimeProgram) {\n            this.downloadWaitMs += util.now() - start;\n        }\n        return this.convertAndCacheOnCPU(dataId, result);\n    }\n    async read(dataId) {\n        if (this.pendingRead.has(dataId)) {\n            const subscribers = this.pendingRead.get(dataId);\n            return new Promise(resolve => subscribers.push(resolve));\n        }\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, complexTensorInfos, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.read(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n            env().getNumber('WEBGL_VERSION') === 2) {\n            throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n                `WEBGL_VERSION=2 not yet supported.`);\n        }\n        let buffer = null;\n        let tmpDownloadTarget;\n        if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n            // Possibly copy the texture into a buffer before inserting a fence.\n            tmpDownloadTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n            buffer = this.gpgpu.createBufferFromTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape));\n        }\n        this.pendingRead.set(dataId, []);\n        if (dtype !== 'complex64') {\n            // Create a fence and wait for it to resolve.\n            await this.gpgpu.createAndWaitForFence();\n        }\n        // Download the values from the GPU.\n        let vals;\n        if (dtype === 'complex64') {\n            const ps = await Promise.all([\n                this.read(complexTensorInfos.real.dataId),\n                this.read(complexTensorInfos.imag.dataId)\n            ]);\n            const realValues = ps[0];\n            const imagValues = ps[1];\n            vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else if (buffer == null) {\n            vals = this.getValuesFromTexture(dataId);\n        }\n        else {\n            const size = util.sizeFromShape(shape);\n            vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n        }\n        if (tmpDownloadTarget != null) {\n            this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n        }\n        const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n        const subscribers = this.pendingRead.get(dataId);\n        this.pendingRead.delete(dataId);\n        // Notify all pending reads.\n        subscribers.forEach(resolve => resolve(dTypeVals));\n        if (this.pendingDisposal.has(dataId)) {\n            this.pendingDisposal.delete(dataId);\n            if (this.disposeData(dataId)) {\n                engine().removeDataId(dataId, this);\n            }\n            this.pendingDeletes--;\n        }\n        return dTypeVals;\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        let decodedData = data;\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                decodedData = data.map(d => util.decodeString(d));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return buffer(t.shape, t.dtype, decodedData);\n    }\n    checkNumericalProblems(values) {\n        if (values == null) {\n            return;\n        }\n        for (let i = 0; i < values.length; i++) {\n            const num = values[i];\n            if (!webgl_util.canBeRepresented(num)) {\n                if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n                    throw Error(`The value ${num} cannot be represented with your ` +\n                        `current settings. Consider enabling float32 rendering: ` +\n                        `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n                }\n                throw Error(`The value ${num} cannot be represented on this device.`);\n            }\n        }\n    }\n    getValuesFromTexture(dataId) {\n        const { shape, dtype, isPacked } = this.texData.get(dataId);\n        const size = util.sizeFromShape(shape);\n        if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n            const tmpTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpTarget.dataId);\n            const vals = this.gpgpu\n                .downloadMatrixFromPackedTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                .subarray(0, size);\n            this.disposeIntermediateTensorInfo(tmpTarget);\n            return vals;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n        const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n        const program = shouldUsePackedProgram ?\n            new EncodeFloatPackedProgram(outputShape) :\n            new EncodeFloatProgram(outputShape);\n        const output = this.runWebGLProgram(program, [{ shape: outputShape, dtype, dataId }], 'float32');\n        const tmpData = this.texData.get(output.dataId);\n        const vals = this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n        this.disposeIntermediateTensorInfo(output);\n        return vals;\n    }\n    timerAvailable() {\n        return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n    }\n    async time(f) {\n        const oldActiveTimers = this.activeTimers;\n        const newActiveTimers = [];\n        let outerMostTime = false;\n        if (this.programTimersStack == null) {\n            this.programTimersStack = newActiveTimers;\n            outerMostTime = true;\n        }\n        else {\n            this.activeTimers.push(newActiveTimers);\n        }\n        this.activeTimers = newActiveTimers;\n        f();\n        // needing to split these up because util.flatten only accepts certain types\n        const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map((d) => d.query))\n            .filter(d => d != null);\n        const flattenedActiveTimerNames = util.flatten(this.activeTimers.map((d) => d.name))\n            .filter(d => d != null);\n        this.activeTimers = oldActiveTimers;\n        if (outerMostTime) {\n            this.programTimersStack = null;\n        }\n        const res = {\n            uploadWaitMs: this.uploadWaitMs,\n            downloadWaitMs: this.downloadWaitMs,\n            kernelMs: null,\n            wallMs: null // will be filled by the engine\n        };\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n            res['kernelMs'] = util.sum(kernelMs);\n            res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({ name: flattenedActiveTimerNames[i], ms: d }))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n        }\n        else {\n            res['kernelMs'] = {\n                error: 'WebGL query timers are not supported in this environment.'\n            };\n        }\n        this.uploadWaitMs = 0;\n        this.downloadWaitMs = 0;\n        return res;\n    }\n    memory() {\n        return {\n            unreliable: false,\n            numBytesInGPU: this.numBytesInGPU,\n            numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n            numBytesInGPUFree: this.textureManager.numBytesFree\n        };\n    }\n    startTimer() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.beginQuery();\n        }\n        return { startMs: util.now(), endMs: null };\n    }\n    endTimer(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            this.gpgpu.endQuery();\n            return query;\n        }\n        query.endMs = util.now();\n        return query;\n    }\n    async getQueryTime(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.waitForQueryAndGetTime(query);\n        }\n        const timerQuery = query;\n        return timerQuery.endMs - timerQuery.startMs;\n    }\n    /**\n     * Decrease the RefCount on the dataId and dispose the memory if the dataId\n     * has 0 refCount. If there are pending read on the data, the disposal would\n     * added to the pending delete queue. Return true if the dataId is removed\n     * from backend or the backend does not contain the dataId, false if the\n     * dataId is not removed. Memory may or may not be released even when dataId\n     * is removed, which also depends on dataRefCount, see `releaseGPU`.\n     * @param dataId\n     * @oaram force Optional, remove the data regardless of refCount\n     */\n    disposeData(dataId, force = false) {\n        if (this.pendingDisposal.has(dataId)) {\n            return false;\n        }\n        // No-op if already disposed.\n        if (!this.texData.has(dataId)) {\n            return true;\n        }\n        // if force flag is set, change refCount to 0, this would ensure disposal\n        // when added to the pendingDisposal queue. Memory may or may not be\n        // released, which also depends on dataRefCount, see `releaseGPU`.\n        if (force) {\n            this.texData.get(dataId).refCount = 0;\n        }\n        else {\n            this.texData.get(dataId).refCount--;\n        }\n        if (!force && this.texData.get(dataId).refCount > 0) {\n            return false;\n        }\n        if (this.pendingRead.has(dataId)) {\n            this.pendingDisposal.add(dataId);\n            this.pendingDeletes++;\n            return false;\n        }\n        this.releaseGPUData(dataId);\n        const { complexTensorInfos } = this.texData.get(dataId);\n        if (complexTensorInfos != null) {\n            this.disposeData(complexTensorInfos.real.dataId, force);\n            this.disposeData(complexTensorInfos.imag.dataId, force);\n        }\n        this.texData.delete(dataId);\n        return true;\n    }\n    releaseGPUData(dataId) {\n        const { texture, dtype, texShape, usage, isPacked, slice } = this.texData.get(dataId);\n        const key = slice && slice.origDataId || dataId;\n        const refCount = this.dataRefCount.get(key);\n        if (refCount > 1) {\n            this.dataRefCount.set(key, refCount - 1);\n        }\n        else {\n            this.dataRefCount.delete(key);\n            if (texture != null) {\n                this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n                this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n            }\n        }\n        const texData = this.texData.get(dataId);\n        texData.texture = null;\n        texData.texShape = null;\n        texData.isPacked = false;\n        texData.slice = null;\n    }\n    getTexture(dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId).texture;\n    }\n    /**\n     * Returns internal information for the specific data bucket. Used in unit\n     * tests.\n     */\n    getDataInfo(dataId) {\n        return this.texData.get(dataId);\n    }\n    getCPUBackend() {\n        if (!env().getBool('WEBGL_CPU_FORWARD')) {\n            return null;\n        }\n        if (this.cpuBackend == null) {\n            this.cpuBackend = engine().findBackend('cpu');\n        }\n        return this.cpuBackend;\n    }\n    /*\n    Tests whether all the inputs to an op are small and on the CPU. This heuristic\n    determines when it would be faster to execute a kernel on the CPU. WebGL\n    kernels opt into running this check and forwarding when appropriate.\n    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n    sustainable strategy for optimizing backend execution of ops.\n     */\n    shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n        const cpuBackend = this.getCPUBackend();\n        if (!env().getBool('IS_TEST') && !this.warnedAboutCPUBackend &&\n            cpuBackend == null) {\n            console.warn('Your application contains ops that are small enough to be ' +\n                'executed on the CPU backend, however the CPU backend cannot ' +\n                'be found. Consider importing the CPU backend ' +\n                '(@tensorflow/tfjs-backend-cpu) for better performance.');\n            this.warnedAboutCPUBackend = true;\n        }\n        return cpuBackend != null &&\n            inputs.every(input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n    }\n    getGPGPUContext() {\n        return this.gpgpu;\n    }\n    where(condition) {\n        backend_util.warn('tf.where() in webgl locks the UI thread. ' +\n            'Call tf.whereAsync() instead');\n        const condVals = condition.dataSync();\n        return whereImpl(condition.shape, condVals);\n    }\n    packedUnaryOp(x, op, dtype) {\n        const program = new UnaryOpPackedProgram(x.shape, op);\n        const outInfo = this.compileAndRun(program, [x], dtype);\n        return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n    // TODO(msoulanille) remove this once the backend has been modularized\n    // a copy is needed here to break a circular dependency.\n    // Also remove the op from unary_op.\n    abs(x) {\n        // TODO: handle cases when x is complex.\n        if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n            const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n            return this.makeOutput(x.shape, x.dtype, outValues);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n        const outInfo = this.compileAndRun(program, [x]);\n        return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n    makeTensorInfo(shape, dtype, values) {\n        let dataId;\n        if (dtype === 'string' && values != null && values.length > 0 &&\n            util.isString(values[0])) {\n            const encodedValues = values.map(d => util.encodeString(d));\n            dataId = this.write(encodedValues, shape, dtype);\n        }\n        else {\n            dataId = this.write(values, shape, dtype);\n        }\n        this.texData.get(dataId).usage = null;\n        return { dataId, shape, dtype };\n    }\n    makeOutput(shape, dtype, values) {\n        const { dataId } = this.makeTensorInfo(shape, dtype, values);\n        return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n    unpackTensor(input) {\n        const program = new UnpackProgram(input.shape);\n        return this.runWebGLProgram(program, [input], input.dtype);\n    }\n    packTensor(input) {\n        const program = new PackProgram(input.shape);\n        const preventEagerUnpackingOutput = true;\n        return this.runWebGLProgram(program, [input], input.dtype, null /* customSetup */, preventEagerUnpackingOutput);\n    }\n    packedReshape(input, afterShape) {\n        const input3DShape = [\n            webgl_util.getBatchDim(input.shape),\n            ...webgl_util.getRowsCols(input.shape)\n        ];\n        const input3D = {\n            dtype: input.dtype,\n            shape: input3DShape,\n            dataId: input.dataId\n        };\n        const afterShapeAs3D = [\n            webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n        ];\n        const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n        const preventEagerUnpackingOfOutput = true;\n        const output = this.runWebGLProgram(program, [input3D], input.dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n    }\n    decode(dataId) {\n        const texData = this.texData.get(dataId);\n        const { isPacked, shape, dtype } = texData;\n        const shapeAs3D = webgl_util.getShapeAs3D(shape);\n        let program;\n        if (isPacked) {\n            program = new DecodeMatrixPackedProgram(shapeAs3D);\n        }\n        else {\n            program = new DecodeMatrixProgram(shapeAs3D);\n        }\n        const preventEagerUnpackingOfOutput = true;\n        const out = this.runWebGLProgram(program, [{ shape: shapeAs3D, dtype, dataId }], dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dtype, shape, dataId: out.dataId };\n    }\n    runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        const output = this.makeTensorInfo(program.outputShape, outputDtype);\n        const outData = this.texData.get(output.dataId);\n        if (program.packedOutput) {\n            outData.isPacked = true;\n        }\n        if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n            const texelShape = tex_util.getDenseTexShape(program.outputShape);\n            // For a densely packed output, we explicitly set texShape\n            // so it doesn't get assigned later according to our typical packing\n            // scheme wherein a single texel can only contain values from adjacent\n            // rows/cols.\n            outData.texShape = texelShape.map(d => d * 2);\n        }\n        if (program.outTexUsage != null) {\n            outData.usage = program.outTexUsage;\n        }\n        if (util.sizeFromShape(output.shape) === 0) {\n            // Short-circuit the computation since the result is empty (has 0 in its\n            // shape).\n            outData.values =\n                util.getTypedArrayFromDType(output.dtype, 0);\n            return output;\n        }\n        const dataToDispose = [];\n        const inputsData = inputs.map(input => {\n            if (input.dtype === 'complex64') {\n                throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` +\n                    `dtypes, please separate the program into real and imaginary ` +\n                    `parts.`);\n            }\n            let texData = this.texData.get(input.dataId);\n            if (texData.texture == null) {\n                if (!program.packedInputs &&\n                    util.sizeFromShape(input.shape) <=\n                        env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n                    // Upload small tensors that live on the CPU as uniforms, not as\n                    // textures. Do this only when the environment supports 32bit floats\n                    // due to problems when comparing 16bit floats with 32bit floats.\n                    // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n                    // possible for packed shaders to sample from uniforms.\n                    return {\n                        shape: input.shape,\n                        texData: null,\n                        isUniform: true,\n                        uniformValues: texData.values\n                    };\n                }\n                // This ensures that if a packed program's inputs have not yet been\n                // uploaded to the GPU, they get uploaded as packed right off the bat.\n                if (program.packedInputs) {\n                    texData.isPacked = true;\n                    texData.shape = input.shape;\n                }\n            }\n            else if (!!texData.isPacked !== !!program.packedInputs) {\n                input = texData.isPacked ? this.unpackTensor(input) :\n                    this.packTensor(input);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n            }\n            else if (texData.isPacked &&\n                !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n                // This is a special case where a texture exists for a tensor\n                // but the shapes are incompatible (due to packing constraints) because\n                // the tensor did not have a chance to go through the packed reshape\n                // shader. This only happens when we reshape the *same* tensor to form\n                // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n                // case will disappear once packed uploading is the default.\n                const savedInput = input;\n                const targetShape = input.shape;\n                input.shape = texData.shape;\n                input = this.packedReshape(input, targetShape);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n                savedInput.shape = targetShape;\n            }\n            this.uploadToGPU(input.dataId);\n            return { shape: input.shape, texData, isUniform: false };\n        });\n        this.uploadToGPU(output.dataId);\n        const outputData = { shape: output.shape, texData: outData, isUniform: false };\n        const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n        const binary = this.getAndSaveBinary(key, () => {\n            return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n        });\n        const shouldTimeProgram = this.activeTimers != null;\n        let query;\n        if (shouldTimeProgram) {\n            query = this.startTimer();\n        }\n        gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);\n        dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n        if (shouldTimeProgram) {\n            query = this.endTimer(query);\n            this.activeTimers.push({ name: program.constructor.name, query: this.getQueryTime(query) });\n        }\n        if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n            preventEagerUnpackingOfOutput === false) {\n            const unpacked = this.unpackTensor(output);\n            this.disposeIntermediateTensorInfo(output);\n            return unpacked;\n        }\n        return output;\n    }\n    compileAndRun(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        outputDtype = outputDtype || inputs[0].dtype;\n        const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);\n        return outInfo;\n    }\n    getAndSaveBinary(key, getBinary) {\n        if (!(key in this.binaryCache)) {\n            this.binaryCache[key] = getBinary();\n        }\n        return this.binaryCache[key];\n    }\n    getTextureManager() {\n        return this.textureManager;\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        // Avoid disposing the compiled webgl programs during unit testing because\n        // it slows down test execution.\n        if (!env().getBool('IS_TEST')) {\n            const allKeys = Object.keys(this.binaryCache);\n            allKeys.forEach(key => {\n                this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n                delete this.binaryCache[key];\n            });\n        }\n        this.textureManager.dispose();\n        if (this.canvas != null &&\n            (typeof (HTMLCanvasElement) !== 'undefined' &&\n                this.canvas instanceof HTMLCanvasElement)) {\n            this.canvas.remove();\n        }\n        else {\n            this.canvas = null;\n        }\n        if (this.gpgpuCreatedLocally) {\n            this.gpgpu.program = null;\n            this.gpgpu.dispose();\n        }\n        this.disposed = true;\n    }\n    floatPrecision() {\n        if (this.floatPrecisionValue == null) {\n            this.floatPrecisionValue = tidy(() => {\n                if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n                    // Momentarily switching DEBUG flag to false so we don't throw an\n                    // error trying to upload a small value.\n                    const debugFlag = env().getBool('DEBUG');\n                    env().set('DEBUG', false);\n                    const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n                    env().set('DEBUG', debugFlag);\n                    if (underflowCheckValue > 0) {\n                        return 32;\n                    }\n                }\n                return 16;\n            });\n        }\n        return this.floatPrecisionValue;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    uploadToGPU(dataId) {\n        const texData = this.texData.get(dataId);\n        const { shape, dtype, values, texture, usage, isPacked } = texData;\n        if (texture != null) {\n            // Array is already on GPU. No-op.\n            return;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let texShape = texData.texShape;\n        if (texShape == null) {\n            texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n            texData.texShape = texShape;\n        }\n        if (values != null) {\n            const shapeAs3D = webgl_util.getShapeAs3D(shape);\n            let program;\n            let width = texShape[1], height = texShape[0];\n            const isByteArray = values instanceof Uint8Array;\n            if (isPacked) {\n                [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n                program = new EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            else {\n                program =\n                    new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n            if (isByteArray) {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    TextureUsage.PIXELS;\n            }\n            else {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    TextureUsage.UPLOAD;\n            }\n            this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n            // We want the output to remain packed regardless of the value of\n            // WEBGL_PACK.\n            const preventEagerUnpacking = true;\n            const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n            // Have the original texture assume the identity of the encoded output.\n            const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n            texData.texture = outputTexData.texture;\n            texData.texShape = outputTexData.texShape;\n            texData.isPacked = outputTexData.isPacked;\n            texData.usage = outputTexData.usage;\n            this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n            this.texData.delete(encodedOutputTarget.dataId);\n            // Once uploaded, don't store the values on cpu.\n            texData.values = null;\n            if (shouldTimeProgram) {\n                this.uploadWaitMs += util.now() - start;\n            }\n        }\n        else {\n            const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n            texData.texture = newTexture;\n        }\n    }\n    convertAndCacheOnCPU(dataId, float32Values) {\n        const texData = this.texData.get(dataId);\n        const { dtype } = texData;\n        this.releaseGPUData(dataId);\n        if (float32Values != null) {\n            texData.values = float32ToTypedArray(float32Values, dtype);\n        }\n        return texData.values;\n    }\n    acquireTexture(texShape, texType, dtype, isPacked) {\n        this.numBytesInGPU += this.computeBytes(texShape, dtype);\n        if (!this.warnedAboutMemory &&\n            this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n            const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n            this.warnedAboutMemory = true;\n            console.warn(`High memory usage in GPU: ${mb} MB, ` +\n                `most likely due to a memory leak`);\n        }\n        return this.textureManager.acquireTexture(texShape, texType, isPacked);\n    }\n    computeBytes(shape, dtype) {\n        return shape[0] * shape[1] * util.bytesPerElement(dtype);\n    }\n}\nMathBackendWebGL.nextDataId = 0;\nfunction float32ToTypedArray(a, dtype) {\n    if (dtype === 'float32' || dtype === 'complex64') {\n        return a;\n    }\n    else if (dtype === 'int32' || dtype === 'bool') {\n        const result = (dtype === 'int32') ? new Int32Array(a.length) :\n            new Uint8Array(a.length);\n        for (let i = 0; i < result.length; ++i) {\n            result[i] = Math.round(a[i]);\n        }\n        return result;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n//# sourceMappingURL=backend_webgl.js.map"]},"metadata":{},"sourceType":"module"}