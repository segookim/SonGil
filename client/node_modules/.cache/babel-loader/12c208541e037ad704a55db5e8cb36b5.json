{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { scatterImpl } from './Scatter_impl';\nexport function scatterNd(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var indices = inputs.indices,\n      updates = inputs.updates;\n  var shape = attrs.shape;\n\n  var _backend_util$calcula = backend_util.calculateShapes(updates, indices, shape),\n      sliceRank = _backend_util$calcula.sliceRank,\n      numUpdates = _backend_util$calcula.numUpdates,\n      sliceSize = _backend_util$calcula.sliceSize,\n      strides = _backend_util$calcula.strides,\n      outputSize = _backend_util$calcula.outputSize;\n\n  var sumDupeIndices = true;\n  var indicesBuf = backend.bufferSync(indices);\n  var updatesBuf = backend.bufferSync(updates);\n  var outBuf = scatterImpl(indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, 0\n  /* defaultValue */\n  , sumDupeIndices);\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\nexport var scatterNdConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd\n};","map":{"version":3,"sources":["../../src/kernels/ScatterNd.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAgD,SAAhD,QAA6G,uBAA7G;AAGA,SAAQ,WAAR,QAA0B,gBAA1B;AAEA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAIL;AAAA,MACQ,MADR,GACkC,IADlC,CACQ,MADR;AAAA,MACgB,OADhB,GACkC,IADlC,CACgB,OADhB;AAAA,MACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,MAEQ,OAFR,GAE4B,MAF5B,CAEQ,OAFR;AAAA,MAEiB,OAFjB,GAE4B,MAF5B,CAEiB,OAFjB;AAAA,MAGQ,KAHR,GAGiB,KAHjB,CAGQ,KAHR;;AAAA,8BAMK,YAAY,CAAC,eAAb,CAA6B,OAA7B,EAAsC,OAAtC,EAA+C,KAA/C,CANL;AAAA,MAKQ,SALR,yBAKQ,SALR;AAAA,MAKmB,UALnB,yBAKmB,UALnB;AAAA,MAK+B,SAL/B,yBAK+B,SAL/B;AAAA,MAK0C,OAL1C,yBAK0C,OAL1C;AAAA,MAKmD,UALnD,yBAKmD,UALnD;;AAOC,MAAM,cAAc,GAAG,IAAvB;AAEA,MAAM,UAAU,GAAG,OAAO,CAAC,UAAR,CAAmB,OAAnB,CAAnB;AACA,MAAM,UAAU,GAAG,OAAO,CAAC,UAAR,CAAmB,OAAnB,CAAnB;AAEA,MAAM,MAAM,GAAG,WAAW,CACtB,UADsB,EACV,UADU,EACE,KADF,EACS,UADT,EACqB,SADrB,EACgC,UADhC,EAEtB,SAFsB,EAEX,OAFW,EAEF;AAAE;AAFA,IAEoB,cAFpB,CAA1B;AAIA,SAAO,OAAO,CAAC,cAAR,CAAuB,KAAvB,EAA8B,MAAM,CAAC,KAArC,EAA4C,MAAM,CAAC,MAAnD,CAAP;AACD;AAED,OAAO,IAAM,eAAe,GAAiB;AAC3C,EAAA,UAAU,EAAE,SAD+B;AAE3C,EAAA,WAAW,EAAE,KAF8B;AAG3C,EAAA,UAAU,EAAE;AAH+B,CAAtC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { scatterImpl } from './Scatter_impl';\nexport function scatterNd(args) {\n    const { inputs, backend, attrs } = args;\n    const { indices, updates } = inputs;\n    const { shape } = attrs;\n    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(updates, indices, shape);\n    const sumDupeIndices = true;\n    const indicesBuf = backend.bufferSync(indices);\n    const updatesBuf = backend.bufferSync(updates);\n    const outBuf = scatterImpl(indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n    return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\nexport const scatterNdConfig = {\n    kernelName: ScatterNd,\n    backendName: 'cpu',\n    kernelFunc: scatterNd\n};\n//# sourceMappingURL=ScatterNd.js.map"]},"metadata":{},"sourceType":"module"}