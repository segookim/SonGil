{"ast":null,"code":"import _inherits from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _regeneratorRuntime from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport { iteratorFromConcatenated, iteratorFromFunction, iteratorFromItems, iteratorFromZipped, ZipMismatchMode } from './iterators/lazy_iterator';\nimport { canTensorify, deepMapAndAwaitAll, isIterable } from './util/deep_map'; // TODO(soergel): consider vectorized operations within the pipeline.\n\n/**\n * Represents a potentially large list of independent data elements (typically\n * 'samples' or 'examples').\n *\n * A 'data example' may be a primitive, an array, a map from string keys to\n * values, or any nested structure of these.\n *\n * A `Dataset` represents an ordered collection of elements, together with a\n * chain of transformations to be performed on those elements. Each\n * transformation is a method of `Dataset` that returns another `Dataset`, so\n * these may be chained, e.g.\n * `const processedDataset = rawDataset.filter(...).map(...).batch(...)`.\n *\n * Data loading and transformation is done in a lazy, streaming fashion.  The\n * dataset may be iterated over multiple times; each iteration starts the data\n * loading anew and recapitulates the transformations.\n *\n * A `Dataset` is typically processed as a stream of unbatched examples --i.e.,\n * its transformations are applied one example at a time. Batching produces a\n * new `Dataset` where each element is a batch. Batching should usually come\n * last in a pipeline, because data transformations are easier to express on a\n * per-example basis than on a per-batch basis.\n *\n * The following code examples are calling `await dataset.forEachAsync(...)` to\n * iterate once over the entire dataset in order to print out the data.\n *\n * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}\n */\n\nexport var Dataset = /*#__PURE__*/function () {\n  function Dataset() {\n    _classCallCheck(this, Dataset);\n\n    this.size = null;\n  } // TODO(soergel): Make Datasets report whether repeated iterator() calls\n  // produce the same result (e.g., reading from a file) or different results\n  // (e.g., from the webcam).  Currently we don't make this distinction but it\n  // could be important for the user to know.\n  // abstract isDeterministic(): boolean;\n\n  /**\n   * Groups elements into batches.\n   *\n   * It is assumed that each of the incoming dataset elements has the same\n   * structure-- i.e. the same set of keys at each location in an object\n   * hierarchy.  For each key, the resulting `Dataset` provides a batched\n   * element collecting all of the incoming values for that key.\n   *\n   *  * Incoming primitives are grouped into a 1-D Tensor.\n   *  * Incoming Tensors are grouped into a new Tensor where the 0'th axis is\n   *    the batch dimension.\n   *  * Incoming arrays are converted to Tensor and then batched.\n   *  * A nested array is interpreted as an n-D Tensor, so the batched result\n   *    has n+1 dimensions.\n   *  * An array that cannot be converted to Tensor produces an error.\n   *\n   * If an array should not be batched as a unit, it should first be converted\n   * to an object with integer keys.\n   *\n   * Here are a few examples:\n   *\n   * Batch a dataset of numbers:\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);\n   * await a.forEachAsync(e => e.print());\n   * ```\n   *\n   * Batch a dataset of arrays:\n   * ```js\n   * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);\n   * await b.forEachAsync(e => e.print());\n   * ```\n   *\n   * Batch a dataset of objects:\n   * ```js\n   * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},\n   *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},\n   *   {a: 8, b: 18}]).batch(4);\n   * await c.forEachAsync(e => {\n   *   console.log('{');\n   *   for(var key in e) {\n   *     console.log(key+':');\n   *     e[key].print();\n   *   }\n   *   console.log('}');\n   * })\n   * ```\n   *\n   * @param batchSize The number of elements desired per batch.\n   * @param smallLastBatch Whether to emit the final batch when it has fewer\n   *   than batchSize elements. Default true.\n   * @returns A `Dataset`, from which a stream of batches can be obtained.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n\n\n  _createClass(Dataset, [{\n    key: \"batch\",\n    value: function batch(batchSize) {\n      var smallLastBatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var base = this;\n      tf.util.assert(batchSize > 0, function () {\n        return \"batchSize needs to be positive, but it is\\n      \".concat(batchSize);\n      });\n      var size;\n\n      if (this.size === Infinity || this.size == null) {\n        // If the size of this dataset is infinity or null, the new size keeps the\n        // same.\n        size = this.size;\n      } else if (smallLastBatch) {\n        // If the size of this dataset is known and include small last batch, the\n        // new size is full batch count plus last batch.\n        size = Math.ceil(this.size / batchSize);\n      } else {\n        // If the size of this dataset is known and not include small last batch,\n        // the new size is full batch count.\n        size = Math.floor(this.size / batchSize);\n      }\n\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return base.iterator();\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent.columnMajorBatch(batchSize, smallLastBatch, deepBatchConcat));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })), size);\n    }\n    /**\n     * Concatenates this `Dataset` with another.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3]);\n     * const b = tf.data.array([4, 5, 6]);\n     * const c = a.concatenate(b);\n     * await c.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param dataset A `Dataset` to be concatenated onto this one.\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"concatenate\",\n    value: function concatenate(dataset) {\n      var base = this;\n      var size;\n\n      if (this.size === Infinity || dataset.size === Infinity) {\n        // If the size of any of these two dataset is infinity, new size is\n        // infinity.\n        size = Infinity;\n      } else if (this.size != null && dataset.size != null) {\n        // If the size of both datasets are known and not infinity, new size is\n        // sum the size of these two datasets.\n        size = this.size + dataset.size;\n      } else {\n        // If neither of these two datasets has infinite size and any of these two\n        // datasets' size is null, the new size is null.\n        size = null;\n      }\n\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return base.iterator();\n\n              case 2:\n                _context2.t0 = _context2.sent;\n                _context2.next = 5;\n                return dataset.iterator();\n\n              case 5:\n                _context2.t1 = _context2.sent;\n                return _context2.abrupt(\"return\", _context2.t0.concatenate.call(_context2.t0, _context2.t1));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })), size);\n    }\n    /**\n     * Filters this dataset according to `predicate`.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n     *   .filter(x => x%2 === 0);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param predicate A function mapping a dataset element to a boolean or a\n     * `Promise` for one.\n     *\n     * @returns A `Dataset` of elements for which the predicate was true.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"filter\",\n    value: function filter(predicate) {\n      var base = this;\n      var size;\n\n      if (this.size === Infinity) {\n        // If the size of this dataset is infinity, new size is infinity\n        size = Infinity;\n      } else {\n        // If this dataset has limited elements, new size is null because it might\n        // exhausted randomly.\n        size = null;\n      }\n\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return base.iterator();\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent.filter(function (x) {\n                  return tf.tidy(function () {\n                    return predicate(x);\n                  });\n                }));\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      })), size);\n    }\n    /**\n     * Apply a function to every element of the dataset.\n     *\n     * After the function is applied to a dataset element, any Tensors contained\n     * within that element are disposed.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3]);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param f A function to apply to each dataset element.\n     * @returns A `Promise` that resolves after all elements have been processed.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"forEachAsync\",\n    value: function () {\n      var _forEachAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(f) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.iterator();\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent.forEachAsync(f));\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function forEachAsync(_x) {\n        return _forEachAsync.apply(this, arguments);\n      }\n\n      return forEachAsync;\n    }()\n    /**\n     * Maps this dataset through a 1-to-1 transform.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3]).map(x => x*x);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param transform A function mapping a dataset element to a transformed\n     *   dataset element.\n     *\n     * @returns A `Dataset` of transformed elements.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"map\",\n    value: function map(transform) {\n      var base = this;\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return base.iterator();\n\n              case 2:\n                return _context5.abrupt(\"return\", _context5.sent.map(function (x) {\n                  return tf.tidy(function () {\n                    return transform(x);\n                  });\n                }));\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      })), this.size);\n    }\n    /**\n     * Maps this dataset through an async 1-to-1 transform.\n     *\n     * ```js\n     * const a =\n     *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){\n     *    setTimeout(() => {\n     *      resolve(x * x);\n     *    }, Math.random()*1000 + 500);\n     *  }));\n     * console.log(await a.toArray());\n     * ```\n     *\n     * @param transform A function mapping a dataset element to a `Promise` for a\n     *   transformed dataset element.  This transform is responsible for disposing\n     *   any intermediate `Tensor`s, i.e. by wrapping its computation in\n     *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous\n     *   `map()` case).\n     *\n     * @returns A `Dataset` of transformed elements.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"mapAsync\",\n    value: function mapAsync(transform) {\n      var base = this;\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return base.iterator();\n\n              case 2:\n                return _context6.abrupt(\"return\", _context6.sent.mapAsync(transform));\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      })), this.size);\n    }\n    /**\n     *  Creates a `Dataset` that prefetches elements from this dataset.\n     *\n     * @param bufferSize: An integer specifying the number of elements to be\n     *   prefetched.\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"prefetch\",\n    value: function prefetch(bufferSize) {\n      if (bufferSize == null) {\n        throw new RangeError('`Dataset.prefetch()` requires bufferSize to be specified.');\n      }\n\n      var base = this;\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return base.iterator();\n\n              case 2:\n                return _context7.abrupt(\"return\", _context7.sent.prefetch(bufferSize));\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      })), this.size);\n    }\n    /**\n     * Repeats this dataset `count` times.\n     *\n     * NOTE: If this dataset is a function of global state (e.g. a random number\n     * generator), then different repetitions may produce different elements.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3]).repeat(3);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param count: (Optional) An integer, representing the number of times\n     *   the dataset should be repeated. The default behavior (if `count` is\n     *   `undefined` or negative) is for the dataset be repeated indefinitely.\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"repeat\",\n    value: function repeat(count) {\n      var base = this;\n      var size;\n\n      if (this.size != null && count > 0) {\n        // If this dataset has size and count is positive, new size is current\n        // size multiply count. This also covers the case that current size is\n        // infinity.\n        size = this.size * count;\n      } else if (count === 0) {\n        // If count is 0, new size is 0.\n        size = 0;\n      } else if (this.size != null && (count === undefined || count < 0)) {\n        // If this dataset has size and count is undefined or negative, the\n        // dataset will be repeated indefinitely and new size is infinity.\n        size = Infinity;\n      } else {\n        // If the size of this dataset is null, the new dataset's size is null.\n        size = null;\n      }\n\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var iteratorIterator;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                iteratorIterator = iteratorFromFunction( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n                  return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          _context8.next = 2;\n                          return base.iterator();\n\n                        case 2:\n                          _context8.t0 = _context8.sent;\n                          return _context8.abrupt(\"return\", {\n                            value: _context8.t0,\n                            done: false\n                          });\n\n                        case 4:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                })));\n                return _context9.abrupt(\"return\", iteratorFromConcatenated(iteratorIterator.take(count)));\n\n              case 2:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      })), size);\n    }\n    /**\n     * Creates a `Dataset` that skips `count` initial elements from this dataset.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param count: The number of elements of this dataset that should be skipped\n     *   to form the new dataset.  If `count` is greater than the size of this\n     *   dataset, the new dataset will contain no elements.  If `count`\n     *   is `undefined` or negative, skips the entire dataset.\n     *\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"skip\",\n    value: function skip(count) {\n      var base = this;\n      var size;\n\n      if (this.size != null && count >= 0 && this.size >= count) {\n        // If the size of this dataset is greater than count, the new dataset's\n        // size is current size minus skipped size.This also covers the case that\n        // current size is infinity.\n        size = this.size - count;\n      } else if (this.size != null && (this.size < count || count === undefined || count < 0)) {\n        // If the size of this dataset is smaller than count, or count is\n        // undefined or negative, skips the entire dataset and the new size is 0.\n        size = 0;\n      } else {\n        // If the size of this dataset is null, the new dataset's size is null.\n        size = null;\n      }\n\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return base.iterator();\n\n              case 2:\n                return _context10.abrupt(\"return\", _context10.sent.skip(count));\n\n              case 3:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      })), size);\n    }\n    /**\n     * Pseudorandomly shuffles the elements of this dataset. This is done in a\n     * streaming manner, by sampling from a given number of prefetched elements.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param bufferSize: An integer specifying the number of elements from this\n     *   dataset from which the new dataset will sample.\n     * @param seed: (Optional) An integer specifying the random seed that will\n     *   be used to create the distribution.\n     * @param reshuffleEachIteration: (Optional) A boolean, which if true\n     *   indicates that the dataset should be pseudorandomly reshuffled each time\n     *   it is iterated over. If false, elements will be returned in the same\n     *   shuffled order on each iteration. (Defaults to `true`.)\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"shuffle\",\n    value: function shuffle(bufferSize, seed) {\n      var reshuffleEachIteration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      if (bufferSize == null || bufferSize < 0) {\n        if (this.size == null) {\n          throw new RangeError('`Dataset.shuffle()` requires bufferSize to be specified.');\n        } else {\n          throw new RangeError('`Dataset.shuffle()` requires bufferSize to be specified.  ' + 'If your data fits in main memory (for regular JS objects), ' + 'and/or GPU memory (for `tf.Tensor`s), consider setting ' + \"bufferSize to the dataset size (\".concat(this.size, \" elements)\"));\n        }\n      }\n\n      var base = this;\n      var random = seedrandom.alea(seed || tf.util.now().toString());\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var seed2;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                seed2 = random.int32();\n\n                if (reshuffleEachIteration) {\n                  seed2 += random.int32();\n                }\n\n                _context11.next = 4;\n                return base.iterator();\n\n              case 4:\n                return _context11.abrupt(\"return\", _context11.sent.shuffle(bufferSize, seed2.toString()));\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      })), this.size);\n    }\n    /**\n     * Creates a `Dataset` with at most `count` initial elements from this\n     * dataset.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param count: The number of elements of this dataset that should be taken\n     *   to form the new dataset.  If `count` is `undefined` or negative, or if\n     *   `count` is greater than the size of this dataset, the new dataset will\n     *   contain all elements of this dataset.\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"take\",\n    value: function take(count) {\n      var base = this;\n      var size;\n\n      if (this.size != null && this.size > count) {\n        // If the size of this dataset is greater than count, the new dataset's\n        // size is count.\n        size = count;\n      } else if (this.size != null && this.size <= count) {\n        // If the size of this dataset is equal or smaller than count, the new\n        // dataset's size is the size of this dataset.\n        size = this.size;\n      } else {\n        // If the size of this dataset is null, the new dataset's size is null.\n        size = null;\n      }\n\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return base.iterator();\n\n              case 2:\n                return _context12.abrupt(\"return\", _context12.sent.take(count));\n\n              case 3:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      })), size);\n    }\n    /**\n     * Collect all elements of this dataset into an array.\n     *\n     * Obviously this will succeed only for small datasets that fit in memory.\n     * Useful for testing and generally should be avoided if possible.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]);\n     * console.log(await a.toArray());\n     * ```\n     *\n     * @returns A Promise for an array of elements, which will resolve\n     *   when a new stream has been obtained and fully consumed.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function () {\n      var _toArray = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                if (!(this.size === Infinity)) {\n                  _context13.next = 2;\n                  break;\n                }\n\n                throw new Error('Can not convert infinite data stream to array.');\n\n              case 2:\n                _context13.next = 4;\n                return this.iterator();\n\n              case 4:\n                return _context13.abrupt(\"return\", _context13.sent.toArray());\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function toArray() {\n        return _toArray.apply(this, arguments);\n      }\n\n      return toArray;\n    }()\n    /**\n     * Collect all elements of this dataset into an array with prefetching 100\n     * elements. This is useful for testing, because the prefetch changes the\n     * order in which the Promises are resolved along the processing pipeline.\n     * This may help expose bugs where results are dependent on the order of\n     * Promise resolution rather than on the logical order of the stream (i.e.,\n     * due to hidden mutable state).\n     *\n     * @returns A Promise for an array of elements, which will resolve\n     *   when a new stream has been obtained and fully consumed.\n     */\n\n  }, {\n    key: \"toArrayForTest\",\n    value: function () {\n      var _toArrayForTest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                if (!(this.size === Infinity)) {\n                  _context14.next = 2;\n                  break;\n                }\n\n                throw new Error('Can not convert infinite data stream to array.');\n\n              case 2:\n                _context14.next = 4;\n                return this.iterator();\n\n              case 4:\n                return _context14.abrupt(\"return\", _context14.sent.toArrayForTest());\n\n              case 5:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function toArrayForTest() {\n        return _toArrayForTest.apply(this, arguments);\n      }\n\n      return toArrayForTest;\n    }()\n  }]);\n\n  return Dataset;\n}(); // TODO(soergel): deep sharded shuffle, where supported\n\nDataset.MAX_BUFFER_SIZE = 10000;\n/**\n * Create a `Dataset` defined by a provided iterator() function.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const iter = tf.data.iteratorFromFunction(func);\n * const ds = tf.data.datasetFromIteratorFn(iter);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n */\n\nexport function datasetFromIteratorFn(iteratorFn) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return new ( /*#__PURE__*/function (_Dataset) {\n    _inherits(_class, _Dataset);\n\n    var _super = _createSuper(_class);\n\n    function _class() {\n      var _this;\n\n      _classCallCheck(this, _class);\n\n      _this = _super.apply(this, arguments);\n      _this.size = size;\n      return _this;\n    }\n    /*\n     * Provide a new stream of elements.  Note this will also start new streams\n     * from any underlying `Dataset`s.\n     */\n\n\n    _createClass(_class, [{\n      key: \"iterator\",\n      value: function () {\n        var _iterator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n          return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n            while (1) {\n              switch (_context15.prev = _context15.next) {\n                case 0:\n                  return _context15.abrupt(\"return\", iteratorFn());\n\n                case 1:\n                case \"end\":\n                  return _context15.stop();\n              }\n            }\n          }, _callee15);\n        }));\n\n        function iterator() {\n          return _iterator.apply(this, arguments);\n        }\n\n        return iterator;\n      }()\n    }]);\n\n    return _class;\n  }(Dataset))();\n}\n/**\n * Create a `Dataset` from an array of elements.\n *\n * Create a Dataset from an array of objects:\n * ```js\n * const a = tf.data.array([{'item': 1}, {'item': 2}, {'item': 3}]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n *\n * Create a Dataset from an array of numbers:\n * ```js\n * const a = tf.data.array([4, 5, 6]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n * @param items An array of elements that will be parsed as items in a dataset.\n *\n * @doc {heading: 'Data', subheading: 'Creation', namespace: 'data'}\n */\n\nexport function array(items) {\n  return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n    return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            return _context16.abrupt(\"return\", iteratorFromItems(items));\n\n          case 1:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee16);\n  })), items.length);\n}\n/**\n * Create a `Dataset` by zipping together an array, dict, or nested\n * structure of `Dataset`s (and perhaps additional constants).\n * The underlying datasets must provide elements in a consistent order such that\n * they correspond.\n *\n * The number of elements in the resulting dataset is the same as the size of\n * the smallest dataset in datasets.\n *\n * The nested structure of the `datasets` argument determines the\n * structure of elements in the resulting iterator.\n *\n * Note this means that, given an array of two datasets that produce dict\n * elements, the result is a dataset that produces elements that are arrays\n * of two dicts:\n *\n * Zip an array of datasets:\n * ```js\n * console.log('Zip two datasets of objects:');\n * const ds1 = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const ds2 = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const ds3 = tf.data.zip([ds1, ds2]);\n * await ds3.forEachAsync(e => console.log(JSON.stringify(e)));\n *\n * // If the goal is to merge the dicts in order to produce elements like\n * // {a: ..., b: ...}, this requires a second step such as:\n * console.log('Merge the objects:');\n * const ds4 = ds3.map(x => {return {a: x[0].a, b: x[1].b}});\n * await ds4.forEachAsync(e => console.log(e));\n * ```\n *\n * Zip a dict of datasets:\n * ```js\n * const a = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const b = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const c = tf.data.zip({c: a, d: b});\n * await c.forEachAsync(e => console.log(JSON.stringify(e)));\n * ```\n *\n * @doc {heading: 'Data', subheading: 'Operations', namespace: 'data'}\n */\n\nexport function zip(datasets) {\n  // manually type-check the argument for JS users\n  if (!isIterable(datasets)) {\n    throw new Error('The argument to zip() must be an object or array.');\n  }\n\n  var size;\n\n  if (Array.isArray(datasets)) {\n    for (var i = 0; i < datasets.length; i++) {\n      size = size == null ? datasets[i].size : Math.min(size, datasets[i].size);\n    }\n  } else if (datasets instanceof Object) {\n    for (var ds in datasets) {\n      size = size == null ? datasets[ds].size : Math.min(size, datasets[ds].size);\n    }\n  }\n\n  return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n    var streams;\n    return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            _context17.next = 2;\n            return deepMapAndAwaitAll(datasets, function (d) {\n              if (d instanceof Dataset) {\n                return {\n                  value: d.iterator(),\n                  recurse: false\n                };\n              } else if (isIterable(d)) {\n                return {\n                  value: null,\n                  recurse: true\n                };\n              } else {\n                throw new Error('Leaves of the structure passed to zip() must be Datasets, ' + 'not primitives.');\n              }\n            });\n\n          case 2:\n            streams = _context17.sent;\n            return _context17.abrupt(\"return\", iteratorFromZipped(streams, ZipMismatchMode.SHORTEST));\n\n          case 4:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, _callee17);\n  })), size);\n}\n/**\n * A zip function for use with deepZip, passed via the columnMajorBatch call.\n *\n * Accepts an array of identically-structured nested elements and either batches\n * them (if they are primitives, numeric arrays, or Tensors) or requests\n * recursion (if not).\n */\n// tslint:disable-next-line:no-any\n\nfunction deepBatchConcat(rows) {\n  if (rows === null) {\n    return null;\n  } // use the first item to decide whether to recurse or batch here.\n\n\n  var exampleRow = rows[0];\n\n  if (canTensorify(exampleRow)) {\n    // rows is an array of primitives, Tensors, or arrays.  Batch them.\n    var value = batchConcat(rows);\n    return {\n      value: value,\n      recurse: false\n    };\n  } // the example row is an object, so recurse into it.\n\n\n  return {\n    value: null,\n    recurse: true\n  };\n}\n/**\n * Assembles a list of same-shaped numbers, number arrays, or Tensors\n * into a single new Tensor where axis 0 is the batch dimension.\n */\n\n\nfunction batchConcat(arrays) {\n  if (arrays.length === 0) {\n    // We can't return an empty Tensor because we don't know the element shape.\n    throw new Error('Can\\'t make a batch of zero elements.');\n  }\n\n  if (arrays[0] instanceof tf.Tensor) {\n    // Input is an array of Tensors\n    return tf.stack(arrays);\n  } else {\n    // Input is a possibly-nested array of numbers.\n    return tf.tensor(arrays);\n  }\n}","map":{"version":3,"sources":["../src/dataset.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport { iteratorFromConcatenated, iteratorFromFunction, iteratorFromItems, iteratorFromZipped, ZipMismatchMode } from './iterators/lazy_iterator';\nimport { canTensorify, deepMapAndAwaitAll, isIterable } from './util/deep_map';\n// TODO(soergel): consider vectorized operations within the pipeline.\n/**\n * Represents a potentially large list of independent data elements (typically\n * 'samples' or 'examples').\n *\n * A 'data example' may be a primitive, an array, a map from string keys to\n * values, or any nested structure of these.\n *\n * A `Dataset` represents an ordered collection of elements, together with a\n * chain of transformations to be performed on those elements. Each\n * transformation is a method of `Dataset` that returns another `Dataset`, so\n * these may be chained, e.g.\n * `const processedDataset = rawDataset.filter(...).map(...).batch(...)`.\n *\n * Data loading and transformation is done in a lazy, streaming fashion.  The\n * dataset may be iterated over multiple times; each iteration starts the data\n * loading anew and recapitulates the transformations.\n *\n * A `Dataset` is typically processed as a stream of unbatched examples --i.e.,\n * its transformations are applied one example at a time. Batching produces a\n * new `Dataset` where each element is a batch. Batching should usually come\n * last in a pipeline, because data transformations are easier to express on a\n * per-example basis than on a per-batch basis.\n *\n * The following code examples are calling `await dataset.forEachAsync(...)` to\n * iterate once over the entire dataset in order to print out the data.\n *\n * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}\n */\nexport class Dataset {\n    constructor() {\n        this.size = null;\n    }\n    // TODO(soergel): Make Datasets report whether repeated iterator() calls\n    // produce the same result (e.g., reading from a file) or different results\n    // (e.g., from the webcam).  Currently we don't make this distinction but it\n    // could be important for the user to know.\n    // abstract isDeterministic(): boolean;\n    /**\n     * Groups elements into batches.\n     *\n     * It is assumed that each of the incoming dataset elements has the same\n     * structure-- i.e. the same set of keys at each location in an object\n     * hierarchy.  For each key, the resulting `Dataset` provides a batched\n     * element collecting all of the incoming values for that key.\n     *\n     *  * Incoming primitives are grouped into a 1-D Tensor.\n     *  * Incoming Tensors are grouped into a new Tensor where the 0'th axis is\n     *    the batch dimension.\n     *  * Incoming arrays are converted to Tensor and then batched.\n     *  * A nested array is interpreted as an n-D Tensor, so the batched result\n     *    has n+1 dimensions.\n     *  * An array that cannot be converted to Tensor produces an error.\n     *\n     * If an array should not be batched as a unit, it should first be converted\n     * to an object with integer keys.\n     *\n     * Here are a few examples:\n     *\n     * Batch a dataset of numbers:\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);\n     * await a.forEachAsync(e => e.print());\n     * ```\n     *\n     * Batch a dataset of arrays:\n     * ```js\n     * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);\n     * await b.forEachAsync(e => e.print());\n     * ```\n     *\n     * Batch a dataset of objects:\n     * ```js\n     * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},\n     *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},\n     *   {a: 8, b: 18}]).batch(4);\n     * await c.forEachAsync(e => {\n     *   console.log('{');\n     *   for(var key in e) {\n     *     console.log(key+':');\n     *     e[key].print();\n     *   }\n     *   console.log('}');\n     * })\n     * ```\n     *\n     * @param batchSize The number of elements desired per batch.\n     * @param smallLastBatch Whether to emit the final batch when it has fewer\n     *   than batchSize elements. Default true.\n     * @returns A `Dataset`, from which a stream of batches can be obtained.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    batch(batchSize, smallLastBatch = true) {\n        const base = this;\n        tf.util.assert(batchSize > 0, () => `batchSize needs to be positive, but it is\n      ${batchSize}`);\n        let size;\n        if (this.size === Infinity || this.size == null) {\n            // If the size of this dataset is infinity or null, the new size keeps the\n            // same.\n            size = this.size;\n        }\n        else if (smallLastBatch) {\n            // If the size of this dataset is known and include small last batch, the\n            // new size is full batch count plus last batch.\n            size = Math.ceil(this.size / batchSize);\n        }\n        else {\n            // If the size of this dataset is known and not include small last batch,\n            // the new size is full batch count.\n            size = Math.floor(this.size / batchSize);\n        }\n        return datasetFromIteratorFn(async () => {\n            return (await base.iterator())\n                .columnMajorBatch(batchSize, smallLastBatch, deepBatchConcat);\n        }, size);\n    }\n    /**\n     * Concatenates this `Dataset` with another.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3]);\n     * const b = tf.data.array([4, 5, 6]);\n     * const c = a.concatenate(b);\n     * await c.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param dataset A `Dataset` to be concatenated onto this one.\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    concatenate(dataset) {\n        const base = this;\n        let size;\n        if (this.size === Infinity || dataset.size === Infinity) {\n            // If the size of any of these two dataset is infinity, new size is\n            // infinity.\n            size = Infinity;\n        }\n        else if (this.size != null && dataset.size != null) {\n            // If the size of both datasets are known and not infinity, new size is\n            // sum the size of these two datasets.\n            size = this.size + dataset.size;\n        }\n        else {\n            // If neither of these two datasets has infinite size and any of these two\n            // datasets' size is null, the new size is null.\n            size = null;\n        }\n        return datasetFromIteratorFn(async () => (await base.iterator()).concatenate(await dataset.iterator()), size);\n    }\n    /**\n     * Filters this dataset according to `predicate`.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n     *   .filter(x => x%2 === 0);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param predicate A function mapping a dataset element to a boolean or a\n     * `Promise` for one.\n     *\n     * @returns A `Dataset` of elements for which the predicate was true.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    filter(predicate) {\n        const base = this;\n        let size;\n        if (this.size === Infinity) {\n            // If the size of this dataset is infinity, new size is infinity\n            size = Infinity;\n        }\n        else {\n            // If this dataset has limited elements, new size is null because it might\n            // exhausted randomly.\n            size = null;\n        }\n        return datasetFromIteratorFn(async () => {\n            return (await base.iterator()).filter(x => tf.tidy(() => predicate(x)));\n        }, size);\n    }\n    /**\n     * Apply a function to every element of the dataset.\n     *\n     * After the function is applied to a dataset element, any Tensors contained\n     * within that element are disposed.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3]);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param f A function to apply to each dataset element.\n     * @returns A `Promise` that resolves after all elements have been processed.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    async forEachAsync(f) {\n        return (await this.iterator()).forEachAsync(f);\n    }\n    /**\n     * Maps this dataset through a 1-to-1 transform.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3]).map(x => x*x);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param transform A function mapping a dataset element to a transformed\n     *   dataset element.\n     *\n     * @returns A `Dataset` of transformed elements.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    map(transform) {\n        const base = this;\n        return datasetFromIteratorFn(async () => {\n            return (await base.iterator()).map(x => tf.tidy(() => transform(x)));\n        }, this.size);\n    }\n    /**\n     * Maps this dataset through an async 1-to-1 transform.\n     *\n     * ```js\n     * const a =\n     *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){\n     *    setTimeout(() => {\n     *      resolve(x * x);\n     *    }, Math.random()*1000 + 500);\n     *  }));\n     * console.log(await a.toArray());\n     * ```\n     *\n     * @param transform A function mapping a dataset element to a `Promise` for a\n     *   transformed dataset element.  This transform is responsible for disposing\n     *   any intermediate `Tensor`s, i.e. by wrapping its computation in\n     *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous\n     *   `map()` case).\n     *\n     * @returns A `Dataset` of transformed elements.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    mapAsync(transform) {\n        const base = this;\n        return datasetFromIteratorFn(async () => {\n            return (await base.iterator()).mapAsync(transform);\n        }, this.size);\n    }\n    /**\n     *  Creates a `Dataset` that prefetches elements from this dataset.\n     *\n     * @param bufferSize: An integer specifying the number of elements to be\n     *   prefetched.\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    prefetch(bufferSize) {\n        if (bufferSize == null) {\n            throw new RangeError('`Dataset.prefetch()` requires bufferSize to be specified.');\n        }\n        const base = this;\n        return datasetFromIteratorFn(async () => (await base.iterator()).prefetch(bufferSize), this.size);\n    }\n    /**\n     * Repeats this dataset `count` times.\n     *\n     * NOTE: If this dataset is a function of global state (e.g. a random number\n     * generator), then different repetitions may produce different elements.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3]).repeat(3);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param count: (Optional) An integer, representing the number of times\n     *   the dataset should be repeated. The default behavior (if `count` is\n     *   `undefined` or negative) is for the dataset be repeated indefinitely.\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    repeat(count) {\n        const base = this;\n        let size;\n        if (this.size != null && count > 0) {\n            // If this dataset has size and count is positive, new size is current\n            // size multiply count. This also covers the case that current size is\n            // infinity.\n            size = this.size * count;\n        }\n        else if (count === 0) {\n            // If count is 0, new size is 0.\n            size = 0;\n        }\n        else if (this.size != null && (count === undefined || count < 0)) {\n            // If this dataset has size and count is undefined or negative, the\n            // dataset will be repeated indefinitely and new size is infinity.\n            size = Infinity;\n        }\n        else {\n            // If the size of this dataset is null, the new dataset's size is null.\n            size = null;\n        }\n        return datasetFromIteratorFn(async () => {\n            const iteratorIterator = iteratorFromFunction(async () => ({ value: await base.iterator(), done: false }));\n            return iteratorFromConcatenated(iteratorIterator.take(count));\n        }, size);\n    }\n    /**\n     * Creates a `Dataset` that skips `count` initial elements from this dataset.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param count: The number of elements of this dataset that should be skipped\n     *   to form the new dataset.  If `count` is greater than the size of this\n     *   dataset, the new dataset will contain no elements.  If `count`\n     *   is `undefined` or negative, skips the entire dataset.\n     *\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    skip(count) {\n        const base = this;\n        let size;\n        if (this.size != null && count >= 0 && this.size >= count) {\n            // If the size of this dataset is greater than count, the new dataset's\n            // size is current size minus skipped size.This also covers the case that\n            // current size is infinity.\n            size = this.size - count;\n        }\n        else if (this.size != null &&\n            (this.size < count || count === undefined || count < 0)) {\n            // If the size of this dataset is smaller than count, or count is\n            // undefined or negative, skips the entire dataset and the new size is 0.\n            size = 0;\n        }\n        else {\n            // If the size of this dataset is null, the new dataset's size is null.\n            size = null;\n        }\n        return datasetFromIteratorFn(async () => (await base.iterator()).skip(count), size);\n    }\n    /**\n     * Pseudorandomly shuffles the elements of this dataset. This is done in a\n     * streaming manner, by sampling from a given number of prefetched elements.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param bufferSize: An integer specifying the number of elements from this\n     *   dataset from which the new dataset will sample.\n     * @param seed: (Optional) An integer specifying the random seed that will\n     *   be used to create the distribution.\n     * @param reshuffleEachIteration: (Optional) A boolean, which if true\n     *   indicates that the dataset should be pseudorandomly reshuffled each time\n     *   it is iterated over. If false, elements will be returned in the same\n     *   shuffled order on each iteration. (Defaults to `true`.)\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    shuffle(bufferSize, seed, reshuffleEachIteration = true) {\n        if (bufferSize == null || bufferSize < 0) {\n            if (this.size == null) {\n                throw new RangeError('`Dataset.shuffle()` requires bufferSize to be specified.');\n            }\n            else {\n                throw new RangeError('`Dataset.shuffle()` requires bufferSize to be specified.  ' +\n                    'If your data fits in main memory (for regular JS objects), ' +\n                    'and/or GPU memory (for `tf.Tensor`s), consider setting ' +\n                    `bufferSize to the dataset size (${this.size} elements)`);\n            }\n        }\n        const base = this;\n        const random = seedrandom.alea(seed || tf.util.now().toString());\n        return datasetFromIteratorFn(async () => {\n            let seed2 = random.int32();\n            if (reshuffleEachIteration) {\n                seed2 += random.int32();\n            }\n            return (await base.iterator()).shuffle(bufferSize, seed2.toString());\n        }, this.size);\n    }\n    /**\n     * Creates a `Dataset` with at most `count` initial elements from this\n     * dataset.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param count: The number of elements of this dataset that should be taken\n     *   to form the new dataset.  If `count` is `undefined` or negative, or if\n     *   `count` is greater than the size of this dataset, the new dataset will\n     *   contain all elements of this dataset.\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    take(count) {\n        const base = this;\n        let size;\n        if (this.size != null && this.size > count) {\n            // If the size of this dataset is greater than count, the new dataset's\n            // size is count.\n            size = count;\n        }\n        else if (this.size != null && this.size <= count) {\n            // If the size of this dataset is equal or smaller than count, the new\n            // dataset's size is the size of this dataset.\n            size = this.size;\n        }\n        else {\n            // If the size of this dataset is null, the new dataset's size is null.\n            size = null;\n        }\n        return datasetFromIteratorFn(async () => (await base.iterator()).take(count), size);\n    }\n    /**\n     * Collect all elements of this dataset into an array.\n     *\n     * Obviously this will succeed only for small datasets that fit in memory.\n     * Useful for testing and generally should be avoided if possible.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]);\n     * console.log(await a.toArray());\n     * ```\n     *\n     * @returns A Promise for an array of elements, which will resolve\n     *   when a new stream has been obtained and fully consumed.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    async toArray() {\n        if (this.size === Infinity) {\n            throw new Error('Can not convert infinite data stream to array.');\n        }\n        return (await this.iterator()).toArray();\n    }\n    /**\n     * Collect all elements of this dataset into an array with prefetching 100\n     * elements. This is useful for testing, because the prefetch changes the\n     * order in which the Promises are resolved along the processing pipeline.\n     * This may help expose bugs where results are dependent on the order of\n     * Promise resolution rather than on the logical order of the stream (i.e.,\n     * due to hidden mutable state).\n     *\n     * @returns A Promise for an array of elements, which will resolve\n     *   when a new stream has been obtained and fully consumed.\n     */\n    async toArrayForTest() {\n        if (this.size === Infinity) {\n            throw new Error('Can not convert infinite data stream to array.');\n        }\n        return (await this.iterator()).toArrayForTest();\n    }\n}\n// TODO(soergel): deep sharded shuffle, where supported\nDataset.MAX_BUFFER_SIZE = 10000;\n/**\n * Create a `Dataset` defined by a provided iterator() function.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const iter = tf.data.iteratorFromFunction(func);\n * const ds = tf.data.datasetFromIteratorFn(iter);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n */\nexport function datasetFromIteratorFn(iteratorFn, size = null) {\n    return new class extends Dataset {\n        constructor() {\n            super(...arguments);\n            this.size = size;\n        }\n        /*\n         * Provide a new stream of elements.  Note this will also start new streams\n         * from any underlying `Dataset`s.\n         */\n        async iterator() {\n            return iteratorFn();\n        }\n    }();\n}\n/**\n * Create a `Dataset` from an array of elements.\n *\n * Create a Dataset from an array of objects:\n * ```js\n * const a = tf.data.array([{'item': 1}, {'item': 2}, {'item': 3}]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n *\n * Create a Dataset from an array of numbers:\n * ```js\n * const a = tf.data.array([4, 5, 6]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n * @param items An array of elements that will be parsed as items in a dataset.\n *\n * @doc {heading: 'Data', subheading: 'Creation', namespace: 'data'}\n */\nexport function array(items) {\n    return datasetFromIteratorFn(async () => iteratorFromItems(items), items.length);\n}\n/**\n * Create a `Dataset` by zipping together an array, dict, or nested\n * structure of `Dataset`s (and perhaps additional constants).\n * The underlying datasets must provide elements in a consistent order such that\n * they correspond.\n *\n * The number of elements in the resulting dataset is the same as the size of\n * the smallest dataset in datasets.\n *\n * The nested structure of the `datasets` argument determines the\n * structure of elements in the resulting iterator.\n *\n * Note this means that, given an array of two datasets that produce dict\n * elements, the result is a dataset that produces elements that are arrays\n * of two dicts:\n *\n * Zip an array of datasets:\n * ```js\n * console.log('Zip two datasets of objects:');\n * const ds1 = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const ds2 = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const ds3 = tf.data.zip([ds1, ds2]);\n * await ds3.forEachAsync(e => console.log(JSON.stringify(e)));\n *\n * // If the goal is to merge the dicts in order to produce elements like\n * // {a: ..., b: ...}, this requires a second step such as:\n * console.log('Merge the objects:');\n * const ds4 = ds3.map(x => {return {a: x[0].a, b: x[1].b}});\n * await ds4.forEachAsync(e => console.log(e));\n * ```\n *\n * Zip a dict of datasets:\n * ```js\n * const a = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const b = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const c = tf.data.zip({c: a, d: b});\n * await c.forEachAsync(e => console.log(JSON.stringify(e)));\n * ```\n *\n * @doc {heading: 'Data', subheading: 'Operations', namespace: 'data'}\n */\nexport function zip(datasets) {\n    // manually type-check the argument for JS users\n    if (!isIterable(datasets)) {\n        throw new Error('The argument to zip() must be an object or array.');\n    }\n    let size;\n    if (Array.isArray(datasets)) {\n        for (let i = 0; i < datasets.length; i++) {\n            size = size == null ? datasets[i].size :\n                Math.min(size, datasets[i].size);\n        }\n    }\n    else if (datasets instanceof Object) {\n        for (const ds in datasets) {\n            size = size == null ? datasets[ds].size :\n                Math.min(size, datasets[ds].size);\n        }\n    }\n    return datasetFromIteratorFn(async () => {\n        const streams = await deepMapAndAwaitAll(datasets, d => {\n            if (d instanceof Dataset) {\n                return { value: d.iterator(), recurse: false };\n            }\n            else if (isIterable(d)) {\n                return { value: null, recurse: true };\n            }\n            else {\n                throw new Error('Leaves of the structure passed to zip() must be Datasets, ' +\n                    'not primitives.');\n            }\n        });\n        return iteratorFromZipped(streams, ZipMismatchMode.SHORTEST);\n    }, size);\n}\n/**\n * A zip function for use with deepZip, passed via the columnMajorBatch call.\n *\n * Accepts an array of identically-structured nested elements and either batches\n * them (if they are primitives, numeric arrays, or Tensors) or requests\n * recursion (if not).\n */\n// tslint:disable-next-line:no-any\nfunction deepBatchConcat(rows) {\n    if (rows === null) {\n        return null;\n    }\n    // use the first item to decide whether to recurse or batch here.\n    const exampleRow = rows[0];\n    if (canTensorify(exampleRow)) {\n        // rows is an array of primitives, Tensors, or arrays.  Batch them.\n        const value = batchConcat(rows);\n        return { value, recurse: false };\n    }\n    // the example row is an object, so recurse into it.\n    return { value: null, recurse: true };\n}\n/**\n * Assembles a list of same-shaped numbers, number arrays, or Tensors\n * into a single new Tensor where axis 0 is the batch dimension.\n */\nfunction batchConcat(arrays) {\n    if (arrays.length === 0) {\n        // We can't return an empty Tensor because we don't know the element shape.\n        throw new Error('Can\\'t make a batch of zero elements.');\n    }\n    if (arrays[0] instanceof tf.Tensor) {\n        // Input is an array of Tensors\n        return tf.stack(arrays);\n    }\n    else {\n        // Input is a possibly-nested array of numbers.\n        return tf.tensor(arrays);\n    }\n}\n//# sourceMappingURL=dataset.js.map"]},"metadata":{},"sourceType":"module"}