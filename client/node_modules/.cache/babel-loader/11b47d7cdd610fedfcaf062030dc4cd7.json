{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class MirrorPadProgram {\n  constructor(xShape, paddings, mode) {\n    this.variableNames = ['x'];\n    this.outputShape = paddings.map((p, i) => p[0]\n    /* beforePad */\n    + xShape[i] + p[1]\n    /* afterPad */\n    );\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/mirror_pad_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAO,gBAAP,CAAuB;AAK3B,EAAA,WAAA,CACI,MADJ,EACsB,QADtB,EAEI,IAFJ,EAE+B;AAN/B,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAOE,SAAK,WAAL,GAAmB,QAAQ,CAAC,GAAT,CACf,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,CAAC,CAAD;AAAI;AAAL,MAAuB,MAAM,CAAC,CAAD,CAA7B,GAAmC,CAAC,CAAC,CAAD;AAAI;AADnC,KAAnB;AAEA,UAAM,IAAI,GAAG,MAAM,CAAC,MAApB;AACA,UAAM,KAAK,GAAG,iBAAiB,CAAC,IAAD,CAA/B;AAEA,UAAM,KAAK,GAAG,QAAQ,CAAC,GAAT,CAAa,CAAC,IAAI,CAAC,CAAC,CAAD,CAAnB,EAAwB,IAAxB,CAA6B,GAA7B,CAAd;AACA,UAAM,GAAG,GAAG,QAAQ,CAAC,GAAT,CAAa,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,CAAC,CAAD,CAAD,GAAO,MAAM,CAAC,CAAD,CAApC,EAAyC,IAAzC,CAA8C,GAA9C,CAAZ;AACA,UAAM,cAAc,GAChB,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,EAAwC,WAAxC,EAAqD,KAArD,CAA2D,CAA3D,EAA8D,IAA9D,CADJ;AAEA,UAAM,MAAM,GAAG,IAAI,KAAK,SAAT,GAAqB,CAArB,GAAyB,CAAxC;;AAEA,QAAI,IAAI,KAAK,CAAb,EAAgB;AACd,WAAK,QAAL,GAAgB;sBACA,KAAK;oBACP,GAAG;;;;;wCAKiB,MAAM;;4CAEF,MAAM;;;;AAI3C,OAbD;AAcA;AACD;;AACD,SAAK,QAAL,GAAgB;QACZ,KAAK,YAAY,KAAK,IAAI,KAAK;QAC/B,KAAK,UAAU,KAAK,IAAI,GAAG;;;UAGzB,KAAK;8BACe,IAAI;;iDAEe,MAAM;;qDAEF,MAAM;;;UAGjD,KAAK;yBACU,cAAc;;AAElC,KAhBD;AAiBD;;AArD0B","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class MirrorPadProgram {\n    constructor(xShape, paddings, mode) {\n        this.variableNames = ['x'];\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const dtype = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n        const offset = mode === 'reflect' ? 0 : 1;\n        if (rank === 1) {\n            this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n            return;\n        }\n        this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=mirror_pad_gpu.js.map"]},"metadata":{},"sourceType":"module"}