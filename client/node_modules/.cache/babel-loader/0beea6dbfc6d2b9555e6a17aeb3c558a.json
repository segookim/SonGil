{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from './util';\n/**\n * Computes a list of TapeNodes that connect x to y, filtering everything else\n * out and preserving the order of the original tape elements.\n *\n * @param tape The tape elements to filter.\n * @param xs The input Tensors.\n * @param y The output Tensor.\n */\n\nexport function getFilteredNodesXToY(tape, xs, y) {\n  // Forward pass to compute all the nodes and Tensors that are transitively a\n  // function of x.\n  const tensorsFromX = {};\n  const nodesFromX = {};\n\n  for (let i = 0; i < xs.length; i++) {\n    tensorsFromX[xs[i].id] = true;\n  }\n\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n\n    for (const inputName in nodeInputs) {\n      const input = nodeInputs[inputName];\n      let anyInputFromX = false;\n\n      for (let j = 0; j < xs.length; j++) {\n        if (tensorsFromX[input.id]) {\n          node.outputs.forEach(output => tensorsFromX[output.id] = true);\n          anyInputFromX = true;\n          nodesFromX[node.id] = true;\n          break;\n        }\n      }\n\n      if (anyInputFromX) {\n        break;\n      }\n    }\n  } // Backward pass to find all of the nodes and Tensors that lead to y.\n\n\n  const tensorsLeadToY = {};\n  tensorsLeadToY[y.id] = true;\n  const nodesToY = {};\n\n  for (let i = tape.length - 1; i >= 0; i--) {\n    const node = tape[i];\n    const nodeInputs = node.inputs; // If any of the outputs lead to y, mark all of the inputs as leading to y.\n\n    for (let j = 0; j < node.outputs.length; j++) {\n      if (tensorsLeadToY[node.outputs[j].id]) {\n        for (const inputName in nodeInputs) {\n          tensorsLeadToY[nodeInputs[inputName].id] = true;\n          nodesToY[node.id] = true;\n        }\n\n        break;\n      }\n    }\n  } // Return the paths that come from x and lead to y.\n\n\n  const filteredTape = [];\n\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n\n    if (nodesFromX[node.id] && nodesToY[node.id]) {\n      // Prune the inputs from the node that aren't a function of x.\n      const prunedInputs = {};\n\n      for (const inputName in node.inputs) {\n        const nodeInput = node.inputs[inputName];\n\n        if (tensorsFromX[nodeInput.id]) {\n          prunedInputs[inputName] = nodeInput;\n        }\n      } // Copy the node and overwrite inputsAndArgs to the pruned version.\n\n\n      const prunedNode = Object.assign({}, node);\n      prunedNode.inputs = prunedInputs;\n      prunedNode.outputs = node.outputs;\n      filteredTape.push(prunedNode);\n    }\n  }\n\n  return filteredTape;\n}\n/**\n * Backpropagate gradients through the filtered TapeNodes.\n *\n * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map\n * is mutated by this method.\n * @param filteredTape The filtered TapeNodes to backprop through.\n */\n\nexport function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy, add) {\n  // Walk the tape backward and keep a map of Tensor to its gradient.\n  for (let i = filteredTape.length - 1; i >= 0; i--) {\n    const node = filteredTape[i];\n    const dys = [];\n    node.outputs.forEach(o => {\n      const gradTensor = tensorAccumulatedGradientMap[o.id];\n\n      if (gradTensor != null) {\n        dys.push(gradTensor);\n      } else {\n        // This particular output is not in the back-propagation subgraph, so it\n        // does not affect the final output, thus we put null for its dy.\n        dys.push(null);\n      }\n    });\n\n    if (node.gradient == null) {\n      throw new Error(`Cannot compute gradient: gradient function not found ` + `for ${node.kernelName}.`);\n    } // Backprop dy through this node and accumulate gradients over the inputs.\n\n\n    const inputGradients = node.gradient(dys);\n\n    for (const inputName in node.inputs) {\n      if (!(inputName in inputGradients)) {\n        throw new Error(`Cannot backprop through input ${inputName}. ` + `Available gradients found: ${Object.keys(inputGradients)}.`);\n      } // Call the gradient function.\n\n\n      const dx = tidy(() => inputGradients[inputName]());\n\n      if (dx.dtype !== 'float32') {\n        throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` + `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);\n      }\n\n      const x = node.inputs[inputName];\n\n      if (!util.arraysEqual(dx.shape, x.shape)) {\n        throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` + `'${inputName}' has shape '${dx.shape}', which does not match ` + `the shape of the input '${x.shape}'`);\n      }\n\n      if (tensorAccumulatedGradientMap[x.id] == null) {\n        tensorAccumulatedGradientMap[x.id] = dx;\n      } else {\n        const curGradient = tensorAccumulatedGradientMap[x.id];\n        tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);\n        curGradient.dispose();\n      }\n    }\n  }\n}","map":{"version":3,"sources":["../src/tape.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from './util';\n/**\n * Computes a list of TapeNodes that connect x to y, filtering everything else\n * out and preserving the order of the original tape elements.\n *\n * @param tape The tape elements to filter.\n * @param xs The input Tensors.\n * @param y The output Tensor.\n */\nexport function getFilteredNodesXToY(tape, xs, y) {\n    // Forward pass to compute all the nodes and Tensors that are transitively a\n    // function of x.\n    const tensorsFromX = {};\n    const nodesFromX = {};\n    for (let i = 0; i < xs.length; i++) {\n        tensorsFromX[xs[i].id] = true;\n    }\n    for (let i = 0; i < tape.length; i++) {\n        const node = tape[i];\n        const nodeInputs = node.inputs;\n        for (const inputName in nodeInputs) {\n            const input = nodeInputs[inputName];\n            let anyInputFromX = false;\n            for (let j = 0; j < xs.length; j++) {\n                if (tensorsFromX[input.id]) {\n                    node.outputs.forEach(output => tensorsFromX[output.id] = true);\n                    anyInputFromX = true;\n                    nodesFromX[node.id] = true;\n                    break;\n                }\n            }\n            if (anyInputFromX) {\n                break;\n            }\n        }\n    }\n    // Backward pass to find all of the nodes and Tensors that lead to y.\n    const tensorsLeadToY = {};\n    tensorsLeadToY[y.id] = true;\n    const nodesToY = {};\n    for (let i = tape.length - 1; i >= 0; i--) {\n        const node = tape[i];\n        const nodeInputs = node.inputs;\n        // If any of the outputs lead to y, mark all of the inputs as leading to y.\n        for (let j = 0; j < node.outputs.length; j++) {\n            if (tensorsLeadToY[node.outputs[j].id]) {\n                for (const inputName in nodeInputs) {\n                    tensorsLeadToY[nodeInputs[inputName].id] = true;\n                    nodesToY[node.id] = true;\n                }\n                break;\n            }\n        }\n    }\n    // Return the paths that come from x and lead to y.\n    const filteredTape = [];\n    for (let i = 0; i < tape.length; i++) {\n        const node = tape[i];\n        if (nodesFromX[node.id] && nodesToY[node.id]) {\n            // Prune the inputs from the node that aren't a function of x.\n            const prunedInputs = {};\n            for (const inputName in node.inputs) {\n                const nodeInput = node.inputs[inputName];\n                if (tensorsFromX[nodeInput.id]) {\n                    prunedInputs[inputName] = nodeInput;\n                }\n            }\n            // Copy the node and overwrite inputsAndArgs to the pruned version.\n            const prunedNode = Object.assign({}, node);\n            prunedNode.inputs = prunedInputs;\n            prunedNode.outputs = node.outputs;\n            filteredTape.push(prunedNode);\n        }\n    }\n    return filteredTape;\n}\n/**\n * Backpropagate gradients through the filtered TapeNodes.\n *\n * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map\n * is mutated by this method.\n * @param filteredTape The filtered TapeNodes to backprop through.\n */\nexport function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy, add) {\n    // Walk the tape backward and keep a map of Tensor to its gradient.\n    for (let i = filteredTape.length - 1; i >= 0; i--) {\n        const node = filteredTape[i];\n        const dys = [];\n        node.outputs.forEach(o => {\n            const gradTensor = tensorAccumulatedGradientMap[o.id];\n            if (gradTensor != null) {\n                dys.push(gradTensor);\n            }\n            else {\n                // This particular output is not in the back-propagation subgraph, so it\n                // does not affect the final output, thus we put null for its dy.\n                dys.push(null);\n            }\n        });\n        if (node.gradient == null) {\n            throw new Error(`Cannot compute gradient: gradient function not found ` +\n                `for ${node.kernelName}.`);\n        }\n        // Backprop dy through this node and accumulate gradients over the inputs.\n        const inputGradients = node.gradient(dys);\n        for (const inputName in node.inputs) {\n            if (!(inputName in inputGradients)) {\n                throw new Error(`Cannot backprop through input ${inputName}. ` +\n                    `Available gradients found: ${Object.keys(inputGradients)}.`);\n            }\n            // Call the gradient function.\n            const dx = tidy(() => inputGradients[inputName]());\n            if (dx.dtype !== 'float32') {\n                throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` +\n                    `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);\n            }\n            const x = node.inputs[inputName];\n            if (!util.arraysEqual(dx.shape, x.shape)) {\n                throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` +\n                    `'${inputName}' has shape '${dx.shape}', which does not match ` +\n                    `the shape of the input '${x.shape}'`);\n            }\n            if (tensorAccumulatedGradientMap[x.id] == null) {\n                tensorAccumulatedGradientMap[x.id] = dx;\n            }\n            else {\n                const curGradient = tensorAccumulatedGradientMap[x.id];\n                tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);\n                curGradient.dispose();\n            }\n        }\n    }\n}\n//# sourceMappingURL=tape.js.map"]},"metadata":{},"sourceType":"module"}