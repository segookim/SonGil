{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Cumsum, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function cumsum(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var axis = attrs.axis,\n      exclusive = attrs.exclusive,\n      reverse = attrs.reverse;\n  assertNotComplex(x, 'cumsum');\n  var permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  var $x = x;\n\n  if (permutation != null) {\n    $x = transpose({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n  }\n\n  var permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\"backend.cumsum in CPU expects an inner-most \" + \"axis=\".concat($x.shape.length - 1, \" but got axis=\").concat(permutedAxis));\n  }\n\n  var resultDtype = upcastType($x.dtype, 'int32');\n  var vals = util.makeZerosTypedArray(util.sizeFromShape($x.shape), resultDtype);\n  var aVals = backend.data.get($x.dataId).values;\n  var finalDim = $x.shape[$x.shape.length - 1];\n  var indexAdjuster = reverse ? function (i, j) {\n    return i + finalDim - j - 1;\n  } : function (i, j) {\n    return i + j;\n  };\n\n  for (var i = 0; i < aVals.length; i += finalDim) {\n    for (var j = 0; j < finalDim; j++) {\n      var idx = indexAdjuster(i, j);\n\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        var prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] : aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  var result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    var reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    var reverseTransposedResult = transpose({\n      inputs: {\n        x: result\n      },\n      backend: backend,\n      attrs: {\n        perm: reversePermutation\n      }\n    });\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\nexport var cumsumConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum\n};","map":{"version":3,"sources":["../../src/kernels/Cumsum.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Cumsum, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function cumsum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, exclusive, reverse } = attrs;\n    assertNotComplex(x, 'cumsum');\n    const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n    let $x = x;\n    if (permutation != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n    }\n    const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n    if (permutedAxis !== $x.shape.length - 1) {\n        throw new Error(`backend.cumsum in CPU expects an inner-most ` +\n            `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n    }\n    const resultDtype = upcastType($x.dtype, 'int32');\n    const vals = util.makeZerosTypedArray(util.sizeFromShape($x.shape), resultDtype);\n    const aVals = backend.data.get($x.dataId).values;\n    const finalDim = $x.shape[$x.shape.length - 1];\n    const indexAdjuster = reverse ?\n        (i, j) => i + finalDim - j - 1 :\n        (i, j) => i + j;\n    for (let i = 0; i < aVals.length; i += finalDim) {\n        for (let j = 0; j < finalDim; j++) {\n            const idx = indexAdjuster(i, j);\n            if (j === 0) {\n                vals[idx] = exclusive ? 0 : aVals[idx];\n            }\n            else {\n                const prevIdx = indexAdjuster(i, j - 1);\n                vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                    aVals[idx] + vals[prevIdx];\n            }\n        }\n    }\n    const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n    if (permutation != null) {\n        const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n        const reverseTransposedResult = transpose({ inputs: { x: result }, backend, attrs: { perm: reversePermutation } });\n        backend.disposeIntermediateTensorInfo(result);\n        backend.disposeIntermediateTensorInfo($x);\n        return reverseTransposedResult;\n    }\n    return result;\n}\nexport const cumsumConfig = {\n    kernelName: Cumsum,\n    backendName: 'cpu',\n    kernelFunc: cumsum\n};\n//# sourceMappingURL=Cumsum.js.map"]},"metadata":{},"sourceType":"module"}