{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1; // Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\n\nconst MODEL_STORE_NAME = 'models_store'; // 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\n\nconst INFO_STORE_NAME = 'model_info_store';\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\n\nexport async function deleteDatabase() {\n  const idbFactory = getIndexedDBFactory();\n  return new Promise((resolve, reject) => {\n    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n\n    deleteRequest.onsuccess = () => resolve();\n\n    deleteRequest.onerror = error => reject(error);\n  });\n}\n\nfunction getIndexedDBFactory() {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error('Failed to obtain IndexedDB factory because the current environment' + 'is not a web browser.');\n  } // tslint:disable-next-line:no-any\n\n\n  const theWindow = typeof window === 'undefined' ? self : window;\n  const factory = theWindow.indexedDB || theWindow.mozIndexedDB || theWindow.webkitIndexedDB || theWindow.msIndexedDB || theWindow.shimIndexedDB;\n\n  if (factory == null) {\n    throw new Error('The current browser does not appear to support IndexedDB.');\n  }\n\n  return factory;\n}\n\nfunction setUpDatabase(openRequest) {\n  const db = openRequest.result;\n  db.createObjectStore(MODEL_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n  db.createObjectStore(INFO_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n}\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\n\n\nexport class BrowserIndexedDB {\n  constructor(modelPath) {\n    this.indexedDB = getIndexedDBFactory();\n\n    if (modelPath == null || !modelPath) {\n      throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n\n    this.modelPath = modelPath;\n  }\n\n  async save(modelArtifacts) {\n    // TODO(cais): Support saving GraphDef models.\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n    }\n\n    return this.databaseAction(this.modelPath, modelArtifacts);\n  }\n\n  async load() {\n    return this.databaseAction(this.modelPath);\n  }\n  /**\n   * Perform database action to put model artifacts into or read model artifacts\n   * from IndexedDB object store.\n   *\n   * Whether the action is put or get depends on whether `modelArtifacts` is\n   * specified. If it is specified, the action will be put; otherwise the action\n   * will be get.\n   *\n   * @param modelPath A unique string path for the model.\n   * @param modelArtifacts If specified, it will be the model artifacts to be\n   *   stored in IndexedDB.\n   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n   *   of `ModelArtifacts`, if the action is get.\n   */\n\n\n  databaseAction(modelPath, modelArtifacts) {\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n\n        if (modelArtifacts == null) {\n          // Read model out from object store.\n          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n          const getRequest = modelStore.get(this.modelPath);\n\n          getRequest.onsuccess = () => {\n            if (getRequest.result == null) {\n              db.close();\n              return reject(new Error(`Cannot find model with path '${this.modelPath}' ` + `in IndexedDB.`));\n            } else {\n              resolve(getRequest.result.modelArtifacts);\n            }\n          };\n\n          getRequest.onerror = error => {\n            db.close();\n            return reject(getRequest.error);\n          };\n\n          modelTx.oncomplete = () => db.close();\n        } else {\n          // Put model into object store.\n          const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts); // First, put ModelArtifactsInfo into info store.\n\n          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n          let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n          const putInfoRequest = infoStore.put({\n            modelPath: this.modelPath,\n            modelArtifactsInfo\n          });\n          let modelTx;\n\n          putInfoRequest.onsuccess = () => {\n            // Second, put model data into model store.\n            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            const putModelRequest = modelStore.put({\n              modelPath: this.modelPath,\n              modelArtifacts,\n              modelArtifactsInfo\n            });\n\n            putModelRequest.onsuccess = () => resolve({\n              modelArtifactsInfo\n            });\n\n            putModelRequest.onerror = error => {\n              // If the put-model request fails, roll back the info entry as\n              // well.\n              infoStore = infoTx.objectStore(INFO_STORE_NAME);\n              const deleteInfoRequest = infoStore.delete(this.modelPath);\n\n              deleteInfoRequest.onsuccess = () => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n\n              deleteInfoRequest.onerror = error => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n            };\n          };\n\n          putInfoRequest.onerror = error => {\n            db.close();\n            return reject(putInfoRequest.error);\n          };\n\n          infoTx.oncomplete = () => {\n            if (modelTx == null) {\n              db.close();\n            } else {\n              modelTx.oncomplete = () => db.close();\n            }\n          };\n        }\n      };\n\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n\n}\nBrowserIndexedDB.URL_SCHEME = 'indexeddb://';\nexport const indexedDBRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\n\nexport function browserIndexedDB(modelPath) {\n  return new BrowserIndexedDB(modelPath);\n}\n\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ? key.slice(BrowserIndexedDB.URL_SCHEME.length) : key;\n}\n\nexport class BrowserIndexedDBManager {\n  constructor() {\n    this.indexedDB = getIndexedDBFactory();\n  }\n\n  async listModels() {\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n        const store = tx.objectStore(INFO_STORE_NAME); // tslint:disable:max-line-length\n        // Need to cast `store` as `any` here because TypeScript's DOM\n        // library does not have the `getAll()` method even though the\n        // method is supported in the latest version of most mainstream\n        // browsers:\n        // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n        // tslint:enable:max-line-length\n        // tslint:disable-next-line:no-any\n\n        const getAllInfoRequest = store.getAll();\n\n        getAllInfoRequest.onsuccess = () => {\n          const out = {};\n\n          for (const item of getAllInfoRequest.result) {\n            out[item.modelPath] = item.modelArtifactsInfo;\n          }\n\n          resolve(out);\n        };\n\n        getAllInfoRequest.onerror = error => {\n          db.close();\n          return reject(getAllInfoRequest.error);\n        };\n\n        tx.oncomplete = () => db.close();\n      };\n\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n\n  async removeModel(path) {\n    path = maybeStripScheme(path);\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n        const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n        const getInfoRequest = infoStore.get(path);\n        let modelTx;\n\n        getInfoRequest.onsuccess = () => {\n          if (getInfoRequest.result == null) {\n            db.close();\n            return reject(new Error(`Cannot find model with path '${path}' ` + `in IndexedDB.`));\n          } else {\n            // First, delete the entry in the info store.\n            const deleteInfoRequest = infoStore.delete(path);\n\n            const deleteModelData = () => {\n              // Second, delete the entry in the model store.\n              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n              const deleteModelRequest = modelStore.delete(path);\n\n              deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);\n\n              deleteModelRequest.onerror = error => reject(getInfoRequest.error);\n            }; // Proceed with deleting model data regardless of whether deletion\n            // of info data succeeds or not.\n\n\n            deleteInfoRequest.onsuccess = deleteModelData;\n\n            deleteInfoRequest.onerror = error => {\n              deleteModelData();\n              db.close();\n              return reject(getInfoRequest.error);\n            };\n          }\n        };\n\n        getInfoRequest.onerror = error => {\n          db.close();\n          return reject(getInfoRequest.error);\n        };\n\n        infoTx.oncomplete = () => {\n          if (modelTx == null) {\n            db.close();\n          } else {\n            modelTx.oncomplete = () => db.close();\n          }\n        };\n      };\n\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/io/indexed_db.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase() {\n    const idbFactory = getIndexedDBFactory();\n    return new Promise((resolve, reject) => {\n        const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n        deleteRequest.onsuccess = () => resolve();\n        deleteRequest.onerror = error => reject(error);\n    });\n}\nfunction getIndexedDBFactory() {\n    if (!env().getBool('IS_BROWSER')) {\n        // TODO(cais): Add more info about what IOHandler subtypes are available.\n        //   Maybe point to a doc page on the web and/or automatically determine\n        //   the available IOHandlers and print them in the error message.\n        throw new Error('Failed to obtain IndexedDB factory because the current environment' +\n            'is not a web browser.');\n    }\n    // tslint:disable-next-line:no-any\n    const theWindow = typeof window === 'undefined' ? self : window;\n    const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n        theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n        theWindow.shimIndexedDB;\n    if (factory == null) {\n        throw new Error('The current browser does not appear to support IndexedDB.');\n    }\n    return factory;\n}\nfunction setUpDatabase(openRequest) {\n    const db = openRequest.result;\n    db.createObjectStore(MODEL_STORE_NAME, { keyPath: 'modelPath' });\n    db.createObjectStore(INFO_STORE_NAME, { keyPath: 'modelPath' });\n}\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nexport class BrowserIndexedDB {\n    constructor(modelPath) {\n        this.indexedDB = getIndexedDBFactory();\n        if (modelPath == null || !modelPath) {\n            throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\n        }\n        this.modelPath = modelPath;\n    }\n    async save(modelArtifacts) {\n        // TODO(cais): Support saving GraphDef models.\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        return this.databaseAction(this.modelPath, modelArtifacts);\n    }\n    async load() {\n        return this.databaseAction(this.modelPath);\n    }\n    /**\n     * Perform database action to put model artifacts into or read model artifacts\n     * from IndexedDB object store.\n     *\n     * Whether the action is put or get depends on whether `modelArtifacts` is\n     * specified. If it is specified, the action will be put; otherwise the action\n     * will be get.\n     *\n     * @param modelPath A unique string path for the model.\n     * @param modelArtifacts If specified, it will be the model artifacts to be\n     *   stored in IndexedDB.\n     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n     *   of `ModelArtifacts`, if the action is get.\n     */\n    databaseAction(modelPath, modelArtifacts) {\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                if (modelArtifacts == null) {\n                    // Read model out from object store.\n                    const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n                    const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                    const getRequest = modelStore.get(this.modelPath);\n                    getRequest.onsuccess = () => {\n                        if (getRequest.result == null) {\n                            db.close();\n                            return reject(new Error(`Cannot find model with path '${this.modelPath}' ` +\n                                `in IndexedDB.`));\n                        }\n                        else {\n                            resolve(getRequest.result.modelArtifacts);\n                        }\n                    };\n                    getRequest.onerror = error => {\n                        db.close();\n                        return reject(getRequest.error);\n                    };\n                    modelTx.oncomplete = () => db.close();\n                }\n                else {\n                    // Put model into object store.\n                    const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n                    // First, put ModelArtifactsInfo into info store.\n                    const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                    let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                    const putInfoRequest = infoStore.put({ modelPath: this.modelPath, modelArtifactsInfo });\n                    let modelTx;\n                    putInfoRequest.onsuccess = () => {\n                        // Second, put model data into model store.\n                        modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                        const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                        const putModelRequest = modelStore.put({\n                            modelPath: this.modelPath,\n                            modelArtifacts,\n                            modelArtifactsInfo\n                        });\n                        putModelRequest.onsuccess = () => resolve({ modelArtifactsInfo });\n                        putModelRequest.onerror = error => {\n                            // If the put-model request fails, roll back the info entry as\n                            // well.\n                            infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                            const deleteInfoRequest = infoStore.delete(this.modelPath);\n                            deleteInfoRequest.onsuccess = () => {\n                                db.close();\n                                return reject(putModelRequest.error);\n                            };\n                            deleteInfoRequest.onerror = error => {\n                                db.close();\n                                return reject(putModelRequest.error);\n                            };\n                        };\n                    };\n                    putInfoRequest.onerror = error => {\n                        db.close();\n                        return reject(putInfoRequest.error);\n                    };\n                    infoTx.oncomplete = () => {\n                        if (modelTx == null) {\n                            db.close();\n                        }\n                        else {\n                            modelTx.oncomplete = () => db.close();\n                        }\n                    };\n                }\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n}\nBrowserIndexedDB.URL_SCHEME = 'indexeddb://';\nexport const indexedDBRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n            return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath) {\n    return new BrowserIndexedDB(modelPath);\n}\nfunction maybeStripScheme(key) {\n    return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\n        key.slice(BrowserIndexedDB.URL_SCHEME.length) :\n        key;\n}\nexport class BrowserIndexedDBManager {\n    constructor() {\n        this.indexedDB = getIndexedDBFactory();\n    }\n    async listModels() {\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n                const store = tx.objectStore(INFO_STORE_NAME);\n                // tslint:disable:max-line-length\n                // Need to cast `store` as `any` here because TypeScript's DOM\n                // library does not have the `getAll()` method even though the\n                // method is supported in the latest version of most mainstream\n                // browsers:\n                // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n                // tslint:enable:max-line-length\n                // tslint:disable-next-line:no-any\n                const getAllInfoRequest = store.getAll();\n                getAllInfoRequest.onsuccess = () => {\n                    const out = {};\n                    for (const item of getAllInfoRequest.result) {\n                        out[item.modelPath] = item.modelArtifactsInfo;\n                    }\n                    resolve(out);\n                };\n                getAllInfoRequest.onerror = error => {\n                    db.close();\n                    return reject(getAllInfoRequest.error);\n                };\n                tx.oncomplete = () => db.close();\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n    async removeModel(path) {\n        path = maybeStripScheme(path);\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                const getInfoRequest = infoStore.get(path);\n                let modelTx;\n                getInfoRequest.onsuccess = () => {\n                    if (getInfoRequest.result == null) {\n                        db.close();\n                        return reject(new Error(`Cannot find model with path '${path}' ` +\n                            `in IndexedDB.`));\n                    }\n                    else {\n                        // First, delete the entry in the info store.\n                        const deleteInfoRequest = infoStore.delete(path);\n                        const deleteModelData = () => {\n                            // Second, delete the entry in the model store.\n                            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                            const deleteModelRequest = modelStore.delete(path);\n                            deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);\n                            deleteModelRequest.onerror = error => reject(getInfoRequest.error);\n                        };\n                        // Proceed with deleting model data regardless of whether deletion\n                        // of info data succeeds or not.\n                        deleteInfoRequest.onsuccess = deleteModelData;\n                        deleteInfoRequest.onerror = error => {\n                            deleteModelData();\n                            db.close();\n                            return reject(getInfoRequest.error);\n                        };\n                    }\n                };\n                getInfoRequest.onerror = error => {\n                    db.close();\n                    return reject(getInfoRequest.error);\n                };\n                infoTx.oncomplete = () => {\n                    if (modelTx == null) {\n                        db.close();\n                    }\n                    else {\n                        modelTx.oncomplete = () => db.close();\n                    }\n                };\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n}\n//# sourceMappingURL=indexed_db.js.map"]},"metadata":{},"sourceType":"module"}