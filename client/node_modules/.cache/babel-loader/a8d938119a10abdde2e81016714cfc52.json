{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from '../errors';\nimport { pyListRepeat } from './generic_utils';\nimport { isInteger, max } from './math_utils';\n/**\n * Transforms a single number of array of numbers into an array of numbers.\n * @param value\n * @param n: The size of the tuple to be returned.\n * @param name: Name of the parameter, used for generating error messages.\n * @returns An array of numbers.\n */\n\nexport function normalizeArray(value, n, name) {\n  if (typeof value === 'number') {\n    return pyListRepeat(value, n);\n  } else {\n    if (value.length !== n) {\n      throw new ValueError(`The ${name} argument must be an integer or tuple of ${n} integers.` + ` Received: ${value.length} elements.`);\n    }\n\n    for (let i = 0; i < n; ++i) {\n      const singleValue = value[i];\n\n      if (!isInteger(singleValue)) {\n        throw new ValueError(`The ${name} argument must be an integer or tuple of ${n}` + ` integers. Received: ${JSON.stringify(value)} including a` + ` non-integer number ${singleValue}`);\n      }\n    }\n\n    return value;\n  }\n}\n/**\n * Determines output length of a convolution given input length.\n * @param inputLength\n * @param filterSize\n * @param padding\n * @param stride\n * @param dilation: dilation rate.\n */\n\nexport function convOutputLength(inputLength, filterSize, padding, stride, dilation = 1) {\n  if (inputLength == null) {\n    return inputLength;\n  }\n\n  const dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n  let outputLength;\n\n  if (padding === 'same') {\n    outputLength = inputLength;\n  } else {\n    // VALID\n    outputLength = inputLength - dilatedFilterSize + 1;\n  }\n\n  return Math.floor((outputLength + stride - 1) / stride);\n}\nexport function deconvLength(dimSize, strideSize, kernelSize, padding) {\n  if (dimSize == null) {\n    return null;\n  }\n\n  if (padding === 'valid') {\n    dimSize = dimSize * strideSize + max([kernelSize - strideSize, 0]);\n  } else if (padding === 'same') {\n    dimSize = dimSize * strideSize;\n  } else {\n    throw new ValueError(`Unsupport padding mode: ${padding}.`);\n  }\n\n  return dimSize;\n}","map":{"version":3,"sources":["../../src/utils/conv_utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAQG;AAEH,SAAQ,UAAR,QAAyB,WAAzB;AAGA,SAAQ,YAAR,QAA2B,iBAA3B;AACA,SAAQ,SAAR,EAAmB,GAAnB,QAA6B,cAA7B;AAEA;;;;;;AAMG;;AACH,OAAM,SAAU,cAAV,CACF,KADE,EACsB,CADtB,EACiC,IADjC,EAC6C;AACjD,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO,YAAY,CAAC,KAAD,EAAQ,CAAR,CAAnB;AACD,GAFD,MAEO;AACL,QAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;AACtB,YAAM,IAAI,UAAJ,CACF,OAAO,IAAI,4CAA4C,CAAC,YAAxD,GACA,cAAc,KAAK,CAAC,MAAM,YAFxB,CAAN;AAGD;;AACD,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AAC1B,YAAM,WAAW,GAAG,KAAK,CAAC,CAAD,CAAzB;;AACA,UAAI,CAAC,SAAS,CAAC,WAAD,CAAd,EAA6B;AAC3B,cAAM,IAAI,UAAJ,CACF,OAAO,IAAI,4CAA4C,CAAC,EAAxD,GACA,wBAAwB,IAAI,CAAC,SAAL,CAAe,KAAf,CAAqB,cAD7C,GAEA,uBAAuB,WAAW,EAHhC,CAAN;AAID;AACF;;AACD,WAAO,KAAP;AACD;AACF;AAED;;;;;;;AAOG;;AACH,OAAM,SAAU,gBAAV,CACF,WADE,EACmB,UADnB,EACuC,OADvC,EAEF,MAFE,EAEc,QAAQ,GAAG,CAFzB,EAE0B;AAC9B,MAAI,WAAW,IAAI,IAAnB,EAAyB;AACvB,WAAO,WAAP;AACD;;AACD,QAAM,iBAAiB,GAAG,UAAU,GAAG,CAAC,UAAU,GAAG,CAAd,KAAoB,QAAQ,GAAG,CAA/B,CAAvC;AACA,MAAI,YAAJ;;AACA,MAAI,OAAO,KAAK,MAAhB,EAAwB;AACtB,IAAA,YAAY,GAAG,WAAf;AACD,GAFD,MAEO;AAAG;AACR,IAAA,YAAY,GAAG,WAAW,GAAG,iBAAd,GAAkC,CAAjD;AACD;;AACD,SAAO,IAAI,CAAC,KAAL,CAAW,CAAC,YAAY,GAAG,MAAf,GAAwB,CAAzB,IAA8B,MAAzC,CAAP;AACD;AAED,OAAM,SAAU,YAAV,CACF,OADE,EACe,UADf,EACmC,UADnC,EAEF,OAFE,EAEkB;AACtB,MAAI,OAAO,IAAI,IAAf,EAAqB;AACnB,WAAO,IAAP;AACD;;AAED,MAAI,OAAO,KAAK,OAAhB,EAAyB;AACvB,IAAA,OAAO,GAAG,OAAO,GAAG,UAAV,GAAuB,GAAG,CAAC,CAAC,UAAU,GAAG,UAAd,EAA0B,CAA1B,CAAD,CAApC;AACD,GAFD,MAEO,IAAI,OAAO,KAAK,MAAhB,EAAwB;AAC7B,IAAA,OAAO,GAAG,OAAO,GAAG,UAApB;AACD,GAFM,MAEA;AACL,UAAM,IAAI,UAAJ,CAAe,2BAA2B,OAAO,GAAjD,CAAN;AACD;;AACD,SAAO,OAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from '../errors';\nimport { pyListRepeat } from './generic_utils';\nimport { isInteger, max } from './math_utils';\n/**\n * Transforms a single number of array of numbers into an array of numbers.\n * @param value\n * @param n: The size of the tuple to be returned.\n * @param name: Name of the parameter, used for generating error messages.\n * @returns An array of numbers.\n */\nexport function normalizeArray(value, n, name) {\n    if (typeof value === 'number') {\n        return pyListRepeat(value, n);\n    }\n    else {\n        if (value.length !== n) {\n            throw new ValueError(`The ${name} argument must be an integer or tuple of ${n} integers.` +\n                ` Received: ${value.length} elements.`);\n        }\n        for (let i = 0; i < n; ++i) {\n            const singleValue = value[i];\n            if (!isInteger(singleValue)) {\n                throw new ValueError(`The ${name} argument must be an integer or tuple of ${n}` +\n                    ` integers. Received: ${JSON.stringify(value)} including a` +\n                    ` non-integer number ${singleValue}`);\n            }\n        }\n        return value;\n    }\n}\n/**\n * Determines output length of a convolution given input length.\n * @param inputLength\n * @param filterSize\n * @param padding\n * @param stride\n * @param dilation: dilation rate.\n */\nexport function convOutputLength(inputLength, filterSize, padding, stride, dilation = 1) {\n    if (inputLength == null) {\n        return inputLength;\n    }\n    const dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n    let outputLength;\n    if (padding === 'same') {\n        outputLength = inputLength;\n    }\n    else { // VALID\n        outputLength = inputLength - dilatedFilterSize + 1;\n    }\n    return Math.floor((outputLength + stride - 1) / stride);\n}\nexport function deconvLength(dimSize, strideSize, kernelSize, padding) {\n    if (dimSize == null) {\n        return null;\n    }\n    if (padding === 'valid') {\n        dimSize = dimSize * strideSize + max([kernelSize - strideSize, 0]);\n    }\n    else if (padding === 'same') {\n        dimSize = dimSize * strideSize;\n    }\n    else {\n        throw new ValueError(`Unsupport padding mode: ${padding}.`);\n    }\n    return dimSize;\n}\n//# sourceMappingURL=conv_utils.js.map"]},"metadata":{},"sourceType":"module"}