{"ast":null,"code":"import _slicedToArray from\"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/*\n\n//Define our lablemap\n\nconst labelMap = {\n    1:{'name':'Hello', color:'red'}, \n    2:{'name':'Thank You', color:'yellow'},\n    3:{'name':'I Love You', color: 'lime'},\n    4:{'name':'Yes', color:'blue'},\n    5:{'name':'I Love You', color:'purple'},\n}\n\n// Define a drawing function\n\nexport const drawRect = (boxes, classes, scores, threshold, imgWidth, imgHeight, ctx)=>{\n    for(let i=0; i<=boxes.length; i++){\n        if(boxes[i] && classes[i] && scores[i]>threshold){\n            // Extract variables\n            const [y,x,height,width] = boxes[i]\n            const text = classes[i]\n\n            //Set styling\n            ctx.strokeStyle = labelMap[text]['color']\n            ctx.linewidth = 10\n            ctx.fillStyle = 'white'\n            ctx.font = '30px Arial'\n\n            //Draw!!\n            ctx.beginPath()\n            ctx.fillText(labelMap[text]['name']+ ' - ' + Math.round(scores[i]*100)/100, x*imgWidth, y*imgHeight-10)\n            ctx.rect(x*imgWidth, y*imgHeight, width*imgWidth/2, height*imgHeight/1.5);\n            ctx.stroke()\n        }\n    }\n}\n*/var labelMap={1:{name:'Connect',color:'red'},2:{name:'Division',color:'yellow'},3:{name:'Eight',color:'lime'},4:{name:'Five',color:'blue'},5:{name:'Four',color:'purple'},6:{name:'Hand',color:'red'},7:{name:'Medicine',color:'yellow'},8:{name:'Money',color:'lime'},9:{name:'Multiply',color:'blue'},10:{name:'Nine',color:'purple'},11:{name:'One',color:'red'},12:{name:'Plus',color:'yellow'},13:{name:'Seven',color:'lime'},14:{name:'Sick',color:'blue'},15:{name:'Six',color:'purple'},16:{name:'Ten',color:'red'},17:{name:'Three',color:'yellow'},18:{name:'Two',color:'lime'},19:{name:'You',color:'blue'}};// Define a drawing function\nexport var drawRect=function drawRect(boxes,classes,scores,threshold,imgWidth,imgHeight,ctx){for(var i=0;i<=boxes.length;i++){if(boxes[i]&&classes[i]&&scores[i]>threshold){// Extract variables\nvar _boxes$i=_slicedToArray(boxes[i],4),y=_boxes$i[0],x=_boxes$i[1],height=_boxes$i[2],width=_boxes$i[3];var text=classes[i];// Set styling\nctx.strokeStyle=labelMap[text]['color'];ctx.lineWidth=10;ctx.fillStyle='white';ctx.font='30px Arial';// DRAW!!\nctx.beginPath();ctx.fillText(labelMap[text]['name']+' - '+Math.round(scores[i]*100)/100,x*imgWidth,y*imgHeight-10);ctx.rect(x*imgWidth,y*imgHeight,width*imgWidth/2,height*imgHeight/1.5);ctx.stroke();}}};","map":{"version":3,"sources":["/Users/kimkiwoong/songil2/SonGil/client/src/songil/utilities.js"],"names":["labelMap","name","color","drawRect","boxes","classes","scores","threshold","imgWidth","imgHeight","ctx","i","length","y","x","height","width","text","strokeStyle","lineWidth","fillStyle","font","beginPath","fillText","Math","round","rect","stroke"],"mappings":"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","sourcesContent":["/*\n\n//Define our lablemap\n\nconst labelMap = {\n    1:{'name':'Hello', color:'red'}, \n    2:{'name':'Thank You', color:'yellow'},\n    3:{'name':'I Love You', color: 'lime'},\n    4:{'name':'Yes', color:'blue'},\n    5:{'name':'I Love You', color:'purple'},\n}\n\n// Define a drawing function\n\nexport const drawRect = (boxes, classes, scores, threshold, imgWidth, imgHeight, ctx)=>{\n    for(let i=0; i<=boxes.length; i++){\n        if(boxes[i] && classes[i] && scores[i]>threshold){\n            // Extract variables\n            const [y,x,height,width] = boxes[i]\n            const text = classes[i]\n\n            //Set styling\n            ctx.strokeStyle = labelMap[text]['color']\n            ctx.linewidth = 10\n            ctx.fillStyle = 'white'\n            ctx.font = '30px Arial'\n\n            //Draw!!\n            ctx.beginPath()\n            ctx.fillText(labelMap[text]['name']+ ' - ' + Math.round(scores[i]*100)/100, x*imgWidth, y*imgHeight-10)\n            ctx.rect(x*imgWidth, y*imgHeight, width*imgWidth/2, height*imgHeight/1.5);\n            ctx.stroke()\n        }\n    }\n}\n*/\n\nconst labelMap = {\n    1: {name:'Connect', color:'red'},\n    2: {name:'Division', color:'yellow'},\n    3: {name:'Eight', color:'lime'},\n    4: {name:'Five', color:'blue'},\n    5: {name:'Four', color:'purple'},\n    6: {name:'Hand', color:'red'},\n    7: {name:'Medicine', color:'yellow'},\n    8: {name:'Money', color:'lime'},\n    9: {name:'Multiply', color:'blue'},\n    10: {name:'Nine', color:'purple'},\n    11: {name:'One', color:'red'},\n    12: {name:'Plus', color:'yellow'},\n    13: {name:'Seven', color:'lime'},\n    14: {name:'Sick', color:'blue'},\n    15: {name:'Six', color:'purple'},\n    16: {name:'Ten', color:'red'},\n    17: {name:'Three', color:'yellow'},\n    18: {name:'Two', color:'lime'},\n    19: {name:'You', color:'blue'}\n}\n\n// Define a drawing function\nexport const drawRect = (boxes, classes, scores, threshold, imgWidth, imgHeight, ctx)=>{\n    for(let i=0; i<=boxes.length; i++){\n        if(boxes[i] && classes[i] && scores[i]>threshold){\n            // Extract variables\n            const [y,x,height,width] = boxes[i]\n            const text = classes[i]\n            \n            // Set styling\n            ctx.strokeStyle = labelMap[text]['color']\n            ctx.lineWidth = 10\n            ctx.fillStyle = 'white'\n            ctx.font = '30px Arial'         \n            \n            // DRAW!!\n            ctx.beginPath()\n            ctx.fillText(labelMap[text]['name'] + ' - ' + Math.round(scores[i]*100)/100, x*imgWidth, y*imgHeight-10)\n            ctx.rect(x*imgWidth, y*imgHeight, width*imgWidth/2, height*imgHeight/1.5);\n            ctx.stroke()\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}