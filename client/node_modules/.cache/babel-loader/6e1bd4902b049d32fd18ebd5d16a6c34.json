{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose } from '@tensorflow/tfjs-core';\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\n\nexport function resolveScalarsInLogs(_x) {\n  return _resolveScalarsInLogs.apply(this, arguments);\n}\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\n\nfunction _resolveScalarsInLogs() {\n  _resolveScalarsInLogs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(logs) {\n    var promises, keys, scalarsToDispose, key, value, valueScalar, values, i;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(logs == null)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            promises = [];\n            keys = [];\n            scalarsToDispose = [];\n\n            for (key in logs) {\n              value = logs[key];\n\n              if (typeof value !== 'number') {\n                valueScalar = value;\n                promises.push(valueScalar.data());\n                keys.push(key);\n                scalarsToDispose.push(valueScalar);\n              }\n            }\n\n            if (!(promises.length > 0)) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 9;\n            return Promise.all(promises);\n\n          case 9:\n            values = _context.sent;\n\n            for (i = 0; i < values.length; ++i) {\n              logs[keys[i]] = values[i][0];\n            } // Dispose the original scalar tensors.\n\n\n            dispose(scalarsToDispose);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _resolveScalarsInLogs.apply(this, arguments);\n}\n\nexport function disposeTensorsInLogs(logs) {\n  if (logs == null) {\n    return;\n  }\n\n  for (var key in logs) {\n    var value = logs[key];\n\n    if (typeof value !== 'number') {\n      value.dispose();\n    }\n  }\n}","map":{"version":3,"sources":["../src/logs.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;AAQG;AAEH,SAAQ,OAAR,QAA8B,uBAA9B;AAWA;;;;AAIG;;AACH,gBAAsB,oBAAtB;AAAA;AAAA;AA0BA;;;;;AAKG;;;mFA/BI,iBAAoC,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACD,IAAI,IAAI,IADP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAIC,YAAA,QAJD,GAIgE,EAJhE;AAKC,YAAA,IALD,GAKkB,EALlB;AAMC,YAAA,gBAND,GAM8B,EAN9B;;AAOL,iBAAW,GAAX,IAAkB,IAAlB,EAAwB;AAChB,cAAA,KADgB,GACR,IAAI,CAAC,GAAD,CADI;;AAEtB,kBAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AACvB,gBAAA,WADuB,GACT,KADS;AAE7B,gBAAA,QAAQ,CAAC,IAAT,CAAc,WAAW,CAAC,IAAZ,EAAd;AACA,gBAAA,IAAI,CAAC,IAAL,CAAU,GAAV;AACA,gBAAA,gBAAgB,CAAC,IAAjB,CAAsB,WAAtB;AACD;AACF;;AAfI,kBAgBD,QAAQ,CAAC,MAAT,GAAkB,CAhBjB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAiBkB,OAAO,CAAC,GAAR,CAAY,QAAZ,CAjBlB;;AAAA;AAiBG,YAAA,MAjBH;;AAkBH,iBAAS,CAAT,GAAa,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,EAAE,CAArC,EAAwC;AACtC,cAAA,IAAI,CAAC,IAAI,CAAC,CAAD,CAAL,CAAJ,GAAgB,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAhB;AACD,aApBE,CAqBH;;;AACA,YAAA,OAAO,CAAC,gBAAD,CAAP;;AAtBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgCP,OAAM,SAAU,oBAAV,CAA+B,IAA/B,EAAmD;AACvD,MAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB;AACD;;AACD,OAAK,IAAM,GAAX,IAAkB,IAAlB,EAAwB;AACtB,QAAM,KAAK,GAAG,IAAI,CAAC,GAAD,CAAlB;;AACA,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,MAAA,KAAK,CAAC,OAAN;AACD;AACF;AACF","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose } from '@tensorflow/tfjs-core';\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\nexport async function resolveScalarsInLogs(logs) {\n    if (logs == null) {\n        return;\n    }\n    const promises = [];\n    const keys = [];\n    const scalarsToDispose = [];\n    for (const key in logs) {\n        const value = logs[key];\n        if (typeof value !== 'number') {\n            const valueScalar = value;\n            promises.push(valueScalar.data());\n            keys.push(key);\n            scalarsToDispose.push(valueScalar);\n        }\n    }\n    if (promises.length > 0) {\n        const values = await Promise.all(promises);\n        for (let i = 0; i < values.length; ++i) {\n            logs[keys[i]] = values[i][0];\n        }\n        // Dispose the original scalar tensors.\n        dispose(scalarsToDispose);\n    }\n}\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\nexport function disposeTensorsInLogs(logs) {\n    if (logs == null) {\n        return;\n    }\n    for (const key in logs) {\n        const value = logs[key];\n        if (typeof value !== 'number') {\n            value.dispose();\n        }\n    }\n}\n//# sourceMappingURL=logs.js.map"]},"metadata":{},"sourceType":"module"}