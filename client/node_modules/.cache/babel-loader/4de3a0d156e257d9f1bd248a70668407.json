{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getVecChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class TransposePackedProgram {\n  constructor(aShape, newDim) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    const outputShape = new Array(aShape.length);\n\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n\n    if (this.rank > 6) {\n      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n\n    const dtype = getCoordsDataType(this.rank);\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn = `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/transpose_packed_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,cAAR,QAA6B,gBAA7B;AACA,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAO,sBAAP,CAA6B;AAQjC,EAAA,WAAA,CAAY,MAAZ,EAA8B,MAA9B,EAA8C;AAP9C,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAIA,SAAA,YAAA,GAAe,IAAf;AACA,SAAA,YAAA,GAAe,IAAf;AAGE,UAAM,WAAW,GAAa,IAAI,KAAJ,CAAU,MAAM,CAAC,MAAjB,CAA9B;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAAW,CAAC,MAAhC,EAAwC,CAAC,EAAzC,EAA6C;AAC3C,MAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,MAAM,CAAC,MAAM,CAAC,CAAD,CAAP,CAAvB;AACD;;AACD,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,IAAL,GAAY,WAAW,CAAC,MAAxB;;AACA,QAAI,KAAK,IAAL,GAAY,CAAhB,EAAmB;AACjB,YAAM,KAAK,CACP,6BAA6B,KAAK,IAAI,wBAD/B,CAAX;AAED;;AACD,UAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,IAAN,CAA/B;AAEA,UAAM,WAAW,GAAG,cAAc,CAAC,IAAD,EAAO,KAAK,IAAZ,CAAlC;AACA,UAAM,aAAa,GAAG,IAAI,KAAJ,CAAU,KAAK,IAAf,CAAtB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,MAAA,aAAa,CAAC,MAAM,CAAC,CAAD,CAAP,CAAb,GAA2B,WAAW,CAAC,CAAD,CAAtC;AACD;;AACD,UAAM,SAAS,GAAG,QAAQ,aAAa,CAAC,KAAd,CAAoB,CAAC,CAArB,EAAwB,IAAxB,EAA8B,GAAxD;AACA,UAAM,UAAU,GACZ,KAAK,WAAW,CAAC,KAAK,IAAL,GAAY,CAAb,CAAe,MAAM,WAAW,CAAC,KAAK,IAAL,GAAY,CAAb,CAAe,EADnE;AAEA,UAAM,IAAI,GAAG,mBAAmB,aAAa,CAAC,IAAd,EAAoB,MAAM,SAAS,GAAnE;AAEA,SAAK,QAAL,GAAgB;;QAEZ,KAAK;;oBAEO,IAAI;WACb,UAAU;sBACC,IAAI;;UAEhB,WAAW,CAAC,KAAK,IAAL,GAAY,CAAb,CAAe;aACvB,WAAW,CAAC,KAAK,IAAL,GAAY,CAAb,CAAe,MAAM,WAAW,CAAC,KAAK,IAAL,GAAY,CAAb,CAAe;sBACjD,IAAI;aACb,UAAU;wBACC,IAAI;;;;;AAKvB,KAjBD;AAkBD;;AAjDgC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getVecChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class TransposePackedProgram {\n    constructor(aShape, newDim) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[newDim[i]];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        if (this.rank > 6) {\n            throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);\n        }\n        const dtype = getCoordsDataType(this.rank);\n        const outputOrder = getVecChannels('rc', this.rank);\n        const switchedOrder = new Array(this.rank);\n        for (let i = 0; i < newDim.length; i++) {\n            switchedOrder[newDim[i]] = outputOrder[i];\n        }\n        const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n        const nextColumn = `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n        const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n        this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n    }\n}\n//# sourceMappingURL=transpose_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}