{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ArgMinMaxPackedProgram {\n  constructor(shape, windowSize, op, firstPass) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() + op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    let sourceLocSetup;\n    let sourceRank;\n\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\n\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n    const compOp = op === 'max' ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/argminmax_packed_gpu.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ArgMinMaxPackedProgram {\n    constructor(shape, windowSize, op, firstPass) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n        const inSize = shape[shape.length - 1];\n        const outSize = Math.ceil(inSize / windowSize);\n        this.outputShape = shape.slice(0, -1);\n        if (outSize > 1) {\n            this.outputShape.push(outSize);\n        }\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        const outShape = this.outputShape;\n        const rank = outShape.length;\n        const dtype = getCoordsDataType(rank);\n        const coords = getChannels('coords', rank);\n        let sourceLocSetup;\n        let sourceRank;\n        if (outSize === 1) {\n            sourceRank = rank + 1;\n            const sourceLocDType = getCoordsDataType(sourceRank);\n            sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n        }\n        else {\n            sourceRank = rank;\n            sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n        }\n        const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n        const inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\n        const intChannels = channels.map(x => 'int ' + x);\n        const srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n        const srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n        const srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n        const srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n        const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n        const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n        const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n        const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n        this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=argminmax_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}