{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { RingBuffer } from './ring_buffer';\nexport class GrowingRingBuffer extends RingBuffer {\n  /**\n   * Constructs a `GrowingRingBuffer`.\n   */\n  constructor() {\n    super(GrowingRingBuffer.INITIAL_CAPACITY);\n  }\n\n  isFull() {\n    return false;\n  }\n\n  push(value) {\n    if (super.isFull()) {\n      this.expand();\n    }\n\n    super.push(value);\n  }\n\n  unshift(value) {\n    if (super.isFull()) {\n      this.expand();\n    }\n\n    super.unshift(value);\n  }\n  /**\n   * Doubles the capacity of the buffer.\n   */\n\n\n  expand() {\n    const newCapacity = this.capacity * 2;\n    const newData = new Array(newCapacity);\n    const len = this.length(); // Rotate the buffer to start at index 0 again, since we can't just\n    // allocate more space at the end.\n\n    for (let i = 0; i < len; i++) {\n      newData[i] = this.get(this.wrap(this.begin + i));\n    }\n\n    this.data = newData;\n    this.capacity = newCapacity;\n    this.doubledCapacity = 2 * this.capacity;\n    this.begin = 0;\n    this.end = len;\n  }\n\n}\nGrowingRingBuffer.INITIAL_CAPACITY = 32;","map":{"version":3,"sources":["../../src/util/growing_ring_buffer.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,UAAR,QAAyB,eAAzB;AAEA,OAAM,MAAO,iBAAP,SAAoC,UAApC,CAAiD;AAGrD;;AAEG;AACH,EAAA,WAAA,GAAA;AACE,UAAM,iBAAiB,CAAC,gBAAxB;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,WAAO,KAAP;AACD;;AAED,EAAA,IAAI,CAAC,KAAD,EAAS;AACX,QAAI,MAAM,MAAN,EAAJ,EAAoB;AAClB,WAAK,MAAL;AACD;;AACD,UAAM,IAAN,CAAW,KAAX;AACD;;AAED,EAAA,OAAO,CAAC,KAAD,EAAS;AACd,QAAI,MAAM,MAAN,EAAJ,EAAoB;AAClB,WAAK,MAAL;AACD;;AACD,UAAM,OAAN,CAAc,KAAd;AACD;AAED;;AAEG;;;AACK,EAAA,MAAM,GAAA;AACZ,UAAM,WAAW,GAAG,KAAK,QAAL,GAAgB,CAApC;AACA,UAAM,OAAO,GAAG,IAAI,KAAJ,CAAa,WAAb,CAAhB;AACA,UAAM,GAAG,GAAG,KAAK,MAAL,EAAZ,CAHY,CAKZ;AACA;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,CAAC,EAA1B,EAA8B;AAC5B,MAAA,OAAO,CAAC,CAAD,CAAP,GAAa,KAAK,GAAL,CAAS,KAAK,IAAL,CAAU,KAAK,KAAL,GAAa,CAAvB,CAAT,CAAb;AACD;;AAED,SAAK,IAAL,GAAY,OAAZ;AACA,SAAK,QAAL,GAAgB,WAAhB;AACA,SAAK,eAAL,GAAuB,IAAI,KAAK,QAAhC;AACA,SAAK,KAAL,GAAa,CAAb;AACA,SAAK,GAAL,GAAW,GAAX;AACD;;AA/CoD;AACtC,iBAAA,CAAA,gBAAA,GAAmB,EAAnB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { RingBuffer } from './ring_buffer';\nexport class GrowingRingBuffer extends RingBuffer {\n    /**\n     * Constructs a `GrowingRingBuffer`.\n     */\n    constructor() {\n        super(GrowingRingBuffer.INITIAL_CAPACITY);\n    }\n    isFull() {\n        return false;\n    }\n    push(value) {\n        if (super.isFull()) {\n            this.expand();\n        }\n        super.push(value);\n    }\n    unshift(value) {\n        if (super.isFull()) {\n            this.expand();\n        }\n        super.unshift(value);\n    }\n    /**\n     * Doubles the capacity of the buffer.\n     */\n    expand() {\n        const newCapacity = this.capacity * 2;\n        const newData = new Array(newCapacity);\n        const len = this.length();\n        // Rotate the buffer to start at index 0 again, since we can't just\n        // allocate more space at the end.\n        for (let i = 0; i < len; i++) {\n            newData[i] = this.get(this.wrap(this.begin + i));\n        }\n        this.data = newData;\n        this.capacity = newCapacity;\n        this.doubledCapacity = 2 * this.capacity;\n        this.begin = 0;\n        this.end = len;\n    }\n}\nGrowingRingBuffer.INITIAL_CAPACITY = 32;\n//# sourceMappingURL=growing_ring_buffer.js.map"]},"metadata":{},"sourceType":"module"}