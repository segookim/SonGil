{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { binaryInsert } from './non_max_suppression_util';\nexport function nonMaxSuppressionV3Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0\n  /* softNmsSigma */\n  );\n}\nexport function nonMaxSuppressionV4Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {\n  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0\n  /* softNmsSigma */\n  , false\n  /* returnScoresTensor */\n  , padToMaxOutputSize\n  /* padToMaxOutputSize */\n  , true\n  /* returnValidOutputs */\n  );\n}\nexport function nonMaxSuppressionV5Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, true\n  /* returnScoresTensor */\n  );\n}\n\nfunction nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, returnScoresTensor = false, padToMaxOutputSize = false, returnValidOutputs = false) {\n  // The list is sorted in ascending order, so that we can always pop the\n  // candidate with the largest score in O(1) time.\n  const candidates = [];\n\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] > scoreThreshold) {\n      candidates.push({\n        score: scores[i],\n        boxIndex: i,\n        suppressBeginIndex: 0\n      });\n    }\n  }\n\n  candidates.sort(ascendingComparator); // If softNmsSigma is 0, the outcome of this algorithm is exactly same as\n  // before.\n\n  const scale = softNmsSigma > 0 ? -0.5 / softNmsSigma : 0.0;\n  const selectedIndices = [];\n  const selectedScores = [];\n\n  while (selectedIndices.length < maxOutputSize && candidates.length > 0) {\n    const candidate = candidates.pop();\n    const {\n      score: originalScore,\n      boxIndex,\n      suppressBeginIndex\n    } = candidate;\n\n    if (originalScore < scoreThreshold) {\n      break;\n    } // Overlapping boxes are likely to have similar scores, therefore we\n    // iterate through the previously selected boxes backwards in order to\n    // see if candidate's score should be suppressed. We use\n    // suppressBeginIndex to track and ensure a candidate can be suppressed\n    // by a selected box no more than once. Also, if the overlap exceeds\n    // iouThreshold, we simply ignore the candidate.\n\n\n    let ignoreCandidate = false;\n\n    for (let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {\n      const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);\n\n      if (iou >= iouThreshold) {\n        ignoreCandidate = true;\n        break;\n      }\n\n      candidate.score = candidate.score * suppressWeight(iouThreshold, scale, iou);\n\n      if (candidate.score <= scoreThreshold) {\n        break;\n      }\n    } // At this point, if `candidate.score` has not dropped below\n    // `scoreThreshold`, then we know that we went through all of the\n    // previous selections and can safely update `suppressBeginIndex` to the\n    // end of the selected array. Then we can re-insert the candidate with\n    // the updated score and suppressBeginIndex back in the candidate list.\n    // If on the other hand, `candidate.score` has dropped below the score\n    // threshold, we will not add it back to the candidates list.\n\n\n    candidate.suppressBeginIndex = selectedIndices.length;\n\n    if (!ignoreCandidate) {\n      // Candidate has passed all the tests, and is not suppressed, so\n      // select the candidate.\n      if (candidate.score === originalScore) {\n        selectedIndices.push(boxIndex);\n        selectedScores.push(candidate.score);\n      } else if (candidate.score > scoreThreshold) {\n        // Candidate's score is suppressed but is still high enough to be\n        // considered, so add back to the candidates list.\n        binaryInsert(candidates, candidate, ascendingComparator);\n      }\n    }\n  } // NonMaxSuppressionV4 feature: padding output to maxOutputSize.\n\n\n  const validOutputs = selectedIndices.length;\n  const elemsToPad = maxOutputSize - validOutputs;\n\n  if (padToMaxOutputSize && elemsToPad > 0) {\n    selectedIndices.push(...new Array(elemsToPad).fill(0));\n    selectedScores.push(...new Array(elemsToPad).fill(0.0));\n  }\n\n  const result = {\n    selectedIndices\n  };\n\n  if (returnScoresTensor) {\n    result['selectedScores'] = selectedScores;\n  }\n\n  if (returnValidOutputs) {\n    result['validOutputs'] = validOutputs;\n  }\n\n  return result;\n}\n\nfunction intersectionOverUnion(boxes, i, j) {\n  const iCoord = boxes.subarray(i * 4, i * 4 + 4);\n  const jCoord = boxes.subarray(j * 4, j * 4 + 4);\n  const yminI = Math.min(iCoord[0], iCoord[2]);\n  const xminI = Math.min(iCoord[1], iCoord[3]);\n  const ymaxI = Math.max(iCoord[0], iCoord[2]);\n  const xmaxI = Math.max(iCoord[1], iCoord[3]);\n  const yminJ = Math.min(jCoord[0], jCoord[2]);\n  const xminJ = Math.min(jCoord[1], jCoord[3]);\n  const ymaxJ = Math.max(jCoord[0], jCoord[2]);\n  const xmaxJ = Math.max(jCoord[1], jCoord[3]);\n  const areaI = (ymaxI - yminI) * (xmaxI - xminI);\n  const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);\n\n  if (areaI <= 0 || areaJ <= 0) {\n    return 0.0;\n  }\n\n  const intersectionYmin = Math.max(yminI, yminJ);\n  const intersectionXmin = Math.max(xminI, xminJ);\n  const intersectionYmax = Math.min(ymaxI, ymaxJ);\n  const intersectionXmax = Math.min(xmaxI, xmaxJ);\n  const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) * Math.max(intersectionXmax - intersectionXmin, 0.0);\n  return intersectionArea / (areaI + areaJ - intersectionArea);\n} // A Gaussian penalty function, this method always returns values in [0, 1].\n// The weight is a function of similarity, the more overlap two boxes are, the\n// smaller the weight is, meaning highly overlapping boxe will be significantly\n// penalized. On the other hand, a non-overlapping box will not be penalized.\n\n\nfunction suppressWeight(iouThreshold, scale, iou) {\n  const weight = Math.exp(scale * iou * iou);\n  return iou <= iouThreshold ? weight : 0.0;\n}\n\nfunction ascendingComparator(c1, c2) {\n  // For objects with same scores, we make the object with the larger index go\n  // first. In an array that pops from the end, this means that the object with\n  // the smaller index will be popped first. This ensures the same output as\n  // the TensorFlow python version.\n  return c1.score - c2.score || c1.score === c2.score && c2.boxIndex - c1.boxIndex;\n}","map":{"version":3,"sources":["../../src/backends/non_max_suppression_impl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { binaryInsert } from './non_max_suppression_util';\nexport function nonMaxSuppressionV3Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */);\n}\nexport function nonMaxSuppressionV4Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {\n    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */, false /* returnScoresTensor */, padToMaxOutputSize /* padToMaxOutputSize */, true\n    /* returnValidOutputs */ );\n}\nexport function nonMaxSuppressionV5Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, true /* returnScoresTensor */);\n}\nfunction nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, returnScoresTensor = false, padToMaxOutputSize = false, returnValidOutputs = false) {\n    // The list is sorted in ascending order, so that we can always pop the\n    // candidate with the largest score in O(1) time.\n    const candidates = [];\n    for (let i = 0; i < scores.length; i++) {\n        if (scores[i] > scoreThreshold) {\n            candidates.push({ score: scores[i], boxIndex: i, suppressBeginIndex: 0 });\n        }\n    }\n    candidates.sort(ascendingComparator);\n    // If softNmsSigma is 0, the outcome of this algorithm is exactly same as\n    // before.\n    const scale = softNmsSigma > 0 ? (-0.5 / softNmsSigma) : 0.0;\n    const selectedIndices = [];\n    const selectedScores = [];\n    while (selectedIndices.length < maxOutputSize && candidates.length > 0) {\n        const candidate = candidates.pop();\n        const { score: originalScore, boxIndex, suppressBeginIndex } = candidate;\n        if (originalScore < scoreThreshold) {\n            break;\n        }\n        // Overlapping boxes are likely to have similar scores, therefore we\n        // iterate through the previously selected boxes backwards in order to\n        // see if candidate's score should be suppressed. We use\n        // suppressBeginIndex to track and ensure a candidate can be suppressed\n        // by a selected box no more than once. Also, if the overlap exceeds\n        // iouThreshold, we simply ignore the candidate.\n        let ignoreCandidate = false;\n        for (let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {\n            const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);\n            if (iou >= iouThreshold) {\n                ignoreCandidate = true;\n                break;\n            }\n            candidate.score =\n                candidate.score * suppressWeight(iouThreshold, scale, iou);\n            if (candidate.score <= scoreThreshold) {\n                break;\n            }\n        }\n        // At this point, if `candidate.score` has not dropped below\n        // `scoreThreshold`, then we know that we went through all of the\n        // previous selections and can safely update `suppressBeginIndex` to the\n        // end of the selected array. Then we can re-insert the candidate with\n        // the updated score and suppressBeginIndex back in the candidate list.\n        // If on the other hand, `candidate.score` has dropped below the score\n        // threshold, we will not add it back to the candidates list.\n        candidate.suppressBeginIndex = selectedIndices.length;\n        if (!ignoreCandidate) {\n            // Candidate has passed all the tests, and is not suppressed, so\n            // select the candidate.\n            if (candidate.score === originalScore) {\n                selectedIndices.push(boxIndex);\n                selectedScores.push(candidate.score);\n            }\n            else if (candidate.score > scoreThreshold) {\n                // Candidate's score is suppressed but is still high enough to be\n                // considered, so add back to the candidates list.\n                binaryInsert(candidates, candidate, ascendingComparator);\n            }\n        }\n    }\n    // NonMaxSuppressionV4 feature: padding output to maxOutputSize.\n    const validOutputs = selectedIndices.length;\n    const elemsToPad = maxOutputSize - validOutputs;\n    if (padToMaxOutputSize && elemsToPad > 0) {\n        selectedIndices.push(...new Array(elemsToPad).fill(0));\n        selectedScores.push(...new Array(elemsToPad).fill(0.0));\n    }\n    const result = { selectedIndices };\n    if (returnScoresTensor) {\n        result['selectedScores'] = selectedScores;\n    }\n    if (returnValidOutputs) {\n        result['validOutputs'] = validOutputs;\n    }\n    return result;\n}\nfunction intersectionOverUnion(boxes, i, j) {\n    const iCoord = boxes.subarray(i * 4, i * 4 + 4);\n    const jCoord = boxes.subarray(j * 4, j * 4 + 4);\n    const yminI = Math.min(iCoord[0], iCoord[2]);\n    const xminI = Math.min(iCoord[1], iCoord[3]);\n    const ymaxI = Math.max(iCoord[0], iCoord[2]);\n    const xmaxI = Math.max(iCoord[1], iCoord[3]);\n    const yminJ = Math.min(jCoord[0], jCoord[2]);\n    const xminJ = Math.min(jCoord[1], jCoord[3]);\n    const ymaxJ = Math.max(jCoord[0], jCoord[2]);\n    const xmaxJ = Math.max(jCoord[1], jCoord[3]);\n    const areaI = (ymaxI - yminI) * (xmaxI - xminI);\n    const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);\n    if (areaI <= 0 || areaJ <= 0) {\n        return 0.0;\n    }\n    const intersectionYmin = Math.max(yminI, yminJ);\n    const intersectionXmin = Math.max(xminI, xminJ);\n    const intersectionYmax = Math.min(ymaxI, ymaxJ);\n    const intersectionXmax = Math.min(xmaxI, xmaxJ);\n    const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) *\n        Math.max(intersectionXmax - intersectionXmin, 0.0);\n    return intersectionArea / (areaI + areaJ - intersectionArea);\n}\n// A Gaussian penalty function, this method always returns values in [0, 1].\n// The weight is a function of similarity, the more overlap two boxes are, the\n// smaller the weight is, meaning highly overlapping boxe will be significantly\n// penalized. On the other hand, a non-overlapping box will not be penalized.\nfunction suppressWeight(iouThreshold, scale, iou) {\n    const weight = Math.exp(scale * iou * iou);\n    return iou <= iouThreshold ? weight : 0.0;\n}\nfunction ascendingComparator(c1, c2) {\n    // For objects with same scores, we make the object with the larger index go\n    // first. In an array that pops from the end, this means that the object with\n    // the smaller index will be popped first. This ensures the same output as\n    // the TensorFlow python version.\n    return (c1.score - c2.score) ||\n        ((c1.score === c2.score) && (c2.boxIndex - c1.boxIndex));\n}\n//# sourceMappingURL=non_max_suppression_impl.js.map"]},"metadata":{},"sourceType":"module"}