{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env, tensor, util } from '@tensorflow/tfjs-core';\nimport { LazyIterator } from './lazy_iterator';\n/**\n * Provide a stream of tensors from microphone audio stream. The tensors are\n * representing audio data as frequency-domain spectrogram generated with\n * browser's native FFT. Tensors representing time-domain waveform is available\n * based on configuration. Only works in browser environment.\n */\n\nexport class MicrophoneIterator extends LazyIterator {\n  constructor(microphoneConfig) {\n    super();\n    this.microphoneConfig = microphoneConfig;\n    this.isClosed = false;\n    this.fftSize = microphoneConfig.fftSize || 1024;\n    const fftSizeLog2 = Math.log2(this.fftSize);\n\n    if (this.fftSize < 0 || fftSizeLog2 < 4 || fftSizeLog2 > 14 || !Number.isInteger(fftSizeLog2)) {\n      throw new Error(`Invalid fftSize: it must be a power of 2 between ` + `2 to 4 and 2 to 14, but got ${this.fftSize}`);\n    }\n\n    this.numFrames = microphoneConfig.numFramesPerSpectrogram || 43;\n    this.sampleRateHz = microphoneConfig.sampleRateHz;\n    this.columnTruncateLength = microphoneConfig.columnTruncateLength || this.fftSize;\n    this.audioTrackConstraints = microphoneConfig.audioTrackConstraints;\n    this.smoothingTimeConstant = microphoneConfig.smoothingTimeConstant || 0;\n    this.includeSpectrogram = microphoneConfig.includeSpectrogram === false ? false : true;\n    this.includeWaveform = microphoneConfig.includeWaveform === true ? true : false;\n\n    if (!this.includeSpectrogram && !this.includeWaveform) {\n      throw new Error('Both includeSpectrogram and includeWaveform are false. ' + 'At least one type of data should be returned.');\n    }\n  }\n\n  summary() {\n    return `microphone`;\n  } // Construct a MicrophoneIterator and start the audio stream.\n\n\n  static async create(microphoneConfig = {}) {\n    if (env().get('IS_NODE')) {\n      throw new Error('microphone API is only supported in browser environment.');\n    }\n\n    const microphoneIterator = new MicrophoneIterator(microphoneConfig); // Call async function start() to initialize the audio stream.\n\n    await microphoneIterator.start();\n    return microphoneIterator;\n  } // Start the audio stream and FFT.\n\n\n  async start() {\n    try {\n      this.stream = await navigator.mediaDevices.getUserMedia({\n        audio: this.audioTrackConstraints == null ? true : this.audioTrackConstraints,\n        video: false\n      });\n    } catch (e) {\n      throw new Error(`Error thrown while initializing video stream: ${e.message}`);\n    }\n\n    if (!this.stream) {\n      throw new Error('Could not obtain audio from microphone.');\n    }\n\n    const ctxConstructor = // tslint:disable-next-line:no-any\n    window.AudioContext || window.webkitAudioContext;\n    this.audioContext = new ctxConstructor();\n\n    if (!this.sampleRateHz) {\n      // If sample rate is not provided, use the available sample rate on\n      // device.\n      this.sampleRateHz = this.audioContext.sampleRate;\n    } else if (this.audioContext.sampleRate !== this.sampleRateHz) {\n      throw new Error(`Mismatch in sampling rate: ` + `Expected: ${this.sampleRateHz}; ` + `Actual: ${this.audioContext.sampleRate}`);\n    }\n\n    const streamSource = this.audioContext.createMediaStreamSource(this.stream);\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = this.fftSize * 2;\n    this.analyser.smoothingTimeConstant = this.smoothingTimeConstant;\n    streamSource.connect(this.analyser);\n    this.freqData = new Float32Array(this.fftSize);\n    this.timeData = new Float32Array(this.fftSize);\n    return;\n  }\n\n  async next() {\n    if (this.isClosed) {\n      return {\n        value: null,\n        done: true\n      };\n    }\n\n    let spectrogramTensor;\n    let waveformTensor;\n    const audioDataQueue = await this.getAudioData();\n\n    if (this.includeSpectrogram) {\n      const freqData = this.flattenQueue(audioDataQueue.freqDataQueue);\n      spectrogramTensor = this.getTensorFromAudioDataArray(freqData, [this.numFrames, this.columnTruncateLength, 1]);\n    }\n\n    if (this.includeWaveform) {\n      const timeData = this.flattenQueue(audioDataQueue.timeDataQueue);\n      waveformTensor = this.getTensorFromAudioDataArray(timeData, [this.numFrames * this.fftSize, 1]);\n    }\n\n    return {\n      value: {\n        'spectrogram': spectrogramTensor,\n        'waveform': waveformTensor\n      },\n      done: false\n    };\n  } // Capture one result from the audio stream, and extract the value from\n  // iterator.next() result.\n\n\n  async capture() {\n    return (await this.next()).value;\n  }\n\n  async getAudioData() {\n    const freqDataQueue = [];\n    const timeDataQueue = [];\n    let currentFrames = 0;\n    return new Promise(resolve => {\n      const intervalID = setInterval(() => {\n        if (this.includeSpectrogram) {\n          this.analyser.getFloatFrequencyData(this.freqData); // If the audio stream is initializing, return empty queue.\n\n          if (this.freqData[0] === -Infinity) {\n            resolve({\n              freqDataQueue,\n              timeDataQueue\n            });\n          }\n\n          freqDataQueue.push(this.freqData.slice(0, this.columnTruncateLength));\n        }\n\n        if (this.includeWaveform) {\n          this.analyser.getFloatTimeDomainData(this.timeData);\n          timeDataQueue.push(this.timeData.slice());\n        } // Clean interval and return when all frames have been collected\n\n\n        if (++currentFrames === this.numFrames) {\n          clearInterval(intervalID);\n          resolve({\n            freqDataQueue,\n            timeDataQueue\n          });\n        }\n      }, this.fftSize / this.sampleRateHz * 1e3);\n    });\n  } // Stop the audio stream and pause the iterator.\n\n\n  stop() {\n    if (!this.isClosed) {\n      this.isClosed = true;\n      this.analyser.disconnect();\n      this.audioContext.close();\n\n      if (this.stream != null && this.stream.getTracks().length > 0) {\n        this.stream.getTracks()[0].stop();\n      }\n    }\n  } // Override toArray() function to prevent collecting.\n\n\n  toArray() {\n    throw new Error('Can not convert infinite audio stream to array.');\n  } // Return audio sampling rate in Hz\n\n\n  getSampleRate() {\n    return this.sampleRateHz;\n  }\n\n  flattenQueue(queue) {\n    const frameSize = queue[0].length;\n    const freqData = new Float32Array(queue.length * frameSize);\n    queue.forEach((data, i) => freqData.set(data, i * frameSize));\n    return freqData;\n  }\n\n  getTensorFromAudioDataArray(freqData, shape) {\n    const vals = new Float32Array(util.sizeFromShape(shape)); // If the data is less than the output shape, the rest is padded with zeros.\n\n    vals.set(freqData, vals.length - freqData.length);\n    return tensor(vals, shape);\n  }\n\n}","map":{"version":3,"sources":["../../src/iterators/microphone_iterator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env, tensor, util } from '@tensorflow/tfjs-core';\nimport { LazyIterator } from './lazy_iterator';\n/**\n * Provide a stream of tensors from microphone audio stream. The tensors are\n * representing audio data as frequency-domain spectrogram generated with\n * browser's native FFT. Tensors representing time-domain waveform is available\n * based on configuration. Only works in browser environment.\n */\nexport class MicrophoneIterator extends LazyIterator {\n    constructor(microphoneConfig) {\n        super();\n        this.microphoneConfig = microphoneConfig;\n        this.isClosed = false;\n        this.fftSize = microphoneConfig.fftSize || 1024;\n        const fftSizeLog2 = Math.log2(this.fftSize);\n        if (this.fftSize < 0 || fftSizeLog2 < 4 || fftSizeLog2 > 14 ||\n            !Number.isInteger(fftSizeLog2)) {\n            throw new Error(`Invalid fftSize: it must be a power of 2 between ` +\n                `2 to 4 and 2 to 14, but got ${this.fftSize}`);\n        }\n        this.numFrames = microphoneConfig.numFramesPerSpectrogram || 43;\n        this.sampleRateHz = microphoneConfig.sampleRateHz;\n        this.columnTruncateLength =\n            microphoneConfig.columnTruncateLength || this.fftSize;\n        this.audioTrackConstraints = microphoneConfig.audioTrackConstraints;\n        this.smoothingTimeConstant = microphoneConfig.smoothingTimeConstant || 0;\n        this.includeSpectrogram =\n            microphoneConfig.includeSpectrogram === false ? false : true;\n        this.includeWaveform =\n            microphoneConfig.includeWaveform === true ? true : false;\n        if (!this.includeSpectrogram && !this.includeWaveform) {\n            throw new Error('Both includeSpectrogram and includeWaveform are false. ' +\n                'At least one type of data should be returned.');\n        }\n    }\n    summary() {\n        return `microphone`;\n    }\n    // Construct a MicrophoneIterator and start the audio stream.\n    static async create(microphoneConfig = {}) {\n        if (env().get('IS_NODE')) {\n            throw new Error('microphone API is only supported in browser environment.');\n        }\n        const microphoneIterator = new MicrophoneIterator(microphoneConfig);\n        // Call async function start() to initialize the audio stream.\n        await microphoneIterator.start();\n        return microphoneIterator;\n    }\n    // Start the audio stream and FFT.\n    async start() {\n        try {\n            this.stream = await navigator.mediaDevices.getUserMedia({\n                audio: this.audioTrackConstraints == null ? true :\n                    this.audioTrackConstraints,\n                video: false\n            });\n        }\n        catch (e) {\n            throw new Error(`Error thrown while initializing video stream: ${e.message}`);\n        }\n        if (!this.stream) {\n            throw new Error('Could not obtain audio from microphone.');\n        }\n        const ctxConstructor = \n        // tslint:disable-next-line:no-any\n        window.AudioContext || window.webkitAudioContext;\n        this.audioContext = new ctxConstructor();\n        if (!this.sampleRateHz) {\n            // If sample rate is not provided, use the available sample rate on\n            // device.\n            this.sampleRateHz = this.audioContext.sampleRate;\n        }\n        else if (this.audioContext.sampleRate !== this.sampleRateHz) {\n            throw new Error(`Mismatch in sampling rate: ` +\n                `Expected: ${this.sampleRateHz}; ` +\n                `Actual: ${this.audioContext.sampleRate}`);\n        }\n        const streamSource = this.audioContext.createMediaStreamSource(this.stream);\n        this.analyser = this.audioContext.createAnalyser();\n        this.analyser.fftSize = this.fftSize * 2;\n        this.analyser.smoothingTimeConstant = this.smoothingTimeConstant;\n        streamSource.connect(this.analyser);\n        this.freqData = new Float32Array(this.fftSize);\n        this.timeData = new Float32Array(this.fftSize);\n        return;\n    }\n    async next() {\n        if (this.isClosed) {\n            return { value: null, done: true };\n        }\n        let spectrogramTensor;\n        let waveformTensor;\n        const audioDataQueue = await this.getAudioData();\n        if (this.includeSpectrogram) {\n            const freqData = this.flattenQueue(audioDataQueue.freqDataQueue);\n            spectrogramTensor = this.getTensorFromAudioDataArray(freqData, [this.numFrames, this.columnTruncateLength, 1]);\n        }\n        if (this.includeWaveform) {\n            const timeData = this.flattenQueue(audioDataQueue.timeDataQueue);\n            waveformTensor = this.getTensorFromAudioDataArray(timeData, [this.numFrames * this.fftSize, 1]);\n        }\n        return {\n            value: { 'spectrogram': spectrogramTensor, 'waveform': waveformTensor },\n            done: false\n        };\n    }\n    // Capture one result from the audio stream, and extract the value from\n    // iterator.next() result.\n    async capture() {\n        return (await this.next()).value;\n    }\n    async getAudioData() {\n        const freqDataQueue = [];\n        const timeDataQueue = [];\n        let currentFrames = 0;\n        return new Promise(resolve => {\n            const intervalID = setInterval(() => {\n                if (this.includeSpectrogram) {\n                    this.analyser.getFloatFrequencyData(this.freqData);\n                    // If the audio stream is initializing, return empty queue.\n                    if (this.freqData[0] === -Infinity) {\n                        resolve({ freqDataQueue, timeDataQueue });\n                    }\n                    freqDataQueue.push(this.freqData.slice(0, this.columnTruncateLength));\n                }\n                if (this.includeWaveform) {\n                    this.analyser.getFloatTimeDomainData(this.timeData);\n                    timeDataQueue.push(this.timeData.slice());\n                }\n                // Clean interval and return when all frames have been collected\n                if (++currentFrames === this.numFrames) {\n                    clearInterval(intervalID);\n                    resolve({ freqDataQueue, timeDataQueue });\n                }\n            }, this.fftSize / this.sampleRateHz * 1e3);\n        });\n    }\n    // Stop the audio stream and pause the iterator.\n    stop() {\n        if (!this.isClosed) {\n            this.isClosed = true;\n            this.analyser.disconnect();\n            this.audioContext.close();\n            if (this.stream != null && this.stream.getTracks().length > 0) {\n                this.stream.getTracks()[0].stop();\n            }\n        }\n    }\n    // Override toArray() function to prevent collecting.\n    toArray() {\n        throw new Error('Can not convert infinite audio stream to array.');\n    }\n    // Return audio sampling rate in Hz\n    getSampleRate() {\n        return this.sampleRateHz;\n    }\n    flattenQueue(queue) {\n        const frameSize = queue[0].length;\n        const freqData = new Float32Array(queue.length * frameSize);\n        queue.forEach((data, i) => freqData.set(data, i * frameSize));\n        return freqData;\n    }\n    getTensorFromAudioDataArray(freqData, shape) {\n        const vals = new Float32Array(util.sizeFromShape(shape));\n        // If the data is less than the output shape, the rest is padded with zeros.\n        vals.set(freqData, vals.length - freqData.length);\n        return tensor(vals, shape);\n    }\n}\n//# sourceMappingURL=microphone_iterator.js.map"]},"metadata":{},"sourceType":"module"}