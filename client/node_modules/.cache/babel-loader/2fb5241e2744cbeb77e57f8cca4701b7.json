{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer(f) {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\n\nexport class BrowserDownloads {\n  constructor(fileNamePrefix) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error('browserDownloads() cannot proceed because the current environment ' + 'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  async save(modelArtifacts) {\n    if (typeof document === 'undefined') {\n      throw new Error('Browser downloads are not supported in ' + 'this environment since `document` is not present');\n    }\n\n    const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], {\n      type: 'application/octet-stream'\n    }));\n\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserDownloads.save() does not support saving model topology ' + 'in binary formats yet.');\n    } else {\n      const weightsManifest = [{\n        paths: ['./' + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelTopologyAndWeightManifest = {\n        modelTopology: modelArtifacts.modelTopology,\n        format: modelArtifacts.format,\n        generatedBy: modelArtifacts.generatedBy,\n        convertedBy: modelArtifacts.convertedBy,\n        weightsManifest\n      };\n\n      if (modelArtifacts.signature != null) {\n        modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n      }\n\n      if (modelArtifacts.userDefinedMetadata != null) {\n        modelTopologyAndWeightManifest.userDefinedMetadata = modelArtifacts.userDefinedMetadata;\n      }\n\n      if (modelArtifacts.modelInitializer != null) {\n        modelTopologyAndWeightManifest.modelInitializer = modelArtifacts.modelInitializer;\n      }\n\n      const modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n        type: 'application/json'\n      })); // If anchor elements are not provided, create them without attaching them\n      // to parents, so that the downloaded file names can be controlled.\n\n      const jsonAnchor = this.jsonAnchor == null ? document.createElement('a') : this.jsonAnchor;\n      jsonAnchor.download = this.modelTopologyFileName;\n      jsonAnchor.href = modelTopologyAndWeightManifestURL; // Trigger downloads by evoking a click event on the download anchors.\n      // When multiple downloads are started synchronously, Firefox will only\n      // save the last one.\n\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ? document.createElement('a') : this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n      }\n\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)\n      };\n    }\n  }\n\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\n\nclass BrowserFiles {\n  constructor(files) {\n    if (files == null || files.length < 1) {\n      throw new Error(`When calling browserFiles, at least 1 file is required, ` + `but received ${files}`);\n    }\n\n    this.files = files;\n  }\n\n  async load() {\n    const jsonFile = this.files[0];\n    const weightFiles = this.files.slice(1);\n    return new Promise((resolve, reject) => {\n      const jsonReader = new FileReader();\n\n      jsonReader.onload = event => {\n        // tslint:disable-next-line:no-any\n        const modelJSON = JSON.parse(event.target.result);\n        const modelTopology = modelJSON.modelTopology;\n\n        if (modelTopology == null) {\n          reject(new Error(`modelTopology field is missing from file ${jsonFile.name}`));\n          return;\n        }\n\n        if (weightFiles.length === 0) {\n          resolve({\n            modelTopology\n          });\n        }\n\n        const weightsManifest = modelJSON.weightsManifest;\n\n        if (weightsManifest == null) {\n          reject(new Error(`weightManifest field is missing from file ${jsonFile.name}`));\n          return;\n        }\n\n        let pathToFile;\n\n        try {\n          pathToFile = this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n        } catch (err) {\n          reject(err);\n          return;\n        }\n\n        const weightSpecs = [];\n        const paths = [];\n        const perFileBuffers = [];\n        weightsManifest.forEach(weightsGroup => {\n          weightsGroup.paths.forEach(path => {\n            paths.push(path);\n            perFileBuffers.push(null);\n          });\n          weightSpecs.push(...weightsGroup.weights);\n        });\n        weightsManifest.forEach(weightsGroup => {\n          weightsGroup.paths.forEach(path => {\n            const weightFileReader = new FileReader();\n\n            weightFileReader.onload = event => {\n              // tslint:disable-next-line:no-any\n              const weightData = event.target.result;\n              const index = paths.indexOf(path);\n              perFileBuffers[index] = weightData;\n\n              if (perFileBuffers.indexOf(null) === -1) {\n                const result = {\n                  modelTopology,\n                  weightSpecs,\n                  weightData: concatenateArrayBuffers(perFileBuffers),\n                  format: modelJSON.format,\n                  generatedBy: modelJSON.generatedBy,\n                  convertedBy: modelJSON.convertedBy\n                };\n\n                if (modelJSON.signature != null) {\n                  result.signature = modelJSON.signature;\n                }\n\n                if (modelJSON.userDefinedMetadata != null) {\n                  result.userDefinedMetadata = modelJSON.userDefinedMetadata;\n                }\n\n                if (modelJSON.modelInitializer != null) {\n                  result.modelInitializer = modelJSON.modelInitializer;\n                }\n\n                resolve(result);\n              }\n            };\n\n            weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n\n            weightFileReader.readAsArrayBuffer(pathToFile[path]);\n          });\n        });\n      };\n\n      jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` + `from file '${jsonFile.name}'. BrowserFiles supports loading ` + `Keras-style tf.Model artifacts only.`);\n\n      jsonReader.readAsText(jsonFile);\n    });\n  }\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n\n\n  checkManifestAndWeightFiles(manifest, files) {\n    const basenames = [];\n    const fileNames = files.map(file => basename(file.name));\n    const pathToFile = {};\n\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(`Duplicate file basename found in weights manifest: ` + `'${pathBasename}'`);\n        }\n\n        basenames.push(pathBasename);\n\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n\n    if (basenames.length !== files.length) {\n      throw new Error(`Mismatch in the number of files in weights manifest ` + `(${basenames.length}) and the number of weight files provided ` + `(${files.length}).`);\n    }\n\n    return pathToFile;\n  }\n\n}\n\nexport const browserDownloadsRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function browserDownloads(fileNamePrefix = 'model') {\n  return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function browserFiles(files) {\n  return new BrowserFiles(files);\n}","map":{"version":3,"sources":["../../src/io/browser_files.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\nfunction defer(f) {\n    return new Promise(resolve => setTimeout(resolve)).then(f);\n}\nexport class BrowserDownloads {\n    constructor(fileNamePrefix) {\n        if (!env().getBool('IS_BROWSER')) {\n            // TODO(cais): Provide info on what IOHandlers are available under the\n            //   current environment.\n            throw new Error('browserDownloads() cannot proceed because the current environment ' +\n                'is not a browser.');\n        }\n        if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n            fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n        }\n        if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n            fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n        }\n        this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n        this.weightDataFileName =\n            fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n    }\n    async save(modelArtifacts) {\n        if (typeof (document) === 'undefined') {\n            throw new Error('Browser downloads are not supported in ' +\n                'this environment since `document` is not present');\n        }\n        const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], { type: 'application/octet-stream' }));\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserDownloads.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        else {\n            const weightsManifest = [{\n                    paths: ['./' + this.weightDataFileName],\n                    weights: modelArtifacts.weightSpecs\n                }];\n            const modelTopologyAndWeightManifest = {\n                modelTopology: modelArtifacts.modelTopology,\n                format: modelArtifacts.format,\n                generatedBy: modelArtifacts.generatedBy,\n                convertedBy: modelArtifacts.convertedBy,\n                weightsManifest\n            };\n            if (modelArtifacts.signature != null) {\n                modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n            }\n            if (modelArtifacts.userDefinedMetadata != null) {\n                modelTopologyAndWeightManifest.userDefinedMetadata =\n                    modelArtifacts.userDefinedMetadata;\n            }\n            if (modelArtifacts.modelInitializer != null) {\n                modelTopologyAndWeightManifest.modelInitializer =\n                    modelArtifacts.modelInitializer;\n            }\n            const modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: 'application/json' }));\n            // If anchor elements are not provided, create them without attaching them\n            // to parents, so that the downloaded file names can be controlled.\n            const jsonAnchor = this.jsonAnchor == null ? document.createElement('a') :\n                this.jsonAnchor;\n            jsonAnchor.download = this.modelTopologyFileName;\n            jsonAnchor.href = modelTopologyAndWeightManifestURL;\n            // Trigger downloads by evoking a click event on the download anchors.\n            // When multiple downloads are started synchronously, Firefox will only\n            // save the last one.\n            await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n            if (modelArtifacts.weightData != null) {\n                const weightDataAnchor = this.weightDataAnchor == null ?\n                    document.createElement('a') :\n                    this.weightDataAnchor;\n                weightDataAnchor.download = this.weightDataFileName;\n                weightDataAnchor.href = weightsURL;\n                await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n            }\n            return { modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts) };\n        }\n    }\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\nclass BrowserFiles {\n    constructor(files) {\n        if (files == null || files.length < 1) {\n            throw new Error(`When calling browserFiles, at least 1 file is required, ` +\n                `but received ${files}`);\n        }\n        this.files = files;\n    }\n    async load() {\n        const jsonFile = this.files[0];\n        const weightFiles = this.files.slice(1);\n        return new Promise((resolve, reject) => {\n            const jsonReader = new FileReader();\n            jsonReader.onload = (event) => {\n                // tslint:disable-next-line:no-any\n                const modelJSON = JSON.parse(event.target.result);\n                const modelTopology = modelJSON.modelTopology;\n                if (modelTopology == null) {\n                    reject(new Error(`modelTopology field is missing from file ${jsonFile.name}`));\n                    return;\n                }\n                if (weightFiles.length === 0) {\n                    resolve({ modelTopology });\n                }\n                const weightsManifest = modelJSON.weightsManifest;\n                if (weightsManifest == null) {\n                    reject(new Error(`weightManifest field is missing from file ${jsonFile.name}`));\n                    return;\n                }\n                let pathToFile;\n                try {\n                    pathToFile =\n                        this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n                }\n                catch (err) {\n                    reject(err);\n                    return;\n                }\n                const weightSpecs = [];\n                const paths = [];\n                const perFileBuffers = [];\n                weightsManifest.forEach(weightsGroup => {\n                    weightsGroup.paths.forEach(path => {\n                        paths.push(path);\n                        perFileBuffers.push(null);\n                    });\n                    weightSpecs.push(...weightsGroup.weights);\n                });\n                weightsManifest.forEach(weightsGroup => {\n                    weightsGroup.paths.forEach(path => {\n                        const weightFileReader = new FileReader();\n                        weightFileReader.onload = (event) => {\n                            // tslint:disable-next-line:no-any\n                            const weightData = event.target.result;\n                            const index = paths.indexOf(path);\n                            perFileBuffers[index] = weightData;\n                            if (perFileBuffers.indexOf(null) === -1) {\n                                const result = {\n                                    modelTopology,\n                                    weightSpecs,\n                                    weightData: concatenateArrayBuffers(perFileBuffers),\n                                    format: modelJSON.format,\n                                    generatedBy: modelJSON.generatedBy,\n                                    convertedBy: modelJSON.convertedBy\n                                };\n                                if (modelJSON.signature != null) {\n                                    result.signature = modelJSON.signature;\n                                }\n                                if (modelJSON.userDefinedMetadata != null) {\n                                    result.userDefinedMetadata = modelJSON.userDefinedMetadata;\n                                }\n                                if (modelJSON.modelInitializer != null) {\n                                    result.modelInitializer = modelJSON.modelInitializer;\n                                }\n                                resolve(result);\n                            }\n                        };\n                        weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n                        weightFileReader.readAsArrayBuffer(pathToFile[path]);\n                    });\n                });\n            };\n            jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` +\n                `from file '${jsonFile.name}'. BrowserFiles supports loading ` +\n                `Keras-style tf.Model artifacts only.`);\n            jsonReader.readAsText(jsonFile);\n        });\n    }\n    /**\n     * Check the compatibility between weights manifest and weight files.\n     */\n    checkManifestAndWeightFiles(manifest, files) {\n        const basenames = [];\n        const fileNames = files.map(file => basename(file.name));\n        const pathToFile = {};\n        for (const group of manifest) {\n            group.paths.forEach(path => {\n                const pathBasename = basename(path);\n                if (basenames.indexOf(pathBasename) !== -1) {\n                    throw new Error(`Duplicate file basename found in weights manifest: ` +\n                        `'${pathBasename}'`);\n                }\n                basenames.push(pathBasename);\n                if (fileNames.indexOf(pathBasename) === -1) {\n                    throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n                }\n                else {\n                    pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n                }\n            });\n        }\n        if (basenames.length !== files.length) {\n            throw new Error(`Mismatch in the number of files in weights manifest ` +\n                `(${basenames.length}) and the number of weight files provided ` +\n                `(${files.length}).`);\n        }\n        return pathToFile;\n    }\n}\nexport const browserDownloadsRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n            return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model') {\n    return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files) {\n    return new BrowserFiles(files);\n}\n//# sourceMappingURL=browser_files.js.map"]},"metadata":{},"sourceType":"module"}