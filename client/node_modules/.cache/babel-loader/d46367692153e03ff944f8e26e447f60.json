{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    const {\n      filterSize,\n      strides,\n      pad,\n      includeBatchInIndex\n    } = attrs;\n    const cpuBackend = backend;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n    const values = cpuBackend.data.get(x.dataId).values;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n    const pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);\n    const indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);\n    return [{\n      dataId: pooledDataId,\n      shape: convInfo.outShape,\n      dtype: x.dtype\n    }, {\n      dataId: indexesDataId,\n      shape: convInfo.outShape,\n      dtype: 'int32'\n    }];\n  }\n};","map":{"version":3,"sources":["../../src/kernels/MaxPoolWithArgmax.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,iBAAR,QAAiF,uBAAjF;AACA,SAAQ,YAAR,QAAqD,uBAArD;AAEA,SAAQ,gBAAR,QAA+B,aAA/B;AAEA,SAAQ,qBAAR,QAAoC,0BAApC;AAEA,OAAO,MAAM,uBAAuB,GAAiB;AACnD,EAAA,UAAU,EAAE,iBADuC;AAEnD,EAAA,WAAW,EAAE,KAFsC;AAGnD,EAAA,UAAU,EAAE,CAAC;AAAC,IAAA,MAAD;AAAS,IAAA,KAAT;AAAgB,IAAA;AAAhB,GAAD,KAA6B;AACvC,UAAM;AAAC,MAAA;AAAD,QAAM,MAAZ;AACA,UAAM;AAAC,MAAA,UAAD;AAAa,MAAA,OAAb;AAAsB,MAAA,GAAtB;AAA2B,MAAA;AAA3B,QACF,KADJ;AAEA,UAAM,UAAU,GAAG,OAAnB;AACA,IAAA,gBAAgB,CAAC,CAAD,EAAI,mBAAJ,CAAhB;AAEA,UAAM,MAAM,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,CAAC,CAAC,MAAtB,EAA8B,MAA7C;AACA,UAAM,QAAQ,GAAG,YAAY,CAAC,iBAAb,CACb,CAAC,CAAC,KADW,EACgC,UADhC,EAC4C,OAD5C,EAEb,CAAC,CAAD,EAAI,CAAJ,CAFa,EAEL,GAFK,CAAjB;AAGA,UAAM,CAAC,MAAD,EAAS,OAAT,IAAoB,qBAAqB,CAC3C,MAD2C,EACnC,CAAC,CAAC,KADiC,EAC1B,CAAC,CAAC,KADwB,EACjB,mBADiB,EACI,QADJ,CAA/C;AAGA,UAAM,YAAY,GACd,UAAU,CAAC,KAAX,CAAiB,MAAjB,EAAyC,QAAQ,CAAC,QAAlD,EAA4D,CAAC,CAAC,KAA9D,CADJ;AAEA,UAAM,aAAa,GACf,UAAU,CAAC,KAAX,CAAiB,OAAjB,EAAwC,QAAQ,CAAC,QAAjD,EAA2D,CAAC,CAAC,KAA7D,CADJ;AAEA,WAAO,CACL;AAAC,MAAA,MAAM,EAAE,YAAT;AAAuB,MAAA,KAAK,EAAE,QAAQ,CAAC,QAAvC;AAAiD,MAAA,KAAK,EAAE,CAAC,CAAC;AAA1D,KADK,EAEL;AAAC,MAAA,MAAM,EAAE,aAAT;AAAwB,MAAA,KAAK,EAAE,QAAQ,CAAC,QAAxC;AAAkD,MAAA,KAAK,EAAE;AAAzD,KAFK,CAAP;AAID;AAzBkD,CAA9C","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n    kernelName: MaxPoolWithArgmax,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { filterSize, strides, pad, includeBatchInIndex } = attrs;\n        const cpuBackend = backend;\n        assertNotComplex(x, 'MaxPoolWithArgmax');\n        const values = cpuBackend.data.get(x.dataId).values;\n        const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, [1, 1], pad);\n        const [pooled, indexes] = maxPoolWithArgmaxImpl(values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n        const pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);\n        const indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);\n        return [\n            { dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype },\n            { dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32' }\n        ];\n    }\n};\n//# sourceMappingURL=MaxPoolWithArgmax.js.map"]},"metadata":{},"sourceType":"module"}