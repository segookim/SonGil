{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropFilter, TensorBuffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNativeBackpropFilter(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      dy = inputs.dy;\n  var strides = attrs.strides,\n      dilations = attrs.dilations,\n      pad = attrs.pad,\n      dimRoundingMode = attrs.dimRoundingMode,\n      filterShape = attrs.filterShape;\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n  var convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true\n  /* depthwise */\n  );\n  var strideHeight = convInfo.strideHeight,\n      strideWidth = convInfo.strideWidth,\n      filterHeight = convInfo.filterHeight,\n      filterWidth = convInfo.filterWidth;\n  var dW = new TensorBuffer(convInfo.filterShape, 'float32');\n  var leftPad = convInfo.padInfo.left;\n  var topPad = convInfo.padInfo.top;\n  var chMul = convInfo.outChannels / convInfo.inChannels;\n  var xVals = backend.data.get(x.dataId).values;\n  var xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  var dyVals = backend.data.get(dy.dataId).values;\n  var dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (var wR = 0; wR < filterHeight; ++wR) {\n    var yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    var yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (var wC = 0; wC < filterWidth; ++wC) {\n      var yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      var yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        var d1 = Math.trunc(d2 / chMul);\n        var dm = d2 % chMul;\n        var dotProd = 0;\n\n        for (var b = 0; b < convInfo.batchSize; ++b) {\n          for (var yR = yRMin; yR < yRMax; ++yR) {\n            var xR = wR + yR * strideHeight - topPad;\n\n            for (var yC = yCMin; yC < yCMax; ++yC) {\n              var xC = wC + yC * strideWidth - leftPad;\n              dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n            }\n          }\n        }\n\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\nexport var depthwiseConv2dNativeBackpropFilterConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter\n};","map":{"version":3,"sources":["../../src/kernels/DepthwiseConv2dNativeBackpropFilter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropFilter, TensorBuffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNativeBackpropFilter(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, dilations, pad, dimRoundingMode, filterShape } = attrs;\n    assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n    const { strideHeight, strideWidth, filterHeight, filterWidth } = convInfo;\n    const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    const chMul = convInfo.outChannels / convInfo.inChannels;\n    const xVals = backend.data.get(x.dataId).values;\n    const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n    const dyVals = backend.data.get(dy.dataId).values;\n    const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n    for (let wR = 0; wR < filterHeight; ++wR) {\n        const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n        const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n        for (let wC = 0; wC < filterWidth; ++wC) {\n            const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n            const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n            for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                const d1 = Math.trunc(d2 / chMul);\n                const dm = d2 % chMul;\n                let dotProd = 0;\n                for (let b = 0; b < convInfo.batchSize; ++b) {\n                    for (let yR = yRMin; yR < yRMax; ++yR) {\n                        const xR = wR + yR * strideHeight - topPad;\n                        for (let yC = yCMin; yC < yCMax; ++yC) {\n                            const xC = wC + yC * strideWidth - leftPad;\n                            dotProd += xBuf.get(b, xR, xC, d1) *\n                                dyBuf.get(b, yR, yC, d2);\n                        }\n                    }\n                }\n                dW.set(dotProd, wR, wC, d1, dm);\n            }\n        }\n    }\n    return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\nexport const depthwiseConv2dNativeBackpropFilterConfig = {\n    kernelName: DepthwiseConv2dNativeBackpropFilter,\n    backendName: 'cpu',\n    kernelFunc: depthwiseConv2dNativeBackpropFilter\n};\n//# sourceMappingURL=DepthwiseConv2dNativeBackpropFilter.js.map"]},"metadata":{},"sourceType":"module"}