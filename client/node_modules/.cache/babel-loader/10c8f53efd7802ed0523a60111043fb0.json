{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose as _dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\n\nexport var RMSPropOptimizer = /*#__PURE__*/function (_Optimizer) {\n  _inherits(RMSPropOptimizer, _Optimizer);\n\n  var _super = _createSuper(RMSPropOptimizer);\n\n  function RMSPropOptimizer(learningRate) {\n    var _this;\n\n    var decay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.9;\n    var momentum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;\n    var epsilon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var centered = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    _classCallCheck(this, RMSPropOptimizer);\n\n    _this = _super.call(this);\n    _this.learningRate = learningRate;\n    _this.decay = decay;\n    _this.momentum = momentum;\n    _this.epsilon = epsilon;\n    _this.accumulatedMeanSquares = [];\n    _this.accumulatedMoments = [];\n    _this.accumulatedMeanGrads = [];\n    _this.centered = centered;\n\n    if (epsilon == null) {\n      _this.epsilon = ENGINE.backend.epsilon();\n    }\n\n    if (learningRate == null) {\n      throw new Error(\"learningRate for RMSPropOptimizer must be defined.\");\n    }\n\n    return _this;\n  }\n\n  _createClass(RMSPropOptimizer, [{\n    key: \"applyGradients\",\n    value: function applyGradients(variableGradients) {\n      var _this2 = this;\n\n      var variableNames = Array.isArray(variableGradients) ? variableGradients.map(function (item) {\n        return item.name;\n      }) : Object.keys(variableGradients);\n      variableNames.forEach(function (name, i) {\n        var value = ENGINE.registeredVariables[name];\n        var trainable = false;\n\n        if (_this2.accumulatedMeanSquares[i] == null) {\n          _this2.accumulatedMeanSquares[i] = {\n            originalName: \"\".concat(name, \"/rms\"),\n            variable: tidy(function () {\n              return zerosLike(value).variable(trainable);\n            })\n          };\n        }\n\n        if (_this2.accumulatedMoments[i] == null) {\n          _this2.accumulatedMoments[i] = {\n            originalName: \"\".concat(name, \"/momentum\"),\n            variable: tidy(function () {\n              return zerosLike(value).variable(trainable);\n            })\n          };\n        }\n\n        if (_this2.accumulatedMeanGrads[i] == null && _this2.centered) {\n          _this2.accumulatedMeanGrads[i] = {\n            originalName: \"\".concat(name, \"/mg\"),\n            variable: tidy(function () {\n              return zerosLike(value).variable(trainable);\n            })\n          };\n        }\n\n        var gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n        if (gradient == null) {\n          return;\n        }\n\n        var accumulatedMeanSquare = _this2.accumulatedMeanSquares[i].variable;\n        var accumulatedMoments = _this2.accumulatedMoments[i].variable;\n        tidy(function () {\n          var newAccumulatedMeanSquare = add(mul(accumulatedMeanSquare, _this2.decay), mul(square(gradient), 1 - _this2.decay));\n\n          if (_this2.centered) {\n            var accumulatedMeanGrad = _this2.accumulatedMeanGrads[i].variable; // Centered gradient\n\n            var newAccumulatedMeanGrad = add(mul(accumulatedMeanGrad, _this2.decay), mul(gradient, 1 - _this2.decay));\n            var gradContribution = div(mul(gradient, _this2.learningRate), sqrt(sub(newAccumulatedMeanSquare, add(square(newAccumulatedMeanGrad), _this2.epsilon))));\n            var newAccumulatedMoments = add(mul(accumulatedMoments, _this2.momentum), gradContribution);\n            accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n            accumulatedMeanGrad.assign(newAccumulatedMeanGrad);\n            accumulatedMoments.assign(newAccumulatedMoments);\n            var newValue = sub(value, newAccumulatedMoments);\n            value.assign(newValue);\n          } else {\n            // Plain gradient\n            var _newAccumulatedMeanSquare = add(mul(accumulatedMeanSquare, _this2.decay), mul(square(gradient), 1 - _this2.decay));\n\n            var _newAccumulatedMoments = add(mul(accumulatedMoments, _this2.momentum), div(mul(gradient, _this2.learningRate), sqrt(add(_newAccumulatedMeanSquare, _this2.epsilon))));\n\n            accumulatedMeanSquare.assign(_newAccumulatedMeanSquare);\n            accumulatedMoments.assign(_newAccumulatedMoments);\n\n            var _newValue = sub(value, _newAccumulatedMoments);\n\n            value.assign(_newValue);\n          }\n        });\n      });\n      this.incrementIterations();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.accumulatedMeanSquares != null) {\n        _dispose(this.accumulatedMeanSquares.map(function (v) {\n          return v.variable;\n        }));\n      }\n\n      if (this.accumulatedMeanGrads != null && this.centered) {\n        _dispose(this.accumulatedMeanGrads.map(function (v) {\n          return v.variable;\n        }));\n      }\n\n      if (this.accumulatedMoments != null) {\n        _dispose(this.accumulatedMoments.map(function (v) {\n          return v.variable;\n        }));\n      }\n    }\n  }, {\n    key: \"getWeights\",\n    value: function () {\n      var _getWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var variables;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Order matters for Python compatibility.\n                variables = [].concat(_toConsumableArray(this.accumulatedMeanSquares), _toConsumableArray(this.accumulatedMoments));\n\n                if (this.centered) {\n                  variables.push.apply(variables, _toConsumableArray(this.accumulatedMeanGrads));\n                }\n\n                _context.next = 4;\n                return this.saveIterations();\n\n              case 4:\n                _context.t0 = _context.sent;\n                return _context.abrupt(\"return\", [_context.t0].concat(variables.map(function (v) {\n                  return {\n                    name: v.originalName,\n                    tensor: v.variable\n                  };\n                })));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getWeights() {\n        return _getWeights.apply(this, arguments);\n      }\n\n      return getWeights;\n    }()\n  }, {\n    key: \"setWeights\",\n    value: function () {\n      var _setWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(weightValues) {\n        var variableCount, trainable;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.extractIterations(weightValues);\n\n              case 2:\n                weightValues = _context2.sent;\n                variableCount = this.centered ? weightValues.length / 3 : weightValues.length / 2;\n                trainable = false;\n                this.accumulatedMeanSquares = weightValues.slice(0, variableCount).map(function (v) {\n                  return {\n                    originalName: v.name,\n                    variable: v.tensor.variable(trainable)\n                  };\n                });\n                this.accumulatedMoments = weightValues.slice(variableCount, variableCount * 2).map(function (v) {\n                  return {\n                    originalName: v.name,\n                    variable: v.tensor.variable(trainable)\n                  };\n                });\n\n                if (this.centered) {\n                  this.accumulatedMeanGrads = weightValues.slice(variableCount * 2, variableCount * 3).map(function (v) {\n                    return {\n                      originalName: v.name,\n                      variable: v.tensor.variable(trainable)\n                    };\n                  });\n                }\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setWeights(_x) {\n        return _setWeights.apply(this, arguments);\n      }\n\n      return setWeights;\n    }()\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        'learningRate': this.learningRate,\n        'decay': this.decay,\n        'momentum': this.momentum,\n        'epsilon': this.epsilon,\n        'centered': this.centered\n      };\n    }\n    /** @nocollapse */\n\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls(config['learningRate'], config['decay'], config['momentum'], config['epsilon'], config['centered']);\n    }\n  }]);\n\n  return RMSPropOptimizer;\n}(Optimizer);\n/** @nocollapse */\n\nRMSPropOptimizer.className = 'RMSProp'; // Note: Name matters for Python compatibility.\n\nregisterClass(RMSPropOptimizer);","map":{"version":3,"sources":["../../src/optimizers/rmsprop_optimizer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\nexport class RMSPropOptimizer extends Optimizer {\n    constructor(learningRate, decay = 0.9, momentum = 0.0, epsilon = null, centered = false) {\n        super();\n        this.learningRate = learningRate;\n        this.decay = decay;\n        this.momentum = momentum;\n        this.epsilon = epsilon;\n        this.accumulatedMeanSquares = [];\n        this.accumulatedMoments = [];\n        this.accumulatedMeanGrads = [];\n        this.centered = centered;\n        if (epsilon == null) {\n            this.epsilon = ENGINE.backend.epsilon();\n        }\n        if (learningRate == null) {\n            throw new Error(`learningRate for RMSPropOptimizer must be defined.`);\n        }\n    }\n    applyGradients(variableGradients) {\n        const variableNames = Array.isArray(variableGradients) ?\n            variableGradients.map(item => item.name) :\n            Object.keys(variableGradients);\n        variableNames.forEach((name, i) => {\n            const value = ENGINE.registeredVariables[name];\n            const trainable = false;\n            if (this.accumulatedMeanSquares[i] == null) {\n                this.accumulatedMeanSquares[i] = {\n                    originalName: `${name}/rms`,\n                    variable: tidy(() => zerosLike(value).variable(trainable))\n                };\n            }\n            if (this.accumulatedMoments[i] == null) {\n                this.accumulatedMoments[i] = {\n                    originalName: `${name}/momentum`,\n                    variable: tidy(() => zerosLike(value).variable(trainable))\n                };\n            }\n            if (this.accumulatedMeanGrads[i] == null && this.centered) {\n                this.accumulatedMeanGrads[i] = {\n                    originalName: `${name}/mg`,\n                    variable: tidy(() => zerosLike(value).variable(trainable))\n                };\n            }\n            const gradient = Array.isArray(variableGradients) ?\n                variableGradients[i].tensor :\n                variableGradients[name];\n            if (gradient == null) {\n                return;\n            }\n            const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;\n            const accumulatedMoments = this.accumulatedMoments[i].variable;\n            tidy(() => {\n                const newAccumulatedMeanSquare = add(mul(accumulatedMeanSquare, this.decay), mul(square(gradient), 1 - this.decay));\n                if (this.centered) {\n                    const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable;\n                    // Centered gradient\n                    const newAccumulatedMeanGrad = add(mul(accumulatedMeanGrad, this.decay), mul(gradient, 1 - this.decay));\n                    const gradContribution = div(mul(gradient, this.learningRate), sqrt(sub(newAccumulatedMeanSquare, add(square(newAccumulatedMeanGrad), this.epsilon))));\n                    const newAccumulatedMoments = add(mul(accumulatedMoments, this.momentum), gradContribution);\n                    accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n                    accumulatedMeanGrad.assign(newAccumulatedMeanGrad);\n                    accumulatedMoments.assign(newAccumulatedMoments);\n                    const newValue = sub(value, newAccumulatedMoments);\n                    value.assign(newValue);\n                }\n                else {\n                    // Plain gradient\n                    const newAccumulatedMeanSquare = add(mul(accumulatedMeanSquare, this.decay), mul(square(gradient), 1 - this.decay));\n                    const newAccumulatedMoments = add(mul(accumulatedMoments, this.momentum), div(mul(gradient, this.learningRate), sqrt(add(newAccumulatedMeanSquare, this.epsilon))));\n                    accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n                    accumulatedMoments.assign(newAccumulatedMoments);\n                    const newValue = sub(value, newAccumulatedMoments);\n                    value.assign(newValue);\n                }\n            });\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        if (this.accumulatedMeanSquares != null) {\n            dispose(this.accumulatedMeanSquares.map(v => v.variable));\n        }\n        if (this.accumulatedMeanGrads != null && this.centered) {\n            dispose(this.accumulatedMeanGrads.map(v => v.variable));\n        }\n        if (this.accumulatedMoments != null) {\n            dispose(this.accumulatedMoments.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        // Order matters for Python compatibility.\n        const variables = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];\n        if (this.centered) {\n            variables.push(...this.accumulatedMeanGrads);\n        }\n        return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        const variableCount = this.centered ? weightValues.length / 3 : weightValues.length / 2;\n        const trainable = false;\n        this.accumulatedMeanSquares =\n            weightValues.slice(0, variableCount).map(v => ({\n                originalName: v.name,\n                variable: v.tensor.variable(trainable)\n            }));\n        this.accumulatedMoments =\n            weightValues.slice(variableCount, variableCount * 2)\n                .map(v => ({\n                originalName: v.name,\n                variable: v.tensor.variable(trainable)\n            }));\n        if (this.centered) {\n            this.accumulatedMeanGrads =\n                weightValues.slice(variableCount * 2, variableCount * 3)\n                    .map(v => ({\n                    originalName: v.name,\n                    variable: v.tensor.variable(trainable)\n                }));\n        }\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'decay': this.decay,\n            'momentum': this.momentum,\n            'epsilon': this.epsilon,\n            'centered': this.centered\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['decay'], config['momentum'], config['epsilon'], config['centered']);\n    }\n}\n/** @nocollapse */\nRMSPropOptimizer.className = 'RMSProp'; // Note: Name matters for Python compatibility.\nregisterClass(RMSPropOptimizer);\n//# sourceMappingURL=rmsprop_optimizer.js.map"]},"metadata":{},"sourceType":"module"}