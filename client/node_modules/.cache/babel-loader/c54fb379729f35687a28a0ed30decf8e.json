{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { assert } from '../../util';\nimport { div } from '../div';\nimport { mul } from '../mul';\nimport { norm } from '../norm';\nimport { op } from '../operation';\nimport { split } from '../split';\nimport { squeeze } from '../squeeze';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\n/**\n * Gram-Schmidt orthogonalization.\n *\n * ```js\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\n * let y = tf.linalg.gramSchmidt(x);\n * y.print();\n * console.log('Othogonalized:');\n * y.dot(y.transpose()).print();  // should be nearly the identity matrix.\n * console.log('First row direction maintained:');\n * const data = await y.array();\n * console.log(data[0][1] / data[0][0]);  // should be nearly 2.\n * ```\n *\n * @param xs The vectors to be orthogonalized, in one of the two following\n *   formats:\n *   - An Array of `tf.Tensor1D`.\n *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\n *     of `xs`.\n *   In each case, all the vectors must have the same length and the length\n *   must be greater than or equal to the number of vectors.\n * @returns The orthogonalized and normalized vectors or matrix.\n *   Orthogonalization means that the vectors or the rows of the matrix\n *   are orthogonal (zero inner products). Normalization means that each\n *   vector or each row of the matrix has an L2 norm that equals `1`.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\n\nfunction gramSchmidt_(xs) {\n  var inputIsTensor2D;\n\n  if (Array.isArray(xs)) {\n    (function () {\n      inputIsTensor2D = false;\n      assert(xs != null && xs.length > 0, function () {\n        return 'Gram-Schmidt process: input must not be null, undefined, or ' + 'empty';\n      });\n      var dim = xs[0].shape[0];\n\n      var _loop = function _loop(i) {\n        assert(xs[i].shape[0] === dim, function () {\n          return 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' + \"(\".concat(xs[i].shape[0], \" vs. \").concat(dim, \")\");\n        });\n      };\n\n      for (var i = 1; i < xs.length; ++i) {\n        _loop(i);\n      }\n    })();\n  } else {\n    inputIsTensor2D = true;\n    xs = split(xs, xs.shape[0], 0).map(function (x) {\n      return squeeze(x, [0]);\n    });\n  }\n\n  assert(xs.length <= xs[0].shape[0], function () {\n    return \"Gram-Schmidt: Number of vectors (\".concat(xs.length, \") exceeds \") + \"number of dimensions (\".concat(xs[0].shape[0], \").\");\n  });\n  var ys = [];\n  var xs1d = xs;\n\n  var _loop2 = function _loop2(i) {\n    ys.push(ENGINE.tidy(function () {\n      var x = xs1d[i];\n\n      if (i > 0) {\n        for (var j = 0; j < i; ++j) {\n          var proj = mul(sum(mul(ys[j], x)), ys[j]);\n          x = sub(x, proj);\n        }\n      }\n\n      return div(x, norm(x, 'euclidean'));\n    }));\n  };\n\n  for (var i = 0; i < xs.length; ++i) {\n    _loop2(i);\n  }\n\n  if (inputIsTensor2D) {\n    return stack(ys, 0);\n  } else {\n    return ys;\n  }\n}\n\nexport var gramSchmidt = op({\n  gramSchmidt_: gramSchmidt_\n});","map":{"version":3,"sources":["../../../src/ops/linalg/gram_schmidt.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { assert } from '../../util';\nimport { div } from '../div';\nimport { mul } from '../mul';\nimport { norm } from '../norm';\nimport { op } from '../operation';\nimport { split } from '../split';\nimport { squeeze } from '../squeeze';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\n/**\n * Gram-Schmidt orthogonalization.\n *\n * ```js\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\n * let y = tf.linalg.gramSchmidt(x);\n * y.print();\n * console.log('Othogonalized:');\n * y.dot(y.transpose()).print();  // should be nearly the identity matrix.\n * console.log('First row direction maintained:');\n * const data = await y.array();\n * console.log(data[0][1] / data[0][0]);  // should be nearly 2.\n * ```\n *\n * @param xs The vectors to be orthogonalized, in one of the two following\n *   formats:\n *   - An Array of `tf.Tensor1D`.\n *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\n *     of `xs`.\n *   In each case, all the vectors must have the same length and the length\n *   must be greater than or equal to the number of vectors.\n * @returns The orthogonalized and normalized vectors or matrix.\n *   Orthogonalization means that the vectors or the rows of the matrix\n *   are orthogonal (zero inner products). Normalization means that each\n *   vector or each row of the matrix has an L2 norm that equals `1`.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\nfunction gramSchmidt_(xs) {\n    let inputIsTensor2D;\n    if (Array.isArray(xs)) {\n        inputIsTensor2D = false;\n        assert(xs != null && xs.length > 0, () => 'Gram-Schmidt process: input must not be null, undefined, or ' +\n            'empty');\n        const dim = xs[0].shape[0];\n        for (let i = 1; i < xs.length; ++i) {\n            assert(xs[i].shape[0] === dim, () => 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' +\n                `(${xs[i].shape[0]} vs. ${dim})`);\n        }\n    }\n    else {\n        inputIsTensor2D = true;\n        xs = split(xs, xs.shape[0], 0).map(x => squeeze(x, [0]));\n    }\n    assert(xs.length <= xs[0].shape[0], () => `Gram-Schmidt: Number of vectors (${xs.length}) exceeds ` +\n        `number of dimensions (${xs[0].shape[0]}).`);\n    const ys = [];\n    const xs1d = xs;\n    for (let i = 0; i < xs.length; ++i) {\n        ys.push(ENGINE.tidy(() => {\n            let x = xs1d[i];\n            if (i > 0) {\n                for (let j = 0; j < i; ++j) {\n                    const proj = mul(sum(mul(ys[j], x)), ys[j]);\n                    x = sub(x, proj);\n                }\n            }\n            return div(x, norm(x, 'euclidean'));\n        }));\n    }\n    if (inputIsTensor2D) {\n        return stack(ys, 0);\n    }\n    else {\n        return ys;\n    }\n}\nexport const gramSchmidt = op({ gramSchmidt_ });\n//# sourceMappingURL=gram_schmidt.js.map"]},"metadata":{},"sourceType":"module"}