{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPool3dPositions } from '../utils/pool_utils';\nexport function maxPool3DGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n  const convInfo = backend_util.computePool3DInfo(input.shape, filterSize, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode);\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n\n            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth || Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n\n              for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n\n                if (dyRow < 0 || dyRow >= convInfo.outHeight || Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n\n                for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth || Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  const curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth + wRow * effectiveFilterWidth + wCol;\n                  const mask = maxPos === curPos ? 1 : 0;\n\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const maxPool3DGradConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad\n};","map":{"version":3,"sources":["../../src/kernels/MaxPool3DGrad.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPool3dPositions } from '../utils/pool_utils';\nexport function maxPool3DGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    assertNotComplex([dy, input], 'maxPool3DGrad');\n    const convInfo = backend_util.computePool3DInfo(input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n    const inputBuf = backend.bufferSync(input);\n    const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = buffer(input.shape, 'float32');\n    const dyBuf = backend.bufferSync(dy);\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n        for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n            for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n                for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n                    for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n                        // Shader code begins\n                        const dyDepthCorner = dxDepth - padFront;\n                        const dyRowCorner = dxRow - padTop;\n                        const dyColCorner = dxCol - padLeft;\n                        let dotProd = 0;\n                        for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n                            const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                            if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                                Math.floor(dyDepth) !== dyDepth) {\n                                continue;\n                            }\n                            for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                                    Math.floor(dyRow) !== dyRow) {\n                                    continue;\n                                }\n                                for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                                        Math.floor(dyCol) !== dyCol) {\n                                        continue;\n                                    }\n                                    const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                                        effectiveFilterWidth -\n                                        1 -\n                                        maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                    const curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                                        wRow * effectiveFilterWidth + wCol;\n                                    const mask = maxPos === curPos ? 1 : 0;\n                                    if (mask === 0) {\n                                        continue;\n                                    }\n                                    const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                    dotProd += pixel * mask;\n                                }\n                            }\n                        }\n                        dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const maxPool3DGradConfig = {\n    kernelName: MaxPool3DGrad,\n    backendName: 'cpu',\n    kernelFunc: maxPool3DGrad\n};\n//# sourceMappingURL=MaxPool3DGrad.js.map"]},"metadata":{},"sourceType":"module"}