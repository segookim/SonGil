{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SliceProgram {\n  constructor(destSize) {\n    this.variableNames = ['source'];\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    const dtype = getCoordsDataType(this.rank);\n    const uniformPart = `uniform int start[${this.rank}];`;\n    const sourceCoords = getCoords(this.rank);\n    let body;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      ${uniformPart}\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(start) {\n    if (start.length !== this.rank) {\n      throw Error(`The rank (${this.rank}) of the program must match the ` + `length of start (${start.length})`);\n    }\n\n    return (gpgpu, webGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n\n}\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank) {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}","map":{"version":3,"sources":["../src/slice_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAIH,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAO,YAAP,CAAmB;AASvB,EAAA,WAAA,CAAY,QAAZ,EAA8B;AAR9B,SAAA,aAAA,GAAgB,CAAC,QAAD,CAAhB;AASE,SAAK,WAAL,GAAmB,QAAnB;AACA,SAAK,IAAL,GAAY,QAAQ,CAAC,MAArB;AAEA,UAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,IAAN,CAA/B;AACA,UAAM,WAAW,GAAG,qBAAqB,KAAK,IAAI,IAAlD;AACA,UAAM,YAAY,GAAG,SAAS,CAAC,KAAK,IAAN,CAA9B;AAEA,QAAI,IAAJ;AACA,UAAM,QAAQ,GAAG,QAAQ,CAAC,GAAT,CAAa,CAAC,CAAD,EAAI,CAAJ,KAAS;AACrC,aAAO,aAAa,MAAM,CAAC,CAAD,CAAG,YAAY,CAAC,cAAc,MAAM,CAAC,CAAD,CAAG,GAAjE;AACD,KAFgB,CAAjB;AAGA,IAAA,IAAI,GAAG;UACD,KAAK;UACL,KAAK;UACL,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAmB;AACtB,OAJH;AAKA,SAAK,QAAL,GAAgB;QACZ,WAAW;;UAET,IAAI;8BACgB,YAAY;;AAErC,KAND;AAOD;;AAED,EAAA,kBAAkB,CAAC,KAAD,EAAgB;AAChC,QAAI,KAAK,CAAC,MAAN,KAAiB,KAAK,IAA1B,EAAgC;AAC9B,YAAM,KAAK,CACP,aAAa,KAAK,IAAI,kCAAtB,GACA,oBAAoB,KAAK,CAAC,MAAM,GAFzB,CAAX;AAGD;;AACD,WAAO,CAAC,KAAD,EAAsB,YAAtB,KAAoD;AACzD,UAAI,KAAK,QAAL,IAAiB,IAArB,EAA2B;AACzB,aAAK,QAAL,GAAgB,KAAK,CAAC,yBAAN,CAAgC,YAAhC,EAA8C,OAA9C,CAAhB;;AACA,YAAI,KAAK,QAAL,IAAiB,IAArB,EAA2B;AACzB;AACA;AACA;AACD;AACF;;AACD,MAAA,KAAK,CAAC,EAAN,CAAS,UAAT,CAAoB,KAAK,QAAzB,EAAmC,KAAnC;AACD,KAVD;AAWD;;AApDsB;AAuDzB,MAAM,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAf;;AAEA,SAAS,SAAT,CAAmB,IAAnB,EAA+B;AAC7B,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd,WAAO,WAAP;AACD,GAFD,MAEO,IAAI,IAAI,IAAI,CAAZ,EAAe;AACpB,WAAO,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,IAAhB,EAAsB,GAAtB,CAA0B,CAAC,IAAI,eAAe,CAA9C,EAAiD,IAAjD,CAAsD,GAAtD,CAAP;AACD,GAFM,MAEA;AACL,UAAM,KAAK,CAAC,oBAAoB,IAAI,uBAAzB,CAAX;AACD;AACF","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SliceProgram {\n    constructor(destSize) {\n        this.variableNames = ['source'];\n        this.outputShape = destSize;\n        this.rank = destSize.length;\n        const dtype = getCoordsDataType(this.rank);\n        const uniformPart = `uniform int start[${this.rank}];`;\n        const sourceCoords = getCoords(this.rank);\n        let body;\n        const coordSum = destSize.map((_, i) => {\n            return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n        });\n        body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n        this.userCode = `\n      ${uniformPart}\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n    }\n    getCustomSetupFunc(start) {\n        if (start.length !== this.rank) {\n            throw Error(`The rank (${this.rank}) of the program must match the ` +\n                `length of start (${start.length})`);\n        }\n        return (gpgpu, webGLProgram) => {\n            if (this.startLoc == null) {\n                this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n                if (this.startLoc == null) {\n                    // This means the compiler has optimized and realized it doesn't need\n                    // the uniform.\n                    return;\n                }\n            }\n            gpgpu.gl.uniform1iv(this.startLoc, start);\n        };\n    }\n}\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\nfunction getCoords(rank) {\n    if (rank === 1) {\n        return 'sourceLoc';\n    }\n    else if (rank <= 6) {\n        return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n    }\n    else {\n        throw Error(`Slicing for rank ${rank} is not yet supported`);\n    }\n}\n//# sourceMappingURL=slice_gpu.js.map"]},"metadata":{},"sourceType":"module"}