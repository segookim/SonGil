{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Softplus } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils'; // mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\nexport const softplus = unaryKernelFunc(Softplus, xi => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold; // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n\n  const tooSmall = xi < threshold;\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n\n  return result;\n});\nexport const softplusConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus\n};","map":{"version":3,"sources":["../../src/kernels/Softplus.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAsB,QAAtB,QAAqC,uBAArC;AAEA,SAAQ,eAAR,QAA8B,sBAA9B,C,CAEA;AAEA;AACA;AACA;;AACA,MAAM,OAAO,GAAG,qBAAhB;AACA,MAAM,SAAS,GAAG,IAAI,CAAC,GAAL,CAAS,OAAT,IAAoB,GAAtC;AAEA,OAAO,MAAM,QAAQ,GAAG,eAAe,CAAC,QAAD,EAAY,EAAD,IAAO;AACvD;AACA;AACA,QAAM,QAAQ,GAAG,EAAE,GAAG,CAAC,SAAvB,CAHuD,CAKvD;AACA;;AACA,QAAM,QAAQ,GAAG,EAAE,GAAG,SAAtB;AAEA,QAAM,IAAI,GAAG,IAAI,CAAC,GAAL,CAAS,EAAT,CAAb;AACA,MAAI,MAAJ;;AAEA,MAAI,QAAJ,EAAc;AACZ,IAAA,MAAM,GAAG,IAAT;AACD,GAFD,MAEO,IAAI,QAAJ,EAAc;AACnB,IAAA,MAAM,GAAG,EAAT;AACD,GAFM,MAEA;AACL,IAAA,MAAM,GAAG,IAAI,CAAC,GAAL,CAAS,MAAM,IAAf,CAAT;AACD;;AACD,SAAO,MAAP;AACD,CApBsC,CAAhC;AAsBP,OAAO,MAAM,cAAc,GAAiB;AAC1C,EAAA,UAAU,EAAE,QAD8B;AAE1C,EAAA,WAAW,EAAE,KAF6B;AAG1C,EAAA,UAAU,EAAE;AAH8B,CAArC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Softplus } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n    // Value above which exp(x) may overflow, but softplus(x) == x\n    // is within machine epsilon.\n    const tooLarge = xi > -threshold;\n    // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n    // is within machine epsilon.\n    const tooSmall = xi < threshold;\n    const expX = Math.exp(xi);\n    let result;\n    if (tooSmall) {\n        result = expX;\n    }\n    else if (tooLarge) {\n        result = xi;\n    }\n    else {\n        result = Math.log(1.0 + expX);\n    }\n    return result;\n});\nexport const softplusConfig = {\n    kernelName: Softplus,\n    backendName: 'cpu',\n    kernelFunc: softplus,\n};\n//# sourceMappingURL=Softplus.js.map"]},"metadata":{},"sourceType":"module"}