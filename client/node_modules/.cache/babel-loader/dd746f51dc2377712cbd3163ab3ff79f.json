{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\nimport * as util from '../util';\nimport { decodeWeights } from './io_utils';\nimport { monitorPromisesProgress } from './progress';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\n\nexport async function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {\n  if (loadOptions == null) {\n    loadOptions = {};\n  }\n\n  const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch : loadOptions.fetchFunc; // Create the requests for all of the weights in parallel.\n\n  const requests = fetchURLs.map(fetchURL => fetchFunc(fetchURL, loadOptions.requestInit, {\n    isBinary: true\n  }));\n  const fetchStartFraction = 0;\n  const fetchEndFraction = 0.5;\n  const responses = loadOptions.onProgress == null ? await Promise.all(requests) : await monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);\n  const bufferPromises = responses.map(response => response.arrayBuffer());\n  const bufferStartFraction = 0.5;\n  const bufferEndFraction = 1;\n  const buffers = loadOptions.onProgress == null ? await Promise.all(bufferPromises) : await monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);\n  return buffers;\n}\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\n\nexport async function loadWeights(manifest, filePathPrefix = '', weightNames, requestInit) {\n  // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n  // single weight from a group, the whole group will be fetched. At a future\n  // date, we should support fetching only the individual shards within a\n  // group that are needed to reconstruct the requested weight.\n  // TODO(cais): Use `decodeWeights` for implementation.\n  const fetchWeights = fetchUrls => loadWeightsAsArrayBuffer(fetchUrls, {\n    requestInit\n  });\n\n  const loadWeights = weightsLoaderFactory(fetchWeights);\n  return loadWeights(manifest, filePathPrefix, weightNames);\n}\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\n\nexport function weightsLoaderFactory(fetchWeightsFunction) {\n  return async (manifest, filePathPrefix = '', weightNames) => {\n    // Collect all the groups, weights, and their relative offsets to be\n    // fetched.\n    const groupIndicesToFetchMap = manifest.map(() => false);\n    const groupWeightsToFetch = {};\n    const weightsFound = weightNames != null ? weightNames.map(() => false) : [];\n    const allManifestWeightNames = [];\n    manifest.forEach((manifestGroupConfig, groupIndex) => {\n      let groupOffset = 0;\n      manifestGroupConfig.weights.forEach(weightsEntry => {\n        const rawDtype = 'quantization' in weightsEntry ? weightsEntry.quantization.dtype : weightsEntry.dtype;\n        const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] * util.sizeFromShape(weightsEntry.shape);\n\n        const enqueueWeightsForFetchingFn = () => {\n          groupIndicesToFetchMap[groupIndex] = true;\n\n          if (groupWeightsToFetch[groupIndex] == null) {\n            groupWeightsToFetch[groupIndex] = [];\n          }\n\n          groupWeightsToFetch[groupIndex].push({\n            manifestEntry: weightsEntry,\n            groupOffset,\n            sizeBytes: weightsBytes\n          });\n        };\n\n        if (weightNames != null) {\n          weightNames.forEach((weightName, weightIndex) => {\n            if (weightName === weightsEntry.name) {\n              enqueueWeightsForFetchingFn();\n              weightsFound[weightIndex] = true;\n            }\n          });\n        } else {\n          enqueueWeightsForFetchingFn();\n        }\n\n        allManifestWeightNames.push(weightsEntry.name);\n        groupOffset += weightsBytes;\n      });\n    });\n\n    if (!weightsFound.every(found => found)) {\n      const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n      throw new Error(`Could not find weights in manifest with names: ` + `${weightsNotFound.join(', ')}. \\n` + `Manifest JSON has weights with names: ` + `${allManifestWeightNames.join(', ')}.`);\n    } // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n    // IDs.\n\n\n    const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n      if (shouldFetch) {\n        accumulator.push(i);\n      }\n\n      return accumulator;\n    }, []);\n    const fetchUrls = [];\n    groupIndicesToFetch.forEach(i => {\n      manifest[i].paths.forEach(filepath => {\n        const fetchUrl = filePathPrefix + (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n        fetchUrls.push(fetchUrl);\n      });\n    });\n    const buffers = await fetchWeightsFunction(fetchUrls);\n    const weightsTensorMap = {};\n    let bufferIndexOffset = 0;\n    groupIndicesToFetch.forEach(i => {\n      const numBuffers = manifest[i].paths.length;\n      let groupBytes = 0;\n\n      for (let i = 0; i < numBuffers; i++) {\n        groupBytes += buffers[bufferIndexOffset + i].byteLength;\n      } // Create a buffer for the whole group.\n\n\n      const groupBuffer = new ArrayBuffer(groupBytes);\n      const groupByteBuffer = new Uint8Array(groupBuffer);\n      let groupBufferOffset = 0;\n\n      for (let i = 0; i < numBuffers; i++) {\n        const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);\n        groupByteBuffer.set(buffer, groupBufferOffset);\n        groupBufferOffset += buffer.byteLength;\n      }\n\n      const weightsEntries = groupWeightsToFetch[i];\n      weightsEntries.forEach(weightsEntry => {\n        const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n        const nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n\n        for (const name in nameToTensorMap) {\n          weightsTensorMap[name] = nameToTensorMap[name];\n        }\n      });\n      bufferIndexOffset += numBuffers;\n    });\n    return weightsTensorMap;\n  };\n}","map":{"version":3,"sources":["../../src/io/weights_loader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\nimport * as util from '../util';\nimport { decodeWeights } from './io_utils';\nimport { monitorPromisesProgress } from './progress';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\nexport async function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {\n    if (loadOptions == null) {\n        loadOptions = {};\n    }\n    const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch :\n        loadOptions.fetchFunc;\n    // Create the requests for all of the weights in parallel.\n    const requests = fetchURLs.map(fetchURL => fetchFunc(fetchURL, loadOptions.requestInit, { isBinary: true }));\n    const fetchStartFraction = 0;\n    const fetchEndFraction = 0.5;\n    const responses = loadOptions.onProgress == null ?\n        await Promise.all(requests) :\n        await monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);\n    const bufferPromises = responses.map(response => response.arrayBuffer());\n    const bufferStartFraction = 0.5;\n    const bufferEndFraction = 1;\n    const buffers = loadOptions.onProgress == null ?\n        await Promise.all(bufferPromises) :\n        await monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);\n    return buffers;\n}\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\nexport async function loadWeights(manifest, filePathPrefix = '', weightNames, requestInit) {\n    // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n    // single weight from a group, the whole group will be fetched. At a future\n    // date, we should support fetching only the individual shards within a\n    // group that are needed to reconstruct the requested weight.\n    // TODO(cais): Use `decodeWeights` for implementation.\n    const fetchWeights = (fetchUrls) => loadWeightsAsArrayBuffer(fetchUrls, { requestInit });\n    const loadWeights = weightsLoaderFactory(fetchWeights);\n    return loadWeights(manifest, filePathPrefix, weightNames);\n}\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\nexport function weightsLoaderFactory(fetchWeightsFunction) {\n    return async (manifest, filePathPrefix = '', weightNames) => {\n        // Collect all the groups, weights, and their relative offsets to be\n        // fetched.\n        const groupIndicesToFetchMap = manifest.map(() => false);\n        const groupWeightsToFetch = {};\n        const weightsFound = weightNames != null ? weightNames.map(() => false) : [];\n        const allManifestWeightNames = [];\n        manifest.forEach((manifestGroupConfig, groupIndex) => {\n            let groupOffset = 0;\n            manifestGroupConfig.weights.forEach(weightsEntry => {\n                const rawDtype = ('quantization' in weightsEntry) ?\n                    weightsEntry.quantization.dtype :\n                    weightsEntry.dtype;\n                const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *\n                    util.sizeFromShape(weightsEntry.shape);\n                const enqueueWeightsForFetchingFn = () => {\n                    groupIndicesToFetchMap[groupIndex] = true;\n                    if (groupWeightsToFetch[groupIndex] == null) {\n                        groupWeightsToFetch[groupIndex] = [];\n                    }\n                    groupWeightsToFetch[groupIndex].push({\n                        manifestEntry: weightsEntry,\n                        groupOffset,\n                        sizeBytes: weightsBytes\n                    });\n                };\n                if (weightNames != null) {\n                    weightNames.forEach((weightName, weightIndex) => {\n                        if (weightName === weightsEntry.name) {\n                            enqueueWeightsForFetchingFn();\n                            weightsFound[weightIndex] = true;\n                        }\n                    });\n                }\n                else {\n                    enqueueWeightsForFetchingFn();\n                }\n                allManifestWeightNames.push(weightsEntry.name);\n                groupOffset += weightsBytes;\n            });\n        });\n        if (!weightsFound.every(found => found)) {\n            const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n            throw new Error(`Could not find weights in manifest with names: ` +\n                `${weightsNotFound.join(', ')}. \\n` +\n                `Manifest JSON has weights with names: ` +\n                `${allManifestWeightNames.join(', ')}.`);\n        }\n        // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n        // IDs.\n        const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n            if (shouldFetch) {\n                accumulator.push(i);\n            }\n            return accumulator;\n        }, []);\n        const fetchUrls = [];\n        groupIndicesToFetch.forEach(i => {\n            manifest[i].paths.forEach(filepath => {\n                const fetchUrl = filePathPrefix +\n                    (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n                fetchUrls.push(fetchUrl);\n            });\n        });\n        const buffers = await fetchWeightsFunction(fetchUrls);\n        const weightsTensorMap = {};\n        let bufferIndexOffset = 0;\n        groupIndicesToFetch.forEach(i => {\n            const numBuffers = manifest[i].paths.length;\n            let groupBytes = 0;\n            for (let i = 0; i < numBuffers; i++) {\n                groupBytes += buffers[bufferIndexOffset + i].byteLength;\n            }\n            // Create a buffer for the whole group.\n            const groupBuffer = new ArrayBuffer(groupBytes);\n            const groupByteBuffer = new Uint8Array(groupBuffer);\n            let groupBufferOffset = 0;\n            for (let i = 0; i < numBuffers; i++) {\n                const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);\n                groupByteBuffer.set(buffer, groupBufferOffset);\n                groupBufferOffset += buffer.byteLength;\n            }\n            const weightsEntries = groupWeightsToFetch[i];\n            weightsEntries.forEach(weightsEntry => {\n                const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n                const nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n                for (const name in nameToTensorMap) {\n                    weightsTensorMap[name] = nameToTensorMap[name];\n                }\n            });\n            bufferIndexOffset += numBuffers;\n        });\n        return weightsTensorMap;\n    };\n}\n//# sourceMappingURL=weights_loader.js.map"]},"metadata":{},"sourceType":"module"}