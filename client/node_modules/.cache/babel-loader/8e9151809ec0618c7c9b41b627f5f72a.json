{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ExpandDims, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nexport function expandDims(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    input\n  } = inputs;\n  const {\n    dim\n  } = attrs;\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n\n  newShape.splice($dim, 0, 1);\n  return reshape({\n    inputs: {\n      x: input\n    },\n    backend,\n    attrs: {\n      shape: newShape\n    }\n  });\n}\nexport const expandDimsConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims\n};","map":{"version":3,"sources":["../../src/kernels/ExpandDims.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,UAAR,EAA6F,IAA7F,QAAwG,uBAAxG;AAGA,SAAQ,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAU,UAAV,CAAqB,IAArB,EAIL;AACC,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA,OAAT;AAAkB,IAAA;AAAlB,MAA2B,IAAjC;AACA,QAAM;AAAC,IAAA;AAAD,MAAU,MAAhB;AACA,QAAM;AAAC,IAAA;AAAD,MAAQ,KAAd;AAEA,QAAM,SAAS,GAAG,KAAK,CAAC,KAAN,CAAY,MAA9B;AACA,QAAM,QAAQ,GAAG,KAAK,CAAC,KAAN,CAAY,KAAZ,EAAjB;AACA,MAAI,IAAI,GAAG,GAAX;;AACA,MAAI,GAAG,GAAG,CAAV,EAAa;AACX;AACA,IAAA,IAAI,CAAC,MAAL,CACI,EAAE,SAAS,GAAG,CAAd,KAAoB,GADxB,EAEI,MAAM,iCAAiC,EAAG,SAAS,GAAG,CAAf,CAAiB,KACpD,SAAS,GAHjB;AAIA,IAAA,IAAI,GAAG,SAAS,GAAG,GAAZ,GAAkB,CAAzB;AACD;;AACD,EAAA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,EAAsB,CAAtB,EAAyB,CAAzB;AAEA,SAAO,OAAO,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAqB,IAAA,OAArB;AAA8B,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE;AAAR;AAArC,GAAD,CAAd;AACD;AAED,OAAO,MAAM,gBAAgB,GAAiB;AAC5C,EAAA,UAAU,EAAE,UADgC;AAE5C,EAAA,WAAW,EAAE,KAF+B;AAG5C,EAAA,UAAU,EAAE;AAHgC,CAAvC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ExpandDims, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nexport function expandDims(args) {\n    const { inputs, backend, attrs } = args;\n    const { input } = inputs;\n    const { dim } = attrs;\n    const inputRank = input.shape.length;\n    const newShape = input.shape.slice();\n    let $dim = dim;\n    if (dim < 0) {\n        // Negative value is counted from the tail of rank.\n        util.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);\n        $dim = inputRank + dim + 1;\n    }\n    newShape.splice($dim, 0, 1);\n    return reshape({ inputs: { x: input }, backend, attrs: { shape: newShape } });\n}\nexport const expandDimsConfig = {\n    kernelName: ExpandDims,\n    backendName: 'cpu',\n    kernelFunc: expandDims\n};\n//# sourceMappingURL=ExpandDims.js.map"]},"metadata":{},"sourceType":"module"}