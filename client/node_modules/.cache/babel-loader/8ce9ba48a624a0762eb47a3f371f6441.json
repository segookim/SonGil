{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, LeakyRelu, util } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nexport var LEAKYRELU = \"return (a < 0.) ? b * a : a;\";\nexport var LEAKYRELU_PACKED = \"\\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\\n\";\nexport function leakyRelu(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var alpha = attrs.alpha;\n  var $alpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(alpha, 'float32'));\n  var program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) : new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  var result = backend.runWebGLProgram(program, [x, $alpha], x.dtype);\n  backend.disposeIntermediateTensorInfo($alpha);\n  return result;\n}\nexport var leakyReluConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu\n};","map":{"version":3,"sources":["../../src/kernels/LeakyRelu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,GAAR,EAAuC,SAAvC,EAA+F,IAA/F,QAA0G,uBAA1G;AAEA,SAAQ,eAAR,QAA8B,iBAA9B;AACA,SAAQ,qBAAR,QAAoC,wBAApC;AAEA,OAAO,IAAM,SAAS,iCAAf;AACP,OAAO,IAAM,gBAAgB,qIAAtB;AAKP,OAAM,SAAU,SAAV,CAAoB,IAApB,EAIL;AAAA,MACQ,MADR,GACkC,IADlC,CACQ,MADR;AAAA,MACgB,OADhB,GACkC,IADlC,CACgB,OADhB;AAAA,MACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,MAEQ,CAFR,GAEa,MAFb,CAEQ,CAFR;AAAA,MAGQ,KAHR,GAGiB,KAHjB,CAGQ,KAHR;AAKC,MAAM,MAAM,GAAG,OAAO,CAAC,cAAR,CACX,EADW,EACP,SADO,EAEX,IAAI,CAAC,iBAAL,CAAuB,KAAvB,EAAiD,SAAjD,CAFW,CAAf;AAIA,MAAM,OAAO,GAAG,GAAG,GAAG,OAAN,CAAc,8BAAd,IACZ,IAAI,qBAAJ,CAA0B,gBAA1B,EAA4C,CAAC,CAAC,KAA9C,EAAqD,MAAM,CAAC,KAA5D,CADY,GAEZ,IAAI,eAAJ,CAAoB,SAApB,EAA+B,CAAC,CAAC,KAAjC,EAAwC,MAAM,CAAC,KAA/C,CAFJ;AAGA,MAAM,MAAM,GAAG,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,CAAD,EAAI,MAAJ,CAAjC,EAA8C,CAAC,CAAC,KAAhD,CAAf;AAEA,EAAA,OAAO,CAAC,6BAAR,CAAsC,MAAtC;AAEA,SAAO,MAAP;AACD;AAED,OAAO,IAAM,eAAe,GAAiB;AAC3C,EAAA,UAAU,EAAE,SAD+B;AAE3C,EAAA,WAAW,EAAE,OAF8B;AAG3C,EAAA,UAAU,EAAE;AAH+B,CAAtC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, LeakyRelu, util } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\nexport function leakyRelu(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { alpha } = attrs;\n    const $alpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(alpha, 'float32'));\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n        new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n    const result = backend.runWebGLProgram(program, [x, $alpha], x.dtype);\n    backend.disposeIntermediateTensorInfo($alpha);\n    return result;\n}\nexport const leakyReluConfig = {\n    kernelName: LeakyRelu,\n    backendName: 'webgl',\n    kernelFunc: leakyRelu\n};\n//# sourceMappingURL=LeakyRelu.js.map"]},"metadata":{},"sourceType":"module"}