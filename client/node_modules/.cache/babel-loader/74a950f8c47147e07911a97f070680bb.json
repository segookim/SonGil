{"ast":null,"code":"import _classCallCheck from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { eye, linalg, mul, ones, randomUniform, scalar, serialization, tidy, truncatedNormal, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { checkDataFormat } from './common';\nimport { NotImplementedError, ValueError } from './errors';\nimport { VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES } from './keras_format/initializer_config';\nimport { checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nimport { arrayProd } from './utils/math_utils';\nexport function checkFanMode(value) {\n  checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\nexport function checkDistribution(value) {\n  checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\n\nexport var Initializer = /*#__PURE__*/function (_serialization$Serial) {\n  _inherits(Initializer, _serialization$Serial);\n\n  var _super = _createSuper(Initializer);\n\n  function Initializer() {\n    _classCallCheck(this, Initializer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Initializer, [{\n    key: \"fromConfigUsesCustomObjects\",\n    value: function fromConfigUsesCustomObjects() {\n      return false;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {};\n    }\n  }]);\n\n  return Initializer;\n}(serialization.Serializable);\nexport var Zeros = /*#__PURE__*/function (_Initializer) {\n  _inherits(Zeros, _Initializer);\n\n  var _super2 = _createSuper(Zeros);\n\n  function Zeros() {\n    _classCallCheck(this, Zeros);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(Zeros, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      return zeros(shape, dtype);\n    }\n  }]);\n\n  return Zeros;\n}(Initializer);\n/** @nocollapse */\n\nZeros.className = 'Zeros';\nserialization.registerClass(Zeros);\nexport var Ones = /*#__PURE__*/function (_Initializer2) {\n  _inherits(Ones, _Initializer2);\n\n  var _super3 = _createSuper(Ones);\n\n  function Ones() {\n    _classCallCheck(this, Ones);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(Ones, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      return ones(shape, dtype);\n    }\n  }]);\n\n  return Ones;\n}(Initializer);\n/** @nocollapse */\n\nOnes.className = 'Ones';\nserialization.registerClass(Ones);\nexport var Constant = /*#__PURE__*/function (_Initializer3) {\n  _inherits(Constant, _Initializer3);\n\n  var _super4 = _createSuper(Constant);\n\n  function Constant(args) {\n    var _this;\n\n    _classCallCheck(this, Constant);\n\n    _this = _super4.call(this);\n\n    if (typeof args !== 'object') {\n      throw new ValueError(\"Expected argument of type ConstantConfig but got \".concat(args));\n    }\n\n    if (args.value === undefined) {\n      throw new ValueError(\"config must have value set but got \".concat(args));\n    }\n\n    _this.value = args.value;\n    return _this;\n  }\n\n  _createClass(Constant, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      var _this2 = this;\n\n      return tidy(function () {\n        return mul(scalar(_this2.value), ones(shape, dtype));\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        value: this.value\n      };\n    }\n  }]);\n\n  return Constant;\n}(Initializer);\n/** @nocollapse */\n\nConstant.className = 'Constant';\nserialization.registerClass(Constant);\nexport var RandomUniform = /*#__PURE__*/function (_Initializer4) {\n  _inherits(RandomUniform, _Initializer4);\n\n  var _super5 = _createSuper(RandomUniform);\n\n  function RandomUniform(args) {\n    var _this3;\n\n    _classCallCheck(this, RandomUniform);\n\n    _this3 = _super5.call(this);\n    _this3.DEFAULT_MINVAL = -0.05;\n    _this3.DEFAULT_MAXVAL = 0.05;\n    _this3.minval = args.minval || _this3.DEFAULT_MINVAL;\n    _this3.maxval = args.maxval || _this3.DEFAULT_MAXVAL;\n    _this3.seed = args.seed;\n    return _this3;\n  }\n\n  _createClass(RandomUniform, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      return randomUniform(shape, this.minval, this.maxval, dtype);\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        minval: this.minval,\n        maxval: this.maxval,\n        seed: this.seed\n      };\n    }\n  }]);\n\n  return RandomUniform;\n}(Initializer);\n/** @nocollapse */\n\nRandomUniform.className = 'RandomUniform';\nserialization.registerClass(RandomUniform);\nexport var RandomNormal = /*#__PURE__*/function (_Initializer5) {\n  _inherits(RandomNormal, _Initializer5);\n\n  var _super6 = _createSuper(RandomNormal);\n\n  function RandomNormal(args) {\n    var _this4;\n\n    _classCallCheck(this, RandomNormal);\n\n    _this4 = _super6.call(this);\n    _this4.DEFAULT_MEAN = 0.;\n    _this4.DEFAULT_STDDEV = 0.05;\n    _this4.mean = args.mean || _this4.DEFAULT_MEAN;\n    _this4.stddev = args.stddev || _this4.DEFAULT_STDDEV;\n    _this4.seed = args.seed;\n    return _this4;\n  }\n\n  _createClass(RandomNormal, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      dtype = dtype || 'float32';\n\n      if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(\"randomNormal does not support dType \".concat(dtype, \".\"));\n      }\n\n      return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        mean: this.mean,\n        stddev: this.stddev,\n        seed: this.seed\n      };\n    }\n  }]);\n\n  return RandomNormal;\n}(Initializer);\n/** @nocollapse */\n\nRandomNormal.className = 'RandomNormal';\nserialization.registerClass(RandomNormal);\nexport var TruncatedNormal = /*#__PURE__*/function (_Initializer6) {\n  _inherits(TruncatedNormal, _Initializer6);\n\n  var _super7 = _createSuper(TruncatedNormal);\n\n  function TruncatedNormal(args) {\n    var _this5;\n\n    _classCallCheck(this, TruncatedNormal);\n\n    _this5 = _super7.call(this);\n    _this5.DEFAULT_MEAN = 0.;\n    _this5.DEFAULT_STDDEV = 0.05;\n    _this5.mean = args.mean || _this5.DEFAULT_MEAN;\n    _this5.stddev = args.stddev || _this5.DEFAULT_STDDEV;\n    _this5.seed = args.seed;\n    return _this5;\n  }\n\n  _createClass(TruncatedNormal, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      dtype = dtype || 'float32';\n\n      if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(\"truncatedNormal does not support dType \".concat(dtype, \".\"));\n      }\n\n      return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        mean: this.mean,\n        stddev: this.stddev,\n        seed: this.seed\n      };\n    }\n  }]);\n\n  return TruncatedNormal;\n}(Initializer);\n/** @nocollapse */\n\nTruncatedNormal.className = 'TruncatedNormal';\nserialization.registerClass(TruncatedNormal);\nexport var Identity = /*#__PURE__*/function (_Initializer7) {\n  _inherits(Identity, _Initializer7);\n\n  var _super8 = _createSuper(Identity);\n\n  function Identity(args) {\n    var _this6;\n\n    _classCallCheck(this, Identity);\n\n    _this6 = _super8.call(this);\n    _this6.gain = args.gain != null ? args.gain : 1.0;\n    return _this6;\n  }\n\n  _createClass(Identity, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      var _this7 = this;\n\n      return tidy(function () {\n        if (shape.length !== 2 || shape[0] !== shape[1]) {\n          throw new ValueError('Identity matrix initializer can only be used for' + ' 2D square matrices.');\n        } else {\n          return mul(_this7.gain, eye(shape[0]));\n        }\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        gain: this.gain\n      };\n    }\n  }]);\n\n  return Identity;\n}(Initializer);\n/** @nocollapse */\n\nIdentity.className = 'Identity';\nserialization.registerClass(Identity);\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\n\nfunction computeFans(shape) {\n  var dataFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'channelsLast';\n  var fanIn;\n  var fanOut;\n  checkDataFormat(dataFormat);\n\n  if (shape.length === 2) {\n    fanIn = shape[0];\n    fanOut = shape[1];\n  } else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n    if (dataFormat === 'channelsFirst') {\n      var receptiveFieldSize = arrayProd(shape, 2);\n      fanIn = shape[1] * receptiveFieldSize;\n      fanOut = shape[0] * receptiveFieldSize;\n    } else if (dataFormat === 'channelsLast') {\n      var _receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n\n      fanIn = shape[shape.length - 2] * _receptiveFieldSize;\n      fanOut = shape[shape.length - 1] * _receptiveFieldSize;\n    }\n  } else {\n    var shapeProd = arrayProd(shape);\n    fanIn = Math.sqrt(shapeProd);\n    fanOut = Math.sqrt(shapeProd);\n  }\n\n  return [fanIn, fanOut];\n}\n\nexport var VarianceScaling = /*#__PURE__*/function (_Initializer8) {\n  _inherits(VarianceScaling, _Initializer8);\n\n  var _super9 = _createSuper(VarianceScaling);\n\n  /**\n   * Constructor of VarianceScaling.\n   * @throws ValueError for invalid value in scale.\n   */\n  function VarianceScaling(args) {\n    var _this8;\n\n    _classCallCheck(this, VarianceScaling);\n\n    _this8 = _super9.call(this);\n\n    if (args.scale < 0.0) {\n      throw new ValueError(\"scale must be a positive float. Got: \".concat(args.scale));\n    }\n\n    _this8.scale = args.scale == null ? 1.0 : args.scale;\n    _this8.mode = args.mode == null ? 'fanIn' : args.mode;\n    checkFanMode(_this8.mode);\n    _this8.distribution = args.distribution == null ? 'normal' : args.distribution;\n    checkDistribution(_this8.distribution);\n    _this8.seed = args.seed;\n    return _this8;\n  }\n\n  _createClass(VarianceScaling, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      var fans = computeFans(shape);\n      var fanIn = fans[0];\n      var fanOut = fans[1];\n      var scale = this.scale;\n\n      if (this.mode === 'fanIn') {\n        scale /= Math.max(1, fanIn);\n      } else if (this.mode === 'fanOut') {\n        scale /= Math.max(1, fanOut);\n      } else {\n        scale /= Math.max(1, (fanIn + fanOut) / 2);\n      }\n\n      if (this.distribution === 'normal') {\n        var stddev = Math.sqrt(scale);\n        dtype = dtype || 'float32';\n\n        if (dtype !== 'float32' && dtype !== 'int32') {\n          throw new NotImplementedError(\"\".concat(this.getClassName(), \" does not support dType \").concat(dtype, \".\"));\n        }\n\n        return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n      } else {\n        var limit = Math.sqrt(3 * scale);\n        return randomUniform(shape, -limit, limit, dtype);\n      }\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        scale: this.scale,\n        mode: this.mode,\n        distribution: this.distribution,\n        seed: this.seed\n      };\n    }\n  }]);\n\n  return VarianceScaling;\n}(Initializer);\n/** @nocollapse */\n\nVarianceScaling.className = 'VarianceScaling';\nserialization.registerClass(VarianceScaling);\nexport var GlorotUniform = /*#__PURE__*/function (_VarianceScaling) {\n  _inherits(GlorotUniform, _VarianceScaling);\n\n  var _super10 = _createSuper(GlorotUniform);\n\n  /**\n   * Constructor of GlorotUniform\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  function GlorotUniform(args) {\n    _classCallCheck(this, GlorotUniform);\n\n    return _super10.call(this, {\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  _createClass(GlorotUniform, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, GlorotUniform is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n\n  return GlorotUniform;\n}(VarianceScaling);\n/** @nocollapse */\n\nGlorotUniform.className = 'GlorotUniform';\nserialization.registerClass(GlorotUniform);\nexport var GlorotNormal = /*#__PURE__*/function (_VarianceScaling2) {\n  _inherits(GlorotNormal, _VarianceScaling2);\n\n  var _super11 = _createSuper(GlorotNormal);\n\n  /**\n   * Constructor of GlorotNormal.\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  function GlorotNormal(args) {\n    _classCallCheck(this, GlorotNormal);\n\n    return _super11.call(this, {\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  _createClass(GlorotNormal, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, GlorotNormal is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n\n  return GlorotNormal;\n}(VarianceScaling);\n/** @nocollapse */\n\nGlorotNormal.className = 'GlorotNormal';\nserialization.registerClass(GlorotNormal);\nexport var HeNormal = /*#__PURE__*/function (_VarianceScaling3) {\n  _inherits(HeNormal, _VarianceScaling3);\n\n  var _super12 = _createSuper(HeNormal);\n\n  function HeNormal(args) {\n    _classCallCheck(this, HeNormal);\n\n    return _super12.call(this, {\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  _createClass(HeNormal, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, HeNormal is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n\n  return HeNormal;\n}(VarianceScaling);\n/** @nocollapse */\n\nHeNormal.className = 'HeNormal';\nserialization.registerClass(HeNormal);\nexport var HeUniform = /*#__PURE__*/function (_VarianceScaling4) {\n  _inherits(HeUniform, _VarianceScaling4);\n\n  var _super13 = _createSuper(HeUniform);\n\n  function HeUniform(args) {\n    _classCallCheck(this, HeUniform);\n\n    return _super13.call(this, {\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  _createClass(HeUniform, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, HeUniform is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n\n  return HeUniform;\n}(VarianceScaling);\n/** @nocollapse */\n\nHeUniform.className = 'HeUniform';\nserialization.registerClass(HeUniform);\nexport var LeCunNormal = /*#__PURE__*/function (_VarianceScaling5) {\n  _inherits(LeCunNormal, _VarianceScaling5);\n\n  var _super14 = _createSuper(LeCunNormal);\n\n  function LeCunNormal(args) {\n    _classCallCheck(this, LeCunNormal);\n\n    return _super14.call(this, {\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  _createClass(LeCunNormal, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, LeCunNormal is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n\n  return LeCunNormal;\n}(VarianceScaling);\n/** @nocollapse */\n\nLeCunNormal.className = 'LeCunNormal';\nserialization.registerClass(LeCunNormal);\nexport var LeCunUniform = /*#__PURE__*/function (_VarianceScaling6) {\n  _inherits(LeCunUniform, _VarianceScaling6);\n\n  var _super15 = _createSuper(LeCunUniform);\n\n  function LeCunUniform(args) {\n    _classCallCheck(this, LeCunUniform);\n\n    return _super15.call(this, {\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  _createClass(LeCunUniform, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, LeCunUniform is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n\n  return LeCunUniform;\n}(VarianceScaling);\n/** @nocollapse */\n\nLeCunUniform.className = 'LeCunNormal';\nserialization.registerClass(LeCunUniform);\nexport var Orthogonal = /*#__PURE__*/function (_Initializer9) {\n  _inherits(Orthogonal, _Initializer9);\n\n  var _super16 = _createSuper(Orthogonal);\n\n  function Orthogonal(args) {\n    var _this9;\n\n    _classCallCheck(this, Orthogonal);\n\n    _this9 = _super16.call(this);\n    _this9.DEFAULT_GAIN = 1;\n    _this9.gain = args.gain == null ? _this9.DEFAULT_GAIN : args.gain;\n    _this9.seed = args.seed;\n\n    if (_this9.seed != null) {\n      throw new NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');\n    }\n\n    return _this9;\n  }\n\n  _createClass(Orthogonal, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      var _this10 = this;\n\n      return tidy(function () {\n        if (shape.length < 2) {\n          throw new NotImplementedError('Shape must be at least 2D.');\n        }\n\n        if (shape[0] * shape[1] > 2000) {\n          console.warn(\"Orthogonal initializer is being called on a matrix with more \" + \"than 2000 (\".concat(shape[0] * shape[1], \") elements: \") + \"Slowness may result.\");\n        } // TODO(cais): Add seed support.\n\n\n        var normalizedShape = shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n        var a = K.randomNormal(normalizedShape, 0, 1, 'float32');\n        var q = linalg.gramSchmidt(a);\n\n        if (shape[0] > shape[1]) {\n          q = q.transpose();\n        }\n\n        return mul(_this10.gain, q);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        gain: this.gain,\n        seed: this.seed\n      };\n    }\n  }]);\n\n  return Orthogonal;\n}(Initializer);\n/** @nocollapse */\n\nOrthogonal.className = 'Orthogonal';\nserialization.registerClass(Orthogonal); // Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\n\nexport var INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'constant': 'Constant',\n  'glorotNormal': 'GlorotNormal',\n  'glorotUniform': 'GlorotUniform',\n  'heNormal': 'HeNormal',\n  'heUniform': 'HeUniform',\n  'identity': 'Identity',\n  'leCunNormal': 'LeCunNormal',\n  'leCunUniform': 'LeCunUniform',\n  'ones': 'Ones',\n  'orthogonal': 'Orthogonal',\n  'randomNormal': 'RandomNormal',\n  'randomUniform': 'RandomUniform',\n  'truncatedNormal': 'TruncatedNormal',\n  'varianceScaling': 'VarianceScaling',\n  'zeros': 'Zeros'\n};\n\nfunction deserializeInitializer(config) {\n  var customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'initializer');\n}\n\nexport function serializeInitializer(initializer) {\n  return serializeKerasObject(initializer);\n}\nexport function getInitializer(identifier) {\n  if (typeof identifier === 'string') {\n    var className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    /* We have four 'helper' classes for common initializers that\n    all get serialized as 'VarianceScaling' and shouldn't go through\n    the deserializeInitializer pathway. */\n\n    if (className === 'GlorotNormal') {\n      return new GlorotNormal();\n    } else if (className === 'GlorotUniform') {\n      return new GlorotUniform();\n    } else if (className === 'HeNormal') {\n      return new HeNormal();\n    } else if (className === 'HeUniform') {\n      return new HeUniform();\n    } else if (className === 'LeCunNormal') {\n      return new LeCunNormal();\n    } else if (className === 'LeCunUniform') {\n      return new LeCunUniform();\n    } else {\n      var config = {};\n      config['className'] = className;\n      config['config'] = {};\n      return deserializeInitializer(config);\n    }\n  } else if (identifier instanceof Initializer) {\n    return identifier;\n  } else {\n    return deserializeInitializer(identifier);\n  }\n}","map":{"version":3,"sources":["../src/initializers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { eye, linalg, mul, ones, randomUniform, scalar, serialization, tidy, truncatedNormal, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { checkDataFormat } from './common';\nimport { NotImplementedError, ValueError } from './errors';\nimport { VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES } from './keras_format/initializer_config';\nimport { checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nimport { arrayProd } from './utils/math_utils';\nexport function checkFanMode(value) {\n    checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\nexport function checkDistribution(value) {\n    checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\nexport class Initializer extends serialization.Serializable {\n    fromConfigUsesCustomObjects() {\n        return false;\n    }\n    getConfig() {\n        return {};\n    }\n}\nexport class Zeros extends Initializer {\n    apply(shape, dtype) {\n        return zeros(shape, dtype);\n    }\n}\n/** @nocollapse */\nZeros.className = 'Zeros';\nserialization.registerClass(Zeros);\nexport class Ones extends Initializer {\n    apply(shape, dtype) {\n        return ones(shape, dtype);\n    }\n}\n/** @nocollapse */\nOnes.className = 'Ones';\nserialization.registerClass(Ones);\nexport class Constant extends Initializer {\n    constructor(args) {\n        super();\n        if (typeof args !== 'object') {\n            throw new ValueError(`Expected argument of type ConstantConfig but got ${args}`);\n        }\n        if (args.value === undefined) {\n            throw new ValueError(`config must have value set but got ${args}`);\n        }\n        this.value = args.value;\n    }\n    apply(shape, dtype) {\n        return tidy(() => mul(scalar(this.value), ones(shape, dtype)));\n    }\n    getConfig() {\n        return {\n            value: this.value,\n        };\n    }\n}\n/** @nocollapse */\nConstant.className = 'Constant';\nserialization.registerClass(Constant);\nexport class RandomUniform extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MINVAL = -0.05;\n        this.DEFAULT_MAXVAL = 0.05;\n        this.minval = args.minval || this.DEFAULT_MINVAL;\n        this.maxval = args.maxval || this.DEFAULT_MAXVAL;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        return randomUniform(shape, this.minval, this.maxval, dtype);\n    }\n    getConfig() {\n        return { minval: this.minval, maxval: this.maxval, seed: this.seed };\n    }\n}\n/** @nocollapse */\nRandomUniform.className = 'RandomUniform';\nserialization.registerClass(RandomUniform);\nexport class RandomNormal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MEAN = 0.;\n        this.DEFAULT_STDDEV = 0.05;\n        this.mean = args.mean || this.DEFAULT_MEAN;\n        this.stddev = args.stddev || this.DEFAULT_STDDEV;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        dtype = dtype || 'float32';\n        if (dtype !== 'float32' && dtype !== 'int32') {\n            throw new NotImplementedError(`randomNormal does not support dType ${dtype}.`);\n        }\n        return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n    getConfig() {\n        return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n    }\n}\n/** @nocollapse */\nRandomNormal.className = 'RandomNormal';\nserialization.registerClass(RandomNormal);\nexport class TruncatedNormal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MEAN = 0.;\n        this.DEFAULT_STDDEV = 0.05;\n        this.mean = args.mean || this.DEFAULT_MEAN;\n        this.stddev = args.stddev || this.DEFAULT_STDDEV;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        dtype = dtype || 'float32';\n        if (dtype !== 'float32' && dtype !== 'int32') {\n            throw new NotImplementedError(`truncatedNormal does not support dType ${dtype}.`);\n        }\n        return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n    getConfig() {\n        return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n    }\n}\n/** @nocollapse */\nTruncatedNormal.className = 'TruncatedNormal';\nserialization.registerClass(TruncatedNormal);\nexport class Identity extends Initializer {\n    constructor(args) {\n        super();\n        this.gain = args.gain != null ? args.gain : 1.0;\n    }\n    apply(shape, dtype) {\n        return tidy(() => {\n            if (shape.length !== 2 || shape[0] !== shape[1]) {\n                throw new ValueError('Identity matrix initializer can only be used for' +\n                    ' 2D square matrices.');\n            }\n            else {\n                return mul(this.gain, eye(shape[0]));\n            }\n        });\n    }\n    getConfig() {\n        return { gain: this.gain };\n    }\n}\n/** @nocollapse */\nIdentity.className = 'Identity';\nserialization.registerClass(Identity);\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\nfunction computeFans(shape, dataFormat = 'channelsLast') {\n    let fanIn;\n    let fanOut;\n    checkDataFormat(dataFormat);\n    if (shape.length === 2) {\n        fanIn = shape[0];\n        fanOut = shape[1];\n    }\n    else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n        if (dataFormat === 'channelsFirst') {\n            const receptiveFieldSize = arrayProd(shape, 2);\n            fanIn = shape[1] * receptiveFieldSize;\n            fanOut = shape[0] * receptiveFieldSize;\n        }\n        else if (dataFormat === 'channelsLast') {\n            const receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n            fanIn = shape[shape.length - 2] * receptiveFieldSize;\n            fanOut = shape[shape.length - 1] * receptiveFieldSize;\n        }\n    }\n    else {\n        const shapeProd = arrayProd(shape);\n        fanIn = Math.sqrt(shapeProd);\n        fanOut = Math.sqrt(shapeProd);\n    }\n    return [fanIn, fanOut];\n}\nexport class VarianceScaling extends Initializer {\n    /**\n     * Constructor of VarianceScaling.\n     * @throws ValueError for invalid value in scale.\n     */\n    constructor(args) {\n        super();\n        if (args.scale < 0.0) {\n            throw new ValueError(`scale must be a positive float. Got: ${args.scale}`);\n        }\n        this.scale = args.scale == null ? 1.0 : args.scale;\n        this.mode = args.mode == null ? 'fanIn' : args.mode;\n        checkFanMode(this.mode);\n        this.distribution =\n            args.distribution == null ? 'normal' : args.distribution;\n        checkDistribution(this.distribution);\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        const fans = computeFans(shape);\n        const fanIn = fans[0];\n        const fanOut = fans[1];\n        let scale = this.scale;\n        if (this.mode === 'fanIn') {\n            scale /= Math.max(1, fanIn);\n        }\n        else if (this.mode === 'fanOut') {\n            scale /= Math.max(1, fanOut);\n        }\n        else {\n            scale /= Math.max(1, (fanIn + fanOut) / 2);\n        }\n        if (this.distribution === 'normal') {\n            const stddev = Math.sqrt(scale);\n            dtype = dtype || 'float32';\n            if (dtype !== 'float32' && dtype !== 'int32') {\n                throw new NotImplementedError(`${this.getClassName()} does not support dType ${dtype}.`);\n            }\n            return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n        }\n        else {\n            const limit = Math.sqrt(3 * scale);\n            return randomUniform(shape, -limit, limit, dtype);\n        }\n    }\n    getConfig() {\n        return {\n            scale: this.scale,\n            mode: this.mode,\n            distribution: this.distribution,\n            seed: this.seed\n        };\n    }\n}\n/** @nocollapse */\nVarianceScaling.className = 'VarianceScaling';\nserialization.registerClass(VarianceScaling);\nexport class GlorotUniform extends VarianceScaling {\n    /**\n     * Constructor of GlorotUniform\n     * @param scale\n     * @param mode\n     * @param distribution\n     * @param seed\n     */\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanAvg',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, GlorotUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nGlorotUniform.className = 'GlorotUniform';\nserialization.registerClass(GlorotUniform);\nexport class GlorotNormal extends VarianceScaling {\n    /**\n     * Constructor of GlorotNormal.\n     * @param scale\n     * @param mode\n     * @param distribution\n     * @param seed\n     */\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanAvg',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, GlorotNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nGlorotNormal.className = 'GlorotNormal';\nserialization.registerClass(GlorotNormal);\nexport class HeNormal extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 2.0,\n            mode: 'fanIn',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, HeNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nHeNormal.className = 'HeNormal';\nserialization.registerClass(HeNormal);\nexport class HeUniform extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 2.0,\n            mode: 'fanIn',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, HeUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nHeUniform.className = 'HeUniform';\nserialization.registerClass(HeUniform);\nexport class LeCunNormal extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanIn',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, LeCunNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nLeCunNormal.className = 'LeCunNormal';\nserialization.registerClass(LeCunNormal);\nexport class LeCunUniform extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanIn',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, LeCunUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nLeCunUniform.className = 'LeCunNormal';\nserialization.registerClass(LeCunUniform);\nexport class Orthogonal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_GAIN = 1;\n        this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;\n        this.seed = args.seed;\n        if (this.seed != null) {\n            throw new NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');\n        }\n    }\n    apply(shape, dtype) {\n        return tidy(() => {\n            if (shape.length < 2) {\n                throw new NotImplementedError('Shape must be at least 2D.');\n            }\n            if (shape[0] * shape[1] > 2000) {\n                console.warn(`Orthogonal initializer is being called on a matrix with more ` +\n                    `than 2000 (${shape[0] * shape[1]}) elements: ` +\n                    `Slowness may result.`);\n            }\n            // TODO(cais): Add seed support.\n            const normalizedShape = shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n            const a = K.randomNormal(normalizedShape, 0, 1, 'float32');\n            let q = linalg.gramSchmidt(a);\n            if (shape[0] > shape[1]) {\n                q = q.transpose();\n            }\n            return mul(this.gain, q);\n        });\n    }\n    getConfig() {\n        return {\n            gain: this.gain,\n            seed: this.seed,\n        };\n    }\n}\n/** @nocollapse */\nOrthogonal.className = 'Orthogonal';\nserialization.registerClass(Orthogonal);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'constant': 'Constant',\n    'glorotNormal': 'GlorotNormal',\n    'glorotUniform': 'GlorotUniform',\n    'heNormal': 'HeNormal',\n    'heUniform': 'HeUniform',\n    'identity': 'Identity',\n    'leCunNormal': 'LeCunNormal',\n    'leCunUniform': 'LeCunUniform',\n    'ones': 'Ones',\n    'orthogonal': 'Orthogonal',\n    'randomNormal': 'RandomNormal',\n    'randomUniform': 'RandomUniform',\n    'truncatedNormal': 'TruncatedNormal',\n    'varianceScaling': 'VarianceScaling',\n    'zeros': 'Zeros'\n};\nfunction deserializeInitializer(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'initializer');\n}\nexport function serializeInitializer(initializer) {\n    return serializeKerasObject(initializer);\n}\nexport function getInitializer(identifier) {\n    if (typeof identifier === 'string') {\n        const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        /* We have four 'helper' classes for common initializers that\n        all get serialized as 'VarianceScaling' and shouldn't go through\n        the deserializeInitializer pathway. */\n        if (className === 'GlorotNormal') {\n            return new GlorotNormal();\n        }\n        else if (className === 'GlorotUniform') {\n            return new GlorotUniform();\n        }\n        else if (className === 'HeNormal') {\n            return new HeNormal();\n        }\n        else if (className === 'HeUniform') {\n            return new HeUniform();\n        }\n        else if (className === 'LeCunNormal') {\n            return new LeCunNormal();\n        }\n        else if (className === 'LeCunUniform') {\n            return new LeCunUniform();\n        }\n        else {\n            const config = {};\n            config['className'] = className;\n            config['config'] = {};\n            return deserializeInitializer(config);\n        }\n    }\n    else if (identifier instanceof Initializer) {\n        return identifier;\n    }\n    else {\n        return deserializeInitializer(identifier);\n    }\n}\n//# sourceMappingURL=initializers.js.map"]},"metadata":{},"sourceType":"module"}