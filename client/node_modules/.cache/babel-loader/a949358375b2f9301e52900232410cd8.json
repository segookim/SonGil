{"ast":null,"code":"import _toConsumableArray from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer } from './weights_loader';\nvar OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nvar JSON_TYPE = 'application/json';\nexport var HTTPRequest = /*#__PURE__*/function () {\n  function HTTPRequest(path, loadOptions) {\n    _classCallCheck(this, HTTPRequest);\n\n    this.DEFAULT_METHOD = 'POST';\n\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n\n    if (loadOptions.fetchFunc != null) {\n      assert(typeof loadOptions.fetchFunc === 'function', function () {\n        return 'Must pass a function that matches the signature of ' + '`fetch` (see ' + 'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)';\n      });\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n\n    assert(path != null && path.length > 0, function () {\n      return 'URL path for http must not be null, undefined or ' + 'empty.';\n    });\n\n    if (Array.isArray(path)) {\n      assert(path.length === 2, function () {\n        return 'URL paths for http must have a length of 2, ' + \"(actual length is \".concat(path.length, \").\");\n      });\n    }\n\n    this.path = path;\n\n    if (loadOptions.requestInit != null && loadOptions.requestInit.body != null) {\n      throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n    }\n\n    this.requestInit = loadOptions.requestInit || {};\n  }\n\n  _createClass(HTTPRequest, [{\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(modelArtifacts) {\n        var init, weightsManifest, modelTopologyAndWeightManifest, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' + 'in binary formats yet.');\n\n              case 2:\n                init = Object.assign({\n                  method: this.DEFAULT_METHOD\n                }, this.requestInit);\n                init.body = new FormData();\n                weightsManifest = [{\n                  paths: ['./model.weights.bin'],\n                  weights: modelArtifacts.weightSpecs\n                }];\n                modelTopologyAndWeightManifest = {\n                  modelTopology: modelArtifacts.modelTopology,\n                  format: modelArtifacts.format,\n                  generatedBy: modelArtifacts.generatedBy,\n                  convertedBy: modelArtifacts.convertedBy,\n                  weightsManifest: weightsManifest\n                };\n\n                if (modelArtifacts.signature != null) {\n                  modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n                }\n\n                if (modelArtifacts.userDefinedMetadata != null) {\n                  modelTopologyAndWeightManifest.userDefinedMetadata = modelArtifacts.userDefinedMetadata;\n                }\n\n                if (modelArtifacts.modelInitializer != null) {\n                  modelTopologyAndWeightManifest.modelInitializer = modelArtifacts.modelInitializer;\n                }\n\n                init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n                  type: JSON_TYPE\n                }), 'model.json');\n\n                if (modelArtifacts.weightData != null) {\n                  init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], {\n                    type: OCTET_STREAM_MIME_TYPE\n                  }), 'model.weights.bin');\n                }\n\n                _context.next = 13;\n                return this.fetch(this.path, init);\n\n              case 13:\n                response = _context.sent;\n\n                if (!response.ok) {\n                  _context.next = 18;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n                  responses: [response]\n                });\n\n              case 18:\n                throw new Error(\"BrowserHTTPRequest.save() failed due to HTTP response status \" + \"\".concat(response.status, \".\"));\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function save(_x) {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n    /**\n     * Load model artifacts via HTTP request(s).\n     *\n     * See the documentation to `tf.io.http` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model artifacts (if loading succeeds).\n     */\n\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var modelConfigRequest, modelConfig, message, modelTopology, weightsManifest, generatedBy, convertedBy, format, signature, userDefinedMetadata, weightSpecs, weightData, results, _results, artifacts, initializer;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.fetch(this.path, this.requestInit);\n\n              case 2:\n                modelConfigRequest = _context2.sent;\n\n                if (modelConfigRequest.ok) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Request to \".concat(this.path, \" failed with status code \") + \"\".concat(modelConfigRequest.status, \". Please verify this URL points to \") + \"the model JSON of the model to load.\");\n\n              case 5:\n                _context2.prev = 5;\n                _context2.next = 8;\n                return modelConfigRequest.json();\n\n              case 8:\n                modelConfig = _context2.sent;\n                _context2.next = 16;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](5);\n                message = \"Failed to parse model JSON of response from \".concat(this.path, \".\"); // TODO(nsthorat): Remove this after some time when we're comfortable that\n                // .pb files are mostly gone.\n\n                if (this.path.endsWith('.pb')) {\n                  message += ' Your path contains a .pb file extension. ' + 'Support for .pb models have been removed in TensorFlow.js 1.0 ' + 'in favor of .json models. You can re-convert your Python ' + 'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' + 'or you can convert your.pb models with the \\'pb2json\\'' + 'NPM script in the tensorflow/tfjs-converter repository.';\n                } else {\n                  message += ' Please make sure the server is serving valid ' + 'JSON for this request.';\n                }\n\n                throw new Error(message);\n\n              case 16:\n                modelTopology = modelConfig.modelTopology;\n                weightsManifest = modelConfig.weightsManifest;\n                generatedBy = modelConfig.generatedBy;\n                convertedBy = modelConfig.convertedBy;\n                format = modelConfig.format;\n                signature = modelConfig.signature;\n                userDefinedMetadata = modelConfig.userDefinedMetadata; // We do not allow both modelTopology and weightsManifest to be missing.\n\n                if (!(modelTopology == null && weightsManifest == null)) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                throw new Error(\"The JSON from HTTP path \".concat(this.path, \" contains neither model \") + \"topology or manifest for weights.\");\n\n              case 25:\n                if (!(weightsManifest != null)) {\n                  _context2.next = 32;\n                  break;\n                }\n\n                _context2.next = 28;\n                return this.loadWeights(weightsManifest);\n\n              case 28:\n                results = _context2.sent;\n                _results = _slicedToArray(results, 2);\n                weightSpecs = _results[0];\n                weightData = _results[1];\n\n              case 32:\n                artifacts = {\n                  modelTopology: modelTopology,\n                  weightSpecs: weightSpecs,\n                  weightData: weightData,\n                  generatedBy: generatedBy,\n                  convertedBy: convertedBy,\n                  format: format\n                };\n\n                if (signature != null) {\n                  artifacts.signature = signature;\n                }\n\n                if (userDefinedMetadata != null) {\n                  artifacts.userDefinedMetadata = userDefinedMetadata;\n                }\n\n                initializer = modelConfig.modelInitializer;\n\n                if (initializer) {\n                  artifacts.modelInitializer = initializer;\n                }\n\n                return _context2.abrupt(\"return\", artifacts);\n\n              case 38:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[5, 11]]);\n      }));\n\n      function load() {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"loadWeights\",\n    value: function () {\n      var _loadWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(weightsManifest) {\n        var weightPath, _parseUrl, _parseUrl2, prefix, suffix, pathPrefix, weightSpecs, _iterator, _step, entry, fetchURLs, urlPromises, _iterator2, _step2, weightsGroup, _iterator3, _step3, path, buffers;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n                _parseUrl = parseUrl(weightPath), _parseUrl2 = _slicedToArray(_parseUrl, 2), prefix = _parseUrl2[0], suffix = _parseUrl2[1];\n                pathPrefix = this.weightPathPrefix || prefix;\n                weightSpecs = [];\n                _iterator = _createForOfIteratorHelper(weightsManifest);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    entry = _step.value;\n                    weightSpecs.push.apply(weightSpecs, _toConsumableArray(entry.weights));\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                fetchURLs = [];\n                urlPromises = [];\n                _iterator2 = _createForOfIteratorHelper(weightsManifest);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    weightsGroup = _step2.value;\n                    _iterator3 = _createForOfIteratorHelper(weightsGroup.paths);\n\n                    try {\n                      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                        path = _step3.value;\n\n                        if (this.weightUrlConverter != null) {\n                          urlPromises.push(this.weightUrlConverter(path));\n                        } else {\n                          fetchURLs.push(pathPrefix + path + suffix);\n                        }\n                      }\n                    } catch (err) {\n                      _iterator3.e(err);\n                    } finally {\n                      _iterator3.f();\n                    }\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                if (!this.weightUrlConverter) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                _context3.t0 = fetchURLs.push;\n                _context3.t1 = fetchURLs;\n                _context3.t2 = _toConsumableArray;\n                _context3.next = 16;\n                return Promise.all(urlPromises);\n\n              case 16:\n                _context3.t3 = _context3.sent;\n                _context3.t4 = (0, _context3.t2)(_context3.t3);\n\n                _context3.t0.apply.call(_context3.t0, _context3.t1, _context3.t4);\n\n              case 19:\n                _context3.next = 21;\n                return loadWeightsAsArrayBuffer(fetchURLs, {\n                  requestInit: this.requestInit,\n                  fetchFunc: this.fetch,\n                  onProgress: this.onProgress\n                });\n\n              case 21:\n                buffers = _context3.sent;\n                return _context3.abrupt(\"return\", [weightSpecs, concatenateArrayBuffers(buffers)]);\n\n              case 23:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadWeights(_x2) {\n        return _loadWeights.apply(this, arguments);\n      }\n\n      return loadWeights;\n    }()\n  }]);\n\n  return HTTPRequest;\n}();\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\n\nexport function parseUrl(url) {\n  var lastSlash = url.lastIndexOf('/');\n  var lastSearchParam = url.lastIndexOf('?');\n  var prefix = url.substring(0, lastSlash);\n  var suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport var httpRouter = function httpRouter(url, loadOptions) {\n  if (typeof fetch === 'undefined' && (loadOptions == null || loadOptions.fetchFunc == null)) {\n    // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n    // an environment that is not the browser or node they have to setup a\n    // global fetch polyfill.\n    return null;\n  } else {\n    var isHTTP = true;\n\n    if (Array.isArray(url)) {\n      isHTTP = url.every(function (urlItem) {\n        return isHTTPScheme(urlItem);\n      });\n    } else {\n      isHTTP = isHTTPScheme(url);\n    }\n\n    if (isHTTP) {\n      return http(url, loadOptions);\n    }\n  }\n\n  return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconsistutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function http(path, loadOptions) {\n  return new HTTPRequest(path, loadOptions);\n}\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\n\nexport function browserHTTPRequest(path, loadOptions) {\n  return http(path, loadOptions);\n}","map":{"version":3,"sources":["../../src/io/http.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer } from './weights_loader';\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest {\n    constructor(path, loadOptions) {\n        this.DEFAULT_METHOD = 'POST';\n        if (loadOptions == null) {\n            loadOptions = {};\n        }\n        this.weightPathPrefix = loadOptions.weightPathPrefix;\n        this.onProgress = loadOptions.onProgress;\n        this.weightUrlConverter = loadOptions.weightUrlConverter;\n        if (loadOptions.fetchFunc != null) {\n            assert(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' +\n                '`fetch` (see ' +\n                'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n            this.fetch = loadOptions.fetchFunc;\n        }\n        else {\n            this.fetch = env().platform.fetch;\n        }\n        assert(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' +\n            'empty.');\n        if (Array.isArray(path)) {\n            assert(path.length === 2, () => 'URL paths for http must have a length of 2, ' +\n                `(actual length is ${path.length}).`);\n        }\n        this.path = path;\n        if (loadOptions.requestInit != null &&\n            loadOptions.requestInit.body != null) {\n            throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n        }\n        this.requestInit = loadOptions.requestInit || {};\n    }\n    async save(modelArtifacts) {\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        const init = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);\n        init.body = new FormData();\n        const weightsManifest = [{\n                paths: ['./model.weights.bin'],\n                weights: modelArtifacts.weightSpecs,\n            }];\n        const modelTopologyAndWeightManifest = {\n            modelTopology: modelArtifacts.modelTopology,\n            format: modelArtifacts.format,\n            generatedBy: modelArtifacts.generatedBy,\n            convertedBy: modelArtifacts.convertedBy,\n            weightsManifest\n        };\n        if (modelArtifacts.signature != null) {\n            modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n        }\n        if (modelArtifacts.userDefinedMetadata != null) {\n            modelTopologyAndWeightManifest.userDefinedMetadata =\n                modelArtifacts.userDefinedMetadata;\n        }\n        if (modelArtifacts.modelInitializer != null) {\n            modelTopologyAndWeightManifest.modelInitializer =\n                modelArtifacts.modelInitializer;\n        }\n        init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: JSON_TYPE }), 'model.json');\n        if (modelArtifacts.weightData != null) {\n            init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], { type: OCTET_STREAM_MIME_TYPE }), 'model.weights.bin');\n        }\n        const response = await this.fetch(this.path, init);\n        if (response.ok) {\n            return {\n                modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n                responses: [response],\n            };\n        }\n        else {\n            throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` +\n                `${response.status}.`);\n        }\n    }\n    /**\n     * Load model artifacts via HTTP request(s).\n     *\n     * See the documentation to `tf.io.http` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model artifacts (if loading succeeds).\n     */\n    async load() {\n        const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n        if (!modelConfigRequest.ok) {\n            throw new Error(`Request to ${this.path} failed with status code ` +\n                `${modelConfigRequest.status}. Please verify this URL points to ` +\n                `the model JSON of the model to load.`);\n        }\n        let modelConfig;\n        try {\n            modelConfig = await modelConfigRequest.json();\n        }\n        catch (e) {\n            let message = `Failed to parse model JSON of response from ${this.path}.`;\n            // TODO(nsthorat): Remove this after some time when we're comfortable that\n            // .pb files are mostly gone.\n            if (this.path.endsWith('.pb')) {\n                message += ' Your path contains a .pb file extension. ' +\n                    'Support for .pb models have been removed in TensorFlow.js 1.0 ' +\n                    'in favor of .json models. You can re-convert your Python ' +\n                    'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +\n                    'or you can convert your.pb models with the \\'pb2json\\'' +\n                    'NPM script in the tensorflow/tfjs-converter repository.';\n            }\n            else {\n                message += ' Please make sure the server is serving valid ' +\n                    'JSON for this request.';\n            }\n            throw new Error(message);\n        }\n        const modelTopology = modelConfig.modelTopology;\n        const weightsManifest = modelConfig.weightsManifest;\n        const generatedBy = modelConfig.generatedBy;\n        const convertedBy = modelConfig.convertedBy;\n        const format = modelConfig.format;\n        const signature = modelConfig.signature;\n        const userDefinedMetadata = modelConfig.userDefinedMetadata;\n        // We do not allow both modelTopology and weightsManifest to be missing.\n        if (modelTopology == null && weightsManifest == null) {\n            throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` +\n                `topology or manifest for weights.`);\n        }\n        let weightSpecs;\n        let weightData;\n        if (weightsManifest != null) {\n            const results = await this.loadWeights(weightsManifest);\n            [weightSpecs, weightData] = results;\n        }\n        const artifacts = {\n            modelTopology,\n            weightSpecs,\n            weightData,\n            generatedBy,\n            convertedBy,\n            format\n        };\n        if (signature != null) {\n            artifacts.signature = signature;\n        }\n        if (userDefinedMetadata != null) {\n            artifacts.userDefinedMetadata = userDefinedMetadata;\n        }\n        const initializer = modelConfig.modelInitializer;\n        if (initializer) {\n            artifacts.modelInitializer = initializer;\n        }\n        return artifacts;\n    }\n    async loadWeights(weightsManifest) {\n        const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n        const [prefix, suffix] = parseUrl(weightPath);\n        const pathPrefix = this.weightPathPrefix || prefix;\n        const weightSpecs = [];\n        for (const entry of weightsManifest) {\n            weightSpecs.push(...entry.weights);\n        }\n        const fetchURLs = [];\n        const urlPromises = [];\n        for (const weightsGroup of weightsManifest) {\n            for (const path of weightsGroup.paths) {\n                if (this.weightUrlConverter != null) {\n                    urlPromises.push(this.weightUrlConverter(path));\n                }\n                else {\n                    fetchURLs.push(pathPrefix + path + suffix);\n                }\n            }\n        }\n        if (this.weightUrlConverter) {\n            fetchURLs.push(...await Promise.all(urlPromises));\n        }\n        const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n            requestInit: this.requestInit,\n            fetchFunc: this.fetch,\n            onProgress: this.onProgress\n        });\n        return [weightSpecs, concatenateArrayBuffers(buffers)];\n    }\n}\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url) {\n    const lastSlash = url.lastIndexOf('/');\n    const lastSearchParam = url.lastIndexOf('?');\n    const prefix = url.substring(0, lastSlash);\n    const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n    return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n    return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport const httpRouter = (url, loadOptions) => {\n    if (typeof fetch === 'undefined' &&\n        (loadOptions == null || loadOptions.fetchFunc == null)) {\n        // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n        // an environment that is not the browser or node they have to setup a\n        // global fetch polyfill.\n        return null;\n    }\n    else {\n        let isHTTP = true;\n        if (Array.isArray(url)) {\n            isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n        }\n        else {\n            isHTTP = isHTTPScheme(url);\n        }\n        if (isHTTP) {\n            return http(url, loadOptions);\n        }\n    }\n    return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconsistutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path, loadOptions) {\n    return new HTTPRequest(path, loadOptions);\n}\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(path, loadOptions) {\n    return http(path, loadOptions);\n}\n//# sourceMappingURL=http.js.map"]},"metadata":{},"sourceType":"module"}