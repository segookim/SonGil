{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Note that the identifier globalNameSpace is scoped to this module, but will\n// always resolve to the same global object regardless of how the module is\n// resolved.\n// tslint:disable-next-line:no-any\nlet globalNameSpace; // tslint:disable-next-line:no-any\n\nexport function getGlobalNamespace() {\n  if (globalNameSpace == null) {\n    // tslint:disable-next-line:no-any\n    let ns;\n\n    if (typeof window !== 'undefined') {\n      ns = window;\n    } else if (typeof global !== 'undefined') {\n      ns = global;\n    } else if (typeof process !== 'undefined') {\n      ns = process;\n    } else if (typeof self !== 'undefined') {\n      ns = self;\n    } else {\n      throw new Error('Could not find a global object');\n    }\n\n    globalNameSpace = ns;\n  }\n\n  return globalNameSpace;\n} // tslint:disable-next-line:no-any\n\nfunction getGlobalMap() {\n  const ns = getGlobalNamespace();\n\n  if (ns._tfGlobals == null) {\n    ns._tfGlobals = new Map();\n  }\n\n  return ns._tfGlobals;\n}\n/**\n * Returns a globally accessible 'singleton' object.\n *\n * @param key the name of the object\n * @param init a function to initialize to initialize this object\n *             the first time it is fetched.\n */\n\n\nexport function getGlobal(key, init) {\n  const globalMap = getGlobalMap();\n\n  if (globalMap.has(key)) {\n    return globalMap.get(key);\n  } else {\n    const singleton = init();\n    globalMap.set(key, singleton);\n    return globalMap.get(key);\n  }\n}","map":{"version":3,"sources":["../src/global_util.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH;AACA;AACA;AACA;AACA,IAAI,eAAJ,C,CACA;;AACA,OAAM,SAAU,kBAAV,GAA4B;AAChC,MAAI,eAAe,IAAI,IAAvB,EAA6B;AAC3B;AACA,QAAI,EAAJ;;AACA,QAAI,OAAQ,MAAR,KAAoB,WAAxB,EAAqC;AACnC,MAAA,EAAE,GAAG,MAAL;AACD,KAFD,MAEO,IAAI,OAAQ,MAAR,KAAoB,WAAxB,EAAqC;AAC1C,MAAA,EAAE,GAAG,MAAL;AACD,KAFM,MAEA,IAAI,OAAQ,OAAR,KAAqB,WAAzB,EAAsC;AAC3C,MAAA,EAAE,GAAG,OAAL;AACD,KAFM,MAEA,IAAI,OAAQ,IAAR,KAAkB,WAAtB,EAAmC;AACxC,MAAA,EAAE,GAAG,IAAL;AACD,KAFM,MAEA;AACL,YAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;;AACD,IAAA,eAAe,GAAG,EAAlB;AACD;;AACD,SAAO,eAAP;AACD,C,CAED;;AACA,SAAS,YAAT,GAAqB;AACnB,QAAM,EAAE,GAAG,kBAAkB,EAA7B;;AACA,MAAI,EAAE,CAAC,UAAH,IAAiB,IAArB,EAA2B;AACzB,IAAA,EAAE,CAAC,UAAH,GAAgB,IAAI,GAAJ,EAAhB;AACD;;AACD,SAAO,EAAE,CAAC,UAAV;AACD;AAED;;;;;;AAMG;;;AACH,OAAM,SAAU,SAAV,CAAuB,GAAvB,EAAoC,IAApC,EAAiD;AACrD,QAAM,SAAS,GAAG,YAAY,EAA9B;;AACA,MAAI,SAAS,CAAC,GAAV,CAAc,GAAd,CAAJ,EAAwB;AACtB,WAAO,SAAS,CAAC,GAAV,CAAc,GAAd,CAAP;AACD,GAFD,MAEO;AACL,UAAM,SAAS,GAAG,IAAI,EAAtB;AACA,IAAA,SAAS,CAAC,GAAV,CAAc,GAAd,EAAmB,SAAnB;AACA,WAAO,SAAS,CAAC,GAAV,CAAc,GAAd,CAAP;AACD;AACF","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Note that the identifier globalNameSpace is scoped to this module, but will\n// always resolve to the same global object regardless of how the module is\n// resolved.\n// tslint:disable-next-line:no-any\nlet globalNameSpace;\n// tslint:disable-next-line:no-any\nexport function getGlobalNamespace() {\n    if (globalNameSpace == null) {\n        // tslint:disable-next-line:no-any\n        let ns;\n        if (typeof (window) !== 'undefined') {\n            ns = window;\n        }\n        else if (typeof (global) !== 'undefined') {\n            ns = global;\n        }\n        else if (typeof (process) !== 'undefined') {\n            ns = process;\n        }\n        else if (typeof (self) !== 'undefined') {\n            ns = self;\n        }\n        else {\n            throw new Error('Could not find a global object');\n        }\n        globalNameSpace = ns;\n    }\n    return globalNameSpace;\n}\n// tslint:disable-next-line:no-any\nfunction getGlobalMap() {\n    const ns = getGlobalNamespace();\n    if (ns._tfGlobals == null) {\n        ns._tfGlobals = new Map();\n    }\n    return ns._tfGlobals;\n}\n/**\n * Returns a globally accessible 'singleton' object.\n *\n * @param key the name of the object\n * @param init a function to initialize to initialize this object\n *             the first time it is fetched.\n */\nexport function getGlobal(key, init) {\n    const globalMap = getGlobalMap();\n    if (globalMap.has(key)) {\n        return globalMap.get(key);\n    }\n    else {\n        const singleton = init();\n        globalMap.set(key, singleton);\n        return globalMap.get(key);\n    }\n}\n//# sourceMappingURL=global_util.js.map"]},"metadata":{},"sourceType":"module"}