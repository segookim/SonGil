{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nimport { div } from './RealDiv';\nimport { sum } from './Sum';\nexport function mean(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var axis = attrs.axis,\n      keepDims = attrs.keepDims;\n  var axes = util.parseAxisParam(axis, x.shape);\n  var shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  var reduceShape = shapes[1];\n  var reduceSize = util.sizeFromShape(reduceShape);\n  var toDispose = [];\n  var reduceSizeScalar = backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n  var $x = cast({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      dtype: 'float32'\n    }\n  });\n  toDispose.push($x);\n  var res = div({\n    inputs: {\n      a: $x,\n      b: reduceSizeScalar\n    },\n    backend: backend\n  });\n  toDispose.push(res);\n  var result = sum({\n    inputs: {\n      x: res\n    },\n    backend: backend,\n    attrs: {\n      axis: axis,\n      keepDims: keepDims\n    }\n  });\n  toDispose.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return result;\n}\nexport var meanConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean\n};","map":{"version":3,"sources":["../../src/kernels/Mean.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAgD,IAAhD,EAAyF,IAAzF,QAAoG,uBAApG;AAGA,SAAQ,IAAR,QAAmB,QAAnB;AACA,SAAQ,GAAR,QAAkB,WAAlB;AACA,SAAQ,GAAR,QAAkB,OAAlB;AAEA,OAAM,SAAU,IAAV,CACF,IADE,EACmE;AAAA,MAEhE,MAFgE,GAEtC,IAFsC,CAEhE,MAFgE;AAAA,MAExD,OAFwD,GAEtC,IAFsC,CAExD,OAFwD;AAAA,MAE/C,KAF+C,GAEtC,IAFsC,CAE/C,KAF+C;AAAA,MAGhE,CAHgE,GAG3D,MAH2D,CAGhE,CAHgE;AAAA,MAIhE,IAJgE,GAI9C,KAJ8C,CAIhE,IAJgE;AAAA,MAI1D,QAJ0D,GAI9C,KAJ8C,CAI1D,QAJ0D;AAMvE,MAAM,IAAI,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,CAAC,CAAC,KAA5B,CAAb;AACA,MAAM,MAAM,GAAG,YAAY,CAAC,yBAAb,CAAuC,CAAC,CAAC,KAAzC,EAAgD,IAAhD,CAAf;AACA,MAAM,WAAW,GAAG,MAAM,CAAC,CAAD,CAA1B;AACA,MAAM,UAAU,GAAG,IAAI,CAAC,aAAL,CAAmB,WAAnB,CAAnB;AACA,MAAM,SAAS,GAAG,EAAlB;AACA,MAAM,gBAAgB,GAClB,OAAO,CAAC,cAAR,CAAuB,EAAvB,EAA2B,SAA3B,EAAsC,IAAI,YAAJ,CAAiB,CAAC,UAAD,CAAjB,CAAtC,CADJ;AAEA,EAAA,SAAS,CAAC,IAAV,CAAe,gBAAf;AAEA,MAAM,EAAE,GAAG,IAAI,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAD;AAAD,KAAT;AAAc,IAAA,OAAO,EAAP,OAAd;AAAuB,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE;AAAR;AAA9B,GAAD,CAAf;AACA,EAAA,SAAS,CAAC,IAAV,CAAe,EAAf;AAEA,MAAM,GAAG,GACL,GAAG,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE,EAAJ;AAAQ,MAAA,CAAC,EAAE;AAAX,KAAT;AAAuC,IAAA,OAAO,EAAP;AAAvC,GAAD,CADP;AAEA,EAAA,SAAS,CAAC,IAAV,CAAe,GAAf;AAEA,MAAM,MAAM,GAAG,GAAG,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAmB,IAAA,OAAO,EAAP,OAAnB;AAA4B,IAAA,KAAK,EAAE;AAAC,MAAA,IAAI,EAAJ,IAAD;AAAO,MAAA,QAAQ,EAAR;AAAP;AAAnC,GAAD,CAAlB;AAEA,EAAA,SAAS,CAAC,OAAV,CAAkB,UAAA,CAAC;AAAA,WAAI,OAAO,CAAC,6BAAR,CAAsC,CAAtC,CAAJ;AAAA,GAAnB;AAEA,SAAO,MAAP;AACD;AAED,OAAO,IAAM,UAAU,GAAiB;AACtC,EAAA,UAAU,EAAE,IAD0B;AAEtC,EAAA,WAAW,EAAE,KAFyB;AAGtC,EAAA,UAAU,EAAE;AAH0B,CAAjC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nimport { div } from './RealDiv';\nimport { sum } from './Sum';\nexport function mean(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const reduceShape = shapes[1];\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const toDispose = [];\n    const reduceSizeScalar = backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n    toDispose.push(reduceSizeScalar);\n    const $x = cast({ inputs: { x }, backend, attrs: { dtype: 'float32' } });\n    toDispose.push($x);\n    const res = div({ inputs: { a: $x, b: reduceSizeScalar }, backend });\n    toDispose.push(res);\n    const result = sum({ inputs: { x: res }, backend, attrs: { axis, keepDims } });\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const meanConfig = {\n    kernelName: Mean,\n    backendName: 'cpu',\n    kernelFunc: mean\n};\n//# sourceMappingURL=Mean.js.map"]},"metadata":{},"sourceType":"module"}