{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose } from '@tensorflow/tfjs-core';\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\n\nexport async function resolveScalarsInLogs(logs) {\n  if (logs == null) {\n    return;\n  }\n\n  const promises = [];\n  const keys = [];\n  const scalarsToDispose = [];\n\n  for (const key in logs) {\n    const value = logs[key];\n\n    if (typeof value !== 'number') {\n      const valueScalar = value;\n      promises.push(valueScalar.data());\n      keys.push(key);\n      scalarsToDispose.push(valueScalar);\n    }\n  }\n\n  if (promises.length > 0) {\n    const values = await Promise.all(promises);\n\n    for (let i = 0; i < values.length; ++i) {\n      logs[keys[i]] = values[i][0];\n    } // Dispose the original scalar tensors.\n\n\n    dispose(scalarsToDispose);\n  }\n}\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\n\nexport function disposeTensorsInLogs(logs) {\n  if (logs == null) {\n    return;\n  }\n\n  for (const key in logs) {\n    const value = logs[key];\n\n    if (typeof value !== 'number') {\n      value.dispose();\n    }\n  }\n}","map":{"version":3,"sources":["../src/logs.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAQG;AAEH,SAAQ,OAAR,QAA8B,uBAA9B;AAWA;;;;AAIG;;AACH,OAAO,eAAe,oBAAf,CAAoC,IAApC,EAAwD;AAC7D,MAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB;AACD;;AACD,QAAM,QAAQ,GAAuD,EAArE;AACA,QAAM,IAAI,GAAa,EAAvB;AACA,QAAM,gBAAgB,GAAa,EAAnC;;AACA,OAAK,MAAM,GAAX,IAAkB,IAAlB,EAAwB;AACtB,UAAM,KAAK,GAAG,IAAI,CAAC,GAAD,CAAlB;;AACA,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAM,WAAW,GAAG,KAApB;AACA,MAAA,QAAQ,CAAC,IAAT,CAAc,WAAW,CAAC,IAAZ,EAAd;AACA,MAAA,IAAI,CAAC,IAAL,CAAU,GAAV;AACA,MAAA,gBAAgB,CAAC,IAAjB,CAAsB,WAAtB;AACD;AACF;;AACD,MAAI,QAAQ,CAAC,MAAT,GAAkB,CAAtB,EAAyB;AACvB,UAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAR,CAAY,QAAZ,CAArB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,EAAE,CAArC,EAAwC;AACtC,MAAA,IAAI,CAAC,IAAI,CAAC,CAAD,CAAL,CAAJ,GAAgB,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAhB;AACD,KAJsB,CAKvB;;;AACA,IAAA,OAAO,CAAC,gBAAD,CAAP;AACD;AACF;AAED;;;;;AAKG;;AACH,OAAM,SAAU,oBAAV,CAA+B,IAA/B,EAAmD;AACvD,MAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB;AACD;;AACD,OAAK,MAAM,GAAX,IAAkB,IAAlB,EAAwB;AACtB,UAAM,KAAK,GAAG,IAAI,CAAC,GAAD,CAAlB;;AACA,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,MAAA,KAAK,CAAC,OAAN;AACD;AACF;AACF","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose } from '@tensorflow/tfjs-core';\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\nexport async function resolveScalarsInLogs(logs) {\n    if (logs == null) {\n        return;\n    }\n    const promises = [];\n    const keys = [];\n    const scalarsToDispose = [];\n    for (const key in logs) {\n        const value = logs[key];\n        if (typeof value !== 'number') {\n            const valueScalar = value;\n            promises.push(valueScalar.data());\n            keys.push(key);\n            scalarsToDispose.push(valueScalar);\n        }\n    }\n    if (promises.length > 0) {\n        const values = await Promise.all(promises);\n        for (let i = 0; i < values.length; ++i) {\n            logs[keys[i]] = values[i][0];\n        }\n        // Dispose the original scalar tensors.\n        dispose(scalarsToDispose);\n    }\n}\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\nexport function disposeTensorsInLogs(logs) {\n    if (logs == null) {\n        return;\n    }\n    for (const key in logs) {\n        const value = logs[key];\n        if (typeof value !== 'number') {\n            value.dispose();\n        }\n    }\n}\n//# sourceMappingURL=logs.js.map"]},"metadata":{},"sourceType":"module"}