{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedDepthwiseConv2D, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nexport function fusedDepthwiseConv2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  const intermediates = [];\n  let $dilations = dilations;\n\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + `1. Got strides ${strides} and dilations '${$dilations}'`);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true\n  /* depthwise */\n  );\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ? mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) : null;\n  const programInputs = [x, filter];\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program;\n\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  }\n\n  const result = backend.runWebGLProgram(program, programInputs, 'float32');\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D\n};","map":{"version":3,"sources":["../../src/kernels/FusedDepthwiseConv2D.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedDepthwiseConv2D, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nexport function fusedDepthwiseConv2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    const intermediates = [];\n    let $dilations = dilations;\n    if ($dilations == null) {\n        $dilations = [1, 1];\n    }\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n        `1. Got strides ${strides} and dilations '${$dilations}'`);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n    const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n        convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1;\n    const fusedActivation = activation ?\n        mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n        null;\n    const programInputs = [x, filter];\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    if (hasBias) {\n        programInputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n        programInputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n        const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n        programInputs.push($leakyreluAlpha);\n        intermediates.push($leakyreluAlpha);\n    }\n    let program;\n    if (shouldPackDepthwiseConv) {\n        program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    }\n    else {\n        program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    }\n    const result = backend.runWebGLProgram(program, programInputs, 'float32');\n    intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n    kernelName: FusedDepthwiseConv2D,\n    backendName: 'webgl',\n    kernelFunc: fusedDepthwiseConv2D,\n};\n//# sourceMappingURL=FusedDepthwiseConv2D.js.map"]},"metadata":{},"sourceType":"module"}