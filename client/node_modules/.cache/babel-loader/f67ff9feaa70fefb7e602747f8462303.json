{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\n\nexport class RMSPropOptimizer extends Optimizer {\n  constructor(learningRate, decay = 0.9, momentum = 0.0, epsilon = null, centered = false) {\n    super();\n    this.learningRate = learningRate;\n    this.decay = decay;\n    this.momentum = momentum;\n    this.epsilon = epsilon;\n    this.accumulatedMeanSquares = [];\n    this.accumulatedMoments = [];\n    this.accumulatedMeanGrads = [];\n    this.centered = centered;\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n\n    if (learningRate == null) {\n      throw new Error(`learningRate for RMSPropOptimizer must be defined.`);\n    }\n  }\n\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      const trainable = false;\n\n      if (this.accumulatedMeanSquares[i] == null) {\n        this.accumulatedMeanSquares[i] = {\n          originalName: `${name}/rms`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      if (this.accumulatedMoments[i] == null) {\n        this.accumulatedMoments[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      if (this.accumulatedMeanGrads[i] == null && this.centered) {\n        this.accumulatedMeanGrads[i] = {\n          originalName: `${name}/mg`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;\n      const accumulatedMoments = this.accumulatedMoments[i].variable;\n      tidy(() => {\n        const newAccumulatedMeanSquare = add(mul(accumulatedMeanSquare, this.decay), mul(square(gradient), 1 - this.decay));\n\n        if (this.centered) {\n          const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable; // Centered gradient\n\n          const newAccumulatedMeanGrad = add(mul(accumulatedMeanGrad, this.decay), mul(gradient, 1 - this.decay));\n          const gradContribution = div(mul(gradient, this.learningRate), sqrt(sub(newAccumulatedMeanSquare, add(square(newAccumulatedMeanGrad), this.epsilon))));\n          const newAccumulatedMoments = add(mul(accumulatedMoments, this.momentum), gradContribution);\n          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n          accumulatedMeanGrad.assign(newAccumulatedMeanGrad);\n          accumulatedMoments.assign(newAccumulatedMoments);\n          const newValue = sub(value, newAccumulatedMoments);\n          value.assign(newValue);\n        } else {\n          // Plain gradient\n          const newAccumulatedMeanSquare = add(mul(accumulatedMeanSquare, this.decay), mul(square(gradient), 1 - this.decay));\n          const newAccumulatedMoments = add(mul(accumulatedMoments, this.momentum), div(mul(gradient, this.learningRate), sqrt(add(newAccumulatedMeanSquare, this.epsilon))));\n          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n          accumulatedMoments.assign(newAccumulatedMoments);\n          const newValue = sub(value, newAccumulatedMoments);\n          value.assign(newValue);\n        }\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose() {\n    if (this.accumulatedMeanSquares != null) {\n      dispose(this.accumulatedMeanSquares.map(v => v.variable));\n    }\n\n    if (this.accumulatedMeanGrads != null && this.centered) {\n      dispose(this.accumulatedMeanGrads.map(v => v.variable));\n    }\n\n    if (this.accumulatedMoments != null) {\n      dispose(this.accumulatedMoments.map(v => v.variable));\n    }\n  }\n\n  async getWeights() {\n    // Order matters for Python compatibility.\n    const variables = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];\n\n    if (this.centered) {\n      variables.push(...this.accumulatedMeanGrads);\n    }\n\n    return [await this.saveIterations()].concat(variables.map(v => ({\n      name: v.originalName,\n      tensor: v.variable\n    })));\n  }\n\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    const variableCount = this.centered ? weightValues.length / 3 : weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedMeanSquares = weightValues.slice(0, variableCount).map(v => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n    this.accumulatedMoments = weightValues.slice(variableCount, variableCount * 2).map(v => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n\n    if (this.centered) {\n      this.accumulatedMeanGrads = weightValues.slice(variableCount * 2, variableCount * 3).map(v => ({\n        originalName: v.name,\n        variable: v.tensor.variable(trainable)\n      }));\n    }\n  }\n\n  getConfig() {\n    return {\n      'learningRate': this.learningRate,\n      'decay': this.decay,\n      'momentum': this.momentum,\n      'epsilon': this.epsilon,\n      'centered': this.centered\n    };\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls(config['learningRate'], config['decay'], config['momentum'], config['epsilon'], config['centered']);\n  }\n\n}\n/** @nocollapse */\n\nRMSPropOptimizer.className = 'RMSProp'; // Note: Name matters for Python compatibility.\n\nregisterClass(RMSPropOptimizer);","map":{"version":3,"sources":["../../src/optimizers/rmsprop_optimizer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\nexport class RMSPropOptimizer extends Optimizer {\n    constructor(learningRate, decay = 0.9, momentum = 0.0, epsilon = null, centered = false) {\n        super();\n        this.learningRate = learningRate;\n        this.decay = decay;\n        this.momentum = momentum;\n        this.epsilon = epsilon;\n        this.accumulatedMeanSquares = [];\n        this.accumulatedMoments = [];\n        this.accumulatedMeanGrads = [];\n        this.centered = centered;\n        if (epsilon == null) {\n            this.epsilon = ENGINE.backend.epsilon();\n        }\n        if (learningRate == null) {\n            throw new Error(`learningRate for RMSPropOptimizer must be defined.`);\n        }\n    }\n    applyGradients(variableGradients) {\n        const variableNames = Array.isArray(variableGradients) ?\n            variableGradients.map(item => item.name) :\n            Object.keys(variableGradients);\n        variableNames.forEach((name, i) => {\n            const value = ENGINE.registeredVariables[name];\n            const trainable = false;\n            if (this.accumulatedMeanSquares[i] == null) {\n                this.accumulatedMeanSquares[i] = {\n                    originalName: `${name}/rms`,\n                    variable: tidy(() => zerosLike(value).variable(trainable))\n                };\n            }\n            if (this.accumulatedMoments[i] == null) {\n                this.accumulatedMoments[i] = {\n                    originalName: `${name}/momentum`,\n                    variable: tidy(() => zerosLike(value).variable(trainable))\n                };\n            }\n            if (this.accumulatedMeanGrads[i] == null && this.centered) {\n                this.accumulatedMeanGrads[i] = {\n                    originalName: `${name}/mg`,\n                    variable: tidy(() => zerosLike(value).variable(trainable))\n                };\n            }\n            const gradient = Array.isArray(variableGradients) ?\n                variableGradients[i].tensor :\n                variableGradients[name];\n            if (gradient == null) {\n                return;\n            }\n            const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;\n            const accumulatedMoments = this.accumulatedMoments[i].variable;\n            tidy(() => {\n                const newAccumulatedMeanSquare = add(mul(accumulatedMeanSquare, this.decay), mul(square(gradient), 1 - this.decay));\n                if (this.centered) {\n                    const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable;\n                    // Centered gradient\n                    const newAccumulatedMeanGrad = add(mul(accumulatedMeanGrad, this.decay), mul(gradient, 1 - this.decay));\n                    const gradContribution = div(mul(gradient, this.learningRate), sqrt(sub(newAccumulatedMeanSquare, add(square(newAccumulatedMeanGrad), this.epsilon))));\n                    const newAccumulatedMoments = add(mul(accumulatedMoments, this.momentum), gradContribution);\n                    accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n                    accumulatedMeanGrad.assign(newAccumulatedMeanGrad);\n                    accumulatedMoments.assign(newAccumulatedMoments);\n                    const newValue = sub(value, newAccumulatedMoments);\n                    value.assign(newValue);\n                }\n                else {\n                    // Plain gradient\n                    const newAccumulatedMeanSquare = add(mul(accumulatedMeanSquare, this.decay), mul(square(gradient), 1 - this.decay));\n                    const newAccumulatedMoments = add(mul(accumulatedMoments, this.momentum), div(mul(gradient, this.learningRate), sqrt(add(newAccumulatedMeanSquare, this.epsilon))));\n                    accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n                    accumulatedMoments.assign(newAccumulatedMoments);\n                    const newValue = sub(value, newAccumulatedMoments);\n                    value.assign(newValue);\n                }\n            });\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        if (this.accumulatedMeanSquares != null) {\n            dispose(this.accumulatedMeanSquares.map(v => v.variable));\n        }\n        if (this.accumulatedMeanGrads != null && this.centered) {\n            dispose(this.accumulatedMeanGrads.map(v => v.variable));\n        }\n        if (this.accumulatedMoments != null) {\n            dispose(this.accumulatedMoments.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        // Order matters for Python compatibility.\n        const variables = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];\n        if (this.centered) {\n            variables.push(...this.accumulatedMeanGrads);\n        }\n        return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        const variableCount = this.centered ? weightValues.length / 3 : weightValues.length / 2;\n        const trainable = false;\n        this.accumulatedMeanSquares =\n            weightValues.slice(0, variableCount).map(v => ({\n                originalName: v.name,\n                variable: v.tensor.variable(trainable)\n            }));\n        this.accumulatedMoments =\n            weightValues.slice(variableCount, variableCount * 2)\n                .map(v => ({\n                originalName: v.name,\n                variable: v.tensor.variable(trainable)\n            }));\n        if (this.centered) {\n            this.accumulatedMeanGrads =\n                weightValues.slice(variableCount * 2, variableCount * 3)\n                    .map(v => ({\n                    originalName: v.name,\n                    variable: v.tensor.variable(trainable)\n                }));\n        }\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'decay': this.decay,\n            'momentum': this.momentum,\n            'epsilon': this.epsilon,\n            'centered': this.centered\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['decay'], config['momentum'], config['epsilon'], config['centered']);\n    }\n}\n/** @nocollapse */\nRMSPropOptimizer.className = 'RMSProp'; // Note: Name matters for Python compatibility.\nregisterClass(RMSPropOptimizer);\n//# sourceMappingURL=rmsprop_optimizer.js.map"]},"metadata":{},"sourceType":"module"}