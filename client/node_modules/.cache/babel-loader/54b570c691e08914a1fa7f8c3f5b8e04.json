{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { isPromise } from './util_base'; // Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\n\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\n\nexport class Environment {\n  // tslint:disable-next-line: no-any\n  constructor(global) {\n    this.global = global;\n    this.flags = {};\n    this.flagRegistry = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n\n  setPlatform(platformName, platform) {\n    if (this.platform != null) {\n      console.warn(`Platform ${this.platformName} has already been set. ` + `Overwriting the platform with ${platform}.`);\n    }\n\n    this.platformName = platformName;\n    this.platform = platform;\n  }\n\n  registerFlag(flagName, evaluationFn, setHook) {\n    this.flagRegistry[flagName] = {\n      evaluationFn,\n      setHook\n    }; // Override the flag value from the URL. This has to happen here because the\n    // environment is initialized before flags get registered.\n\n    if (this.urlFlags[flagName] != null) {\n      const flagValue = this.urlFlags[flagName];\n      console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);\n      this.set(flagName, flagValue);\n    }\n  }\n\n  async getAsync(flagName) {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    this.flags[flagName] = await this.evaluateFlag(flagName);\n    return this.flags[flagName];\n  }\n\n  get(flagName) {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    const flagValue = this.evaluateFlag(flagName);\n\n    if (isPromise(flagValue)) {\n      throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` + `Please use getAsync() instead.`);\n    }\n\n    this.flags[flagName] = flagValue;\n    return this.flags[flagName];\n  }\n\n  getNumber(flagName) {\n    return this.get(flagName);\n  }\n\n  getBool(flagName) {\n    return this.get(flagName);\n  }\n\n  getFlags() {\n    return this.flags;\n  } // For backwards compatibility.\n\n\n  get features() {\n    return this.flags;\n  }\n\n  set(flagName, value) {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);\n    }\n\n    this.flags[flagName] = value;\n\n    if (this.flagRegistry[flagName].setHook != null) {\n      this.flagRegistry[flagName].setHook(value);\n    }\n  }\n\n  evaluateFlag(flagName) {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);\n    }\n\n    return this.flagRegistry[flagName].evaluationFn();\n  }\n\n  setFlags(flags) {\n    this.flags = Object.assign({}, flags);\n  }\n\n  reset() {\n    this.flags = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n\n  populateURLFlags() {\n    if (typeof this.global === 'undefined' || typeof this.global.location === 'undefined' || typeof this.global.location.search === 'undefined') {\n      return;\n    }\n\n    const urlParams = getQueryParams(this.global.location.search);\n\n    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n      const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n      keyValues.forEach(keyValue => {\n        const [key, value] = keyValue.split(':');\n        this.urlFlags[key] = parseValue(key, value);\n      });\n    }\n  }\n\n}\nexport function getQueryParams(queryString) {\n  const params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n    decodeParam(params, t[0], t[1]);\n    return t.join('=');\n  });\n  return params;\n}\n\nfunction decodeParam(params, name, value) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\n\nfunction parseValue(flagName, value) {\n  value = value.toLowerCase();\n\n  if (value === 'true' || value === 'false') {\n    return value === 'true';\n  } else if (`${+value}` === value) {\n    return +value;\n  }\n\n  throw new Error(`Could not parse value flag value ${value} for flag ${flagName}.`);\n}\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\n\n\nexport function env() {\n  return ENV;\n}\nexport let ENV = null;\nexport function setEnvironmentGlobal(environment) {\n  ENV = environment;\n}","map":{"version":3,"sources":["../src/environment.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { isPromise } from './util_base';\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\nexport class Environment {\n    // tslint:disable-next-line: no-any\n    constructor(global) {\n        this.global = global;\n        this.flags = {};\n        this.flagRegistry = {};\n        this.urlFlags = {};\n        this.populateURLFlags();\n    }\n    setPlatform(platformName, platform) {\n        if (this.platform != null) {\n            console.warn(`Platform ${this.platformName} has already been set. ` +\n                `Overwriting the platform with ${platform}.`);\n        }\n        this.platformName = platformName;\n        this.platform = platform;\n    }\n    registerFlag(flagName, evaluationFn, setHook) {\n        this.flagRegistry[flagName] = { evaluationFn, setHook };\n        // Override the flag value from the URL. This has to happen here because the\n        // environment is initialized before flags get registered.\n        if (this.urlFlags[flagName] != null) {\n            const flagValue = this.urlFlags[flagName];\n            console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);\n            this.set(flagName, flagValue);\n        }\n    }\n    async getAsync(flagName) {\n        if (flagName in this.flags) {\n            return this.flags[flagName];\n        }\n        this.flags[flagName] = await this.evaluateFlag(flagName);\n        return this.flags[flagName];\n    }\n    get(flagName) {\n        if (flagName in this.flags) {\n            return this.flags[flagName];\n        }\n        const flagValue = this.evaluateFlag(flagName);\n        if (isPromise(flagValue)) {\n            throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` +\n                `Please use getAsync() instead.`);\n        }\n        this.flags[flagName] = flagValue;\n        return this.flags[flagName];\n    }\n    getNumber(flagName) {\n        return this.get(flagName);\n    }\n    getBool(flagName) {\n        return this.get(flagName);\n    }\n    getFlags() {\n        return this.flags;\n    }\n    // For backwards compatibility.\n    get features() {\n        return this.flags;\n    }\n    set(flagName, value) {\n        if (this.flagRegistry[flagName] == null) {\n            throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);\n        }\n        this.flags[flagName] = value;\n        if (this.flagRegistry[flagName].setHook != null) {\n            this.flagRegistry[flagName].setHook(value);\n        }\n    }\n    evaluateFlag(flagName) {\n        if (this.flagRegistry[flagName] == null) {\n            throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);\n        }\n        return this.flagRegistry[flagName].evaluationFn();\n    }\n    setFlags(flags) {\n        this.flags = Object.assign({}, flags);\n    }\n    reset() {\n        this.flags = {};\n        this.urlFlags = {};\n        this.populateURLFlags();\n    }\n    populateURLFlags() {\n        if (typeof this.global === 'undefined' ||\n            typeof this.global.location === 'undefined' ||\n            typeof this.global.location.search === 'undefined') {\n            return;\n        }\n        const urlParams = getQueryParams(this.global.location.search);\n        if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n            const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n            keyValues.forEach(keyValue => {\n                const [key, value] = keyValue.split(':');\n                this.urlFlags[key] = parseValue(key, value);\n            });\n        }\n    }\n}\nexport function getQueryParams(queryString) {\n    const params = {};\n    queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n        decodeParam(params, t[0], t[1]);\n        return t.join('=');\n    });\n    return params;\n}\nfunction decodeParam(params, name, value) {\n    params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\nfunction parseValue(flagName, value) {\n    value = value.toLowerCase();\n    if (value === 'true' || value === 'false') {\n        return value === 'true';\n    }\n    else if (`${+value}` === value) {\n        return +value;\n    }\n    throw new Error(`Could not parse value flag value ${value} for flag ${flagName}.`);\n}\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\nexport function env() {\n    return ENV;\n}\nexport let ENV = null;\nexport function setEnvironmentGlobal(environment) {\n    ENV = environment;\n}\n//# sourceMappingURL=environment.js.map"]},"metadata":{},"sourceType":"module"}