{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { NodeValueImpl } from './custom_op/node_value_impl';\nimport { getRegisteredOp } from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\n\nexport function executeOp(node, tensorMap, context, resourceManager) {\n  const value = ((node, tensorMap, context) => {\n    switch (node.category) {\n      case 'arithmetic':\n        return tfc.tidy(() => arithmetic.executeOp(node, tensorMap, context));\n\n      case 'basic_math':\n        return tfc.tidy(() => basicMath.executeOp(node, tensorMap, context));\n\n      case 'control':\n        return control.executeOp(node, tensorMap, context);\n\n      case 'convolution':\n        return tfc.tidy(() => convolution.executeOp(node, tensorMap, context));\n\n      case 'creation':\n        return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n\n      case 'dynamic':\n        return dynamic.executeOp(node, tensorMap, context);\n\n      case 'evaluation':\n        return tfc.tidy(() => evaluation.executeOp(node, tensorMap, context));\n\n      case 'image':\n        return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n\n      case 'graph':\n        return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n\n      case 'logical':\n        return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n\n      case 'matrices':\n        return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n\n      case 'normalization':\n        return tfc.tidy(() => normalization.executeOp(node, tensorMap, context));\n\n      case 'reduction':\n        return tfc.tidy(() => reduction.executeOp(node, tensorMap, context));\n\n      case 'slice_join':\n        return tfc.tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n\n      case 'spectral':\n        return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n\n      case 'transformation':\n        return tfc.tidy(() => transformation.executeOp(node, tensorMap, context));\n\n      case 'hash_table':\n        return hashTable.executeOp(node, tensorMap, context, resourceManager);\n\n      case 'custom':\n        const opMapper = getRegisteredOp(node.op);\n\n        if (opMapper && opMapper.customExecutor) {\n          return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));\n        } else {\n          throw TypeError(`Custom op ${node.op} is not registered.`);\n        }\n\n      default:\n        throw TypeError(`Unknown op '${node.op}'. File an issue at ` + `https://github.com/tensorflow/tfjs/issues so we can add it` + `, or register a custom execution with tf.registerOp()`);\n    }\n  })(node, tensorMap, context);\n\n  if (tfc.util.isPromise(value)) {\n    return value.then(data => [].concat(data));\n  }\n\n  return [].concat(value);\n}","map":{"version":3,"sources":["../../src/operations/operation_executor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { NodeValueImpl } from './custom_op/node_value_impl';\nimport { getRegisteredOp } from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(node, tensorMap, context, resourceManager) {\n    const value = ((node, tensorMap, context) => {\n        switch (node.category) {\n            case 'arithmetic':\n                return tfc.tidy(() => arithmetic.executeOp(node, tensorMap, context));\n            case 'basic_math':\n                return tfc.tidy(() => basicMath.executeOp(node, tensorMap, context));\n            case 'control':\n                return control.executeOp(node, tensorMap, context);\n            case 'convolution':\n                return tfc.tidy(() => convolution.executeOp(node, tensorMap, context));\n            case 'creation':\n                return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n            case 'dynamic':\n                return dynamic.executeOp(node, tensorMap, context);\n            case 'evaluation':\n                return tfc.tidy(() => evaluation.executeOp(node, tensorMap, context));\n            case 'image':\n                return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n            case 'graph':\n                return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n            case 'logical':\n                return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n            case 'matrices':\n                return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n            case 'normalization':\n                return tfc.tidy(() => normalization.executeOp(node, tensorMap, context));\n            case 'reduction':\n                return tfc.tidy(() => reduction.executeOp(node, tensorMap, context));\n            case 'slice_join':\n                return tfc.tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n            case 'spectral':\n                return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n            case 'transformation':\n                return tfc.tidy(() => transformation.executeOp(node, tensorMap, context));\n            case 'hash_table':\n                return hashTable.executeOp(node, tensorMap, context, resourceManager);\n            case 'custom':\n                const opMapper = getRegisteredOp(node.op);\n                if (opMapper && opMapper.customExecutor) {\n                    return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));\n                }\n                else {\n                    throw TypeError(`Custom op ${node.op} is not registered.`);\n                }\n            default:\n                throw TypeError(`Unknown op '${node.op}'. File an issue at ` +\n                    `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                    `, or register a custom execution with tf.registerOp()`);\n        }\n    })(node, tensorMap, context);\n    if (tfc.util.isPromise(value)) {\n        return value.then((data) => [].concat(data));\n    }\n    return [].concat(value);\n}\n//# sourceMappingURL=operation_executor.js.map"]},"metadata":{},"sourceType":"module"}