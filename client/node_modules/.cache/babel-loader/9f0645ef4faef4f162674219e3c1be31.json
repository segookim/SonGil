{"ast":null,"code":"import _classCallCheck from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var SelectProgram = function SelectProgram(cRank, shape, rank) {\n  _classCallCheck(this, SelectProgram);\n\n  this.variableNames = ['c', 'a', 'b'];\n  this.outputShape = shape;\n  var cCoords;\n  var abCoords;\n\n  if (rank > 4) {\n    throw Error(\"Where for rank \".concat(rank, \" is not yet supported\"));\n  }\n\n  if (rank === 1) {\n    abCoords = \"resRC\";\n    cCoords = \"resRC\";\n  } else {\n    var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n    var cCoordVars = [];\n    var abCoordVars = [];\n\n    for (var i = 0; i < shape.length; i++) {\n      abCoordVars.push(\"\".concat(currentCoords[i]));\n\n      if (i < cRank) {\n        cCoordVars.push(\"\".concat(currentCoords[i]));\n      }\n    }\n\n    cCoords = cCoordVars.join();\n    abCoords = abCoordVars.join();\n  }\n\n  var dtype = getCoordsDataType(rank);\n  this.userCode = \"\\n      void main() {\\n        \".concat(dtype, \" resRC = getOutputCoords();\\n        float cVal = getC(\").concat(cCoords, \");\\n        if (cVal >= 1.0) {\\n          setOutput(getA(\").concat(abCoords, \"));\\n        } else {\\n          setOutput(getB(\").concat(abCoords, \"));\\n        }\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/select_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,WAAa,aAAb,GAKE,uBAAY,KAAZ,EAA2B,KAA3B,EAA4C,IAA5C,EAAwD;AAAA;;AAJxD,OAAA,aAAA,GAAgB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAhB;AAKE,OAAK,WAAL,GAAmB,KAAnB;AAEA,MAAI,OAAJ;AACA,MAAI,QAAJ;;AACA,MAAI,IAAI,GAAG,CAAX,EAAc;AACZ,UAAM,KAAK,0BAAmB,IAAnB,2BAAX;AACD;;AAED,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd,IAAA,QAAQ,UAAR;AACA,IAAA,OAAO,UAAP;AACD,GAHD,MAGO;AACL,QAAM,aAAa,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAAtB;AACA,QAAM,UAAU,GAAG,EAAnB;AACA,QAAM,WAAW,GAAG,EAApB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,MAAA,WAAW,CAAC,IAAZ,WAAoB,aAAa,CAAC,CAAD,CAAjC;;AACA,UAAI,CAAC,GAAG,KAAR,EAAe;AACb,QAAA,UAAU,CAAC,IAAX,WAAmB,aAAa,CAAC,CAAD,CAAhC;AACD;AACF;;AACD,IAAA,OAAO,GAAG,UAAU,CAAC,IAAX,EAAV;AACA,IAAA,QAAQ,GAAG,WAAW,CAAC,IAAZ,EAAX;AACD;;AAED,MAAM,KAAK,GAAG,iBAAiB,CAAC,IAAD,CAA/B;AAEA,OAAK,QAAL,4CAEM,KAFN,oEAGwB,OAHxB,sEAKuB,QALvB,6DAOuB,QAPvB;AAWD,CA5CH","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SelectProgram {\n    constructor(cRank, shape, rank) {\n        this.variableNames = ['c', 'a', 'b'];\n        this.outputShape = shape;\n        let cCoords;\n        let abCoords;\n        if (rank > 4) {\n            throw Error(`Where for rank ${rank} is not yet supported`);\n        }\n        if (rank === 1) {\n            abCoords = `resRC`;\n            cCoords = `resRC`;\n        }\n        else {\n            const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n            const cCoordVars = [];\n            const abCoordVars = [];\n            for (let i = 0; i < shape.length; i++) {\n                abCoordVars.push(`${currentCoords[i]}`);\n                if (i < cRank) {\n                    cCoordVars.push(`${currentCoords[i]}`);\n                }\n            }\n            cCoords = cCoordVars.join();\n            abCoords = abCoordVars.join();\n        }\n        const dtype = getCoordsDataType(rank);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n    }\n}\n//# sourceMappingURL=select_gpu.js.map"]},"metadata":{},"sourceType":"module"}