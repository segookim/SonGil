{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3D(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      filter = inputs.filter;\n  var strides = attrs.strides,\n      pad = attrs.pad,\n      dilations = attrs.dilations;\n  assertNotComplex([x, filter], 'conv3d');\n  var convInfo = backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);\n  var filterDepth = convInfo.filterDepth,\n      filterHeight = convInfo.filterHeight,\n      filterWidth = convInfo.filterWidth,\n      dilationDepth = convInfo.dilationDepth,\n      dilationHeight = convInfo.dilationHeight,\n      dilationWidth = convInfo.dilationWidth,\n      padInfo = convInfo.padInfo;\n  var padFront = padInfo.front;\n  var padLeft = padInfo.left;\n  var padTop = padInfo.top;\n  var y = new TensorBuffer(convInfo.outShape, x.dtype);\n  var xVals = backend.data.get(x.dataId).values;\n  var wVals = backend.data.get(filter.dataId).values;\n  var yVals = y.values;\n  var xStrides = util.computeStrides(x.shape);\n  var filterStrides = util.computeStrides(filter.shape);\n\n  for (var b = 0; b < convInfo.batchSize; ++b) {\n    var xOffset1 = b * xStrides[0];\n    var yOffset1 = b * y.strides[0];\n\n    for (var yF = 0; yF < convInfo.outDepth; ++yF) {\n      var yOffset2 = yOffset1 + yF * y.strides[1];\n      var xFCorner = yF * convInfo.strideDepth - padFront;\n\n      for (var wF = 0; wF < filterDepth; ++wF) {\n        var xF = xFCorner + wF * dilationDepth;\n\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n\n        var wOffset1 = wF * filterStrides[0];\n        var xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (var yR = 0; yR < convInfo.outHeight; ++yR) {\n          var yOffset3 = yOffset2 + yR * y.strides[2];\n          var xRCorner = yR * convInfo.strideHeight - padTop;\n\n          for (var wR = 0; wR < filterHeight; ++wR) {\n            var xR = xRCorner + wR * dilationHeight;\n\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n\n            var wOffset2 = wOffset1 + wR * filterStrides[1];\n            var xOffset3 = xOffset2 + xR * xStrides[2];\n\n            for (var yC = 0; yC < convInfo.outWidth; ++yC) {\n              var yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              var xCCorner = yC * convInfo.strideWidth - padLeft;\n\n              for (var wC = 0; wC < filterWidth; ++wC) {\n                var xC = xCCorner + wC * dilationWidth;\n\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n\n                var wOffset3 = wOffset2 + wC * filterStrides[2];\n                var xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                var wOffset4 = wOffset3;\n\n                for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  var xVal = xVals[xOffset4 + d1];\n\n                  for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\nexport var conv3DConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D\n};","map":{"version":3,"sources":["../../src/kernels/Conv3D.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations } = attrs;\n    assertNotComplex([x, filter], 'conv3d');\n    const convInfo = backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);\n    const { filterDepth, filterHeight, filterWidth, dilationDepth, dilationHeight, dilationWidth, padInfo } = convInfo;\n    const padFront = padInfo.front;\n    const padLeft = padInfo.left;\n    const padTop = padInfo.top;\n    const y = new TensorBuffer(convInfo.outShape, x.dtype);\n    const xVals = backend.data.get(x.dataId).values;\n    const wVals = backend.data.get(filter.dataId).values;\n    const yVals = y.values;\n    const xStrides = util.computeStrides(x.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        const xOffset1 = b * xStrides[0];\n        const yOffset1 = b * y.strides[0];\n        for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n            const yOffset2 = yOffset1 + yF * y.strides[1];\n            const xFCorner = yF * convInfo.strideDepth - padFront;\n            for (let wF = 0; wF < filterDepth; ++wF) {\n                const xF = xFCorner + wF * dilationDepth;\n                if (xF < 0 || xF >= convInfo.inDepth) {\n                    continue;\n                }\n                const wOffset1 = wF * filterStrides[0];\n                const xOffset2 = xOffset1 + xF * xStrides[1];\n                for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                    const yOffset3 = yOffset2 + yR * y.strides[2];\n                    const xRCorner = yR * convInfo.strideHeight - padTop;\n                    for (let wR = 0; wR < filterHeight; ++wR) {\n                        const xR = xRCorner + wR * dilationHeight;\n                        if (xR < 0 || xR >= convInfo.inHeight) {\n                            continue;\n                        }\n                        const wOffset2 = wOffset1 + wR * filterStrides[1];\n                        const xOffset3 = xOffset2 + xR * xStrides[2];\n                        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                            const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n                            const xCCorner = yC * convInfo.strideWidth - padLeft;\n                            for (let wC = 0; wC < filterWidth; ++wC) {\n                                const xC = xCCorner + wC * dilationWidth;\n                                if (xC < 0 || xC >= convInfo.inWidth) {\n                                    continue;\n                                }\n                                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                                let wOffset4 = wOffset3;\n                                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                    const xVal = xVals[xOffset4 + d1];\n                                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                        yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                                    }\n                                    wOffset4 += convInfo.outChannels;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\nexport const conv3DConfig = {\n    kernelName: Conv3D,\n    backendName: 'cpu',\n    kernelFunc: conv3D\n};\n//# sourceMappingURL=Conv3D.js.map"]},"metadata":{},"sourceType":"module"}