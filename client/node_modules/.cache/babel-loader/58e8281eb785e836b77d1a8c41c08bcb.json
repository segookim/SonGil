{"ast":null,"code":"import _classCallCheck from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { RingBuffer } from './ring_buffer';\nexport var GrowingRingBuffer = /*#__PURE__*/function (_RingBuffer) {\n  _inherits(GrowingRingBuffer, _RingBuffer);\n\n  var _super = _createSuper(GrowingRingBuffer);\n\n  /**\n   * Constructs a `GrowingRingBuffer`.\n   */\n  function GrowingRingBuffer() {\n    _classCallCheck(this, GrowingRingBuffer);\n\n    return _super.call(this, GrowingRingBuffer.INITIAL_CAPACITY);\n  }\n\n  _createClass(GrowingRingBuffer, [{\n    key: \"isFull\",\n    value: function isFull() {\n      return false;\n    }\n  }, {\n    key: \"push\",\n    value: function push(value) {\n      if (_get(_getPrototypeOf(GrowingRingBuffer.prototype), \"isFull\", this).call(this)) {\n        this.expand();\n      }\n\n      _get(_getPrototypeOf(GrowingRingBuffer.prototype), \"push\", this).call(this, value);\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(value) {\n      if (_get(_getPrototypeOf(GrowingRingBuffer.prototype), \"isFull\", this).call(this)) {\n        this.expand();\n      }\n\n      _get(_getPrototypeOf(GrowingRingBuffer.prototype), \"unshift\", this).call(this, value);\n    }\n    /**\n     * Doubles the capacity of the buffer.\n     */\n\n  }, {\n    key: \"expand\",\n    value: function expand() {\n      var newCapacity = this.capacity * 2;\n      var newData = new Array(newCapacity);\n      var len = this.length(); // Rotate the buffer to start at index 0 again, since we can't just\n      // allocate more space at the end.\n\n      for (var i = 0; i < len; i++) {\n        newData[i] = this.get(this.wrap(this.begin + i));\n      }\n\n      this.data = newData;\n      this.capacity = newCapacity;\n      this.doubledCapacity = 2 * this.capacity;\n      this.begin = 0;\n      this.end = len;\n    }\n  }]);\n\n  return GrowingRingBuffer;\n}(RingBuffer);\nGrowingRingBuffer.INITIAL_CAPACITY = 32;","map":{"version":3,"sources":["../../src/util/growing_ring_buffer.ts"],"names":[],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,UAAR,QAAyB,eAAzB;AAEA,WAAa,iBAAb;AAAA;;AAAA;;AAGE;;AAEG;AACH,+BAAA;AAAA;;AAAA,6BACQ,iBAAiB,CAAC,gBAD1B;AAEC;;AARH;AAAA;AAAA,WAUE,kBAAM;AACJ,aAAO,KAAP;AACD;AAZH;AAAA;AAAA,WAcE,cAAK,KAAL,EAAa;AACX,yFAAoB;AAClB,aAAK,MAAL;AACD;;AACD,kFAAW,KAAX;AACD;AAnBH;AAAA;AAAA,WAqBE,iBAAQ,KAAR,EAAgB;AACd,yFAAoB;AAClB,aAAK,MAAL;AACD;;AACD,qFAAc,KAAd;AACD;AAED;;AAEG;;AA9BL;AAAA;AAAA,WA+BU,kBAAM;AACZ,UAAM,WAAW,GAAG,KAAK,QAAL,GAAgB,CAApC;AACA,UAAM,OAAO,GAAG,IAAI,KAAJ,CAAa,WAAb,CAAhB;AACA,UAAM,GAAG,GAAG,KAAK,MAAL,EAAZ,CAHY,CAKZ;AACA;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,CAAC,EAA1B,EAA8B;AAC5B,QAAA,OAAO,CAAC,CAAD,CAAP,GAAa,KAAK,GAAL,CAAS,KAAK,IAAL,CAAU,KAAK,KAAL,GAAa,CAAvB,CAAT,CAAb;AACD;;AAED,WAAK,IAAL,GAAY,OAAZ;AACA,WAAK,QAAL,GAAgB,WAAhB;AACA,WAAK,eAAL,GAAuB,IAAI,KAAK,QAAhC;AACA,WAAK,KAAL,GAAa,CAAb;AACA,WAAK,GAAL,GAAW,GAAX;AACD;AA/CH;;AAAA;AAAA,EAA0C,UAA1C;AACiB,iBAAA,CAAA,gBAAA,GAAmB,EAAnB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { RingBuffer } from './ring_buffer';\nexport class GrowingRingBuffer extends RingBuffer {\n    /**\n     * Constructs a `GrowingRingBuffer`.\n     */\n    constructor() {\n        super(GrowingRingBuffer.INITIAL_CAPACITY);\n    }\n    isFull() {\n        return false;\n    }\n    push(value) {\n        if (super.isFull()) {\n            this.expand();\n        }\n        super.push(value);\n    }\n    unshift(value) {\n        if (super.isFull()) {\n            this.expand();\n        }\n        super.unshift(value);\n    }\n    /**\n     * Doubles the capacity of the buffer.\n     */\n    expand() {\n        const newCapacity = this.capacity * 2;\n        const newData = new Array(newCapacity);\n        const len = this.length();\n        // Rotate the buffer to start at index 0 again, since we can't just\n        // allocate more space at the end.\n        for (let i = 0; i < len; i++) {\n            newData[i] = this.get(this.wrap(this.begin + i));\n        }\n        this.data = newData;\n        this.capacity = newCapacity;\n        this.doubledCapacity = 2 * this.capacity;\n        this.begin = 0;\n        this.end = len;\n    }\n}\nGrowingRingBuffer.INITIAL_CAPACITY = 32;\n//# sourceMappingURL=growing_ring_buffer.js.map"]},"metadata":{},"sourceType":"module"}