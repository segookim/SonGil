{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n/** Convenient class for storing tensor-related data. */\n\nexport class DataStorage {\n  constructor(backend, dataMover) {\n    this.backend = backend;\n    this.dataMover = dataMover;\n    this.data = new WeakMap();\n    this.dataIdsCount = 0;\n  }\n\n  get(dataId) {\n    if (!this.data.has(dataId)) {\n      this.dataMover.moveData(this.backend, dataId);\n    }\n\n    return this.data.get(dataId);\n  }\n\n  set(dataId, value) {\n    this.dataIdsCount++;\n    this.data.set(dataId, value);\n  }\n\n  has(dataId) {\n    return this.data.has(dataId);\n  }\n\n  delete(dataId) {\n    this.dataIdsCount--;\n    return this.data.delete(dataId);\n  }\n\n  numDataIds() {\n    return this.dataIdsCount;\n  }\n\n}\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\n\nexport class KernelBackend {\n  refCount(dataId) {\n    return notYetImplemented('refCount');\n  }\n\n  incRef(dataId) {\n    return notYetImplemented('incRef');\n  }\n\n  timerAvailable() {\n    return true;\n  }\n\n  time(f) {\n    return notYetImplemented('time');\n  }\n\n  read(dataId) {\n    return notYetImplemented('read');\n  }\n\n  readSync(dataId) {\n    return notYetImplemented('readSync');\n  }\n\n  numDataIds() {\n    return notYetImplemented('numDataIds');\n  }\n\n  disposeData(dataId, force) {\n    return notYetImplemented('disposeData');\n  }\n\n  write(values, shape, dtype) {\n    return notYetImplemented('write');\n  }\n\n  move(dataId, values, shape, dtype, refCount) {\n    return notYetImplemented('move');\n  }\n\n  memory() {\n    return notYetImplemented('memory');\n  }\n  /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n\n\n  floatPrecision() {\n    return notYetImplemented('floatPrecision');\n  }\n  /** Returns the smallest representable number.  */\n\n\n  epsilon() {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  dispose() {\n    return notYetImplemented('dispose');\n  }\n\n}\n\nfunction notYetImplemented(kernelName) {\n  throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` + `This kernel may not be supported by the tfjs backend you have chosen`);\n}","map":{"version":3,"sources":["../../src/backends/backend.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAKH,OAAO,MAAM,eAAe,GAAG,IAAxB;AACP,OAAO,MAAM,eAAe,GAAG,IAAxB;AAuBP;;AACA,OAAM,MAAO,WAAP,CAAkB;AAItB,EAAA,WAAA,CAAoB,OAApB,EAAoD,SAApD,EAAwE;AAApD,SAAA,OAAA,GAAA,OAAA;AAAgC,SAAA,SAAA,GAAA,SAAA;AAH5C,SAAA,IAAA,GAAO,IAAI,OAAJ,EAAP;AACA,SAAA,YAAA,GAAe,CAAf;AAEoE;;AAE5E,EAAA,GAAG,CAAC,MAAD,EAAe;AAChB,QAAI,CAAC,KAAK,IAAL,CAAU,GAAV,CAAc,MAAd,CAAL,EAA4B;AAC1B,WAAK,SAAL,CAAe,QAAf,CAAwB,KAAK,OAA7B,EAAsC,MAAtC;AACD;;AACD,WAAO,KAAK,IAAL,CAAU,GAAV,CAAc,MAAd,CAAP;AACD;;AAED,EAAA,GAAG,CAAC,MAAD,EAAiB,KAAjB,EAAyB;AAC1B,SAAK,YAAL;AACA,SAAK,IAAL,CAAU,GAAV,CAAc,MAAd,EAAsB,KAAtB;AACD;;AAED,EAAA,GAAG,CAAC,MAAD,EAAe;AAChB,WAAO,KAAK,IAAL,CAAU,GAAV,CAAc,MAAd,CAAP;AACD;;AAED,EAAA,MAAM,CAAC,MAAD,EAAe;AACnB,SAAK,YAAL;AACA,WAAO,KAAK,IAAL,CAAU,MAAV,CAAiB,MAAjB,CAAP;AACD;;AAED,EAAA,UAAU,GAAA;AACR,WAAO,KAAK,YAAZ;AACD;;AA7BqB;AA+CxB;;;;;AAKG;;AACH,OAAM,MAAO,aAAP,CAAoB;AACxB,EAAA,QAAQ,CAAC,MAAD,EAAe;AACrB,WAAO,iBAAiB,CAAC,UAAD,CAAxB;AACD;;AACD,EAAA,MAAM,CAAC,MAAD,EAAe;AACnB,WAAO,iBAAiB,CAAC,QAAD,CAAxB;AACD;;AACD,EAAA,cAAc,GAAA;AACZ,WAAO,IAAP;AACD;;AACD,EAAA,IAAI,CAAC,CAAD,EAAc;AAChB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CAAC,MAAD,EAAe;AACjB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,QAAQ,CAAC,MAAD,EAAe;AACrB,WAAO,iBAAiB,CAAC,UAAD,CAAxB;AACD;;AACD,EAAA,UAAU,GAAA;AACR,WAAO,iBAAiB,CAAC,YAAD,CAAxB;AACD;;AACD,EAAA,WAAW,CAAC,MAAD,EAAiB,KAAjB,EAAgC;AACzC,WAAO,iBAAiB,CAAC,aAAD,CAAxB;AACD;;AACD,EAAA,KAAK,CAAC,MAAD,EAAwB,KAAxB,EAAyC,KAAzC,EAAwD;AAC3D,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CACA,MADA,EACgB,MADhB,EACuC,KADvC,EACwD,KADxD,EAEA,QAFA,EAEgB;AAClB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,MAAM,GAAA;AACJ,WAAO,iBAAiB,CAAC,QAAD,CAAxB;AACD;AACD;;;AACA,EAAA,cAAc,GAAA;AACZ,WAAO,iBAAiB,CAAC,gBAAD,CAAxB;AACD;AACD;;;AACA,EAAA,OAAO,GAAA;AACL,WAAO,KAAK,cAAL,OAA0B,EAA1B,GAA+B,eAA/B,GAAiD,eAAxD;AACD;;AACD,EAAA,OAAO,GAAA;AACL,WAAO,iBAAiB,CAAC,SAAD,CAAxB;AACD;;AA9CuB;;AAiD1B,SAAS,iBAAT,CAA2B,UAA3B,EAA6C;AAC3C,QAAM,IAAI,KAAJ,CACF,IAAI,UAAU,sDAAd,GACA,sEAFE,CAAN;AAGD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n/** Convenient class for storing tensor-related data. */\nexport class DataStorage {\n    constructor(backend, dataMover) {\n        this.backend = backend;\n        this.dataMover = dataMover;\n        this.data = new WeakMap();\n        this.dataIdsCount = 0;\n    }\n    get(dataId) {\n        if (!this.data.has(dataId)) {\n            this.dataMover.moveData(this.backend, dataId);\n        }\n        return this.data.get(dataId);\n    }\n    set(dataId, value) {\n        this.dataIdsCount++;\n        this.data.set(dataId, value);\n    }\n    has(dataId) {\n        return this.data.has(dataId);\n    }\n    delete(dataId) {\n        this.dataIdsCount--;\n        return this.data.delete(dataId);\n    }\n    numDataIds() {\n        return this.dataIdsCount;\n    }\n}\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\nexport class KernelBackend {\n    refCount(dataId) {\n        return notYetImplemented('refCount');\n    }\n    incRef(dataId) {\n        return notYetImplemented('incRef');\n    }\n    timerAvailable() {\n        return true;\n    }\n    time(f) {\n        return notYetImplemented('time');\n    }\n    read(dataId) {\n        return notYetImplemented('read');\n    }\n    readSync(dataId) {\n        return notYetImplemented('readSync');\n    }\n    numDataIds() {\n        return notYetImplemented('numDataIds');\n    }\n    disposeData(dataId, force) {\n        return notYetImplemented('disposeData');\n    }\n    write(values, shape, dtype) {\n        return notYetImplemented('write');\n    }\n    move(dataId, values, shape, dtype, refCount) {\n        return notYetImplemented('move');\n    }\n    memory() {\n        return notYetImplemented('memory');\n    }\n    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n    floatPrecision() {\n        return notYetImplemented('floatPrecision');\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    dispose() {\n        return notYetImplemented('dispose');\n    }\n}\nfunction notYetImplemented(kernelName) {\n    throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` +\n        `This kernel may not be supported by the tfjs backend you have chosen`);\n}\n//# sourceMappingURL=backend.js.map"]},"metadata":{},"sourceType":"module"}