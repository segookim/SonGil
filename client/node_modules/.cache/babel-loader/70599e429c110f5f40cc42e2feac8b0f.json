{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { batchMatMul } from './BatchMatMul';\nexport function _fusedMatMul(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var a = inputs.a,\n      b = inputs.b,\n      bias = inputs.bias,\n      preluActivationWeights = inputs.preluActivationWeights;\n  var transposeA = attrs.transposeA,\n      transposeB = attrs.transposeB,\n      activation = attrs.activation,\n      leakyreluAlpha = attrs.leakyreluAlpha;\n  var current;\n  var addRes;\n  var activationRes;\n  var intermediates = [];\n  var matMulRes = batchMatMul({\n    inputs: {\n      a: a,\n      b: b\n    },\n    attrs: {\n      transposeA: transposeA,\n      transposeB: transposeB\n    },\n    backend: backend\n  });\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({\n      inputs: {\n        a: current,\n        b: bias\n      },\n      backend: backend\n    });\n    intermediates.push(current);\n    current = addRes;\n  }\n\n  if (activation) {\n    activationRes = applyActivation(backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (var _i = 0, _intermediates = intermediates; _i < _intermediates.length; _i++) {\n    var i = _intermediates[_i];\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\nexport var _fusedMatMulConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul\n};","map":{"version":3,"sources":["../../src/kernels/_FusedMatMul.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,QAAwG,uBAAxG;AAGA,SAAQ,eAAR,QAA8B,sBAA9B;AAEA,SAAQ,GAAR,QAAkB,OAAlB;AACA,SAAQ,WAAR,QAA0B,eAA1B;AAEA,OAAM,SAAU,YAAV,CAAuB,IAAvB,EAIL;AAAA,MACQ,MADR,GACkC,IADlC,CACQ,MADR;AAAA,MACgB,OADhB,GACkC,IADlC,CACgB,OADhB;AAAA,MACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,MAEQ,CAFR,GAE8C,MAF9C,CAEQ,CAFR;AAAA,MAEW,CAFX,GAE8C,MAF9C,CAEW,CAFX;AAAA,MAEc,IAFd,GAE8C,MAF9C,CAEc,IAFd;AAAA,MAEoB,sBAFpB,GAE8C,MAF9C,CAEoB,sBAFpB;AAAA,MAGQ,UAHR,GAG8D,KAH9D,CAGQ,UAHR;AAAA,MAGoB,UAHpB,GAG8D,KAH9D,CAGoB,UAHpB;AAAA,MAGgC,UAHhC,GAG8D,KAH9D,CAGgC,UAHhC;AAAA,MAG4C,cAH5C,GAG8D,KAH9D,CAG4C,cAH5C;AAKC,MAAI,OAAJ;AACA,MAAI,MAAJ;AACA,MAAI,aAAJ;AAEA,MAAM,aAAa,GAAiB,EAApC;AAEA,MAAM,SAAS,GACX,WAAW,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAD,CAAD;AAAI,MAAA,CAAC,EAAD;AAAJ,KAAT;AAAiB,IAAA,KAAK,EAAE;AAAC,MAAA,UAAU,EAAV,UAAD;AAAa,MAAA,UAAU,EAAV;AAAb,KAAxB;AAAkD,IAAA,OAAO,EAAP;AAAlD,GAAD,CADf;AAEA,EAAA,OAAO,GAAG,SAAV;;AAEA,MAAI,IAAJ,EAAU;AACR,IAAA,MAAM,GAAG,GAAG,CAAC;AAAC,MAAA,MAAM,EAAE;AAAC,QAAA,CAAC,EAAE,OAAJ;AAAa,QAAA,CAAC,EAAE;AAAhB,OAAT;AAAgC,MAAA,OAAO,EAAP;AAAhC,KAAD,CAAZ;AACA,IAAA,aAAa,CAAC,IAAd,CAAmB,OAAnB;AACA,IAAA,OAAO,GAAG,MAAV;AACD;;AACD,MAAI,UAAJ,EAAgB;AACd,IAAA,aAAa,GAAG,eAAe,CAC3B,OAD2B,EAClB,OADkB,EACT,UADS,EACG,sBADH,EAC2B,cAD3B,CAA/B;AAEA,IAAA,aAAa,CAAC,IAAd,CAAmB,OAAnB;AACA,IAAA,OAAO,GAAG,aAAV;AACD;;AAED,oCAAgB,aAAhB,oCAA+B;AAA1B,QAAM,CAAC,qBAAP;AACH,IAAA,OAAO,CAAC,6BAAR,CAAsC,CAAtC;AACD;;AAED,SAAO,OAAP;AACD;AAED,OAAO,IAAM,kBAAkB,GAAiB;AAC9C,EAAA,UAAU,EAAE,YADkC;AAE9C,EAAA,WAAW,EAAE,KAFiC;AAG9C,EAAA,UAAU,EAAE;AAHkC,CAAzC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { batchMatMul } from './BatchMatMul';\nexport function _fusedMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b, bias, preluActivationWeights } = inputs;\n    const { transposeA, transposeB, activation, leakyreluAlpha } = attrs;\n    let current;\n    let addRes;\n    let activationRes;\n    const intermediates = [];\n    const matMulRes = batchMatMul({ inputs: { a, b }, attrs: { transposeA, transposeB }, backend });\n    current = matMulRes;\n    if (bias) {\n        addRes = add({ inputs: { a: current, b: bias }, backend });\n        intermediates.push(current);\n        current = addRes;\n    }\n    if (activation) {\n        activationRes = applyActivation(backend, current, activation, preluActivationWeights, leakyreluAlpha);\n        intermediates.push(current);\n        current = activationRes;\n    }\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return current;\n}\nexport const _fusedMatMulConfig = {\n    kernelName: _FusedMatMul,\n    backendName: 'cpu',\n    kernelFunc: _fusedMatMul,\n};\n//# sourceMappingURL=_FusedMatMul.js.map"]},"metadata":{},"sourceType":"module"}