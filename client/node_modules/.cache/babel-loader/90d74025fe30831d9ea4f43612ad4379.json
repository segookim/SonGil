{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/**\n * A ring buffer, providing O(1) FIFO, LIFO, and related operations.\n */\nexport var RingBuffer = /*#__PURE__*/function () {\n  /**\n   * Constructs a `RingBuffer`.\n   * @param capacity The number of items that the buffer can accomodate.\n   */\n  function RingBuffer(capacity) {\n    _classCallCheck(this, RingBuffer);\n\n    this.capacity = capacity; // Note we store the indices in the range 0 <= index < 2*capacity.\n    // This allows us to distinguish the full from the empty case.\n    // See https://www.snellman.net/blog/archive/2016-12-13-ring-buffers/\n\n    this.begin = 0; // inclusive\n\n    this.end = 0; // exclusive\n\n    if (capacity == null) {\n      throw new RangeError('Can\\'t create a ring buffer of unknown capacity.');\n    }\n\n    if (capacity < 1) {\n      throw new RangeError('Can\\'t create ring buffer of capacity < 1.');\n    }\n\n    this.data = new Array(capacity);\n    this.doubledCapacity = 2 * capacity;\n  }\n  /**\n   * Map any index into the range 0 <= index < 2*capacity.\n   */\n\n\n  _createClass(RingBuffer, [{\n    key: \"wrap\",\n    value: function wrap(index) {\n      // don't trust % on negative numbers\n      while (index < 0) {\n        index += this.doubledCapacity;\n      }\n\n      return index % this.doubledCapacity;\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      if (index < 0) {\n        throw new RangeError('Can\\'t get item at a negative index.');\n      }\n\n      return this.data[index % this.capacity];\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      if (index < 0) {\n        throw new RangeError('Can\\'t set item at a negative index.');\n      }\n\n      this.data[index % this.capacity] = value;\n    }\n    /**\n     * Returns the current number of items in the buffer.\n     */\n\n  }, {\n    key: \"length\",\n    value: function length() {\n      var length = this.end - this.begin;\n\n      if (length < 0) {\n        length = this.doubledCapacity + length;\n      }\n\n      return length;\n    }\n    /**\n     * Reports whether the buffer is full.\n     * @returns true if the number of items in the buffer equals its capacity, and\n     *   false otherwise.\n     */\n\n  }, {\n    key: \"isFull\",\n    value: function isFull() {\n      return this.length() === this.capacity;\n    }\n    /**\n     * Reports whether the buffer is empty.\n     * @returns true if the number of items in the buffer equals zero, and\n     *   false otherwise.\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.length() === 0;\n    }\n    /**\n     * Adds an item to the end of the buffer.\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(value) {\n      if (this.isFull()) {\n        throw new RangeError('Ring buffer is full.');\n      }\n\n      this.set(this.end, value);\n      this.end = this.wrap(this.end + 1);\n    }\n    /**\n     * Adds many items to the end of the buffer, in order.\n     */\n\n  }, {\n    key: \"pushAll\",\n    value: function pushAll(values) {\n      var _iterator = _createForOfIteratorHelper(values),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var value = _step.value;\n          this.push(value);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Removes and returns the last item in the buffer.\n     */\n\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      if (this.isEmpty()) {\n        throw new RangeError('Ring buffer is empty.');\n      }\n\n      this.end = this.wrap(this.end - 1);\n      var result = this.get(this.end);\n      this.set(this.end, undefined);\n      return result;\n    }\n    /**\n     * Adds an item to the beginning of the buffer.\n     */\n\n  }, {\n    key: \"unshift\",\n    value: function unshift(value) {\n      if (this.isFull()) {\n        throw new RangeError('Ring buffer is full.');\n      }\n\n      this.begin = this.wrap(this.begin - 1);\n      this.set(this.begin, value);\n    }\n    /**\n     * Removes and returns the first item in the buffer.\n     */\n\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (this.isEmpty()) {\n        throw new RangeError('Ring buffer is empty.');\n      }\n\n      var result = this.get(this.begin);\n      this.set(this.begin, undefined);\n      this.begin = this.wrap(this.begin + 1);\n      return result;\n    }\n    /**\n     * Removes and returns a specific item in the buffer, and moves the last item\n     * to the vacated slot.  This is useful for implementing a shuffling stream.\n     * Note that this operation necessarily scrambles the original order.\n     *\n     * @param relativeIndex: the index of the item to remove, relative to the\n     *   first item in the buffer (e.g., hiding the ring nature of the underlying\n     *   storage).\n     */\n\n  }, {\n    key: \"shuffleExcise\",\n    value: function shuffleExcise(relativeIndex) {\n      if (this.isEmpty()) {\n        throw new RangeError('Ring buffer is empty.');\n      }\n\n      var index = this.wrap(this.begin + relativeIndex);\n      var result = this.get(index);\n      this.set(index, this.pop());\n      return result;\n    }\n  }]);\n\n  return RingBuffer;\n}();","map":{"version":3,"sources":["../../src/util/ring_buffer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n/**\n * A ring buffer, providing O(1) FIFO, LIFO, and related operations.\n */\nexport class RingBuffer {\n    /**\n     * Constructs a `RingBuffer`.\n     * @param capacity The number of items that the buffer can accomodate.\n     */\n    constructor(capacity) {\n        this.capacity = capacity;\n        // Note we store the indices in the range 0 <= index < 2*capacity.\n        // This allows us to distinguish the full from the empty case.\n        // See https://www.snellman.net/blog/archive/2016-12-13-ring-buffers/\n        this.begin = 0; // inclusive\n        this.end = 0; // exclusive\n        if (capacity == null) {\n            throw new RangeError('Can\\'t create a ring buffer of unknown capacity.');\n        }\n        if (capacity < 1) {\n            throw new RangeError('Can\\'t create ring buffer of capacity < 1.');\n        }\n        this.data = new Array(capacity);\n        this.doubledCapacity = 2 * capacity;\n    }\n    /**\n     * Map any index into the range 0 <= index < 2*capacity.\n     */\n    wrap(index) {\n        // don't trust % on negative numbers\n        while (index < 0) {\n            index += this.doubledCapacity;\n        }\n        return index % this.doubledCapacity;\n    }\n    get(index) {\n        if (index < 0) {\n            throw new RangeError('Can\\'t get item at a negative index.');\n        }\n        return this.data[index % this.capacity];\n    }\n    set(index, value) {\n        if (index < 0) {\n            throw new RangeError('Can\\'t set item at a negative index.');\n        }\n        this.data[index % this.capacity] = value;\n    }\n    /**\n     * Returns the current number of items in the buffer.\n     */\n    length() {\n        let length = this.end - this.begin;\n        if (length < 0) {\n            length = this.doubledCapacity + length;\n        }\n        return length;\n    }\n    /**\n     * Reports whether the buffer is full.\n     * @returns true if the number of items in the buffer equals its capacity, and\n     *   false otherwise.\n     */\n    isFull() {\n        return this.length() === this.capacity;\n    }\n    /**\n     * Reports whether the buffer is empty.\n     * @returns true if the number of items in the buffer equals zero, and\n     *   false otherwise.\n     */\n    isEmpty() {\n        return this.length() === 0;\n    }\n    /**\n     * Adds an item to the end of the buffer.\n     */\n    push(value) {\n        if (this.isFull()) {\n            throw new RangeError('Ring buffer is full.');\n        }\n        this.set(this.end, value);\n        this.end = this.wrap(this.end + 1);\n    }\n    /**\n     * Adds many items to the end of the buffer, in order.\n     */\n    pushAll(values) {\n        for (const value of values) {\n            this.push(value);\n        }\n    }\n    /**\n     * Removes and returns the last item in the buffer.\n     */\n    pop() {\n        if (this.isEmpty()) {\n            throw new RangeError('Ring buffer is empty.');\n        }\n        this.end = this.wrap(this.end - 1);\n        const result = this.get(this.end);\n        this.set(this.end, undefined);\n        return result;\n    }\n    /**\n     * Adds an item to the beginning of the buffer.\n     */\n    unshift(value) {\n        if (this.isFull()) {\n            throw new RangeError('Ring buffer is full.');\n        }\n        this.begin = this.wrap(this.begin - 1);\n        this.set(this.begin, value);\n    }\n    /**\n     * Removes and returns the first item in the buffer.\n     */\n    shift() {\n        if (this.isEmpty()) {\n            throw new RangeError('Ring buffer is empty.');\n        }\n        const result = this.get(this.begin);\n        this.set(this.begin, undefined);\n        this.begin = this.wrap(this.begin + 1);\n        return result;\n    }\n    /**\n     * Removes and returns a specific item in the buffer, and moves the last item\n     * to the vacated slot.  This is useful for implementing a shuffling stream.\n     * Note that this operation necessarily scrambles the original order.\n     *\n     * @param relativeIndex: the index of the item to remove, relative to the\n     *   first item in the buffer (e.g., hiding the ring nature of the underlying\n     *   storage).\n     */\n    shuffleExcise(relativeIndex) {\n        if (this.isEmpty()) {\n            throw new RangeError('Ring buffer is empty.');\n        }\n        const index = this.wrap(this.begin + relativeIndex);\n        const result = this.get(index);\n        this.set(index, this.pop());\n        return result;\n    }\n}\n//# sourceMappingURL=ring_buffer.js.map"]},"metadata":{},"sourceType":"module"}