{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AvgPool3DGrad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the backprop of a 3d avg pool.\n *\n * @param dy The dy error, of rank 5 of shape\n *     [batchSize, depth, height, width, channels].\n * assumed.\n * @param input The original input image, of rank 5 or rank4 of shape\n *     [batchSize, depth, height, width, channels].\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\n\nfunction avgPool3dGrad_(dy, input, filterSize, strides, pad, dimRoundingMode) {\n  var $dy = convertToTensor(dy, 'dy', 'avgPool3dGrad');\n  var $input = convertToTensor(input, 'input', 'avgPool3dGrad');\n  var dy5D = $dy;\n  var input5D = $input;\n  var reshapedTo5D = false;\n\n  if ($input.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);\n    input5D = reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]]);\n  }\n\n  util.assert(dy5D.rank === 5, function () {\n    return \"Error in avgPool3dGrad: dy must be rank 5 but got rank \" + \"\".concat(dy5D.rank, \".\");\n  });\n  util.assert(input5D.rank === 5, function () {\n    return \"Error in avgPool3dGrad: input must be rank 5 but got rank \" + \"\".concat(input5D.rank, \".\");\n  });\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), function () {\n      return \"Error in avgPool3dGrad: pad must be an integer when \" + \"using, dimRoundingMode \".concat(dimRoundingMode, \" but got pad \").concat(pad, \".\");\n    });\n  }\n\n  var inputs = {\n    dy: dy5D,\n    input: input5D\n  };\n  var attrs = {\n    filterSize: filterSize,\n    strides: strides,\n    pad: pad,\n    dimRoundingMode: dimRoundingMode\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  var res = ENGINE.runKernel(AvgPool3DGrad, inputs, attrs);\n\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n\n  return res;\n}\n\nexport var avgPool3dGrad = op({\n  avgPool3dGrad_: avgPool3dGrad_\n});","map":{"version":3,"sources":["../../src/ops/avg_pool_3d_grad.ts"],"names":[],"mappings":"AACA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,aAAR,QAAqE,iBAArE;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA;;;;;;;;;;;;;;;;;;;AAmBG;;AACH,SAAS,cAAT,CACI,EADJ,EACsB,KADtB,EAEI,UAFJ,EAGI,OAHJ,EAG8C,GAH9C,EAII,eAJJ,EAI4C;AAC1C,MAAM,GAAG,GAAG,eAAe,CAAC,EAAD,EAAK,IAAL,EAAW,eAAX,CAA3B;AACA,MAAM,MAAM,GAAG,eAAe,CAAC,KAAD,EAAQ,OAAR,EAAiB,eAAjB,CAA9B;AAEA,MAAI,IAAI,GAAG,GAAX;AACA,MAAI,OAAO,GAAG,MAAd;AACA,MAAI,YAAY,GAAG,KAAnB;;AAEA,MAAI,MAAM,CAAC,IAAP,KAAgB,CAApB,EAAuB;AACrB,IAAA,YAAY,GAAG,IAAf;AACA,IAAA,IAAI,GAAG,OAAO,CACV,GADU,EACL,CAAC,CAAD,EAAI,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAJ,EAAkB,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAlB,EAAgC,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAhC,EAA8C,GAAG,CAAC,KAAJ,CAAU,CAAV,CAA9C,CADK,CAAd;AAEA,IAAA,OAAO,GAAG,OAAO,CAAC,MAAD,EAAS,CACxB,CADwB,EACrB,MAAM,CAAC,KAAP,CAAa,CAAb,CADqB,EACJ,MAAM,CAAC,KAAP,CAAa,CAAb,CADI,EACa,MAAM,CAAC,KAAP,CAAa,CAAb,CADb,EAC8B,MAAM,CAAC,KAAP,CAAa,CAAb,CAD9B,CAAT,CAAjB;AAGD;;AAED,EAAA,IAAI,CAAC,MAAL,CACI,IAAI,CAAC,IAAL,KAAc,CADlB,EAEI;AAAA,WAAM,sEACC,IAAI,CAAC,IADN,MAAN;AAAA,GAFJ;AAIA,EAAA,IAAI,CAAC,MAAL,CACI,OAAO,CAAC,IAAR,KAAiB,CADrB,EAEI;AAAA,WAAM,yEACC,OAAO,CAAC,IADT,MAAN;AAAA,GAFJ;;AAKA,MAAI,eAAe,IAAI,IAAvB,EAA6B;AAC3B,IAAA,IAAI,CAAC,MAAL,CACI,IAAI,CAAC,KAAL,CAAW,GAAX,CADJ,EAEI;AAAA,aAAM,0FACwB,eADxB,0BACuD,GADvD,MAAN;AAAA,KAFJ;AAID;;AAED,MAAM,MAAM,GAAwB;AAAC,IAAA,EAAE,EAAE,IAAL;AAAW,IAAA,KAAK,EAAE;AAAlB,GAApC;AAEA,MAAM,KAAK,GAAuB;AAAC,IAAA,UAAU,EAAV,UAAD;AAAa,IAAA,OAAO,EAAP,OAAb;AAAsB,IAAA,GAAG,EAAH,GAAtB;AAA2B,IAAA,eAAe,EAAf;AAA3B,GAAlC,CAnC0C,CAqC1C;;AACA,MAAM,GAAG,GAAG,MAAM,CAAC,SAAP,CACI,aADJ,EACmB,MADnB,EAEI,KAFJ,CAAZ;;AAIA,MAAI,YAAJ,EAAkB;AAChB,WAAO,OAAO,CACH,GADG,EACE,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAD,EAAe,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAf,EAA6B,GAAG,CAAC,KAAJ,CAAU,CAAV,CAA7B,EAA2C,GAAG,CAAC,KAAJ,CAAU,CAAV,CAA3C,CADF,CAAd;AAGD;;AAED,SAAO,GAAP;AACD;;AAED,OAAO,IAAM,aAAa,GAAG,EAAE,CAAC;AAAC,EAAA,cAAc,EAAd;AAAD,CAAD,CAAxB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AvgPool3DGrad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the backprop of a 3d avg pool.\n *\n * @param dy The dy error, of rank 5 of shape\n *     [batchSize, depth, height, width, channels].\n * assumed.\n * @param input The original input image, of rank 5 or rank4 of shape\n *     [batchSize, depth, height, width, channels].\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction avgPool3dGrad_(dy, input, filterSize, strides, pad, dimRoundingMode) {\n    const $dy = convertToTensor(dy, 'dy', 'avgPool3dGrad');\n    const $input = convertToTensor(input, 'input', 'avgPool3dGrad');\n    let dy5D = $dy;\n    let input5D = $input;\n    let reshapedTo5D = false;\n    if ($input.rank === 4) {\n        reshapedTo5D = true;\n        dy5D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);\n        input5D = reshape($input, [\n            1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]\n        ]);\n    }\n    util.assert(dy5D.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ` +\n        `${dy5D.rank}.`);\n    util.assert(input5D.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ` +\n        `${input5D.rank}.`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in avgPool3dGrad: pad must be an integer when ` +\n            `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const inputs = { dy: dy5D, input: input5D };\n    const attrs = { filterSize, strides, pad, dimRoundingMode };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(AvgPool3DGrad, inputs, attrs);\n    if (reshapedTo5D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n    }\n    return res;\n}\nexport const avgPool3dGrad = op({ avgPool3dGrad_ });\n//# sourceMappingURL=avg_pool_3d_grad.js.map"]},"metadata":{},"sourceType":"module"}