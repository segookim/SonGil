{"ast":null,"code":"import _slicedToArray from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport function createVertexShader(gl) {\n  var glsl = getGlslDifferences();\n  var vertexShaderSource = \"\".concat(glsl.version, \"\\n    precision highp float;\\n    \").concat(glsl.attribute, \" vec3 clipSpacePos;\\n    \").concat(glsl.attribute, \" vec2 uv;\\n    \").concat(glsl.varyingVs, \" vec2 resultUV;\\n\\n    void main() {\\n      gl_Position = vec4(clipSpacePos, 1);\\n      resultUV = uv;\\n    }\");\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\nexport function createVertexBuffer(gl) {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  var vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\nexport function createIndexBuffer(gl) {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  var triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {\n  webgl_util.validateTextureSize(width, height);\n  var texture = webgl_util.createTexture(gl);\n  var tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, function () {\n    return gl.bindTexture(tex2d, texture);\n  });\n  webgl_util.callAndCheck(gl, function () {\n    return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  });\n  webgl_util.callAndCheck(gl, function () {\n    return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  });\n  webgl_util.callAndCheck(gl, function () {\n    return gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  });\n  webgl_util.callAndCheck(gl, function () {\n    return gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  });\n  webgl_util.callAndCheck(gl, function () {\n    return gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null);\n  });\n  webgl_util.callAndCheck(gl, function () {\n    return gl.bindTexture(gl.TEXTURE_2D, null);\n  });\n  return texture;\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(textureConfig) {\n  return textureConfig.internalFormatFloat;\n}\nexport function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {\n  var _tex_util$getUnpacked = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),\n      _tex_util$getUnpacked2 = _slicedToArray(_tex_util$getUnpacked, 2),\n      width = _tex_util$getUnpacked2[0],\n      height = _tex_util$getUnpacked2[1];\n\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16MatrixTexture(textureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\nexport function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {\n  var _tex_util$getUnpacked3 = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),\n      _tex_util$getUnpacked4 = _slicedToArray(_tex_util$getUnpacked3, 2),\n      width = _tex_util$getUnpacked4[0],\n      height = _tex_util$getUnpacked4[1];\n\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\nexport function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\nexport function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {\n  var _tex_util$getUnpacked5 = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),\n      _tex_util$getUnpacked6 = _slicedToArray(_tex_util$getUnpacked5, 2),\n      width = _tex_util$getUnpacked6[0],\n      height = _tex_util$getUnpacked6[1];\n\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);\n}\nexport function getInternalFormatForPackedMatrixTexture(textureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\nexport function createPackedMatrixTexture(gl, rows, columns, textureConfig) {\n  var _tex_util$getPackedMa = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),\n      _tex_util$getPackedMa2 = _slicedToArray(_tex_util$getPackedMa, 2),\n      width = _tex_util$getPackedMa2[0],\n      height = _tex_util$getPackedMa2[1];\n\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\nexport function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {\n  var _tex_util$getPackedMa3 = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),\n      _tex_util$getPackedMa4 = _slicedToArray(_tex_util$getPackedMa3, 2),\n      width = _tex_util$getPackedMa4[0],\n      height = _tex_util$getPackedMa4[1];\n\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\nexport function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n  var posOffset = 0; // x is the first buffer element\n\n  var uvOffset = 3 * 4; // uv comes after [x y z]\n\n  var stride = 3 * 4 + 2 * 4; // xyz + uv, each entry is 4-byte float.\n\n  webgl_util.callAndCheck(gl, function () {\n    return gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n  });\n  var success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success && webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nexport function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {\n  webgl_util.callAndCheck(gl, function () {\n    return gl.bindTexture(gl.TEXTURE_2D, texture);\n  });\n  var dataForUpload, texelDataType, internalFormat;\n\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n  webgl_util.callAndCheck(gl, function () {\n    return gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload);\n  });\n  webgl_util.callAndCheck(gl, function () {\n    return gl.bindTexture(gl.TEXTURE_2D, null);\n  });\n}\nexport function uploadPixelDataToTexture(gl, texture, pixels) {\n  webgl_util.callAndCheck(gl, function () {\n    return gl.bindTexture(gl.TEXTURE_2D, texture);\n  });\n\n  if (pixels.data instanceof Uint8Array) {\n    webgl_util.callAndCheck(gl, function () {\n      return gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data);\n    });\n  } else {\n    webgl_util.callAndCheck(gl, function () {\n      return gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    });\n  }\n\n  webgl_util.callAndCheck(gl, function () {\n    return gl.bindTexture(gl.TEXTURE_2D, null);\n  });\n}\nexport function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {\n  // Create and bind the buffer.\n  var buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(gl2, function () {\n    return gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  }); // Initialize the buffer to the size of the texture in bytes.\n\n  var bytesPerFloat = 4;\n  var valuesPerTexel = 4;\n  var bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n  webgl_util.callAndCheck(gl2, function () {\n    return gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ);\n  }); // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n\n  webgl_util.callAndCheck(gl2, function () {\n    return gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0);\n  });\n  webgl_util.callAndCheck(gl2, function () {\n    return gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n  });\n  return buffer;\n}\nexport function downloadFloat32MatrixFromBuffer(gl, buffer, size) {\n  var gl2 = gl;\n  var downloadTarget = new Float32Array(size);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n  return downloadTarget;\n}\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n  var _tex_util$getUnpacked7 = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),\n      _tex_util$getUnpacked8 = _slicedToArray(_tex_util$getUnpacked7, 2),\n      w = _tex_util$getUnpacked8[0],\n      h = _tex_util$getUnpacked8[1];\n\n  var numChannels = 4;\n  var downloadTarget = new Uint8Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n  webgl_util.callAndCheck(gl, function () {\n    return gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget);\n  }); // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n\n  return new Float32Array(downloadTarget.buffer);\n}\nexport function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {\n  var gl2 = gl;\n  var downloadTarget = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n  return downloadTarget;\n}\nexport function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {\n  var packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(gl, function () {\n    return gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA);\n  });\n  return packedRGBA;\n}","map":{"version":3,"sources":["../src/gpgpu_util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport function createVertexShader(gl) {\n    const glsl = getGlslDifferences();\n    const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n    return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\nexport function createVertexBuffer(gl) {\n    // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n    const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n    return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\nexport function createIndexBuffer(gl) {\n    // OpenGL (and WebGL) have \"CCW == front\" winding\n    const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n    return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\nfunction createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {\n    webgl_util.validateTextureSize(width, height);\n    const texture = webgl_util.createTexture(gl);\n    const tex2d = gl.TEXTURE_2D;\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n    webgl_util.callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n    return texture;\n}\nexport function getInternalFormatForFloat32MatrixTexture(textureConfig) {\n    return textureConfig.internalFormatFloat;\n}\nexport function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16MatrixTexture(textureConfig) {\n    return textureConfig.internalFormatHalfFloat;\n}\nexport function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\nexport function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {\n    return textureConfig.downloadTextureFormat;\n}\nexport function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);\n}\nexport function getInternalFormatForPackedMatrixTexture(textureConfig) {\n    return textureConfig.internalFormatPackedFloat;\n}\nexport function createPackedMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {\n    return textureConfig.internalFormatPackedHalfFloat;\n}\nexport function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\nexport function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n    const posOffset = 0; // x is the first buffer element\n    const uvOffset = 3 * 4; // uv comes after [x y z]\n    const stride = (3 * 4) + (2 * 4); // xyz + uv, each entry is 4-byte float.\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n    const success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n    return success &&\n        webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nexport function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n    let dataForUpload, texelDataType, internalFormat;\n    if (data instanceof Uint8Array) {\n        dataForUpload = new Uint8Array(width * height * 4);\n        texelDataType = gl.UNSIGNED_BYTE;\n        internalFormat = gl.RGBA;\n    }\n    else {\n        dataForUpload = new Float32Array(width * height * 4);\n        texelDataType = gl.FLOAT;\n        internalFormat = textureConfig.internalFormatPackedFloat;\n    }\n    dataForUpload.set(data);\n    webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function uploadPixelDataToTexture(gl, texture, pixels) {\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n    if (pixels.data instanceof Uint8Array) {\n        webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n    }\n    else {\n        webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n    }\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {\n    // Create and bind the buffer.\n    const buffer = gl2.createBuffer();\n    webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n    // Initialize the buffer to the size of the texture in bytes.\n    const bytesPerFloat = 4;\n    const valuesPerTexel = 4;\n    const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n    webgl_util.callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n    // Enqueue a command on the GPU command queue to copy of texture into the\n    // buffer.\n    webgl_util.callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n    webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n    return buffer;\n}\nexport function downloadFloat32MatrixFromBuffer(gl, buffer, size) {\n    const gl2 = gl;\n    const downloadTarget = new Float32Array(size);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n    return downloadTarget;\n}\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n    const [w, h] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    const numChannels = 4;\n    const downloadTarget = new Uint8Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n    webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget));\n    // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n    // decoding of the 4 bytes that back each 32 bit float.\n    return new Float32Array(downloadTarget.buffer);\n}\nexport function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {\n    const gl2 = gl;\n    const downloadTarget = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n    return downloadTarget;\n}\nexport function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {\n    const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n    webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n    return packedRGBA;\n}\n//# sourceMappingURL=gpgpu_util.js.map"]},"metadata":{},"sourceType":"module"}