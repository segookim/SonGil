{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core';\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\n\nexport class HashTable {\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(keyDType, valueDType) {\n    this.keyDType = keyDType;\n    this.valueDType = valueDType;\n    this.handle = scalar(0); // tslint:disable-next-line: no-any\n\n    this.tensorMap = new Map();\n    keep(this.handle);\n  }\n\n  get id() {\n    return this.handle.id;\n  }\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n\n\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n  /**\n   * The number of items in the hash table.\n   */\n\n\n  size() {\n    return this.tensorMap.size;\n  }\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n\n\n  async import(keys, values) {\n    this.checkKeyAndValueTensor(keys, values); // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n\n    const $keys = await keys.data(); // Clear the hashTable before inserting new values.\n\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    return tidy(() => {\n      const $values = unstack(values);\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n      util.assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ` + `${keysLength} elements, the values has ${valuesLength} ` + `elements.`);\n\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n\n      return this.handle;\n    });\n  }\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n\n\n  async find(keys, defaultValue) {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n    const $keys = await keys.data();\n    return tidy(() => {\n      const result = [];\n\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n\n      return stack(result);\n    });\n  } // tslint:disable-next-line: no-any\n\n\n  findWithDefault(key, defaultValue) {\n    const result = this.tensorMap.get(key);\n    return result != null ? result : defaultValue;\n  }\n\n  checkKeyAndValueTensor(key, value) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(`Expect key dtype ${this.keyDType}, but got ` + `${key.dtype}`);\n    }\n\n    if (value.dtype !== this.valueDType) {\n      throw new Error(`Expect value dtype ${this.valueDType}, but got ` + `${value.dtype}`);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../src/executor/hash_table.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core';\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n    /**\n     * Constructor of HashTable. Creates a hash table.\n     *\n     * @param keyDType `dtype` of the table keys.\n     * @param valueDType `dtype` of the table values.\n     */\n    constructor(keyDType, valueDType) {\n        this.keyDType = keyDType;\n        this.valueDType = valueDType;\n        this.handle = scalar(0);\n        // tslint:disable-next-line: no-any\n        this.tensorMap = new Map();\n        keep(this.handle);\n    }\n    get id() {\n        return this.handle.id;\n    }\n    /**\n     * Dispose the tensors and handle and clear the hashtable.\n     */\n    clearAndClose() {\n        this.tensorMap.forEach(value => value.dispose());\n        this.tensorMap.clear();\n        this.handle.dispose();\n    }\n    /**\n     * The number of items in the hash table.\n     */\n    size() {\n        return this.tensorMap.size;\n    }\n    /**\n     * Replaces the contents of the table with the specified keys and values.\n     * @param keys Keys to store in the hashtable.\n     * @param values Values to store in the hashtable.\n     */\n    async import(keys, values) {\n        this.checkKeyAndValueTensor(keys, values);\n        // We only store the primitive values of the keys, this allows lookup\n        // to be O(1).\n        const $keys = await keys.data();\n        // Clear the hashTable before inserting new values.\n        this.tensorMap.forEach(value => value.dispose());\n        this.tensorMap.clear();\n        return tidy(() => {\n            const $values = unstack(values);\n            const keysLength = $keys.length;\n            const valuesLength = $values.length;\n            util.assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ` +\n                `${keysLength} elements, the values has ${valuesLength} ` +\n                `elements.`);\n            for (let i = 0; i < keysLength; i++) {\n                const key = $keys[i];\n                const value = $values[i];\n                keep(value);\n                this.tensorMap.set(key, value);\n            }\n            return this.handle;\n        });\n    }\n    /**\n     * Looks up keys in a hash table, outputs the corresponding values.\n     *\n     * Performs batch lookups, for every element in the key tensor, `find`\n     * stacks the corresponding value into the return tensor.\n     *\n     * If an element is not present in the table, the given `defaultValue` is\n     * used.\n     *\n     * @param keys Keys to look up. Must have the same type as the keys of the\n     *     table.\n     * @param defaultValue The scalar `defaultValue` is the value output for keys\n     *     not present in the table. It must also be of the same type as the\n     *     table values.\n     */\n    async find(keys, defaultValue) {\n        this.checkKeyAndValueTensor(keys, defaultValue);\n        const $keys = await keys.data();\n        return tidy(() => {\n            const result = [];\n            for (let i = 0; i < $keys.length; i++) {\n                const key = $keys[i];\n                const value = this.findWithDefault(key, defaultValue);\n                result.push(value);\n            }\n            return stack(result);\n        });\n    }\n    // tslint:disable-next-line: no-any\n    findWithDefault(key, defaultValue) {\n        const result = this.tensorMap.get(key);\n        return result != null ? result : defaultValue;\n    }\n    checkKeyAndValueTensor(key, value) {\n        if (key.dtype !== this.keyDType) {\n            throw new Error(`Expect key dtype ${this.keyDType}, but got ` +\n                `${key.dtype}`);\n        }\n        if (value.dtype !== this.valueDType) {\n            throw new Error(`Expect value dtype ${this.valueDType}, but got ` +\n                `${value.dtype}`);\n        }\n    }\n}\n//# sourceMappingURL=hash_table.js.map"]},"metadata":{},"sourceType":"module"}