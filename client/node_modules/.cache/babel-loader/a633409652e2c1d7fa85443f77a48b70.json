{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\n\nexport function unaryKernelFunc(name, op, dtype) {\n  return ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    assertNotComplex(x, name);\n\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend;\n    const values = cpuBackend.data.get(x.dataId).values;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\n\nexport function unaryKernelFuncFromImpl(name, unaryImpl, dtype) {\n  return ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    assertNotComplex(x, name);\n\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend;\n    const values = cpuBackend.data.get(x.dataId).values;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}","map":{"version":3,"sources":["../../src/utils/unary_utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAuD,IAAvD,QAAkE,uBAAlE;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AAIA;;;;;;;AAOG;;AACH,OAAM,SAAU,eAAV,CACF,IADE,EACY,EADZ,EACsC,KADtC,EACsD;AAC1D,SAAO,CAAC;AAAC,IAAA,MAAD;AAAS,IAAA,KAAT;AAAgB,IAAA;AAAhB,GAAD,KAA6B;AAClC,UAAM;AAAC,MAAA;AAAD,QAAM,MAAZ;AACA,IAAA,gBAAgB,CAAC,CAAD,EAAI,IAAJ,CAAhB;;AACA,QAAI,CAAC,CAAC,KAAF,KAAY,QAAZ,IAAwB,KAAK,KAAK,QAAtC,EAAgD;AAC9C,YAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,UAAM,UAAU,GAAG,OAAnB;AACA,UAAM,MAAM,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,CAAC,CAAC,MAAtB,EAA8B,MAA7C;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,CAAd;AACA,UAAM,MAAM,GAAG,KAAK,IAAI,CAAC,CAAC,KAA1B;AACA,UAAM,SAAS,GAAG,IAAI,CAAC,iBAAL,CAAuB,MAAvB,EAA+B,KAA/B,CAAlB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,EAAE,CAA7B,EAAgC;AAC9B,MAAA,SAAS,CAAC,CAAD,CAAT,GAAe,EAAE,CAAC,MAAM,CAAC,CAAD,CAAP,EAAY,KAAZ,CAAjB;AACD;;AACD,WAAO,UAAU,CAAC,cAAX,CAA0B,CAAC,CAAC,KAA5B,EAAmC,MAAnC,EAA2C,SAA3C,CAAP;AACD,GAhBD;AAiBD;AAED;;;;;;;;AAQG;;AACH,OAAM,SAAU,uBAAV,CACF,IADE,EACY,SADZ,EACwC,KADxC,EACwD;AAC5D,SAAO,CAAC;AAAC,IAAA,MAAD;AAAS,IAAA,KAAT;AAAgB,IAAA;AAAhB,GAAD,KAA6B;AAClC,UAAM;AAAC,MAAA;AAAD,QAAM,MAAZ;AACA,IAAA,gBAAgB,CAAC,CAAD,EAAI,IAAJ,CAAhB;;AACA,QAAI,CAAC,CAAC,KAAF,KAAY,QAAZ,IAAwB,KAAK,KAAK,QAAtC,EAAgD;AAC9C,YAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,UAAM,UAAU,GAAG,OAAnB;AACA,UAAM,MAAM,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,CAAC,CAAC,MAAtB,EAA8B,MAA7C;AACA,UAAM,MAAM,GAAG,KAAK,IAAI,CAAC,CAAC,KAA1B;AACA,UAAM,SAAS,GAAG,SAAS,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,CAA3B;AACA,WAAO,UAAU,CAAC,cAAX,CAA0B,CAAC,CAAC,KAA5B,EAAmC,MAAnC,EAA2C,SAA3C,CAAP;AACD,GAZD;AAaD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(name, op, dtype) {\n    return ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        assertNotComplex(x, name);\n        if (x.dtype === 'string' || dtype === 'string') {\n            throw new Error('unaryKernelFunc does not support string input/output');\n        }\n        const cpuBackend = backend;\n        const values = cpuBackend.data.get(x.dataId).values;\n        const xSize = util.sizeFromShape(x.shape);\n        const $dtype = dtype || x.dtype;\n        const newValues = util.getArrayFromDType($dtype, xSize);\n        for (let i = 0; i < xSize; ++i) {\n            newValues[i] = op(values[i], attrs);\n        }\n        return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n    };\n}\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(name, unaryImpl, dtype) {\n    return ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        assertNotComplex(x, name);\n        if (x.dtype === 'string' || dtype === 'string') {\n            throw new Error('unaryKernelFunc does not support string input/output');\n        }\n        const cpuBackend = backend;\n        const values = cpuBackend.data.get(x.dataId).values;\n        const $dtype = dtype || x.dtype;\n        const newValues = unaryImpl(values, $dtype, attrs);\n        return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n    };\n}\n//# sourceMappingURL=unary_utils.js.map"]},"metadata":{},"sourceType":"module"}