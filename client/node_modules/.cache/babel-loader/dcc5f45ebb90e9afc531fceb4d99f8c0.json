{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { BaseConv, preprocessConv2DInput } from './convolutional';\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\n\nexport function depthwiseConv2d(x, depthwiseKernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat);\n    let y = preprocessConv2DInput(x, dataFormat);\n\n    if (x.rank !== 4) {\n      throw new ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ` + `${x.rank}-D`);\n    }\n\n    if (depthwiseKernel.rank !== 4) {\n      throw new ValueError(`depthwiseKernel is required to be 4-D, but is instead ` + `${depthwiseKernel.rank}-D`);\n    }\n\n    y = tfc.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n\n    return y;\n  });\n}\nexport class DepthwiseConv2D extends BaseConv {\n  constructor(args) {\n    super(2, args);\n    this.depthwiseKernel = null;\n    this.depthMultiplier = args.depthMultiplier == null ? 1 : args.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n    this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length < 4) {\n      throw new ValueError(`Inputs to DepthwiseConv2D should have rank 4. ` + `Received input shape: ${JSON.stringify(inputShape)}.`);\n    }\n\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' + `be defined, but is not (${inputShape[channelAxis]}).`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape = [this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier];\n    this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs = depthwiseConv2d(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null); // TODO(cais): Add support for dilation.\n\n      if (this.useBias) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    const cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    const outFilters = this.dataFormat === 'channelsFirst' ? inputShape[1] * this.depthMultiplier : inputShape[3] * this.depthMultiplier;\n    const outRows = convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);\n    const outCols = convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);\n\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], outFilters, outRows, outCols];\n    } else {\n      // In this case, assume 'channelsLast'.\n      return [inputShape[0], outRows, outCols, outFilters];\n    }\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    config['depthMultiplier'] = this.depthMultiplier;\n    config['depthwiseInitializer'] = serializeInitializer(this.depthwiseInitializer);\n    config['depthwiseRegularizer'] = serializeRegularizer(this.depthwiseRegularizer);\n    config['depthwiseConstraint'] = serializeConstraint(this.depthwiseRegularizer);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nDepthwiseConv2D.className = 'DepthwiseConv2D';\nserialization.registerClass(DepthwiseConv2D);","map":{"version":3,"sources":["../../src/layers/convolutional_depthwise.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { BaseConv, preprocessConv2DInput } from './convolutional';\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\nexport function depthwiseConv2d(x, depthwiseKernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        let y = preprocessConv2DInput(x, dataFormat);\n        if (x.rank !== 4) {\n            throw new ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ` +\n                `${x.rank}-D`);\n        }\n        if (depthwiseKernel.rank !== 4) {\n            throw new ValueError(`depthwiseKernel is required to be 4-D, but is instead ` +\n                `${depthwiseKernel.rank}-D`);\n        }\n        y = tfc.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]);\n        }\n        return y;\n    });\n}\nexport class DepthwiseConv2D extends BaseConv {\n    constructor(args) {\n        super(2, args);\n        this.depthwiseKernel = null;\n        this.depthMultiplier =\n            args.depthMultiplier == null ? 1 : args.depthMultiplier;\n        this.depthwiseInitializer = getInitializer(args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n        this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length < 4) {\n            throw new ValueError(`Inputs to DepthwiseConv2D should have rank 4. ` +\n                `Received input shape: ${JSON.stringify(inputShape)}.`);\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' +\n                `be defined, but is not (${inputShape[channelAxis]}).`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const depthwiseKernelShape = [\n            this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier\n        ];\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            let outputs = depthwiseConv2d(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);\n            // TODO(cais): Add support for dilation.\n            if (this.useBias) {\n                outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation != null) {\n                outputs = this.activation.apply(outputs);\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        const cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        const outFilters = this.dataFormat === 'channelsFirst' ?\n            inputShape[1] * this.depthMultiplier :\n            inputShape[3] * this.depthMultiplier;\n        const outRows = convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);\n        const outCols = convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], outFilters, outRows, outCols];\n        }\n        else {\n            // In this case, assume 'channelsLast'.\n            return [inputShape[0], outRows, outCols, outFilters];\n        }\n    }\n    getConfig() {\n        const config = super.getConfig();\n        config['depthMultiplier'] = this.depthMultiplier;\n        config['depthwiseInitializer'] =\n            serializeInitializer(this.depthwiseInitializer);\n        config['depthwiseRegularizer'] =\n            serializeRegularizer(this.depthwiseRegularizer);\n        config['depthwiseConstraint'] =\n            serializeConstraint(this.depthwiseRegularizer);\n        return config;\n    }\n}\n/** @nocollapse */\nDepthwiseConv2D.className = 'DepthwiseConv2D';\nserialization.registerClass(DepthwiseConv2D);\n//# sourceMappingURL=convolutional_depthwise.js.map"]},"metadata":{},"sourceType":"module"}