{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ReversePackedProgram {\n  constructor(xShape, axis) {\n    this.variableNames = ['x'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    const rank = xShape.length;\n\n    if (rank > 4) {\n      throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn = `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels) {\n      return getChannel(channels);\n    }\n\n    function getG(channels) {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels) {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels) {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels) {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i, channels1) {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["../src/reverse_packed_gpu.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ReversePackedProgram {\n    constructor(xShape, axis) {\n        this.variableNames = ['x'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const rank = xShape.length;\n        if (rank > 4) {\n            throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n        }\n        this.outputShape = xShape;\n        const channels = getChannels('rc', rank);\n        const nextColumn = `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n        const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n        const type = getCoordsDataType(rank);\n        if (rank === 1) {\n            this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n        }\n        else {\n            this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n        }\n        function getR(channels) {\n            return getChannel(channels);\n        }\n        function getG(channels) {\n            channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getB(channels) {\n            channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getA(channels) {\n            channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n            channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getChannel(channels) {\n            const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n            const inCoords = inCoordsArray.join(',');\n            const innerDims = inCoordsArray.slice(-2).join(',');\n            return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n        }\n        function getInCoord(i, channels1) {\n            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n                return `${xShape[i]} - ${channels1[i]} - 1`;\n            }\n            else {\n                return `${channels1[i]}`;\n            }\n        }\n    }\n}\n//# sourceMappingURL=reverse_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}