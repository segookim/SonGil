{"ast":null,"code":"import { getCoordsDataType } from './shader_compiler';\nexport class GatherNDProgram {\n  constructor(sliceDim, strides, shape) {\n    this.sliceDim = sliceDim;\n    this.strides = strides;\n    this.variableNames = ['x', 'indices'];\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n\n}","map":{"version":3,"sources":["../src/gather_nd_gpu.ts"],"names":[],"mappings":"AAiBA,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAO,eAAP,CAAsB;AAI1B,EAAA,WAAA,CACY,QADZ,EACsC,OADtC,EACyD,KADzD,EACwE;AAA5D,SAAA,QAAA,GAAA,QAAA;AAA0B,SAAA,OAAA,GAAA,OAAA;AAJtC,SAAA,aAAA,GAAgB,CAAC,GAAD,EAAM,SAAN,CAAhB;AAKE,SAAK,WAAL,GAAmB,KAAnB;AACA,UAAM,WAAW,GAAG,iBAAiB,CAAC,OAAO,CAAC,MAAT,CAArC;AACA,UAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC,MAAP,CAA/B;AACA,UAAM,YAAY,GAAG,KAAK,QAAL,GAAgB,CAAhB,GAAoB,YAApB,GAAmC,SAAxD;AACA,SAAK,QAAL,GAAgB;UACV,WAAW,cAAc,WAAW,IAAI,KAAK,OAAO;;YAElD,KAAK;;gCAEe,KAAK,QAAQ;;sCAEP,YAAY;;;;AAI3C,OAXH;AAYD;;AAtByB","sourceRoot":"","sourcesContent":["import { getCoordsDataType } from './shader_compiler';\nexport class GatherNDProgram {\n    constructor(sliceDim, strides, shape) {\n        this.sliceDim = sliceDim;\n        this.strides = strides;\n        this.variableNames = ['x', 'indices'];\n        this.outputShape = shape;\n        const stridesType = getCoordsDataType(strides.length);\n        const dtype = getCoordsDataType(shape.length);\n        const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n        this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n    }\n}\n//# sourceMappingURL=gather_nd_gpu.js.map"]},"metadata":{},"sourceType":"module"}