{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { isTypedArray } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.scalar` as it makes the code more readable.\n *\n * ```js\n * tf.scalar(3.14).print();\n * ```\n *\n * @param value The value of the scalar.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\n\nexport function scalar(value, dtype) {\n  if ((isTypedArray(value) && dtype !== 'string' || Array.isArray(value)) && dtype !== 'complex64') {\n    throw new Error('Error creating a new Scalar: value must be a primitive ' + '(number|boolean|string)');\n  }\n\n  if (dtype === 'string' && isTypedArray(value) && !(value instanceof Uint8Array)) {\n    throw new Error('When making a scalar from encoded string, ' + 'the value must be `Uint8Array`.');\n  }\n\n  const shape = [];\n  const inferredShape = [];\n  return makeTensor(value, shape, inferredShape, dtype);\n}","map":{"version":3,"sources":["../../src/ops/scalar.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAIH,SAAQ,YAAR,QAA2B,SAA3B;AACA,SAAQ,UAAR,QAAyB,mBAAzB;AAEA;;;;;;;;;;;;;;AAcG;;AACH,OAAM,SAAU,MAAV,CACF,KADE,EACuC,KADvC,EACuD;AAC3D,MAAI,CAAE,YAAY,CAAC,KAAD,CAAZ,IAAuB,KAAK,KAAK,QAAlC,IAA+C,KAAK,CAAC,OAAN,CAAc,KAAd,CAAhD,KACA,KAAK,KAAK,WADd,EAC2B;AACzB,UAAM,IAAI,KAAJ,CACF,4DACA,yBAFE,CAAN;AAGD;;AACD,MAAI,KAAK,KAAK,QAAV,IAAsB,YAAY,CAAC,KAAD,CAAlC,IACA,EAAE,KAAK,YAAY,UAAnB,CADJ,EACoC;AAClC,UAAM,IAAI,KAAJ,CACF,+CACA,iCAFE,CAAN;AAGD;;AACD,QAAM,KAAK,GAAa,EAAxB;AACA,QAAM,aAAa,GAAa,EAAhC;AACA,SAAO,UAAU,CAAC,KAAD,EAAQ,KAAR,EAAe,aAAf,EAA8B,KAA9B,CAAjB;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { isTypedArray } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.scalar` as it makes the code more readable.\n *\n * ```js\n * tf.scalar(3.14).print();\n * ```\n *\n * @param value The value of the scalar.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function scalar(value, dtype) {\n    if (((isTypedArray(value) && dtype !== 'string') || Array.isArray(value)) &&\n        dtype !== 'complex64') {\n        throw new Error('Error creating a new Scalar: value must be a primitive ' +\n            '(number|boolean|string)');\n    }\n    if (dtype === 'string' && isTypedArray(value) &&\n        !(value instanceof Uint8Array)) {\n        throw new Error('When making a scalar from encoded string, ' +\n            'the value must be `Uint8Array`.');\n    }\n    const shape = [];\n    const inferredShape = [];\n    return makeTensor(value, shape, inferredShape, dtype);\n}\n//# sourceMappingURL=scalar.js.map"]},"metadata":{},"sourceType":"module"}