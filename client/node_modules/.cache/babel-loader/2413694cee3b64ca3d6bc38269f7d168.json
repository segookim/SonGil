{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV5Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { tensor1d } from '../tensor1d';\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (c.f.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\n\nfunction nonMaxSuppressionWithScoreAsync_(_x, _x2, _x3) {\n  return _nonMaxSuppressionWithScoreAsync_.apply(this, arguments);\n}\n\nfunction _nonMaxSuppressionWithScoreAsync_() {\n  _nonMaxSuppressionWithScoreAsync_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(boxes, scores, maxOutputSize) {\n    var iouThreshold,\n        scoreThreshold,\n        softNmsSigma,\n        $boxes,\n        $scores,\n        params,\n        boxesAndScores,\n        boxesVals,\n        scoresVals,\n        _nonMaxSuppressionV5I,\n        selectedIndices,\n        selectedScores,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            iouThreshold = _args.length > 3 && _args[3] !== undefined ? _args[3] : 0.5;\n            scoreThreshold = _args.length > 4 && _args[4] !== undefined ? _args[4] : Number.NEGATIVE_INFINITY;\n            softNmsSigma = _args.length > 5 && _args[5] !== undefined ? _args[5] : 0.0;\n            $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n            $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n            params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n            maxOutputSize = params.maxOutputSize;\n            iouThreshold = params.iouThreshold;\n            scoreThreshold = params.scoreThreshold;\n            softNmsSigma = params.softNmsSigma;\n            _context.next = 12;\n            return Promise.all([$boxes.data(), $scores.data()]);\n\n          case 12:\n            boxesAndScores = _context.sent;\n            boxesVals = boxesAndScores[0];\n            scoresVals = boxesAndScores[1]; // We call a cpu based impl directly with the typedarray data  here rather\n            // than a kernel because all kernels are synchronous (and thus cannot await\n            // .data()).\n\n            _nonMaxSuppressionV5I = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma), selectedIndices = _nonMaxSuppressionV5I.selectedIndices, selectedScores = _nonMaxSuppressionV5I.selectedScores;\n\n            if ($boxes !== boxes) {\n              $boxes.dispose();\n            }\n\n            if ($scores !== scores) {\n              $scores.dispose();\n            }\n\n            return _context.abrupt(\"return\", {\n              selectedIndices: tensor1d(selectedIndices, 'int32'),\n              selectedScores: tensor1d(selectedScores)\n            });\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _nonMaxSuppressionWithScoreAsync_.apply(this, arguments);\n}\n\nexport var nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;","map":{"version":3,"sources":["../../../src/ops/image/non_max_suppression_with_score_async.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,uBAAR,QAAsC,yCAAtC;AAGA,SAAQ,eAAR,QAA8B,uBAA9B;AAEA,SAAQ,qBAAR,QAAoC,gBAApC;AACA,SAAQ,QAAR,QAAuB,aAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BG;;SACY,gC;;;;;+FAAf,iBACI,KADJ,EACgC,MADhC,EAEI,aAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAE2B,YAAA,YAF3B,2DAE0C,GAF1C;AAGI,YAAA,cAHJ,2DAGqB,MAAM,CAAC,iBAH5B;AAII,YAAA,YAJJ,2DAImB,GAJnB;AAKQ,YAAA,MALR,GAKiB,eAAe,CAAC,KAAD,EAAQ,OAAR,EAAiB,wBAAjB,CALhC;AAMQ,YAAA,OANR,GAMkB,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,wBAAnB,CANjC;AAQQ,YAAA,MARR,GAQiB,qBAAqB,CAChC,MADgC,EACxB,OADwB,EACf,aADe,EACA,YADA,EACc,cADd,EAEhC,YAFgC,CARtC;AAWE,YAAA,aAAa,GAAG,MAAM,CAAC,aAAvB;AACA,YAAA,YAAY,GAAG,MAAM,CAAC,YAAtB;AACA,YAAA,cAAc,GAAG,MAAM,CAAC,cAAxB;AACA,YAAA,YAAY,GAAG,MAAM,CAAC,YAAtB;AAdF;AAAA,mBAgB+B,OAAO,CAAC,GAAR,CAAY,CAAC,MAAM,CAAC,IAAP,EAAD,EAAgB,OAAO,CAAC,IAAR,EAAhB,CAAZ,CAhB/B;;AAAA;AAgBQ,YAAA,cAhBR;AAiBQ,YAAA,SAjBR,GAiBoB,cAAc,CAAC,CAAD,CAjBlC;AAkBQ,YAAA,UAlBR,GAkBqB,cAAc,CAAC,CAAD,CAlBnC,EAoBE;AACA;AACA;;AAtBF,oCAuB4C,uBAAuB,CAC7D,SAD6D,EAClD,UADkD,EACtC,aADsC,EACvB,YADuB,EACT,cADS,EAE7D,YAF6D,CAvBnE,EAuBS,eAvBT,yBAuBS,eAvBT,EAuB0B,cAvB1B,yBAuB0B,cAvB1B;;AA2BE,gBAAI,MAAM,KAAK,KAAf,EAAsB;AACpB,cAAA,MAAM,CAAC,OAAP;AACD;;AACD,gBAAI,OAAO,KAAK,MAAhB,EAAwB;AACtB,cAAA,OAAO,CAAC,OAAR;AACD;;AAhCH,6CAkCS;AACL,cAAA,eAAe,EAAE,QAAQ,CAAC,eAAD,EAAkB,OAAlB,CADpB;AAEL,cAAA,cAAc,EAAE,QAAQ,CAAC,cAAD;AAFnB,aAlCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAwCA,OAAO,IAAM,+BAA+B,GAAG,gCAAxC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV5Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { tensor1d } from '../tensor1d';\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (c.f.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionWithScoreAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n    maxOutputSize = params.maxOutputSize;\n    iouThreshold = params.iouThreshold;\n    scoreThreshold = params.scoreThreshold;\n    softNmsSigma = params.softNmsSigma;\n    const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n    const boxesVals = boxesAndScores[0];\n    const scoresVals = boxesAndScores[1];\n    // We call a cpu based impl directly with the typedarray data  here rather\n    // than a kernel because all kernels are synchronous (and thus cannot await\n    // .data()).\n    const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n    if ($boxes !== boxes) {\n        $boxes.dispose();\n    }\n    if ($scores !== scores) {\n        $scores.dispose();\n    }\n    return {\n        selectedIndices: tensor1d(selectedIndices, 'int32'),\n        selectedScores: tensor1d(selectedScores)\n    };\n}\nexport const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;\n//# sourceMappingURL=non_max_suppression_with_score_async.js.map"]},"metadata":{},"sourceType":"module"}