{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/callbacks.py */\nimport { BaseCallback } from './base_callbacks';\nimport { LayersModel } from './engine/training';\nimport { NotImplementedError } from './errors';\nimport { resolveScalarsInLogs } from './logs';\nexport class Callback extends BaseCallback {\n  constructor() {\n    super(...arguments);\n    /** Instance of `keras.models.Model`. Reference of the model being trained. */\n\n    this.model = null;\n  }\n\n  setModel(model) {\n    if (!(model instanceof LayersModel)) {\n      throw new Error('model must be a LayersModel, not some other Container');\n    }\n\n    this.model = model;\n  }\n\n}\n\nfunction less(currVal, prevVal) {\n  return currVal < prevVal;\n}\n\nfunction greater(currVal, prevVal) {\n  return currVal > prevVal;\n}\n/**\n * A Callback that stops training when a monitored quantity has stopped\n * improving.\n */\n\n\nexport class EarlyStopping extends Callback {\n  constructor(args) {\n    super();\n\n    if (args == null) {\n      args = {};\n    }\n\n    if (args.restoreBestWeights) {\n      throw new NotImplementedError('restoreBestWeights = True is not implemented in EarlyStopping yet.');\n    }\n\n    this.monitor = args.monitor || 'val_loss';\n    this.minDelta = Math.abs(args.minDelta || 0);\n    this.patience = args.patience || 0;\n    this.verbose = args.verbose || 0;\n    this.mode = args.mode || 'auto';\n    this.baseline = args.baseline;\n\n    if (['auto', 'min', 'max'].indexOf(this.mode) === -1) {\n      console.warn(`EarlyStopping mode '${this.mode}' is invalid. ` + `Falling back to mode 'auto'.`);\n      this.mode = 'auto';\n    }\n\n    if (this.mode === 'min') {\n      this.monitorFunc = less;\n    } else if (this.mode === 'max') {\n      this.monitorFunc = greater;\n    } else {\n      // For mode === 'auto'.\n      if (this.monitor.indexOf('acc') !== -1) {\n        this.monitorFunc = greater;\n      } else {\n        this.monitorFunc = less;\n      }\n    }\n\n    if (this.monitorFunc === less) {\n      this.minDelta *= -1;\n    }\n  }\n\n  async onTrainBegin(logs) {\n    this.wait = 0;\n    this.stoppedEpoch = 0;\n\n    if (this.baseline != null) {\n      this.best = this.baseline;\n    } else {\n      this.best = this.monitorFunc === less ? Infinity : -Infinity;\n    }\n  }\n\n  async onEpochEnd(epoch, logs) {\n    await resolveScalarsInLogs(logs);\n    const current = this.getMonitorValue(logs);\n\n    if (current == null) {\n      return;\n    }\n\n    if (this.monitorFunc(current - this.minDelta, this.best)) {\n      this.best = current;\n      this.wait = 0; // TODO(cais): Logic for restoreBestWeights.\n    } else {\n      this.wait++;\n\n      if (this.wait >= this.patience) {\n        this.stoppedEpoch = epoch;\n        this.model.stopTraining = true;\n      } // TODO(cais): Logic for restoreBestWeights.\n\n    }\n  }\n\n  async onTrainEnd(logs) {\n    if (this.stoppedEpoch > 0 && this.verbose) {\n      console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);\n    }\n  }\n\n  getMonitorValue(logs) {\n    if (logs == null) {\n      logs = {};\n    }\n\n    const monitorValue = logs[this.monitor];\n\n    if (monitorValue == null) {\n      console.warn(`Metric for EarlyStopping ${this.monitor} is not available. ` + `Available metrics are: ${Object.keys(logs)}`);\n    }\n\n    return monitorValue;\n  }\n\n}\n/**\n * Factory function for a Callback that stops training when a monitored\n * quantity has stopped improving.\n *\n * Early stopping is a type of regularization, and protects model against\n * overfitting.\n *\n * The following example based on fake data illustrates how this callback\n * can be used during `tf.LayersModel.fit()`:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense({\n *   units: 3,\n *   activation: 'softmax',\n *   kernelInitializer: 'ones',\n *   inputShape: [2]\n * }));\n * const xs = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const ys = tf.tensor2d([[1, 0, 0], [0, 1, 0]], [2, 3]);\n * const xsVal = tf.tensor2d([4, 3, 2, 1], [2, 2]);\n * const ysVal = tf.tensor2d([[0, 0, 1], [0, 1, 0]], [2, 3]);\n * model.compile(\n *     {loss: 'categoricalCrossentropy', optimizer: 'sgd', metrics: ['acc']});\n *\n * // Without the EarlyStopping callback, the val_acc value would be:\n * //   0.5, 0.5, 0.5, 0.5, ...\n * // With val_acc being monitored, training should stop after the 2nd epoch.\n * const history = await model.fit(xs, ys, {\n *   epochs: 10,\n *   validationData: [xsVal, ysVal],\n *   callbacks: tf.callbacks.earlyStopping({monitor: 'val_acc'})\n * });\n *\n * // Expect to see a length-2 array.\n * console.log(history.history.val_acc);\n * ```\n *\n * @doc {\n *   heading: 'Callbacks',\n *   namespace: 'callbacks'\n * }\n */\n\nexport function earlyStopping(args) {\n  return new EarlyStopping(args);\n}\nexport const callbacks = {\n  earlyStopping\n};","map":{"version":3,"sources":["../src/callbacks.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/callbacks.py */\nimport { BaseCallback } from './base_callbacks';\nimport { LayersModel } from './engine/training';\nimport { NotImplementedError } from './errors';\nimport { resolveScalarsInLogs } from './logs';\nexport class Callback extends BaseCallback {\n    constructor() {\n        super(...arguments);\n        /** Instance of `keras.models.Model`. Reference of the model being trained. */\n        this.model = null;\n    }\n    setModel(model) {\n        if (!(model instanceof LayersModel)) {\n            throw new Error('model must be a LayersModel, not some other Container');\n        }\n        this.model = model;\n    }\n}\nfunction less(currVal, prevVal) {\n    return currVal < prevVal;\n}\nfunction greater(currVal, prevVal) {\n    return currVal > prevVal;\n}\n/**\n * A Callback that stops training when a monitored quantity has stopped\n * improving.\n */\nexport class EarlyStopping extends Callback {\n    constructor(args) {\n        super();\n        if (args == null) {\n            args = {};\n        }\n        if (args.restoreBestWeights) {\n            throw new NotImplementedError('restoreBestWeights = True is not implemented in EarlyStopping yet.');\n        }\n        this.monitor = args.monitor || 'val_loss';\n        this.minDelta = Math.abs(args.minDelta || 0);\n        this.patience = args.patience || 0;\n        this.verbose = args.verbose || 0;\n        this.mode = args.mode || 'auto';\n        this.baseline = args.baseline;\n        if (['auto', 'min', 'max'].indexOf(this.mode) === -1) {\n            console.warn(`EarlyStopping mode '${this.mode}' is invalid. ` +\n                `Falling back to mode 'auto'.`);\n            this.mode = 'auto';\n        }\n        if (this.mode === 'min') {\n            this.monitorFunc = less;\n        }\n        else if (this.mode === 'max') {\n            this.monitorFunc = greater;\n        }\n        else {\n            // For mode === 'auto'.\n            if (this.monitor.indexOf('acc') !== -1) {\n                this.monitorFunc = greater;\n            }\n            else {\n                this.monitorFunc = less;\n            }\n        }\n        if (this.monitorFunc === less) {\n            this.minDelta *= -1;\n        }\n    }\n    async onTrainBegin(logs) {\n        this.wait = 0;\n        this.stoppedEpoch = 0;\n        if (this.baseline != null) {\n            this.best = this.baseline;\n        }\n        else {\n            this.best = this.monitorFunc === less ? Infinity : -Infinity;\n        }\n    }\n    async onEpochEnd(epoch, logs) {\n        await resolveScalarsInLogs(logs);\n        const current = this.getMonitorValue(logs);\n        if (current == null) {\n            return;\n        }\n        if (this.monitorFunc(current - this.minDelta, this.best)) {\n            this.best = current;\n            this.wait = 0;\n            // TODO(cais): Logic for restoreBestWeights.\n        }\n        else {\n            this.wait++;\n            if (this.wait >= this.patience) {\n                this.stoppedEpoch = epoch;\n                this.model.stopTraining = true;\n            }\n            // TODO(cais): Logic for restoreBestWeights.\n        }\n    }\n    async onTrainEnd(logs) {\n        if (this.stoppedEpoch > 0 && this.verbose) {\n            console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);\n        }\n    }\n    getMonitorValue(logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        const monitorValue = logs[this.monitor];\n        if (monitorValue == null) {\n            console.warn(`Metric for EarlyStopping ${this.monitor} is not available. ` +\n                `Available metrics are: ${Object.keys(logs)}`);\n        }\n        return monitorValue;\n    }\n}\n/**\n * Factory function for a Callback that stops training when a monitored\n * quantity has stopped improving.\n *\n * Early stopping is a type of regularization, and protects model against\n * overfitting.\n *\n * The following example based on fake data illustrates how this callback\n * can be used during `tf.LayersModel.fit()`:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense({\n *   units: 3,\n *   activation: 'softmax',\n *   kernelInitializer: 'ones',\n *   inputShape: [2]\n * }));\n * const xs = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const ys = tf.tensor2d([[1, 0, 0], [0, 1, 0]], [2, 3]);\n * const xsVal = tf.tensor2d([4, 3, 2, 1], [2, 2]);\n * const ysVal = tf.tensor2d([[0, 0, 1], [0, 1, 0]], [2, 3]);\n * model.compile(\n *     {loss: 'categoricalCrossentropy', optimizer: 'sgd', metrics: ['acc']});\n *\n * // Without the EarlyStopping callback, the val_acc value would be:\n * //   0.5, 0.5, 0.5, 0.5, ...\n * // With val_acc being monitored, training should stop after the 2nd epoch.\n * const history = await model.fit(xs, ys, {\n *   epochs: 10,\n *   validationData: [xsVal, ysVal],\n *   callbacks: tf.callbacks.earlyStopping({monitor: 'val_acc'})\n * });\n *\n * // Expect to see a length-2 array.\n * console.log(history.history.val_acc);\n * ```\n *\n * @doc {\n *   heading: 'Callbacks',\n *   namespace: 'callbacks'\n * }\n */\nexport function earlyStopping(args) {\n    return new EarlyStopping(args);\n}\nexport const callbacks = { earlyStopping };\n//# sourceMappingURL=callbacks.js.map"]},"metadata":{},"sourceType":"module"}