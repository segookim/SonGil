{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { add } from './add';\nimport { concat } from './concat';\nimport { matMul } from './mat_mul';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { sigmoid } from './sigmoid';\nimport { slice } from './slice';\nimport { tanh } from './tanh';\n/**\n * Computes the next state and output of a BasicLSTMCell.\n *\n * Returns `[newC, newH]`.\n *\n * Derived from tf.contrib.rnn.BasicLSTMCell.\n *\n * @param forgetBias Forget bias for the cell.\n * @param lstmKernel The weights for the cell.\n * @param lstmBias The bias for the cell.\n * @param data The input to the cell.\n * @param c Previous cell state.\n * @param h Previous cell output.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\n\nfunction basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {\n  const $forgetBias = convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');\n  const $lstmKernel = convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');\n  const $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');\n  const $data = convertToTensor(data, 'data', 'basicLSTMCell');\n  const $c = convertToTensor(c, 'c', 'basicLSTMCell');\n  const $h = convertToTensor(h, 'h', 'basicLSTMCell');\n  const combined = concat([$data, $h], 1);\n  const weighted = matMul(combined, $lstmKernel);\n  const res = add(weighted, $lstmBias); // i = input_gate, j = new_input, f = forget_gate, o = output_gate\n\n  const batchSize = res.shape[0];\n  const sliceCols = res.shape[1] / 4;\n  const sliceSize = [batchSize, sliceCols];\n  const i = slice(res, [0, 0], sliceSize);\n  const j = slice(res, [0, sliceCols], sliceSize);\n  const f = slice(res, [0, sliceCols * 2], sliceSize);\n  const o = slice(res, [0, sliceCols * 3], sliceSize);\n  const newC = add(mul(sigmoid(i), tanh(j)), mul($c, sigmoid(add($forgetBias, f))));\n  const newH = mul(tanh(newC), sigmoid(o));\n  return [newC, newH];\n}\n\nexport const basicLSTMCell = op({\n  basicLSTMCell_\n});","map":{"version":3,"sources":["../../src/ops/basic_lstm_cell.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,GAAR,QAAkB,OAAlB;AACA,SAAQ,MAAR,QAAqB,UAArB;AACA,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,GAAR,QAAkB,OAAlB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,KAAR,QAAoB,SAApB;AACA,SAAQ,IAAR,QAAmB,QAAnB;AAEA;;;;;;;;;;;;;;;AAeG;;AACH,SAAS,cAAT,CACI,UADJ,EACmC,UADnC,EAEI,QAFJ,EAEmC,IAFnC,EAGI,CAHJ,EAG4B,CAH5B,EAGkD;AAChD,QAAM,WAAW,GACb,eAAe,CAAC,UAAD,EAAa,YAAb,EAA2B,eAA3B,CADnB;AAEA,QAAM,WAAW,GACb,eAAe,CAAC,UAAD,EAAa,YAAb,EAA2B,eAA3B,CADnB;AAEA,QAAM,SAAS,GAAG,eAAe,CAAC,QAAD,EAAW,UAAX,EAAuB,eAAvB,CAAjC;AACA,QAAM,KAAK,GAAG,eAAe,CAAC,IAAD,EAAO,MAAP,EAAe,eAAf,CAA7B;AACA,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,eAAT,CAA1B;AACA,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,eAAT,CAA1B;AAEA,QAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,KAAD,EAAQ,EAAR,CAAD,EAAc,CAAd,CAAvB;AACA,QAAM,QAAQ,GAAG,MAAM,CAAC,QAAD,EAAW,WAAX,CAAvB;AACA,QAAM,GAAG,GAAa,GAAG,CAAC,QAAD,EAAW,SAAX,CAAzB,CAZgD,CAchD;;AACA,QAAM,SAAS,GAAG,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAlB;AACA,QAAM,SAAS,GAAG,GAAG,CAAC,KAAJ,CAAU,CAAV,IAAe,CAAjC;AACA,QAAM,SAAS,GAAqB,CAAC,SAAD,EAAY,SAAZ,CAApC;AACA,QAAM,CAAC,GAAG,KAAK,CAAC,GAAD,EAAM,CAAC,CAAD,EAAI,CAAJ,CAAN,EAAc,SAAd,CAAf;AACA,QAAM,CAAC,GAAG,KAAK,CAAC,GAAD,EAAM,CAAC,CAAD,EAAI,SAAJ,CAAN,EAAsB,SAAtB,CAAf;AACA,QAAM,CAAC,GAAG,KAAK,CAAC,GAAD,EAAM,CAAC,CAAD,EAAI,SAAS,GAAG,CAAhB,CAAN,EAA0B,SAA1B,CAAf;AACA,QAAM,CAAC,GAAG,KAAK,CAAC,GAAD,EAAM,CAAC,CAAD,EAAI,SAAS,GAAG,CAAhB,CAAN,EAA0B,SAA1B,CAAf;AAEA,QAAM,IAAI,GACN,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAD,CAAR,EAAa,IAAI,CAAC,CAAD,CAAjB,CAAJ,EACC,GAAG,CAAC,EAAD,EAAK,OAAO,CAAC,GAAG,CAAC,WAAD,EAAc,CAAd,CAAJ,CAAZ,CADJ,CADP;AAGA,QAAM,IAAI,GAAa,GAAG,CAAC,IAAI,CAAC,IAAD,CAAL,EAAa,OAAO,CAAC,CAAD,CAApB,CAA1B;AACA,SAAO,CAAC,IAAD,EAAO,IAAP,CAAP;AACD;;AAED,OAAO,MAAM,aAAa,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAxB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { add } from './add';\nimport { concat } from './concat';\nimport { matMul } from './mat_mul';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { sigmoid } from './sigmoid';\nimport { slice } from './slice';\nimport { tanh } from './tanh';\n/**\n * Computes the next state and output of a BasicLSTMCell.\n *\n * Returns `[newC, newH]`.\n *\n * Derived from tf.contrib.rnn.BasicLSTMCell.\n *\n * @param forgetBias Forget bias for the cell.\n * @param lstmKernel The weights for the cell.\n * @param lstmBias The bias for the cell.\n * @param data The input to the cell.\n * @param c Previous cell state.\n * @param h Previous cell output.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\nfunction basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {\n    const $forgetBias = convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');\n    const $lstmKernel = convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');\n    const $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');\n    const $data = convertToTensor(data, 'data', 'basicLSTMCell');\n    const $c = convertToTensor(c, 'c', 'basicLSTMCell');\n    const $h = convertToTensor(h, 'h', 'basicLSTMCell');\n    const combined = concat([$data, $h], 1);\n    const weighted = matMul(combined, $lstmKernel);\n    const res = add(weighted, $lstmBias);\n    // i = input_gate, j = new_input, f = forget_gate, o = output_gate\n    const batchSize = res.shape[0];\n    const sliceCols = res.shape[1] / 4;\n    const sliceSize = [batchSize, sliceCols];\n    const i = slice(res, [0, 0], sliceSize);\n    const j = slice(res, [0, sliceCols], sliceSize);\n    const f = slice(res, [0, sliceCols * 2], sliceSize);\n    const o = slice(res, [0, sliceCols * 3], sliceSize);\n    const newC = add(mul(sigmoid(i), tanh(j)), mul($c, sigmoid(add($forgetBias, f))));\n    const newH = mul(tanh(newC), sigmoid(o));\n    return [newC, newH];\n}\nexport const basicLSTMCell = op({ basicLSTMCell_ });\n//# sourceMappingURL=basic_lstm_cell.js.map"]},"metadata":{},"sourceType":"module"}