{"ast":null,"code":"import _classCallCheck from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment'; // We are wrapping this within an object so it can be stubbed by Jasmine.\n\nexport var getNodeFetch = {\n  // tslint:disable-next-line:no-require-imports\n  importFetch: function importFetch() {\n    return require('node-fetch');\n  }\n};\nvar systemFetch; // These getters and setters are for testing so we don't export a mutable\n// variable.\n\nexport function resetSystemFetch() {\n  systemFetch = null;\n}\nexport function setSystemFetch(fetchFn) {\n  systemFetch = fetchFn;\n}\nexport function getSystemFetch() {\n  return systemFetch;\n}\nexport var PlatformNode = /*#__PURE__*/function () {\n  function PlatformNode() {\n    _classCallCheck(this, PlatformNode);\n\n    // tslint:disable-next-line:no-require-imports\n    this.util = require('util'); // According to the spec, the built-in encoder can do only UTF-8 encoding.\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n\n    this.textEncoder = new this.util.TextEncoder();\n  }\n\n  _createClass(PlatformNode, [{\n    key: \"fetch\",\n    value: function fetch(path, requestInits) {\n      if (env().global.fetch != null) {\n        return env().global.fetch(path, requestInits);\n      }\n\n      if (systemFetch == null) {\n        systemFetch = getNodeFetch.importFetch();\n      }\n\n      return systemFetch(path, requestInits);\n    }\n  }, {\n    key: \"now\",\n    value: function now() {\n      var time = process.hrtime();\n      return time[0] * 1000 + time[1] / 1000000;\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(text, encoding) {\n      if (encoding !== 'utf-8' && encoding !== 'utf8') {\n        throw new Error(\"Node built-in encoder only supports utf-8, but got \".concat(encoding));\n      }\n\n      return this.textEncoder.encode(text);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(bytes, encoding) {\n      if (bytes.length === 0) {\n        return '';\n      }\n\n      return new this.util.TextDecoder(encoding).decode(bytes);\n    }\n  }]);\n\n  return PlatformNode;\n}();\n\nif (env().get('IS_NODE')) {\n  env().setPlatform('node', new PlatformNode());\n}","map":{"version":3,"sources":["../../src/platforms/platform_node.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,GAAR,QAAkB,gBAAlB,C,CAIA;;AACA,OAAO,IAAM,YAAY,GAAG;AAC1B;AACA,EAAA,WAAW,EAAE;AAAA,WAAM,OAAO,CAAC,YAAD,CAAb;AAAA;AAFa,CAArB;AAMP,IAAI,WAAJ,C,CACA;AACA;;AACA,OAAM,SAAU,gBAAV,GAA0B;AAC9B,EAAA,WAAW,GAAG,IAAd;AACD;AACD,OAAM,SAAU,cAAV,CAAyB,OAAzB,EAAyC;AAC7C,EAAA,WAAW,GAAG,OAAd;AACD;AACD,OAAM,SAAU,cAAV,GAAwB;AAC5B,SAAO,WAAP;AACD;AAED,WAAa,YAAb;AAKE,0BAAA;AAAA;;AACE;AACA,SAAK,IAAL,GAAY,OAAO,CAAC,MAAD,CAAnB,CAFF,CAGE;AACA;;AACA,SAAK,WAAL,GAAmB,IAAI,KAAK,IAAL,CAAU,WAAd,EAAnB;AACD;;AAXH;AAAA;AAAA,WAaE,eAAM,IAAN,EAAoB,YAApB,EAA8C;AAC5C,UAAI,GAAG,GAAG,MAAN,CAAa,KAAb,IAAsB,IAA1B,EAAgC;AAC9B,eAAO,GAAG,GAAG,MAAN,CAAa,KAAb,CAAmB,IAAnB,EAAyB,YAAzB,CAAP;AACD;;AAED,UAAI,WAAW,IAAI,IAAnB,EAAyB;AACvB,QAAA,WAAW,GAAG,YAAY,CAAC,WAAb,EAAd;AACD;;AACD,aAAO,WAAW,CAAC,IAAD,EAAO,YAAP,CAAlB;AACD;AAtBH;AAAA;AAAA,WAwBE,eAAG;AACD,UAAM,IAAI,GAAG,OAAO,CAAC,MAAR,EAAb;AACA,aAAO,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAV,GAAiB,IAAI,CAAC,CAAD,CAAJ,GAAU,OAAlC;AACD;AA3BH;AAAA;AAAA,WA6BE,gBAAO,IAAP,EAAqB,QAArB,EAAqC;AACnC,UAAI,QAAQ,KAAK,OAAb,IAAwB,QAAQ,KAAK,MAAzC,EAAiD;AAC/C,cAAM,IAAI,KAAJ,8DACoD,QADpD,EAAN;AAED;;AACD,aAAO,KAAK,WAAL,CAAiB,MAAjB,CAAwB,IAAxB,CAAP;AACD;AAnCH;AAAA;AAAA,WAoCE,gBAAO,KAAP,EAA0B,QAA1B,EAA0C;AACxC,UAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;AACtB,eAAO,EAAP;AACD;;AACD,aAAO,IAAI,KAAK,IAAL,CAAU,WAAd,CAA0B,QAA1B,EAAoC,MAApC,CAA2C,KAA3C,CAAP;AACD;AAzCH;;AAAA;AAAA;;AA4CA,IAAI,GAAG,GAAG,GAAN,CAAU,SAAV,CAAJ,EAA0B;AACxB,EAAA,GAAG,GAAG,WAAN,CAAkB,MAAlB,EAA0B,IAAI,YAAJ,EAA1B;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport const getNodeFetch = {\n    // tslint:disable-next-line:no-require-imports\n    importFetch: () => require('node-fetch')\n};\nlet systemFetch;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n    systemFetch = null;\n}\nexport function setSystemFetch(fetchFn) {\n    systemFetch = fetchFn;\n}\nexport function getSystemFetch() {\n    return systemFetch;\n}\nexport class PlatformNode {\n    constructor() {\n        // tslint:disable-next-line:no-require-imports\n        this.util = require('util');\n        // According to the spec, the built-in encoder can do only UTF-8 encoding.\n        // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n        this.textEncoder = new this.util.TextEncoder();\n    }\n    fetch(path, requestInits) {\n        if (env().global.fetch != null) {\n            return env().global.fetch(path, requestInits);\n        }\n        if (systemFetch == null) {\n            systemFetch = getNodeFetch.importFetch();\n        }\n        return systemFetch(path, requestInits);\n    }\n    now() {\n        const time = process.hrtime();\n        return time[0] * 1000 + time[1] / 1000000;\n    }\n    encode(text, encoding) {\n        if (encoding !== 'utf-8' && encoding !== 'utf8') {\n            throw new Error(`Node built-in encoder only supports utf-8, but got ${encoding}`);\n        }\n        return this.textEncoder.encode(text);\n    }\n    decode(bytes, encoding) {\n        if (bytes.length === 0) {\n            return '';\n        }\n        return new this.util.TextDecoder(encoding).decode(bytes);\n    }\n}\nif (env().get('IS_NODE')) {\n    env().setPlatform('node', new PlatformNode());\n}\n//# sourceMappingURL=platform_node.js.map"]},"metadata":{},"sourceType":"module"}