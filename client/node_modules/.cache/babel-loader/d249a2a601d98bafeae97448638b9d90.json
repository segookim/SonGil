{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadProgram {\n  constructor(xShape, paddings, constantValue) {\n    this.variableNames = ['x'];\n    this.outputShape = paddings.map((p, i) => p[0]\n    /* beforePad */\n    + xShape[i] + p[1]\n    /* afterPad */\n    );\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${constantValue}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${constantValue}));\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/pad_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAO,UAAP,CAAiB;AAKrB,EAAA,WAAA,CACI,MADJ,EACsB,QADtB,EAEI,aAFJ,EAEyB;AANzB,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAOE,SAAK,WAAL,GAAmB,QAAQ,CAAC,GAAT,CACf,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,CAAC,CAAD;AAAI;AAAL,MAAuB,MAAM,CAAC,CAAD,CAA7B,GAAmC,CAAC,CAAC,CAAD;AAAI;AADnC,KAAnB;AAEA,UAAM,IAAI,GAAG,MAAM,CAAC,MAApB;AACA,UAAM,IAAI,GAAG,iBAAiB,CAAC,IAAD,CAA9B;AAEA,UAAM,KAAK,GAAG,QAAQ,CAAC,GAAT,CAAa,CAAC,IAAI,CAAC,CAAC,CAAD,CAAnB,EAAwB,IAAxB,CAA6B,GAA7B,CAAd;AACA,UAAM,GAAG,GAAG,QAAQ,CAAC,GAAT,CAAa,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,CAAC,CAAD,CAAD,GAAO,MAAM,CAAC,CAAD,CAApC,EAAyC,IAAzC,CAA8C,GAA9C,CAAZ;AACA,UAAM,cAAc,GAChB,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,EAAwC,WAAxC,EAAqD,KAArD,CAA2D,CAA3D,EAA8D,IAA9D,CADJ;;AAGA,QAAI,IAAI,KAAK,CAAb,EAAgB;AACd,WAAK,QAAL,GAAgB;sBACA,KAAK;oBACP,GAAG;;;;;8BAKO,aAAa;;;;;AAKpC,OAZD;AAaA;AACD;;AACD,SAAK,QAAL,GAAgB;QACZ,IAAI,YAAY,IAAI,IAAI,KAAK;QAC7B,IAAI,UAAU,IAAI,IAAI,GAAG;;;UAGvB,IAAI;;4BAEc,aAAa;;YAE7B,IAAI;2BACW,cAAc;;;AAGpC,KAbD;AAcD;;AAhDoB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadProgram {\n    constructor(xShape, paddings, constantValue) {\n        this.variableNames = ['x'];\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const type = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n        if (rank === 1) {\n            this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${constantValue}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n            return;\n        }\n        this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${constantValue}));\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n    }\n}\n//# sourceMappingURL=pad_gpu.js.map"]},"metadata":{},"sourceType":"module"}