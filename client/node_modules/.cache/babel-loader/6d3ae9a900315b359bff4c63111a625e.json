{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/**\n * A ring buffer, providing O(1) FIFO, LIFO, and related operations.\n */\nexport class RingBuffer {\n  /**\n   * Constructs a `RingBuffer`.\n   * @param capacity The number of items that the buffer can accomodate.\n   */\n  constructor(capacity) {\n    this.capacity = capacity; // Note we store the indices in the range 0 <= index < 2*capacity.\n    // This allows us to distinguish the full from the empty case.\n    // See https://www.snellman.net/blog/archive/2016-12-13-ring-buffers/\n\n    this.begin = 0; // inclusive\n\n    this.end = 0; // exclusive\n\n    if (capacity == null) {\n      throw new RangeError('Can\\'t create a ring buffer of unknown capacity.');\n    }\n\n    if (capacity < 1) {\n      throw new RangeError('Can\\'t create ring buffer of capacity < 1.');\n    }\n\n    this.data = new Array(capacity);\n    this.doubledCapacity = 2 * capacity;\n  }\n  /**\n   * Map any index into the range 0 <= index < 2*capacity.\n   */\n\n\n  wrap(index) {\n    // don't trust % on negative numbers\n    while (index < 0) {\n      index += this.doubledCapacity;\n    }\n\n    return index % this.doubledCapacity;\n  }\n\n  get(index) {\n    if (index < 0) {\n      throw new RangeError('Can\\'t get item at a negative index.');\n    }\n\n    return this.data[index % this.capacity];\n  }\n\n  set(index, value) {\n    if (index < 0) {\n      throw new RangeError('Can\\'t set item at a negative index.');\n    }\n\n    this.data[index % this.capacity] = value;\n  }\n  /**\n   * Returns the current number of items in the buffer.\n   */\n\n\n  length() {\n    let length = this.end - this.begin;\n\n    if (length < 0) {\n      length = this.doubledCapacity + length;\n    }\n\n    return length;\n  }\n  /**\n   * Reports whether the buffer is full.\n   * @returns true if the number of items in the buffer equals its capacity, and\n   *   false otherwise.\n   */\n\n\n  isFull() {\n    return this.length() === this.capacity;\n  }\n  /**\n   * Reports whether the buffer is empty.\n   * @returns true if the number of items in the buffer equals zero, and\n   *   false otherwise.\n   */\n\n\n  isEmpty() {\n    return this.length() === 0;\n  }\n  /**\n   * Adds an item to the end of the buffer.\n   */\n\n\n  push(value) {\n    if (this.isFull()) {\n      throw new RangeError('Ring buffer is full.');\n    }\n\n    this.set(this.end, value);\n    this.end = this.wrap(this.end + 1);\n  }\n  /**\n   * Adds many items to the end of the buffer, in order.\n   */\n\n\n  pushAll(values) {\n    for (const value of values) {\n      this.push(value);\n    }\n  }\n  /**\n   * Removes and returns the last item in the buffer.\n   */\n\n\n  pop() {\n    if (this.isEmpty()) {\n      throw new RangeError('Ring buffer is empty.');\n    }\n\n    this.end = this.wrap(this.end - 1);\n    const result = this.get(this.end);\n    this.set(this.end, undefined);\n    return result;\n  }\n  /**\n   * Adds an item to the beginning of the buffer.\n   */\n\n\n  unshift(value) {\n    if (this.isFull()) {\n      throw new RangeError('Ring buffer is full.');\n    }\n\n    this.begin = this.wrap(this.begin - 1);\n    this.set(this.begin, value);\n  }\n  /**\n   * Removes and returns the first item in the buffer.\n   */\n\n\n  shift() {\n    if (this.isEmpty()) {\n      throw new RangeError('Ring buffer is empty.');\n    }\n\n    const result = this.get(this.begin);\n    this.set(this.begin, undefined);\n    this.begin = this.wrap(this.begin + 1);\n    return result;\n  }\n  /**\n   * Removes and returns a specific item in the buffer, and moves the last item\n   * to the vacated slot.  This is useful for implementing a shuffling stream.\n   * Note that this operation necessarily scrambles the original order.\n   *\n   * @param relativeIndex: the index of the item to remove, relative to the\n   *   first item in the buffer (e.g., hiding the ring nature of the underlying\n   *   storage).\n   */\n\n\n  shuffleExcise(relativeIndex) {\n    if (this.isEmpty()) {\n      throw new RangeError('Ring buffer is empty.');\n    }\n\n    const index = this.wrap(this.begin + relativeIndex);\n    const result = this.get(index);\n    this.set(index, this.pop());\n    return result;\n  }\n\n}","map":{"version":3,"sources":["../../src/util/ring_buffer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n/**\n * A ring buffer, providing O(1) FIFO, LIFO, and related operations.\n */\nexport class RingBuffer {\n    /**\n     * Constructs a `RingBuffer`.\n     * @param capacity The number of items that the buffer can accomodate.\n     */\n    constructor(capacity) {\n        this.capacity = capacity;\n        // Note we store the indices in the range 0 <= index < 2*capacity.\n        // This allows us to distinguish the full from the empty case.\n        // See https://www.snellman.net/blog/archive/2016-12-13-ring-buffers/\n        this.begin = 0; // inclusive\n        this.end = 0; // exclusive\n        if (capacity == null) {\n            throw new RangeError('Can\\'t create a ring buffer of unknown capacity.');\n        }\n        if (capacity < 1) {\n            throw new RangeError('Can\\'t create ring buffer of capacity < 1.');\n        }\n        this.data = new Array(capacity);\n        this.doubledCapacity = 2 * capacity;\n    }\n    /**\n     * Map any index into the range 0 <= index < 2*capacity.\n     */\n    wrap(index) {\n        // don't trust % on negative numbers\n        while (index < 0) {\n            index += this.doubledCapacity;\n        }\n        return index % this.doubledCapacity;\n    }\n    get(index) {\n        if (index < 0) {\n            throw new RangeError('Can\\'t get item at a negative index.');\n        }\n        return this.data[index % this.capacity];\n    }\n    set(index, value) {\n        if (index < 0) {\n            throw new RangeError('Can\\'t set item at a negative index.');\n        }\n        this.data[index % this.capacity] = value;\n    }\n    /**\n     * Returns the current number of items in the buffer.\n     */\n    length() {\n        let length = this.end - this.begin;\n        if (length < 0) {\n            length = this.doubledCapacity + length;\n        }\n        return length;\n    }\n    /**\n     * Reports whether the buffer is full.\n     * @returns true if the number of items in the buffer equals its capacity, and\n     *   false otherwise.\n     */\n    isFull() {\n        return this.length() === this.capacity;\n    }\n    /**\n     * Reports whether the buffer is empty.\n     * @returns true if the number of items in the buffer equals zero, and\n     *   false otherwise.\n     */\n    isEmpty() {\n        return this.length() === 0;\n    }\n    /**\n     * Adds an item to the end of the buffer.\n     */\n    push(value) {\n        if (this.isFull()) {\n            throw new RangeError('Ring buffer is full.');\n        }\n        this.set(this.end, value);\n        this.end = this.wrap(this.end + 1);\n    }\n    /**\n     * Adds many items to the end of the buffer, in order.\n     */\n    pushAll(values) {\n        for (const value of values) {\n            this.push(value);\n        }\n    }\n    /**\n     * Removes and returns the last item in the buffer.\n     */\n    pop() {\n        if (this.isEmpty()) {\n            throw new RangeError('Ring buffer is empty.');\n        }\n        this.end = this.wrap(this.end - 1);\n        const result = this.get(this.end);\n        this.set(this.end, undefined);\n        return result;\n    }\n    /**\n     * Adds an item to the beginning of the buffer.\n     */\n    unshift(value) {\n        if (this.isFull()) {\n            throw new RangeError('Ring buffer is full.');\n        }\n        this.begin = this.wrap(this.begin - 1);\n        this.set(this.begin, value);\n    }\n    /**\n     * Removes and returns the first item in the buffer.\n     */\n    shift() {\n        if (this.isEmpty()) {\n            throw new RangeError('Ring buffer is empty.');\n        }\n        const result = this.get(this.begin);\n        this.set(this.begin, undefined);\n        this.begin = this.wrap(this.begin + 1);\n        return result;\n    }\n    /**\n     * Removes and returns a specific item in the buffer, and moves the last item\n     * to the vacated slot.  This is useful for implementing a shuffling stream.\n     * Note that this operation necessarily scrambles the original order.\n     *\n     * @param relativeIndex: the index of the item to remove, relative to the\n     *   first item in the buffer (e.g., hiding the ring nature of the underlying\n     *   storage).\n     */\n    shuffleExcise(relativeIndex) {\n        if (this.isEmpty()) {\n            throw new RangeError('Ring buffer is empty.');\n        }\n        const index = this.wrap(this.begin + relativeIndex);\n        const result = this.get(index);\n        this.set(index, this.pop());\n        return result;\n    }\n}\n//# sourceMappingURL=ring_buffer.js.map"]},"metadata":{},"sourceType":"module"}