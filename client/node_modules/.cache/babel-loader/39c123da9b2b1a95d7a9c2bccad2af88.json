{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LRN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Normalizes the activation of a local neighborhood across or within\n * channels.\n *\n * @param x The input tensor. The 4-D input tensor is treated as a 3-D array\n *     of 1D vectors (along the last dimension), and each vector is\n *     normalized independently.\n * @param depthRadius The number of adjacent channels in the 1D normalization\n *     window.\n * @param bias A constant bias term for the basis.\n * @param alpha A scale factor, usually positive.\n * @param beta An exponent.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\n\nfunction localResponseNormalization_(x) {\n  var depthRadius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  var bias = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var beta = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n  var $x = convertToTensor(x, 'x', 'localResponseNormalization');\n  util.assert($x.rank === 4 || $x.rank === 3, function () {\n    return \"Error in localResponseNormalization: x must be rank 3 or 4 but got\\n               rank \".concat($x.rank, \".\");\n  });\n  util.assert(util.isInt(depthRadius), function () {\n    return \"Error in localResponseNormalization: depthRadius must be an \" + \"integer but got depthRadius \".concat(depthRadius, \".\");\n  });\n  var x4D = $x;\n  var reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  var inputs = {\n    x: x4D\n  };\n  var attrs = {\n    depthRadius: depthRadius,\n    bias: bias,\n    alpha: alpha,\n    beta: beta\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  var res = ENGINE.runKernel(LRN, inputs, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  } else {\n    return res;\n  }\n}\n\nexport var localResponseNormalization = op({\n  localResponseNormalization_: localResponseNormalization_\n});","map":{"version":3,"sources":["../../src/ops/local_response_normalization.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,GAAR,QAAuC,iBAAvC;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA;;;;;;;;;;;;;;AAcG;;AACH,SAAS,2BAAT,CACI,CADJ,EACqE;AAAA,MAAhD,WAAgD,uEAAlC,CAAkC;AAAA,MAA/B,IAA+B,uEAAxB,CAAwB;AAAA,MAArB,KAAqB,uEAAb,CAAa;AAAA,MAAV,IAAU,uEAAH,GAAG;AACnE,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,4BAAT,CAA1B;AACA,EAAA,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,IAAH,KAAY,CAAZ,IAAiB,EAAE,CAAC,IAAH,KAAY,CADjC,EAEI;AAAA,6GACgB,EAAE,CAAC,IADnB;AAAA,GAFJ;AAIA,EAAA,IAAI,CAAC,MAAL,CACI,IAAI,CAAC,KAAL,CAAW,WAAX,CADJ,EAEI;AAAA,WAAM,uGAC6B,WAD7B,MAAN;AAAA,GAFJ;AAKA,MAAI,GAAG,GAAG,EAAV;AACA,MAAI,YAAY,GAAG,KAAnB;;AACA,MAAI,EAAE,CAAC,IAAH,KAAY,CAAhB,EAAmB;AACjB,IAAA,YAAY,GAAG,IAAf;AACA,IAAA,GAAG,GAAG,OAAO,CAAC,EAAD,EAAK,CAAC,CAAD,EAAI,EAAE,CAAC,KAAH,CAAS,CAAT,CAAJ,EAAiB,EAAE,CAAC,KAAH,CAAS,CAAT,CAAjB,EAA8B,EAAE,CAAC,KAAH,CAAS,CAAT,CAA9B,CAAL,CAAb;AACD;;AAED,MAAM,MAAM,GAAc;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA1B;AAEA,MAAM,KAAK,GAAa;AAAC,IAAA,WAAW,EAAX,WAAD;AAAc,IAAA,IAAI,EAAJ,IAAd;AAAoB,IAAA,KAAK,EAAL,KAApB;AAA2B,IAAA,IAAI,EAAJ;AAA3B,GAAxB,CApBmE,CAsBnE;;AACA,MAAM,GAAG,GAAG,MAAM,CAAC,SAAP,CACI,GADJ,EACS,MADT,EAEI,KAFJ,CAAZ;;AAIA,MAAI,YAAJ,EAAkB;AAChB,WAAO,OAAO,CAAC,GAAD,EAAM,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAD,EAAe,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAf,EAA6B,GAAG,CAAC,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAd;AACD,GAFD,MAEO;AACL,WAAO,GAAP;AACD;AACF;;AAED,OAAO,IAAM,0BAA0B,GAAG,EAAE,CAAC;AAAC,EAAA,2BAA2B,EAA3B;AAAD,CAAD,CAArC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LRN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Normalizes the activation of a local neighborhood across or within\n * channels.\n *\n * @param x The input tensor. The 4-D input tensor is treated as a 3-D array\n *     of 1D vectors (along the last dimension), and each vector is\n *     normalized independently.\n * @param depthRadius The number of adjacent channels in the 1D normalization\n *     window.\n * @param bias A constant bias term for the basis.\n * @param alpha A scale factor, usually positive.\n * @param beta An exponent.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction localResponseNormalization_(x, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {\n    const $x = convertToTensor(x, 'x', 'localResponseNormalization');\n    util.assert($x.rank === 4 || $x.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${$x.rank}.`);\n    util.assert(util.isInt(depthRadius), () => `Error in localResponseNormalization: depthRadius must be an ` +\n        `integer but got depthRadius ${depthRadius}.`);\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        reshapedTo4D = true;\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    }\n    const inputs = { x: x4D };\n    const attrs = { depthRadius, bias, alpha, beta };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(LRN, inputs, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    else {\n        return res;\n    }\n}\nexport const localResponseNormalization = op({ localResponseNormalization_ });\n//# sourceMappingURL=local_response_normalization.js.map"]},"metadata":{},"sourceType":"module"}