{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array) {\n  let counter = array.length;\n  let temp = 0;\n  let index = 0; // While there are elements in the array\n\n  while (counter > 0) {\n    // Pick a random index\n    index = Math.random() * counter | 0; // Decrease counter by 1\n\n    counter--; // And swap the last element with it\n\n    temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n}\n/**\n * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1,2,3,4,5];\n * const b = [11,22,33,44,55];\n * tf.util.shuffleCombo(a, b);\n * console.log(a, b);\n * ```\n *\n * @param array The first array to shuffle in-place.\n * @param array2 The second array to shuffle in-place with the same permutation\n *     as the first array.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\n\nexport function shuffleCombo(array, // tslint:disable-next-line:no-any\narray2) {\n  if (array.length !== array2.length) {\n    throw Error(`Array sizes must match to be shuffled together ` + `First array length was ${array.length}` + `Second array length was ${array2.length}`);\n  }\n\n  let counter = array.length;\n  let temp, temp2;\n  let index = 0; // While there are elements in the array\n\n  while (counter > 0) {\n    // Pick a random index\n    index = Math.random() * counter | 0; // Decrease counter by 1\n\n    counter--; // And swap the last element of each array with it\n\n    temp = array[counter];\n    temp2 = array2[counter];\n    array[counter] = array[index];\n    array2[counter] = array2[index];\n    array[index] = temp;\n    array2[index] = temp2;\n  }\n}\n/** Clamps a value to a specified range. */\n\nexport function clamp(min, x, max) {\n  return Math.max(min, Math.min(x, max));\n}\nexport function nearestLargerEven(val) {\n  return val % 2 === 0 ? val : val + 1;\n}\nexport function sum(arr) {\n  let sum = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  return sum;\n}\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\n\nexport function randUniform(a, b) {\n  const r = Math.random();\n  return b * r + (1 - r) * a;\n}\n/** Returns the squared Euclidean distance between two vectors. */\n\nexport function distSquared(a, b) {\n  let result = 0;\n\n  for (let i = 0; i < a.length; i++) {\n    const diff = Number(a[i]) - Number(b[i]);\n    result += diff * diff;\n  }\n\n  return result;\n}\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function assert(expr, msg) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\nexport function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {\n  assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\nexport function assertNonNull(a) {\n  assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);\n} // NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function flatten(arr, result = [], skipTypedArray = false) {\n  if (result == null) {\n    result = [];\n  }\n\n  if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\n    for (let i = 0; i < arr.length; ++i) {\n      flatten(arr[i], result, skipTypedArray);\n    }\n  } else {\n    result.push(arr);\n  }\n\n  return result;\n}\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function sizeFromShape(shape) {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n\n  let size = shape[0];\n\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n\n  return size;\n}\nexport function isScalarShape(shape) {\n  return shape.length === 0;\n}\nexport function arraysEqual(n1, n2) {\n  if (n1 === n2) {\n    return true;\n  }\n\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n\n  if (n1.length !== n2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function isInt(a) {\n  return a % 1 === 0;\n}\nexport function tanh(x) {\n  // tslint:disable-next-line:no-any\n  if (Math.tanh != null) {\n    // tslint:disable-next-line:no-any\n    return Math.tanh(x);\n  }\n\n  if (x === Infinity) {\n    return 1;\n  } else if (x === -Infinity) {\n    return -1;\n  } else {\n    const e2x = Math.exp(2 * x);\n    return (e2x - 1) / (e2x + 1);\n  }\n}\nexport function sizeToSquarishShape(size) {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\n/**\n * Creates a new array with randomized indicies to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indicies to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function createShuffledIndices(n) {\n  const shuffledIndices = new Uint32Array(n);\n\n  for (let i = 0; i < n; ++i) {\n    shuffledIndices[i] = i;\n  }\n\n  shuffle(shuffledIndices);\n  return shuffledIndices;\n}\nexport function rightPad(a, size) {\n  if (size <= a.length) {\n    return a;\n  }\n\n  return a + ' '.repeat(size - a.length);\n}\nexport function repeatedTry(checkFn, delayFn = counter => 0, maxCounter) {\n  return new Promise((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\n\nexport function inferFromImplicitShape(shape, size) {\n  let shapeProd = 1;\n  let implicitIdx = -1;\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] >= 0) {\n      shapeProd *= shape[i];\n    } else if (shape[i] === -1) {\n      if (implicitIdx !== -1) {\n        throw Error(`Shapes can only have 1 implicit size. ` + `Found -1 at dim ${implicitIdx} and dim ${i}`);\n      }\n\n      implicitIdx = i;\n    } else if (shape[i] < 0) {\n      throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n    }\n  }\n\n  if (implicitIdx === -1) {\n    if (size > 0 && size !== shapeProd) {\n      throw Error(`Size(${size}) must match the product of shape ${shape}`);\n    }\n\n    return shape;\n  }\n\n  if (shapeProd === 0) {\n    throw Error(`Cannot infer the missing size in [${shape}] when ` + `there are 0 elements`);\n  }\n\n  if (size % shapeProd !== 0) {\n    throw Error(`The implicit shape can't be a fractional number. ` + `Got ${size} / ${shapeProd}`);\n  }\n\n  const newShape = shape.slice();\n  newShape[implicitIdx] = size / shapeProd;\n  return newShape;\n}\nexport function parseAxisParam(axis, shape) {\n  const rank = shape.length; // Normalize input\n\n  axis = axis == null ? shape.map((s, i) => i) : [].concat(axis); // Check for valid range\n\n  assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` + `got axis ${axis}`); // Check for only integers\n\n  assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` + `got axis ${axis}`); // Handle negative axis.\n\n  return axis.map(a => a < 0 ? rank + a : a);\n}\n/** Reduces the shape by removing all dimensions of shape 1. */\n\nexport function squeezeShape(shape, axis) {\n  const newShape = [];\n  const keptDims = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = axis == null || isEmptyArray ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n\n  return {\n    newShape,\n    keptDims\n  };\n}\nexport function getTypedArrayFromDType(dtype, size) {\n  let values = null;\n\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n\n  return values;\n}\nexport function getArrayFromDType(dtype, size) {\n  let values = null;\n\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else if (dtype === 'string') {\n    values = new Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n\n  return values;\n}\nexport function checkConversionForErrors(vals, dtype) {\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i];\n\n    if (isNaN(num) || !isFinite(num)) {\n      throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n    }\n  }\n}\n/** Returns true if the dtype is valid. */\n\nexport function isValidDtype(dtype) {\n  return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' || dtype === 'int32' || dtype === 'string';\n}\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\n\nexport function hasEncodingLoss(oldType, newType) {\n  if (newType === 'complex64') {\n    return false;\n  }\n\n  if (newType === 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n\n  if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n\n  if (newType === 'bool' && oldType === 'bool') {\n    return false;\n  }\n\n  return true;\n}\nexport function isTypedArray(a) {\n  return a instanceof Float32Array || a instanceof Int32Array || a instanceof Uint8Array;\n}\nexport function bytesPerElement(dtype) {\n  if (dtype === 'float32' || dtype === 'int32') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else if (dtype === 'bool') {\n    return 1;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS is\n * not possible since it depends on the encoding of the html page that serves\n * the website.\n */\n\nexport function bytesFromStringArray(arr) {\n  if (arr == null) {\n    return 0;\n  }\n\n  let bytes = 0;\n  arr.forEach(x => bytes += x.length);\n  return bytes;\n}\n/** Returns true if the value is a string. */\n\nexport function isString(value) {\n  return typeof value === 'string' || value instanceof String;\n}\nexport function isBoolean(value) {\n  return typeof value === 'boolean';\n}\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\nexport function inferDtype(values) {\n  if (Array.isArray(values)) {\n    return inferDtype(values[0]);\n  }\n\n  if (values instanceof Float32Array) {\n    return 'float32';\n  } else if (values instanceof Int32Array || values instanceof Uint8Array) {\n    return 'int32';\n  } else if (isNumber(values)) {\n    return 'float32';\n  } else if (isString(values)) {\n    return 'string';\n  } else if (isBoolean(values)) {\n    return 'bool';\n  }\n\n  return 'float32';\n}\nexport function isFunction(f) {\n  return !!(f && f.constructor && f.call && f.apply);\n}\nexport function nearestDivisor(size, start) {\n  for (let i = start; i < size; ++i) {\n    if (size % i === 0) {\n      return i;\n    }\n  }\n\n  return size;\n}\nexport function computeStrides(shape) {\n  const rank = shape.length;\n\n  if (rank < 2) {\n    return [];\n  } // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n  // strides.\n\n\n  const strides = new Array(rank - 1);\n  strides[rank - 2] = shape[rank - 1];\n\n  for (let i = rank - 3; i >= 0; --i) {\n    strides[i] = strides[i + 1] * shape[i + 1];\n  }\n\n  return strides;\n}\n\nfunction createNestedArray(offset, shape, a) {\n  const ret = new Array();\n\n  if (shape.length === 1) {\n    const d = shape[0];\n\n    for (let i = 0; i < d; i++) {\n      ret[i] = a[offset + i];\n    }\n  } else {\n    const d = shape[0];\n    const rest = shape.slice(1);\n    const len = rest.reduce((acc, c) => acc * c);\n\n    for (let i = 0; i < d; i++) {\n      ret[i] = createNestedArray(offset + i * len, rest, a);\n    }\n  }\n\n  return ret;\n} // Provide a nested array of TypedArray in given shape.\n\n\nexport function toNestedArray(shape, a) {\n  if (shape.length === 0) {\n    // Scalar type should return a single number.\n    return a[0];\n  }\n\n  const size = shape.reduce((acc, c) => acc * c);\n\n  if (size === 0) {\n    // A tensor with shape zero should be turned into empty list.\n    return [];\n  }\n\n  if (size !== a.length) {\n    throw new Error(`[${shape}] does not match the input size ${a.length}.`);\n  }\n\n  return createNestedArray(0, shape, a);\n}\nexport function makeOnesTypedArray(size, dtype) {\n  const array = makeZerosTypedArray(size, dtype);\n\n  for (let i = 0; i < array.length; i++) {\n    array[i] = 1;\n  }\n\n  return array;\n}\nexport function makeZerosTypedArray(size, dtype) {\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(size);\n  } else if (dtype === 'int32') {\n    return new Int32Array(size);\n  } else if (dtype === 'bool') {\n    return new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\n\nexport function makeZerosNestedTypedArray(shape, dtype) {\n  const size = shape.reduce((prev, curr) => prev * curr, 1);\n\n  if (dtype == null || dtype === 'float32') {\n    return toNestedArray(shape, new Float32Array(size));\n  } else if (dtype === 'int32') {\n    return toNestedArray(shape, new Int32Array(size));\n  } else if (dtype === 'bool') {\n    return toNestedArray(shape, new Uint8Array(size));\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\nexport function assertNonNegativeIntegerDimensions(shape) {\n  shape.forEach(dimSize => {\n    assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` + `shape [${shape}].`);\n  });\n}\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\n\nexport function locToIndex(locs, rank, strides) {\n  if (rank === 0) {\n    return 0;\n  } else if (rank === 1) {\n    return locs[0];\n  }\n\n  let index = locs[locs.length - 1];\n\n  for (let i = 0; i < locs.length - 1; ++i) {\n    index += strides[i] * locs[i];\n  }\n\n  return index;\n}\n/**\n * Computes the location (multidimensional index) in a tensor/multidimentional\n * array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\n\nexport function indexToLoc(index, rank, strides) {\n  if (rank === 0) {\n    return [];\n  } else if (rank === 1) {\n    return [index];\n  }\n\n  const locs = new Array(rank);\n\n  for (let i = 0; i < locs.length - 1; ++i) {\n    locs[i] = Math.floor(index / strides[i]);\n    index -= locs[i] * strides[i];\n  }\n\n  locs[locs.length - 1] = index;\n  return locs;\n}\n/**\n * This method asserts whether an object is a Promise instance.\n * @param object\n */\n// tslint:disable-next-line: no-any\n\nexport function isPromise(object) {\n  //  We chose to not use 'obj instanceOf Promise' for two reasons:\n  //  1. It only reliably works for es6 Promise, not other Promise\n  //  implementations.\n  //  2. It doesn't work with framework that uses zone.js. zone.js monkey patch\n  //  the async calls, so it is possible the obj (patched) is comparing to a\n  //  pre-patched Promise.\n  return object && object.then && typeof object.then === 'function';\n}","map":{"version":3,"sources":["../src/util_base.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;;AAIH;;;;;;;;;;;;AAYG;AACH;AACA,OAAM,SAAU,OAAV,CAAkB,KAAlB,EAC8B;AAClC,MAAI,OAAO,GAAG,KAAK,CAAC,MAApB;AACA,MAAI,IAAI,GAAG,CAAX;AACA,MAAI,KAAK,GAAG,CAAZ,CAHkC,CAIlC;;AACA,SAAO,OAAO,GAAG,CAAjB,EAAoB;AAClB;AACA,IAAA,KAAK,GAAI,IAAI,CAAC,MAAL,KAAgB,OAAjB,GAA4B,CAApC,CAFkB,CAGlB;;AACA,IAAA,OAAO,GAJW,CAKlB;;AACA,IAAA,IAAI,GAAG,KAAK,CAAC,OAAD,CAAZ;AACA,IAAA,KAAK,CAAC,OAAD,CAAL,GAAiB,KAAK,CAAC,KAAD,CAAtB;AACA,IAAA,KAAK,CAAC,KAAD,CAAL,GAAe,IAAf;AACD;AACF;AAED;;;;;;;;;;;;;;;AAeG;AACH;;AACA,OAAM,SAAU,YAAV,CAAuB,KAAvB,EACN;AACsB,MAFhB,EAEiE;AAErE,MAAI,KAAK,CAAC,MAAN,KAAiB,MAAM,CAAC,MAA5B,EAAoC;AAClC,UAAM,KAAK,CACT,iDAAA,GACA,0BAA0B,KAAK,CAAC,MAAM,EADtC,GAEA,2BAA2B,MAAM,CAAC,MAAM,EAH/B,CAAX;AAID;;AACD,MAAI,OAAO,GAAG,KAAK,CAAC,MAApB;AACA,MAAI,IAAJ,EAAU,KAAV;AACA,MAAI,KAAK,GAAG,CAAZ,CAVqE,CAWrE;;AACA,SAAO,OAAO,GAAG,CAAjB,EAAoB;AAClB;AACA,IAAA,KAAK,GAAI,IAAI,CAAC,MAAL,KAAgB,OAAjB,GAA4B,CAApC,CAFkB,CAGlB;;AACA,IAAA,OAAO,GAJW,CAKlB;;AACA,IAAA,IAAI,GAAG,KAAK,CAAC,OAAD,CAAZ;AACA,IAAA,KAAK,GAAG,MAAM,CAAC,OAAD,CAAd;AACA,IAAA,KAAK,CAAC,OAAD,CAAL,GAAiB,KAAK,CAAC,KAAD,CAAtB;AACA,IAAA,MAAM,CAAC,OAAD,CAAN,GAAkB,MAAM,CAAC,KAAD,CAAxB;AACA,IAAA,KAAK,CAAC,KAAD,CAAL,GAAe,IAAf;AACA,IAAA,MAAM,CAAC,KAAD,CAAN,GAAgB,KAAhB;AACD;AACF;AAED;;AACA,OAAM,SAAU,KAAV,CAAgB,GAAhB,EAA6B,CAA7B,EAAwC,GAAxC,EAAmD;AACvD,SAAO,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,GAAZ,CAAd,CAAP;AACD;AAED,OAAM,SAAU,iBAAV,CAA4B,GAA5B,EAAuC;AAC3C,SAAO,GAAG,GAAG,CAAN,KAAY,CAAZ,GAAgB,GAAhB,GAAsB,GAAG,GAAG,CAAnC;AACD;AAED,OAAM,SAAU,GAAV,CAAc,GAAd,EAA2B;AAC/B,MAAI,GAAG,GAAG,CAAV;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,CAAC,EAAjC,EAAqC;AACnC,IAAA,GAAG,IAAI,GAAG,CAAC,CAAD,CAAV;AACD;;AACD,SAAO,GAAP;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,WAAV,CAAsB,CAAtB,EAAiC,CAAjC,EAA0C;AAC9C,QAAM,CAAC,GAAG,IAAI,CAAC,MAAL,EAAV;AACA,SAAQ,CAAC,GAAG,CAAL,GAAU,CAAC,IAAI,CAAL,IAAU,CAA3B;AACD;AAED;;AACA,OAAM,SAAU,WAAV,CAAsB,CAAtB,EAAqC,CAArC,EAAkD;AACtD,MAAI,MAAM,GAAG,CAAb;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAAC,CAAC,MAAtB,EAA8B,CAAC,EAA/B,EAAmC;AACjC,UAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAD,CAAF,CAAN,GAAe,MAAM,CAAC,CAAC,CAAC,CAAD,CAAF,CAAlC;AACA,IAAA,MAAM,IAAI,IAAI,GAAG,IAAjB;AACD;;AACD,SAAO,MAAP;AACD;AAED;;;;;;;;;;;;;;AAcG;;AACH,OAAM,SAAU,MAAV,CAAiB,IAAjB,EAAgC,GAAhC,EAAiD;AACrD,MAAI,CAAC,IAAL,EAAW;AACT,UAAM,IAAI,KAAJ,CAAU,OAAO,GAAP,KAAe,QAAf,GAA0B,GAA1B,GAAgC,GAAG,EAA7C,CAAN;AACD;AACF;AAED,OAAM,SAAU,iBAAV,CACF,MADE,EACgB,MADhB,EACkC,kBAAkB,GAAG,EADvD,EACyD;AAC7D,EAAA,MAAM,CACF,WAAW,CAAC,MAAD,EAAS,MAAT,CADT,EAEF,MAAM,kBAAkB,GAAG,WAAW,MAAM,QAAQ,MAAM,aAFxD,CAAN;AAGD;AAED,OAAM,SAAU,aAAV,CAAwB,CAAxB,EAAqC;AACzC,EAAA,MAAM,CACF,CAAC,IAAI,IADH,EAEF,MAAM,+DAFJ,CAAN;AAGD,C,CAED;AACA;AACA;;AACA;;;;;;;;;;;;;;;AAeG;;AACH,OAAM,SACN,OADM,CAEF,GAFE,EAEwB,MAAA,GAAc,EAFtC,EAE0C,cAAc,GAAG,KAF3D,EAEgE;AACpE,MAAI,MAAM,IAAI,IAAd,EAAoB;AAClB,IAAA,MAAM,GAAG,EAAT;AACD;;AACD,MAAI,KAAK,CAAC,OAAN,CAAc,GAAd,KAAsB,YAAY,CAAC,GAAD,CAAZ,IAAqB,CAAC,cAAhD,EAAgE;AAC9D,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,EAAE,CAAlC,EAAqC;AACnC,MAAA,OAAO,CAAC,GAAG,CAAC,CAAD,CAAJ,EAAS,MAAT,EAAiB,cAAjB,CAAP;AACD;AACF,GAJD,MAIO;AACL,IAAA,MAAM,CAAC,IAAP,CAAY,GAAZ;AACD;;AACD,SAAO,MAAP;AACD;AAED;;;;;;;;;;AAUG;;AACH,OAAM,SAAU,aAAV,CAAwB,KAAxB,EAAuC;AAC3C,MAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACA,WAAO,CAAP;AACD;;AACD,MAAI,IAAI,GAAG,KAAK,CAAC,CAAD,CAAhB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,IAAA,IAAI,IAAI,KAAK,CAAC,CAAD,CAAb;AACD;;AACD,SAAO,IAAP;AACD;AAED,OAAM,SAAU,aAAV,CAAwB,KAAxB,EAAuC;AAC3C,SAAO,KAAK,CAAC,MAAN,KAAiB,CAAxB;AACD;AAED,OAAM,SAAU,WAAV,CAAsB,EAAtB,EAAsC,EAAtC,EAAoD;AACxD,MAAI,EAAE,KAAK,EAAX,EAAe;AACb,WAAO,IAAP;AACD;;AACD,MAAI,EAAE,IAAI,IAAN,IAAc,EAAE,IAAI,IAAxB,EAA8B;AAC5B,WAAO,KAAP;AACD;;AAED,MAAI,EAAE,CAAC,MAAH,KAAc,EAAE,CAAC,MAArB,EAA6B;AAC3B,WAAO,KAAP;AACD;;AACD,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAAE,CAAC,MAAvB,EAA+B,CAAC,EAAhC,EAAoC;AAClC,QAAI,EAAE,CAAC,CAAD,CAAF,KAAU,EAAE,CAAC,CAAD,CAAhB,EAAqB;AACnB,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;AAED,OAAM,SAAU,KAAV,CAAgB,CAAhB,EAAyB;AAC7B,SAAO,CAAC,GAAG,CAAJ,KAAU,CAAjB;AACD;AAED,OAAM,SAAU,IAAV,CAAe,CAAf,EAAwB;AAC5B;AACA,MAAK,IAAY,CAAC,IAAb,IAAqB,IAA1B,EAAgC;AAC9B;AACA,WAAQ,IAAY,CAAC,IAAb,CAAkB,CAAlB,CAAR;AACD;;AACD,MAAI,CAAC,KAAK,QAAV,EAAoB;AAClB,WAAO,CAAP;AACD,GAFD,MAEO,IAAI,CAAC,KAAK,CAAC,QAAX,EAAqB;AAC1B,WAAO,CAAC,CAAR;AACD,GAFM,MAEA;AACL,UAAM,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,CAAb,CAAZ;AACA,WAAO,CAAC,GAAG,GAAG,CAAP,KAAa,GAAG,GAAG,CAAnB,CAAP;AACD;AACF;AAED,OAAM,SAAU,mBAAV,CAA8B,IAA9B,EAA0C;AAC9C,QAAM,KAAK,GAAG,IAAI,CAAC,IAAL,CAAU,IAAI,CAAC,IAAL,CAAU,IAAV,CAAV,CAAd;AACA,SAAO,CAAC,KAAD,EAAQ,IAAI,CAAC,IAAL,CAAU,IAAI,GAAG,KAAjB,CAAR,CAAP;AACD;AAED;;;;;;;;;;;AAWG;;AACH,OAAM,SAAU,qBAAV,CAAgC,CAAhC,EAAyC;AAC7C,QAAM,eAAe,GAAG,IAAI,WAAJ,CAAgB,CAAhB,CAAxB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AAC1B,IAAA,eAAe,CAAC,CAAD,CAAf,GAAqB,CAArB;AACD;;AACD,EAAA,OAAO,CAAC,eAAD,CAAP;AACA,SAAO,eAAP;AACD;AAED,OAAM,SAAU,QAAV,CAAmB,CAAnB,EAA8B,IAA9B,EAA0C;AAC9C,MAAI,IAAI,IAAI,CAAC,CAAC,MAAd,EAAsB;AACpB,WAAO,CAAP;AACD;;AACD,SAAO,CAAC,GAAG,IAAI,MAAJ,CAAW,IAAI,GAAG,CAAC,CAAC,MAApB,CAAX;AACD;AAED,OAAM,SAAU,WAAV,CACF,OADE,EACsB,OAAA,GAAW,OAAD,IAAqB,CADrD,EAEF,UAFE,EAEiB;AACrB,SAAO,IAAI,OAAJ,CAAkB,CAAC,OAAD,EAAU,MAAV,KAAoB;AAC3C,QAAI,QAAQ,GAAG,CAAf;;AAEA,UAAM,KAAK,GAAG,MAAK;AACjB,UAAI,OAAO,EAAX,EAAe;AACb,QAAA,OAAO;AACP;AACD;;AAED,MAAA,QAAQ;AAER,YAAM,WAAW,GAAG,OAAO,CAAC,QAAD,CAA3B;;AAEA,UAAI,UAAU,IAAI,IAAd,IAAsB,QAAQ,IAAI,UAAtC,EAAkD;AAChD,QAAA,MAAM;AACN;AACD;;AACD,MAAA,UAAU,CAAC,KAAD,EAAQ,WAAR,CAAV;AACD,KAfD;;AAiBA,IAAA,KAAK;AACN,GArBM,CAAP;AAsBD;AAED;;;;;;;;AAQG;;AACH,OAAM,SAAU,sBAAV,CACF,KADE,EACe,IADf,EAC2B;AAC/B,MAAI,SAAS,GAAG,CAAhB;AACA,MAAI,WAAW,GAAG,CAAC,CAAnB;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,EAAE,CAApC,EAAuC;AACrC,QAAI,KAAK,CAAC,CAAD,CAAL,IAAY,CAAhB,EAAmB;AACjB,MAAA,SAAS,IAAI,KAAK,CAAC,CAAD,CAAlB;AACD,KAFD,MAEO,IAAI,KAAK,CAAC,CAAD,CAAL,KAAa,CAAC,CAAlB,EAAqB;AAC1B,UAAI,WAAW,KAAK,CAAC,CAArB,EAAwB;AACtB,cAAM,KAAK,CACP,wCAAA,GACA,mBAAmB,WAAW,YAAY,CAAC,EAFpC,CAAX;AAGD;;AACD,MAAA,WAAW,GAAG,CAAd;AACD,KAPM,MAOA,IAAI,KAAK,CAAC,CAAD,CAAL,GAAW,CAAf,EAAkB;AACvB,YAAM,KAAK,CAAC,gCAAgC,KAAK,CAAC,CAAD,CAAG,WAAW,CAAC,EAArD,CAAX;AACD;AACF;;AAED,MAAI,WAAW,KAAK,CAAC,CAArB,EAAwB;AACtB,QAAI,IAAI,GAAG,CAAP,IAAY,IAAI,KAAK,SAAzB,EAAoC;AAClC,YAAM,KAAK,CAAC,QAAQ,IAAI,qCAAqC,KAAK,EAAvD,CAAX;AACD;;AACD,WAAO,KAAP;AACD;;AAED,MAAI,SAAS,KAAK,CAAlB,EAAqB;AACnB,UAAM,KAAK,CACP,qCAAqC,KAAK,SAA1C,GACA,sBAFO,CAAX;AAGD;;AACD,MAAI,IAAI,GAAG,SAAP,KAAqB,CAAzB,EAA4B;AAC1B,UAAM,KAAK,CACP,mDAAA,GACA,OAAO,IAAI,MAAM,SAAS,EAFnB,CAAX;AAGD;;AAED,QAAM,QAAQ,GAAG,KAAK,CAAC,KAAN,EAAjB;AACA,EAAA,QAAQ,CAAC,WAAD,CAAR,GAAwB,IAAI,GAAG,SAA/B;AACA,SAAO,QAAP;AACD;AAED,OAAM,SAAU,cAAV,CACF,IADE,EACqB,KADrB,EACoC;AACxC,QAAM,IAAI,GAAG,KAAK,CAAC,MAAnB,CADwC,CAGxC;;AACA,EAAA,IAAI,GAAG,IAAI,IAAI,IAAR,GAAe,KAAK,CAAC,GAAN,CAAU,CAAC,CAAD,EAAI,CAAJ,KAAU,CAApB,CAAf,GAAwC,GAAG,MAAH,CAAU,IAAV,CAA/C,CAJwC,CAMxC;;AACA,EAAA,MAAM,CACF,IAAI,CAAC,KAAL,CAAW,EAAE,IAAI,EAAE,IAAI,CAAC,IAAP,IAAe,EAAE,GAAG,IAArC,CADE,EAEF,MACI,+CAA+C,IAAI,KAAK,IAAI,QAA5D,GACA,YAAY,IAAI,EAJlB,CAAN,CAPwC,CAaxC;;AACA,EAAA,MAAM,CACF,IAAI,CAAC,KAAL,CAAW,EAAE,IAAI,KAAK,CAAC,EAAD,CAAtB,CADE,EAEF,MAAM,gDAAA,GACF,YAAY,IAAI,EAHlB,CAAN,CAdwC,CAmBxC;;AACA,SAAO,IAAI,CAAC,GAAL,CAAS,CAAC,IAAI,CAAC,GAAG,CAAJ,GAAQ,IAAI,GAAG,CAAf,GAAmB,CAAjC,CAAP;AACD;AAED;;AACA,OAAM,SAAU,YAAV,CAAuB,KAAvB,EAAwC,IAAxC,EAAuD;AAE3D,QAAM,QAAQ,GAAa,EAA3B;AACA,QAAM,QAAQ,GAAa,EAA3B;AACA,QAAM,YAAY,GAAG,IAAI,IAAI,IAAR,IAAgB,KAAK,CAAC,OAAN,CAAc,IAAd,CAAhB,IAAuC,IAAI,CAAC,MAAL,KAAgB,CAA5E;AACA,QAAM,IAAI,GAAI,IAAI,IAAI,IAAR,IAAgB,YAAjB,GACT,IADS,GAET,cAAc,CAAC,IAAD,EAAO,KAAP,CAAd,CAA4B,IAA5B,EAFJ;AAGA,MAAI,CAAC,GAAG,CAAR;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,EAAE,CAApC,EAAuC;AACrC,QAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB,UAAI,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAZ,IAAiB,KAAK,CAAC,CAAD,CAAL,KAAa,CAAlC,EAAqC;AACnC,cAAM,IAAI,KAAJ,CACF,sBAAsB,CAAC,mBAAmB,KAAK,CAAC,CAAD,CAAG,YADhD,CAAN;AAED;;AACD,UAAI,CAAC,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAX,IAAmB,IAAI,CAAC,CAAD,CAAJ,GAAU,CAA9B,KAAoC,KAAK,CAAC,CAAD,CAAL,KAAa,CAArD,EAAwD;AACtD,QAAA,QAAQ,CAAC,IAAT,CAAc,KAAK,CAAC,CAAD,CAAnB;AACA,QAAA,QAAQ,CAAC,IAAT,CAAc,CAAd;AACD;;AACD,UAAI,IAAI,CAAC,CAAD,CAAJ,IAAW,CAAf,EAAkB;AAChB,QAAA,CAAC;AACF;AACF;;AACD,QAAI,KAAK,CAAC,CAAD,CAAL,KAAa,CAAjB,EAAoB;AAClB,MAAA,QAAQ,CAAC,IAAT,CAAc,KAAK,CAAC,CAAD,CAAnB;AACA,MAAA,QAAQ,CAAC,IAAT,CAAc,CAAd;AACD;AACF;;AACD,SAAO;AAAC,IAAA,QAAD;AAAW,IAAA;AAAX,GAAP;AACD;AAED,OAAM,SAAU,sBAAV,CACF,KADE,EACQ,IADR,EACoB;AACxB,MAAI,MAAM,GAAG,IAAb;;AACA,MAAI,KAAK,IAAI,IAAT,IAAiB,KAAK,KAAK,SAA/B,EAA0C;AACxC,IAAA,MAAM,GAAG,IAAI,YAAJ,CAAiB,IAAjB,CAAT;AACD,GAFD,MAEO,IAAI,KAAK,KAAK,OAAd,EAAuB;AAC5B,IAAA,MAAM,GAAG,IAAI,UAAJ,CAAe,IAAf,CAAT;AACD,GAFM,MAEA,IAAI,KAAK,KAAK,MAAd,EAAsB;AAC3B,IAAA,MAAM,GAAG,IAAI,UAAJ,CAAe,IAAf,CAAT;AACD,GAFM,MAEA;AACL,UAAM,IAAI,KAAJ,CAAU,qBAAqB,KAAK,EAApC,CAAN;AACD;;AACD,SAAO,MAAP;AACD;AAED,OAAM,SAAU,iBAAV,CACF,KADE,EACQ,IADR,EACoB;AACxB,MAAI,MAAM,GAAG,IAAb;;AACA,MAAI,KAAK,IAAI,IAAT,IAAiB,KAAK,KAAK,SAA/B,EAA0C;AACxC,IAAA,MAAM,GAAG,IAAI,YAAJ,CAAiB,IAAjB,CAAT;AACD,GAFD,MAEO,IAAI,KAAK,KAAK,OAAd,EAAuB;AAC5B,IAAA,MAAM,GAAG,IAAI,UAAJ,CAAe,IAAf,CAAT;AACD,GAFM,MAEA,IAAI,KAAK,KAAK,MAAd,EAAsB;AAC3B,IAAA,MAAM,GAAG,IAAI,UAAJ,CAAe,IAAf,CAAT;AACD,GAFM,MAEA,IAAI,KAAK,KAAK,QAAd,EAAwB;AAC7B,IAAA,MAAM,GAAG,IAAI,KAAJ,CAAoB,IAApB,CAAT;AACD,GAFM,MAEA;AACL,UAAM,IAAI,KAAJ,CAAU,qBAAqB,KAAK,EAApC,CAAN;AACD;;AACD,SAAO,MAAP;AACD;AAED,OAAM,SAAU,wBAAV,CACF,IADE,EAC6B,KAD7B,EACqC;AACzC,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AACpC,UAAM,GAAG,GAAG,IAAI,CAAC,CAAD,CAAhB;;AACA,QAAI,KAAK,CAAC,GAAD,CAAL,IAAc,CAAC,QAAQ,CAAC,GAAD,CAA3B,EAAkC;AAChC,YAAM,KAAK,CAAC,oBAAoB,KAAK,4BAA4B,GAAG,GAAzD,CAAX;AACD;AACF;AACF;AAED;;AACA,OAAM,SAAU,YAAV,CAAuB,KAAvB,EAAsC;AAC1C,SAAO,KAAK,KAAK,MAAV,IAAoB,KAAK,KAAK,WAA9B,IAA6C,KAAK,KAAK,SAAvD,IACH,KAAK,KAAK,OADP,IACkB,KAAK,KAAK,QADnC;AAED;AAED;;;AAGG;;AACH,OAAM,SAAU,eAAV,CAA0B,OAA1B,EAA6C,OAA7C,EAA8D;AAClE,MAAI,OAAO,KAAK,WAAhB,EAA6B;AAC3B,WAAO,KAAP;AACD;;AACD,MAAI,OAAO,KAAK,SAAZ,IAAyB,OAAO,KAAK,WAAzC,EAAsD;AACpD,WAAO,KAAP;AACD;;AACD,MAAI,OAAO,KAAK,OAAZ,IAAuB,OAAO,KAAK,SAAnC,IAAgD,OAAO,KAAK,WAAhE,EAA6E;AAC3E,WAAO,KAAP;AACD;;AACD,MAAI,OAAO,KAAK,MAAZ,IAAsB,OAAO,KAAK,MAAtC,EAA8C;AAC5C,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED,OAAM,SAAU,YAAV,CAAuB,CAAvB,EAA4B;AAChC,SAAO,CAAC,YAAY,YAAb,IAA6B,CAAC,YAAY,UAA1C,IACH,CAAC,YAAY,UADjB;AAED;AAED,OAAM,SAAU,eAAV,CAA0B,KAA1B,EAAyC;AAC7C,MAAI,KAAK,KAAK,SAAV,IAAuB,KAAK,KAAK,OAArC,EAA8C;AAC5C,WAAO,CAAP;AACD,GAFD,MAEO,IAAI,KAAK,KAAK,WAAd,EAA2B;AAChC,WAAO,CAAP;AACD,GAFM,MAEA,IAAI,KAAK,KAAK,MAAd,EAAsB;AAC3B,WAAO,CAAP;AACD,GAFM,MAEA;AACL,UAAM,IAAI,KAAJ,CAAU,iBAAiB,KAAK,EAAhC,CAAN;AACD;AACF;AAED;;;;;AAKG;;AACH,OAAM,SAAU,oBAAV,CAA+B,GAA/B,EAAgD;AACpD,MAAI,GAAG,IAAI,IAAX,EAAiB;AACf,WAAO,CAAP;AACD;;AACD,MAAI,KAAK,GAAG,CAAZ;AACA,EAAA,GAAG,CAAC,OAAJ,CAAY,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,MAA5B;AACA,SAAO,KAAP;AACD;AAED;;AACA,OAAM,SAAU,QAAV,CAAmB,KAAnB,EAA4B;AAChC,SAAO,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAK,YAAY,MAArD;AACD;AAED,OAAM,SAAU,SAAV,CAAoB,KAApB,EAA6B;AACjC,SAAO,OAAO,KAAP,KAAiB,SAAxB;AACD;AAED,OAAM,SAAU,QAAV,CAAmB,KAAnB,EAA4B;AAChC,SAAO,OAAO,KAAP,KAAiB,QAAxB;AACD;AAED,OAAM,SAAU,UAAV,CAAqB,MAArB,EAAuC;AAC3C,MAAI,KAAK,CAAC,OAAN,CAAc,MAAd,CAAJ,EAA2B;AACzB,WAAO,UAAU,CAAC,MAAM,CAAC,CAAD,CAAP,CAAjB;AACD;;AACD,MAAI,MAAM,YAAY,YAAtB,EAAoC;AAClC,WAAO,SAAP;AACD,GAFD,MAEO,IAAI,MAAM,YAAY,UAAlB,IAAgC,MAAM,YAAY,UAAtD,EAAkE;AACvE,WAAO,OAAP;AACD,GAFM,MAEA,IAAI,QAAQ,CAAC,MAAD,CAAZ,EAAsB;AAC3B,WAAO,SAAP;AACD,GAFM,MAEA,IAAI,QAAQ,CAAC,MAAD,CAAZ,EAAsB;AAC3B,WAAO,QAAP;AACD,GAFM,MAEA,IAAI,SAAS,CAAC,MAAD,CAAb,EAAuB;AAC5B,WAAO,MAAP;AACD;;AACD,SAAO,SAAP;AACD;AAED,OAAM,SAAU,UAAV,CAAqB,CAArB,EAAgC;AACpC,SAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,WAAP,IAAsB,CAAC,CAAC,IAAxB,IAAgC,CAAC,CAAC,KAApC,CAAR;AACD;AAED,OAAM,SAAU,cAAV,CAAyB,IAAzB,EAAuC,KAAvC,EAAoD;AACxD,OAAK,IAAI,CAAC,GAAG,KAAb,EAAoB,CAAC,GAAG,IAAxB,EAA8B,EAAE,CAAhC,EAAmC;AACjC,QAAI,IAAI,GAAG,CAAP,KAAa,CAAjB,EAAoB;AAClB,aAAO,CAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;AAED,OAAM,SAAU,cAAV,CAAyB,KAAzB,EAAwC;AAC5C,QAAM,IAAI,GAAG,KAAK,CAAC,MAAnB;;AACA,MAAI,IAAI,GAAG,CAAX,EAAc;AACZ,WAAO,EAAP;AACD,GAJ2C,CAM5C;AACA;;;AACA,QAAM,OAAO,GAAG,IAAI,KAAJ,CAAU,IAAI,GAAG,CAAjB,CAAhB;AACA,EAAA,OAAO,CAAC,IAAI,GAAG,CAAR,CAAP,GAAoB,KAAK,CAAC,IAAI,GAAG,CAAR,CAAzB;;AACA,OAAK,IAAI,CAAC,GAAG,IAAI,GAAG,CAApB,EAAuB,CAAC,IAAI,CAA5B,EAA+B,EAAE,CAAjC,EAAoC;AAClC,IAAA,OAAO,CAAC,CAAD,CAAP,GAAa,OAAO,CAAC,CAAC,GAAG,CAAL,CAAP,GAAiB,KAAK,CAAC,CAAC,GAAG,CAAL,CAAnC;AACD;;AACD,SAAO,OAAP;AACD;;AAED,SAAS,iBAAT,CAA2B,MAA3B,EAA2C,KAA3C,EAA4D,CAA5D,EAAyE;AACvE,QAAM,GAAG,GAAG,IAAI,KAAJ,EAAZ;;AACA,MAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;AACtB,UAAM,CAAC,GAAG,KAAK,CAAC,CAAD,CAAf;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AAC1B,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,CAAC,MAAM,GAAG,CAAV,CAAV;AACD;AACF,GALD,MAKO;AACL,UAAM,CAAC,GAAG,KAAK,CAAC,CAAD,CAAf;AACA,UAAM,IAAI,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAb;AACA,UAAM,GAAG,GAAG,IAAI,CAAC,MAAL,CAAY,CAAC,GAAD,EAAM,CAAN,KAAY,GAAG,GAAG,CAA9B,CAAZ;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AAC1B,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,iBAAiB,CAAC,MAAM,GAAG,CAAC,GAAG,GAAd,EAAmB,IAAnB,EAAyB,CAAzB,CAA1B;AACD;AACF;;AACD,SAAO,GAAP;AACD,C,CAED;;;AACA,OAAM,SAAU,aAAV,CAAwB,KAAxB,EAAyC,CAAzC,EAAsD;AAC1D,MAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACA,WAAO,CAAC,CAAC,CAAD,CAAR;AACD;;AACD,QAAM,IAAI,GAAG,KAAK,CAAC,MAAN,CAAa,CAAC,GAAD,EAAM,CAAN,KAAY,GAAG,GAAG,CAA/B,CAAb;;AACA,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd;AACA,WAAO,EAAP;AACD;;AACD,MAAI,IAAI,KAAK,CAAC,CAAC,MAAf,EAAuB;AACrB,UAAM,IAAI,KAAJ,CAAU,IAAI,KAAK,mCAAmC,CAAC,CAAC,MAAM,GAA9D,CAAN;AACD;;AAED,SAAO,iBAAiB,CAAC,CAAD,EAAI,KAAJ,EAAW,CAAX,CAAxB;AACD;AAED,OAAM,SAAU,kBAAV,CACF,IADE,EACY,KADZ,EACoB;AACxB,QAAM,KAAK,GAAG,mBAAmB,CAAC,IAAD,EAAO,KAAP,CAAjC;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,IAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACD;;AACD,SAAO,KAAP;AACD;AAED,OAAM,SAAU,mBAAV,CACF,IADE,EACY,KADZ,EACoB;AACxB,MAAI,KAAK,IAAI,IAAT,IAAiB,KAAK,KAAK,SAA3B,IAAwC,KAAK,KAAK,WAAtD,EAAmE;AACjE,WAAO,IAAI,YAAJ,CAAiB,IAAjB,CAAP;AACD,GAFD,MAEO,IAAI,KAAK,KAAK,OAAd,EAAuB;AAC5B,WAAO,IAAI,UAAJ,CAAe,IAAf,CAAP;AACD,GAFM,MAEA,IAAI,KAAK,KAAK,MAAd,EAAsB;AAC3B,WAAO,IAAI,UAAJ,CAAe,IAAf,CAAP;AACD,GAFM,MAEA;AACL,UAAM,IAAI,KAAJ,CAAU,qBAAqB,KAAK,EAApC,CAAN;AACD;AACF;AAED;;;;AAIG;;AACH,OAAM,SAAU,yBAAV,CACF,KADE,EACe,KADf,EACuB;AAC3B,QAAM,IAAI,GAAG,KAAK,CAAC,MAAN,CAAa,CAAC,IAAD,EAAO,IAAP,KAAgB,IAAI,GAAG,IAApC,EAA0C,CAA1C,CAAb;;AACA,MAAI,KAAK,IAAI,IAAT,IAAiB,KAAK,KAAK,SAA/B,EAA0C;AACxC,WAAO,aAAa,CAAC,KAAD,EAAQ,IAAI,YAAJ,CAAiB,IAAjB,CAAR,CAApB;AACD,GAFD,MAEO,IAAI,KAAK,KAAK,OAAd,EAAuB;AAC5B,WAAO,aAAa,CAAC,KAAD,EAAQ,IAAI,UAAJ,CAAe,IAAf,CAAR,CAApB;AACD,GAFM,MAEA,IAAI,KAAK,KAAK,MAAd,EAAsB;AAC3B,WAAO,aAAa,CAAC,KAAD,EAAQ,IAAI,UAAJ,CAAe,IAAf,CAAR,CAApB;AACD,GAFM,MAEA;AACL,UAAM,IAAI,KAAJ,CAAU,qBAAqB,KAAK,EAApC,CAAN;AACD;AACF;AAED,OAAM,SAAU,kCAAV,CAA6C,KAA7C,EAA4D;AAChE,EAAA,KAAK,CAAC,OAAN,CAAc,OAAO,IAAG;AACtB,IAAA,MAAM,CACF,MAAM,CAAC,SAAP,CAAiB,OAAjB,KAA6B,OAAO,IAAI,CADtC,EAEF,MACI,kEAAA,GACA,UAAU,KAAK,IAJjB,CAAN;AAKD,GAND;AAOD;AAED;;;;;;;AAOG;;AACH,OAAM,SAAU,UAAV,CACF,IADE,EACc,IADd,EAC4B,OAD5B,EAC6C;AACjD,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd,WAAO,CAAP;AACD,GAFD,MAEO,IAAI,IAAI,KAAK,CAAb,EAAgB;AACrB,WAAO,IAAI,CAAC,CAAD,CAAX;AACD;;AACD,MAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAL,GAAc,CAAf,CAAhB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAL,GAAc,CAAlC,EAAqC,EAAE,CAAvC,EAA0C;AACxC,IAAA,KAAK,IAAI,OAAO,CAAC,CAAD,CAAP,GAAa,IAAI,CAAC,CAAD,CAA1B;AACD;;AACD,SAAO,KAAP;AACD;AAED;;;;;;;AAOG;;AACH,OAAM,SAAU,UAAV,CACF,KADE,EACa,IADb,EAC2B,OAD3B,EAC4C;AAChD,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd,WAAO,EAAP;AACD,GAFD,MAEO,IAAI,IAAI,KAAK,CAAb,EAAgB;AACrB,WAAO,CAAC,KAAD,CAAP;AACD;;AACD,QAAM,IAAI,GAAa,IAAI,KAAJ,CAAU,IAAV,CAAvB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAL,GAAc,CAAlC,EAAqC,EAAE,CAAvC,EAA0C;AACxC,IAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,OAAO,CAAC,CAAD,CAA1B,CAAV;AACA,IAAA,KAAK,IAAI,IAAI,CAAC,CAAD,CAAJ,GAAU,OAAO,CAAC,CAAD,CAA1B;AACD;;AACD,EAAA,IAAI,CAAC,IAAI,CAAC,MAAL,GAAc,CAAf,CAAJ,GAAwB,KAAxB;AACA,SAAO,IAAP;AACD;AAED;;;AAGG;AACH;;AACA,OAAM,SAAU,SAAV,CAAoB,MAApB,EAA+B;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,SAAO,MAAM,IAAI,MAAM,CAAC,IAAjB,IAAyB,OAAO,MAAM,CAAC,IAAd,KAAuB,UAAvD;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array) {\n    let counter = array.length;\n    let temp = 0;\n    let index = 0;\n    // While there are elements in the array\n    while (counter > 0) {\n        // Pick a random index\n        index = (Math.random() * counter) | 0;\n        // Decrease counter by 1\n        counter--;\n        // And swap the last element with it\n        temp = array[counter];\n        array[counter] = array[index];\n        array[index] = temp;\n    }\n}\n/**\n * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1,2,3,4,5];\n * const b = [11,22,33,44,55];\n * tf.util.shuffleCombo(a, b);\n * console.log(a, b);\n * ```\n *\n * @param array The first array to shuffle in-place.\n * @param array2 The second array to shuffle in-place with the same permutation\n *     as the first array.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffleCombo(array, \n// tslint:disable-next-line:no-any\narray2) {\n    if (array.length !== array2.length) {\n        throw Error(`Array sizes must match to be shuffled together ` +\n            `First array length was ${array.length}` +\n            `Second array length was ${array2.length}`);\n    }\n    let counter = array.length;\n    let temp, temp2;\n    let index = 0;\n    // While there are elements in the array\n    while (counter > 0) {\n        // Pick a random index\n        index = (Math.random() * counter) | 0;\n        // Decrease counter by 1\n        counter--;\n        // And swap the last element of each array with it\n        temp = array[counter];\n        temp2 = array2[counter];\n        array[counter] = array[index];\n        array2[counter] = array2[index];\n        array[index] = temp;\n        array2[index] = temp2;\n    }\n}\n/** Clamps a value to a specified range. */\nexport function clamp(min, x, max) {\n    return Math.max(min, Math.min(x, max));\n}\nexport function nearestLargerEven(val) {\n    return val % 2 === 0 ? val : val + 1;\n}\nexport function sum(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\nexport function randUniform(a, b) {\n    const r = Math.random();\n    return (b * r) + (1 - r) * a;\n}\n/** Returns the squared Euclidean distance between two vectors. */\nexport function distSquared(a, b) {\n    let result = 0;\n    for (let i = 0; i < a.length; i++) {\n        const diff = Number(a[i]) - Number(b[i]);\n        result += diff * diff;\n    }\n    return result;\n}\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function assert(expr, msg) {\n    if (!expr) {\n        throw new Error(typeof msg === 'string' ? msg : msg());\n    }\n}\nexport function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {\n    assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\nexport function assertNonNull(a) {\n    assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);\n}\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function flatten(arr, result = [], skipTypedArray = false) {\n    if (result == null) {\n        result = [];\n    }\n    if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\n        for (let i = 0; i < arr.length; ++i) {\n            flatten(arr[i], result, skipTypedArray);\n        }\n    }\n    else {\n        result.push(arr);\n    }\n    return result;\n}\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function sizeFromShape(shape) {\n    if (shape.length === 0) {\n        // Scalar.\n        return 1;\n    }\n    let size = shape[0];\n    for (let i = 1; i < shape.length; i++) {\n        size *= shape[i];\n    }\n    return size;\n}\nexport function isScalarShape(shape) {\n    return shape.length === 0;\n}\nexport function arraysEqual(n1, n2) {\n    if (n1 === n2) {\n        return true;\n    }\n    if (n1 == null || n2 == null) {\n        return false;\n    }\n    if (n1.length !== n2.length) {\n        return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n        if (n1[i] !== n2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function isInt(a) {\n    return a % 1 === 0;\n}\nexport function tanh(x) {\n    // tslint:disable-next-line:no-any\n    if (Math.tanh != null) {\n        // tslint:disable-next-line:no-any\n        return Math.tanh(x);\n    }\n    if (x === Infinity) {\n        return 1;\n    }\n    else if (x === -Infinity) {\n        return -1;\n    }\n    else {\n        const e2x = Math.exp(2 * x);\n        return (e2x - 1) / (e2x + 1);\n    }\n}\nexport function sizeToSquarishShape(size) {\n    const width = Math.ceil(Math.sqrt(size));\n    return [width, Math.ceil(size / width)];\n}\n/**\n * Creates a new array with randomized indicies to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indicies to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function createShuffledIndices(n) {\n    const shuffledIndices = new Uint32Array(n);\n    for (let i = 0; i < n; ++i) {\n        shuffledIndices[i] = i;\n    }\n    shuffle(shuffledIndices);\n    return shuffledIndices;\n}\nexport function rightPad(a, size) {\n    if (size <= a.length) {\n        return a;\n    }\n    return a + ' '.repeat(size - a.length);\n}\nexport function repeatedTry(checkFn, delayFn = (counter) => 0, maxCounter) {\n    return new Promise((resolve, reject) => {\n        let tryCount = 0;\n        const tryFn = () => {\n            if (checkFn()) {\n                resolve();\n                return;\n            }\n            tryCount++;\n            const nextBackoff = delayFn(tryCount);\n            if (maxCounter != null && tryCount >= maxCounter) {\n                reject();\n                return;\n            }\n            setTimeout(tryFn, nextBackoff);\n        };\n        tryFn();\n    });\n}\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\nexport function inferFromImplicitShape(shape, size) {\n    let shapeProd = 1;\n    let implicitIdx = -1;\n    for (let i = 0; i < shape.length; ++i) {\n        if (shape[i] >= 0) {\n            shapeProd *= shape[i];\n        }\n        else if (shape[i] === -1) {\n            if (implicitIdx !== -1) {\n                throw Error(`Shapes can only have 1 implicit size. ` +\n                    `Found -1 at dim ${implicitIdx} and dim ${i}`);\n            }\n            implicitIdx = i;\n        }\n        else if (shape[i] < 0) {\n            throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n        }\n    }\n    if (implicitIdx === -1) {\n        if (size > 0 && size !== shapeProd) {\n            throw Error(`Size(${size}) must match the product of shape ${shape}`);\n        }\n        return shape;\n    }\n    if (shapeProd === 0) {\n        throw Error(`Cannot infer the missing size in [${shape}] when ` +\n            `there are 0 elements`);\n    }\n    if (size % shapeProd !== 0) {\n        throw Error(`The implicit shape can't be a fractional number. ` +\n            `Got ${size} / ${shapeProd}`);\n    }\n    const newShape = shape.slice();\n    newShape[implicitIdx] = size / shapeProd;\n    return newShape;\n}\nexport function parseAxisParam(axis, shape) {\n    const rank = shape.length;\n    // Normalize input\n    axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\n    // Check for valid range\n    assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n        `got axis ${axis}`);\n    // Check for only integers\n    assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` +\n        `got axis ${axis}`);\n    // Handle negative axis.\n    return axis.map(a => a < 0 ? rank + a : a);\n}\n/** Reduces the shape by removing all dimensions of shape 1. */\nexport function squeezeShape(shape, axis) {\n    const newShape = [];\n    const keptDims = [];\n    const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n    const axes = (axis == null || isEmptyArray) ?\n        null :\n        parseAxisParam(axis, shape).sort();\n    let j = 0;\n    for (let i = 0; i < shape.length; ++i) {\n        if (axes != null) {\n            if (axes[j] === i && shape[i] !== 1) {\n                throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n            }\n            if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n                newShape.push(shape[i]);\n                keptDims.push(i);\n            }\n            if (axes[j] <= i) {\n                j++;\n            }\n        }\n        if (shape[i] !== 1) {\n            newShape.push(shape[i]);\n            keptDims.push(i);\n        }\n    }\n    return { newShape, keptDims };\n}\nexport function getTypedArrayFromDType(dtype, size) {\n    let values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n    return values;\n}\nexport function getArrayFromDType(dtype, size) {\n    let values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else if (dtype === 'string') {\n        values = new Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n    return values;\n}\nexport function checkConversionForErrors(vals, dtype) {\n    for (let i = 0; i < vals.length; i++) {\n        const num = vals[i];\n        if (isNaN(num) || !isFinite(num)) {\n            throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n        }\n    }\n}\n/** Returns true if the dtype is valid. */\nexport function isValidDtype(dtype) {\n    return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||\n        dtype === 'int32' || dtype === 'string';\n}\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\nexport function hasEncodingLoss(oldType, newType) {\n    if (newType === 'complex64') {\n        return false;\n    }\n    if (newType === 'float32' && oldType !== 'complex64') {\n        return false;\n    }\n    if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n        return false;\n    }\n    if (newType === 'bool' && oldType === 'bool') {\n        return false;\n    }\n    return true;\n}\nexport function isTypedArray(a) {\n    return a instanceof Float32Array || a instanceof Int32Array ||\n        a instanceof Uint8Array;\n}\nexport function bytesPerElement(dtype) {\n    if (dtype === 'float32' || dtype === 'int32') {\n        return 4;\n    }\n    else if (dtype === 'complex64') {\n        return 8;\n    }\n    else if (dtype === 'bool') {\n        return 1;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS is\n * not possible since it depends on the encoding of the html page that serves\n * the website.\n */\nexport function bytesFromStringArray(arr) {\n    if (arr == null) {\n        return 0;\n    }\n    let bytes = 0;\n    arr.forEach(x => bytes += x.length);\n    return bytes;\n}\n/** Returns true if the value is a string. */\nexport function isString(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexport function isBoolean(value) {\n    return typeof value === 'boolean';\n}\nexport function isNumber(value) {\n    return typeof value === 'number';\n}\nexport function inferDtype(values) {\n    if (Array.isArray(values)) {\n        return inferDtype(values[0]);\n    }\n    if (values instanceof Float32Array) {\n        return 'float32';\n    }\n    else if (values instanceof Int32Array || values instanceof Uint8Array) {\n        return 'int32';\n    }\n    else if (isNumber(values)) {\n        return 'float32';\n    }\n    else if (isString(values)) {\n        return 'string';\n    }\n    else if (isBoolean(values)) {\n        return 'bool';\n    }\n    return 'float32';\n}\nexport function isFunction(f) {\n    return !!(f && f.constructor && f.call && f.apply);\n}\nexport function nearestDivisor(size, start) {\n    for (let i = start; i < size; ++i) {\n        if (size % i === 0) {\n            return i;\n        }\n    }\n    return size;\n}\nexport function computeStrides(shape) {\n    const rank = shape.length;\n    if (rank < 2) {\n        return [];\n    }\n    // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n    // strides.\n    const strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n        strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    return strides;\n}\nfunction createNestedArray(offset, shape, a) {\n    const ret = new Array();\n    if (shape.length === 1) {\n        const d = shape[0];\n        for (let i = 0; i < d; i++) {\n            ret[i] = a[offset + i];\n        }\n    }\n    else {\n        const d = shape[0];\n        const rest = shape.slice(1);\n        const len = rest.reduce((acc, c) => acc * c);\n        for (let i = 0; i < d; i++) {\n            ret[i] = createNestedArray(offset + i * len, rest, a);\n        }\n    }\n    return ret;\n}\n// Provide a nested array of TypedArray in given shape.\nexport function toNestedArray(shape, a) {\n    if (shape.length === 0) {\n        // Scalar type should return a single number.\n        return a[0];\n    }\n    const size = shape.reduce((acc, c) => acc * c);\n    if (size === 0) {\n        // A tensor with shape zero should be turned into empty list.\n        return [];\n    }\n    if (size !== a.length) {\n        throw new Error(`[${shape}] does not match the input size ${a.length}.`);\n    }\n    return createNestedArray(0, shape, a);\n}\nexport function makeOnesTypedArray(size, dtype) {\n    const array = makeZerosTypedArray(size, dtype);\n    for (let i = 0; i < array.length; i++) {\n        array[i] = 1;\n    }\n    return array;\n}\nexport function makeZerosTypedArray(size, dtype) {\n    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n        return new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        return new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        return new Uint8Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\nexport function makeZerosNestedTypedArray(shape, dtype) {\n    const size = shape.reduce((prev, curr) => prev * curr, 1);\n    if (dtype == null || dtype === 'float32') {\n        return toNestedArray(shape, new Float32Array(size));\n    }\n    else if (dtype === 'int32') {\n        return toNestedArray(shape, new Int32Array(size));\n    }\n    else if (dtype === 'bool') {\n        return toNestedArray(shape, new Uint8Array(size));\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\nexport function assertNonNegativeIntegerDimensions(shape) {\n    shape.forEach(dimSize => {\n        assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` +\n            `shape [${shape}].`);\n    });\n}\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\nexport function locToIndex(locs, rank, strides) {\n    if (rank === 0) {\n        return 0;\n    }\n    else if (rank === 1) {\n        return locs[0];\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n        index += strides[i] * locs[i];\n    }\n    return index;\n}\n/**\n * Computes the location (multidimensional index) in a tensor/multidimentional\n * array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\nexport function indexToLoc(index, rank, strides) {\n    if (rank === 0) {\n        return [];\n    }\n    else if (rank === 1) {\n        return [index];\n    }\n    const locs = new Array(rank);\n    for (let i = 0; i < locs.length - 1; ++i) {\n        locs[i] = Math.floor(index / strides[i]);\n        index -= locs[i] * strides[i];\n    }\n    locs[locs.length - 1] = index;\n    return locs;\n}\n/**\n * This method asserts whether an object is a Promise instance.\n * @param object\n */\n// tslint:disable-next-line: no-any\nexport function isPromise(object) {\n    //  We chose to not use 'obj instanceOf Promise' for two reasons:\n    //  1. It only reliably works for es6 Promise, not other Promise\n    //  implementations.\n    //  2. It doesn't work with framework that uses zone.js. zone.js monkey patch\n    //  the async calls, so it is possible the obj (patched) is comparing to a\n    //  pre-patched Promise.\n    return object && object.then && typeof object.then === 'function';\n}\n//# sourceMappingURL=util_base.js.map"]},"metadata":{},"sourceType":"module"}