{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, slice_util, StridedSlice } from '@tensorflow/tfjs-core';\nimport { stridedSliceImplCPU } from '../kernel_utils/shared';\nimport { StridedSliceProgram } from '../strided_slice_gpu';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function stridedSlice(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var begin = attrs.begin,\n      end = attrs.end,\n      strides = attrs.strides,\n      beginMask = attrs.beginMask,\n      endMask = attrs.endMask,\n      ellipsisMask = attrs.ellipsisMask,\n      newAxisMask = attrs.newAxisMask,\n      shrinkAxisMask = attrs.shrinkAxisMask;\n\n  var _slice_util$sliceInfo = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask),\n      nonStrided = _slice_util$sliceInfo.nonStrided,\n      $begin = _slice_util$sliceInfo.$begin,\n      $strides = _slice_util$sliceInfo.$strides,\n      size = _slice_util$sliceInfo.size,\n      newShape = _slice_util$sliceInfo.newShape,\n      outShape = _slice_util$sliceInfo.outShape;\n\n  var $x = reshape({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      shape: newShape\n    }\n  });\n  var result;\n\n  if (nonStrided) {\n    var sliced = slice({\n      inputs: {\n        x: $x\n      },\n      backend: backend,\n      attrs: {\n        begin: $begin,\n        size: size\n      }\n    });\n    result = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend: backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(function (axis) {\n    return axis === 0;\n  })) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    var shouldExecuteOnCPU = backend.shouldExecuteOnCPU([$x]);\n\n    if (shouldExecuteOnCPU) {\n      var xTexData = backend.texData.get($x.dataId);\n      var values = xTexData.values;\n      var xBuf = buffer($x.shape, $x.dtype, values);\n      var resultValues = stridedSliceImplCPU(outShape, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(outShape, $x.dtype, resultValues.values);\n    } else {\n      var program = new StridedSliceProgram($begin, $strides, outShape);\n      result = backend.runWebGLProgram(program, [$x], $x.dtype);\n    }\n  }\n\n  var resultReshaped = reshape({\n    inputs: {\n      x: result\n    },\n    backend: backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n  return resultReshaped;\n}\nexport var stridedSliceConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice\n};","map":{"version":3,"sources":["../../src/kernels/StridedSlice.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, slice_util, StridedSlice } from '@tensorflow/tfjs-core';\nimport { stridedSliceImplCPU } from '../kernel_utils/shared';\nimport { StridedSliceProgram } from '../strided_slice_gpu';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function stridedSlice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask } = attrs;\n    const { nonStrided, $begin, $strides, size, newShape, outShape } = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n    const $x = reshape({ inputs: { x }, backend, attrs: { shape: newShape } });\n    let result;\n    if (nonStrided) {\n        const sliced = slice({ inputs: { x: $x }, backend, attrs: { begin: $begin, size } });\n        result = reshape({ inputs: { x: sliced }, backend, attrs: { shape: outShape } });\n        backend.disposeIntermediateTensorInfo(sliced);\n    }\n    else if (outShape.some(axis => axis === 0)) {\n        result = backend.makeTensorInfo(outShape, x.dtype, []);\n    }\n    else {\n        const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([$x]);\n        if (shouldExecuteOnCPU) {\n            const xTexData = backend.texData.get($x.dataId);\n            const values = xTexData.values;\n            const xBuf = buffer($x.shape, $x.dtype, values);\n            const resultValues = stridedSliceImplCPU(outShape, xBuf, $strides, $begin);\n            result = backend.makeTensorInfo(outShape, $x.dtype, resultValues.values);\n        }\n        else {\n            const program = new StridedSliceProgram($begin, $strides, outShape);\n            result = backend.runWebGLProgram(program, [$x], $x.dtype);\n        }\n    }\n    const resultReshaped = reshape({ inputs: { x: result }, backend, attrs: { shape: outShape } });\n    backend.disposeIntermediateTensorInfo($x);\n    backend.disposeIntermediateTensorInfo(result);\n    return resultReshaped;\n}\nexport const stridedSliceConfig = {\n    kernelName: StridedSlice,\n    backendName: 'webgl',\n    kernelFunc: stridedSlice\n};\n//# sourceMappingURL=StridedSlice.js.map"]},"metadata":{},"sourceType":"module"}