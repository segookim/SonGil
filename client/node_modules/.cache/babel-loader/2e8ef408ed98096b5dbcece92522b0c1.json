{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { isPromise } from '../util';\nexport const OP_SCOPE_SUFFIX = '__op';\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\n\nexport function op(f) {\n  const keys = Object.keys(f);\n\n  if (keys.length !== 1) {\n    throw new Error(`Please provide an object with a single key ` + `(operation name) mapping to a function. Got an object with ` + `${keys.length} keys.`);\n  }\n\n  let opName = keys[0];\n  const fn = f[opName]; // Strip the underscore from the end of the function name.\n\n  if (opName.endsWith('_')) {\n    opName = opName.substring(0, opName.length - 1);\n  } // add an __op suffix to distinguish ops from kernels in tf.profile\n\n\n  opName = opName + OP_SCOPE_SUFFIX; // tslint:disable-next-line:no-any\n\n  const f2 = (...args) => {\n    ENGINE.startScope(opName);\n\n    try {\n      const result = fn(...args);\n\n      if (isPromise(result)) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n\n      ENGINE.endScope(result);\n      return result;\n    } catch (ex) {\n      ENGINE.endScope(null);\n      throw ex;\n    }\n  };\n\n  Object.defineProperty(f2, 'name', {\n    value: opName,\n    configurable: true\n  }); // tslint:disable-next-line:no-any\n\n  return f2;\n}","map":{"version":3,"sources":["../../src/ops/operation.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,SAAR,QAAwB,SAAxB;AAEA,OAAO,MAAM,eAAe,GAAG,MAAxB;AAEP;;;;AAIG;;AACH,OAAM,SAAU,EAAV,CAAiC,CAAjC,EAAuD;AAC3D,QAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,CAAZ,CAAb;;AACA,MAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EAAuB;AACrB,UAAM,IAAI,KAAJ,CACF,6CAAA,GACA,6DADA,GAEA,GAAG,IAAI,CAAC,MAAM,QAHZ,CAAN;AAID;;AAED,MAAI,MAAM,GAAG,IAAI,CAAC,CAAD,CAAjB;AACA,QAAM,EAAE,GAAG,CAAC,CAAC,MAAD,CAAZ,CAV2D,CAY3D;;AACA,MAAI,MAAM,CAAC,QAAP,CAAgB,GAAhB,CAAJ,EAA0B;AACxB,IAAA,MAAM,GAAG,MAAM,CAAC,SAAP,CAAiB,CAAjB,EAAoB,MAAM,CAAC,MAAP,GAAgB,CAApC,CAAT;AACD,GAf0D,CAiB3D;;;AACA,EAAA,MAAM,GAAG,MAAM,GAAG,eAAlB,CAlB2D,CAoB3D;;AACA,QAAM,EAAE,GAAG,CAAC,GAAG,IAAJ,KAAmB;AAC5B,IAAA,MAAM,CAAC,UAAP,CAAkB,MAAlB;;AACA,QAAI;AACF,YAAM,MAAM,GAAG,EAAE,CAAC,GAAG,IAAJ,CAAjB;;AACA,UAAI,SAAS,CAAC,MAAD,CAAb,EAAuB;AACrB,QAAA,OAAO,CAAC,KAAR,CAAc,yCAAd;AACD;;AACD,MAAA,MAAM,CAAC,QAAP,CAAgB,MAAhB;AACA,aAAO,MAAP;AACD,KAPD,CAOE,OAAO,EAAP,EAAW;AACX,MAAA,MAAM,CAAC,QAAP,CAAgB,IAAhB;AACA,YAAM,EAAN;AACD;AACF,GAbD;;AAcA,EAAA,MAAM,CAAC,cAAP,CAAsB,EAAtB,EAA0B,MAA1B,EAAkC;AAAC,IAAA,KAAK,EAAE,MAAR;AAAgB,IAAA,YAAY,EAAE;AAA9B,GAAlC,EAnC2D,CAqC3D;;AACA,SAAO,EAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { isPromise } from '../util';\nexport const OP_SCOPE_SUFFIX = '__op';\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\nexport function op(f) {\n    const keys = Object.keys(f);\n    if (keys.length !== 1) {\n        throw new Error(`Please provide an object with a single key ` +\n            `(operation name) mapping to a function. Got an object with ` +\n            `${keys.length} keys.`);\n    }\n    let opName = keys[0];\n    const fn = f[opName];\n    // Strip the underscore from the end of the function name.\n    if (opName.endsWith('_')) {\n        opName = opName.substring(0, opName.length - 1);\n    }\n    // add an __op suffix to distinguish ops from kernels in tf.profile\n    opName = opName + OP_SCOPE_SUFFIX;\n    // tslint:disable-next-line:no-any\n    const f2 = (...args) => {\n        ENGINE.startScope(opName);\n        try {\n            const result = fn(...args);\n            if (isPromise(result)) {\n                console.error('Cannot return a Promise inside of tidy.');\n            }\n            ENGINE.endScope(result);\n            return result;\n        }\n        catch (ex) {\n            ENGINE.endScope(null);\n            throw ex;\n        }\n    };\n    Object.defineProperty(f2, 'name', { value: opName, configurable: true });\n    // tslint:disable-next-line:no-any\n    return f2;\n}\n//# sourceMappingURL=operation.js.map"]},"metadata":{},"sourceType":"module"}