{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, Multiply } from '@tensorflow/tfjs-core';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport { BinaryOpComplexProgram } from '../binaryop_complex_gpu';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { multiplyImplCPU as cpuMultiply } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nconst MUL = 'return a * b;';\nexport function multiply(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    a,\n    b\n  } = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const realProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n    const inputs = [{\n      dataId: aData.complexTensorInfos.real.dataId,\n      dtype: aData.complexTensorInfos.real.dtype,\n      shape: a.shape\n    }, {\n      dataId: aData.complexTensorInfos.imag.dataId,\n      dtype: aData.complexTensorInfos.imag.dtype,\n      shape: a.shape\n    }, {\n      dataId: bData.complexTensorInfos.real.dataId,\n      dtype: bData.complexTensorInfos.real.dtype,\n      shape: b.shape\n    }, {\n      dataId: bData.complexTensorInfos.imag.dataId,\n      dtype: bData.complexTensorInfos.imag.dtype,\n      shape: b.shape\n    }];\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n    const complexOutput = complex({\n      inputs: {\n        real: realPart,\n        imag: imagPart\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart); // TODO(annxingyuan): CPU forwarding for complex inputs.\n\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(a.shape, b.shape, aData.values, bData.values, dtype);\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program;\n\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\nexport const multiplyConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};","map":{"version":3,"sources":["../../src/kernels/Multiply.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, Multiply } from '@tensorflow/tfjs-core';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport { BinaryOpComplexProgram } from '../binaryop_complex_gpu';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { multiplyImplCPU as cpuMultiply } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nconst MUL = 'return a * b;';\nexport function multiply(args) {\n    const { inputs, backend } = args;\n    const { a, b } = inputs;\n    const dtype = backend_util.upcastType(a.dtype, b.dtype);\n    if (a.dtype === 'complex64') {\n        const aData = backend.texData.get(a.dataId);\n        const bData = backend.texData.get(b.dataId);\n        const realProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n        const imagProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n        const inputs = [\n            {\n                dataId: aData.complexTensorInfos.real.dataId,\n                dtype: aData.complexTensorInfos.real.dtype,\n                shape: a.shape\n            },\n            {\n                dataId: aData.complexTensorInfos.imag.dataId,\n                dtype: aData.complexTensorInfos.imag.dtype,\n                shape: a.shape\n            },\n            {\n                dataId: bData.complexTensorInfos.real.dataId,\n                dtype: bData.complexTensorInfos.real.dtype,\n                shape: b.shape\n            },\n            {\n                dataId: bData.complexTensorInfos.imag.dataId,\n                dtype: bData.complexTensorInfos.imag.dtype,\n                shape: b.shape\n            }\n        ];\n        const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n        const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n        const complexOutput = complex({ inputs: { real: realPart, imag: imagPart }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        // TODO(annxingyuan): CPU forwarding for complex inputs.\n        return complexOutput;\n    }\n    if (backend.shouldExecuteOnCPU([a, b])) {\n        const aData = backend.texData.get(a.dataId);\n        const bData = backend.texData.get(b.dataId);\n        const [outValues, outShape] = cpuMultiply(a.shape, b.shape, aData.values, bData.values, dtype);\n        const out = backend.makeTensorInfo(outShape, dtype);\n        const outData = backend.texData.get(out.dataId);\n        outData.values = outValues;\n        return out;\n    }\n    let program;\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n    }\n    else {\n        program = new BinaryOpProgram(MUL, a.shape, b.shape);\n    }\n    return backend.runWebGLProgram(program, [a, b], dtype);\n}\nexport const multiplyConfig = {\n    kernelName: Multiply,\n    backendName: 'webgl',\n    kernelFunc: multiply\n};\n//# sourceMappingURL=Multiply.js.map"]},"metadata":{},"sourceType":"module"}