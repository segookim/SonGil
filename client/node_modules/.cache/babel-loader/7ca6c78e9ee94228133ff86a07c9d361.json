{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Pack } from '../kernel_names';\nimport { convertToTensorArray } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.stack([a, b, c]).print();\n * ```\n *\n * @param tensors A list of tensor objects with the same shape and dtype.\n * @param axis The axis to stack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\n\nfunction stack_(tensors) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var $tensors = convertToTensorArray(tensors, 'tensors', 'stack', 'string_or_numeric');\n  util.assert($tensors.length >= 1, function () {\n    return 'Pass at least one tensor to tf.stack';\n  });\n\n  if ($tensors.length > 0) {\n    util.assert(axis <= $tensors[0].rank, function () {\n      return 'Axis must be <= rank of the tensor';\n    });\n  }\n\n  var inputs = $tensors;\n  var attrs = {\n    axis: axis\n  };\n  return ENGINE.runKernel(Pack, inputs, attrs);\n}\n\nexport var stack = op({\n  stack_: stack_\n});","map":{"version":3,"sources":["../../src/ops/stack.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,IAAR,QAA0C,iBAA1C;AAIA,SAAQ,oBAAR,QAAmC,oBAAnC;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;AAcG;;AACH,SAAS,MAAT,CACI,OADJ,EAC0C;AAAA,MAAR,IAAQ,uEAAD,CAAC;AACxC,MAAM,QAAQ,GACV,oBAAoB,CAAC,OAAD,EAAU,SAAV,EAAqB,OAArB,EAA8B,mBAA9B,CADxB;AAGA,EAAA,IAAI,CAAC,MAAL,CACI,QAAQ,CAAC,MAAT,IAAmB,CADvB,EAC0B;AAAA,WAAM,sCAAN;AAAA,GAD1B;;AAGA,MAAI,QAAQ,CAAC,MAAT,GAAkB,CAAtB,EAAyB;AACvB,IAAA,IAAI,CAAC,MAAL,CACI,IAAI,IAAI,QAAQ,CAAC,CAAD,CAAR,CAAY,IADxB,EAC8B;AAAA,aAAM,oCAAN;AAAA,KAD9B;AAED;;AAED,MAAM,MAAM,GAAe,QAA3B;AACA,MAAM,KAAK,GAAc;AAAC,IAAA,IAAI,EAAJ;AAAD,GAAzB;AAEA,SAAO,MAAM,CAAC,SAAP,CACH,IADG,EACG,MADH,EACmC,KADnC,CAAP;AAED;;AAED,OAAO,IAAM,KAAK,GAAG,EAAE,CAAC;AAAC,EAAA,MAAM,EAAN;AAAD,CAAD,CAAhB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Pack } from '../kernel_names';\nimport { convertToTensorArray } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.stack([a, b, c]).print();\n * ```\n *\n * @param tensors A list of tensor objects with the same shape and dtype.\n * @param axis The axis to stack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction stack_(tensors, axis = 0) {\n    const $tensors = convertToTensorArray(tensors, 'tensors', 'stack', 'string_or_numeric');\n    util.assert($tensors.length >= 1, () => 'Pass at least one tensor to tf.stack');\n    if ($tensors.length > 0) {\n        util.assert(axis <= $tensors[0].rank, () => 'Axis must be <= rank of the tensor');\n    }\n    const inputs = $tensors;\n    const attrs = { axis };\n    return ENGINE.runKernel(Pack, inputs, attrs);\n}\nexport const stack = op({ stack_ });\n//# sourceMappingURL=stack.js.map"]},"metadata":{},"sourceType":"module"}