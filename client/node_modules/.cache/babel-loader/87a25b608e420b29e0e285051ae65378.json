{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class IORouterRegistry {\n  constructor() {\n    this.saveRouters = [];\n    this.loadRouters = [];\n  }\n\n  static getInstance() {\n    if (IORouterRegistry.instance == null) {\n      IORouterRegistry.instance = new IORouterRegistry();\n    }\n\n    return IORouterRegistry.instance;\n  }\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n\n\n  static registerSaveRouter(saveRouter) {\n    IORouterRegistry.getInstance().saveRouters.push(saveRouter);\n  }\n  /**\n   * Register a load-handler router.\n   *\n   * @param loadRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `load` method defined or `null`.\n   */\n\n\n  static registerLoadRouter(loadRouter) {\n    IORouterRegistry.getInstance().loadRouters.push(loadRouter);\n  }\n  /**\n   * Look up IOHandler for saving, given a URL-like string.\n   *\n   * @param url\n   * @returns If only one match is found, an instance of IOHandler with the\n   * `save` method defined. If no match is found, `null`.\n   * @throws Error, if more than one match is found.\n   */\n\n\n  static getSaveHandlers(url) {\n    return IORouterRegistry.getHandlers(url, 'save');\n  }\n  /**\n   * Look up IOHandler for loading, given a URL-like string.\n   *\n   * @param url\n   * @param loadOptions Optional, custom load options.\n   * @returns All valid handlers for `url`, given the currently registered\n   *   handler routers.\n   */\n\n\n  static getLoadHandlers(url, loadOptions) {\n    return IORouterRegistry.getHandlers(url, 'load', loadOptions);\n  }\n\n  static getHandlers(url, handlerType, loadOptions) {\n    const validHandlers = [];\n    const routers = handlerType === 'load' ? IORouterRegistry.getInstance().loadRouters : IORouterRegistry.getInstance().saveRouters;\n    routers.forEach(router => {\n      const handler = router(url, loadOptions);\n\n      if (handler !== null) {\n        validHandlers.push(handler);\n      }\n    });\n    return validHandlers;\n  }\n\n}\nexport const registerSaveRouter = loudRouter => IORouterRegistry.registerSaveRouter(loudRouter);\nexport const registerLoadRouter = loudRouter => IORouterRegistry.registerLoadRouter(loudRouter);\nexport const getSaveHandlers = url => IORouterRegistry.getSaveHandlers(url);\nexport const getLoadHandlers = (url, loadOptions) => IORouterRegistry.getLoadHandlers(url, loadOptions);","map":{"version":3,"sources":["../../src/io/router_registry.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAOH,OAAM,MAAO,gBAAP,CAAuB;AAO3B,EAAA,WAAA,GAAA;AACE,SAAK,WAAL,GAAmB,EAAnB;AACA,SAAK,WAAL,GAAmB,EAAnB;AACD;;AAEyB,SAAX,WAAW,GAAA;AACxB,QAAI,gBAAgB,CAAC,QAAjB,IAA6B,IAAjC,EAAuC;AACrC,MAAA,gBAAgB,CAAC,QAAjB,GAA4B,IAAI,gBAAJ,EAA5B;AACD;;AACD,WAAO,gBAAgB,CAAC,QAAxB;AACD;AAED;;;;;AAKG;;;AACsB,SAAlB,kBAAkB,CAAC,UAAD,EAAqB;AAC5C,IAAA,gBAAgB,CAAC,WAAjB,GAA+B,WAA/B,CAA2C,IAA3C,CAAgD,UAAhD;AACD;AAED;;;;;AAKG;;;AACsB,SAAlB,kBAAkB,CAAC,UAAD,EAAqB;AAC5C,IAAA,gBAAgB,CAAC,WAAjB,GAA+B,WAA/B,CAA2C,IAA3C,CAAgD,UAAhD;AACD;AAED;;;;;;;AAOG;;;AACmB,SAAf,eAAe,CAAC,GAAD,EAAqB;AACzC,WAAO,gBAAgB,CAAC,WAAjB,CAA6B,GAA7B,EAAkC,MAAlC,CAAP;AACD;AAED;;;;;;;AAOG;;;AACmB,SAAf,eAAe,CAAC,GAAD,EAAuB,WAAvB,EAAgD;AAEpE,WAAO,gBAAgB,CAAC,WAAjB,CAA6B,GAA7B,EAAkC,MAAlC,EAA0C,WAA1C,CAAP;AACD;;AAEyB,SAAX,WAAW,CACtB,GADsB,EACA,WADA,EAEtB,WAFsB,EAEG;AAC3B,UAAM,aAAa,GAAgB,EAAnC;AACA,UAAM,OAAO,GAAG,WAAW,KAAK,MAAhB,GACZ,gBAAgB,CAAC,WAAjB,GAA+B,WADnB,GAEZ,gBAAgB,CAAC,WAAjB,GAA+B,WAFnC;AAGA,IAAA,OAAO,CAAC,OAAR,CAAgB,MAAM,IAAG;AACvB,YAAM,OAAO,GAAG,MAAM,CAAC,GAAD,EAAM,WAAN,CAAtB;;AACA,UAAI,OAAO,KAAK,IAAhB,EAAsB;AACpB,QAAA,aAAa,CAAC,IAAd,CAAmB,OAAnB;AACD;AACF,KALD;AAMA,WAAO,aAAP;AACD;;AA9E0B;AAiF7B,OAAO,MAAM,kBAAkB,GAAI,UAAD,IAC9B,gBAAgB,CAAC,kBAAjB,CAAoC,UAApC,CADG;AAEP,OAAO,MAAM,kBAAkB,GAAI,UAAD,IAC9B,gBAAgB,CAAC,kBAAjB,CAAoC,UAApC,CADG;AAEP,OAAO,MAAM,eAAe,GAAI,GAAD,IAC3B,gBAAgB,CAAC,eAAjB,CAAiC,GAAjC,CADG;AAEP,OAAO,MAAM,eAAe,GACxB,CAAC,GAAD,EAAuB,WAAvB,KACI,gBAAgB,CAAC,eAAjB,CAAiC,GAAjC,EAAsC,WAAtC,CAFD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class IORouterRegistry {\n    constructor() {\n        this.saveRouters = [];\n        this.loadRouters = [];\n    }\n    static getInstance() {\n        if (IORouterRegistry.instance == null) {\n            IORouterRegistry.instance = new IORouterRegistry();\n        }\n        return IORouterRegistry.instance;\n    }\n    /**\n     * Register a save-handler router.\n     *\n     * @param saveRouter A function that maps a URL-like string onto an instance\n     * of `IOHandler` with the `save` method defined or `null`.\n     */\n    static registerSaveRouter(saveRouter) {\n        IORouterRegistry.getInstance().saveRouters.push(saveRouter);\n    }\n    /**\n     * Register a load-handler router.\n     *\n     * @param loadRouter A function that maps a URL-like string onto an instance\n     * of `IOHandler` with the `load` method defined or `null`.\n     */\n    static registerLoadRouter(loadRouter) {\n        IORouterRegistry.getInstance().loadRouters.push(loadRouter);\n    }\n    /**\n     * Look up IOHandler for saving, given a URL-like string.\n     *\n     * @param url\n     * @returns If only one match is found, an instance of IOHandler with the\n     * `save` method defined. If no match is found, `null`.\n     * @throws Error, if more than one match is found.\n     */\n    static getSaveHandlers(url) {\n        return IORouterRegistry.getHandlers(url, 'save');\n    }\n    /**\n     * Look up IOHandler for loading, given a URL-like string.\n     *\n     * @param url\n     * @param loadOptions Optional, custom load options.\n     * @returns All valid handlers for `url`, given the currently registered\n     *   handler routers.\n     */\n    static getLoadHandlers(url, loadOptions) {\n        return IORouterRegistry.getHandlers(url, 'load', loadOptions);\n    }\n    static getHandlers(url, handlerType, loadOptions) {\n        const validHandlers = [];\n        const routers = handlerType === 'load' ?\n            IORouterRegistry.getInstance().loadRouters :\n            IORouterRegistry.getInstance().saveRouters;\n        routers.forEach(router => {\n            const handler = router(url, loadOptions);\n            if (handler !== null) {\n                validHandlers.push(handler);\n            }\n        });\n        return validHandlers;\n    }\n}\nexport const registerSaveRouter = (loudRouter) => IORouterRegistry.registerSaveRouter(loudRouter);\nexport const registerLoadRouter = (loudRouter) => IORouterRegistry.registerLoadRouter(loudRouter);\nexport const getSaveHandlers = (url) => IORouterRegistry.getSaveHandlers(url);\nexport const getLoadHandlers = (url, loadOptions) => IORouterRegistry.getLoadHandlers(url, loadOptions);\n//# sourceMappingURL=router_registry.js.map"]},"metadata":{},"sourceType":"module"}