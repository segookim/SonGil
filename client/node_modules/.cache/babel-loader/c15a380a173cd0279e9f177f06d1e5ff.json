{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRN, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function lRN(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var depthRadius = attrs.depthRadius,\n      bias = attrs.bias,\n      alpha = attrs.alpha,\n      beta = attrs.beta;\n  assertNotComplex(x, 'LRN');\n  var channels = x.shape[3];\n  var maxD = channels - 1;\n  var xValues = backend.data.get(x.dataId).values;\n  var size = util.sizeFromShape(x.shape);\n  var result = new Float32Array(size);\n\n  function sumAcrossChannels(offset) {\n    var currentChannel = offset % channels;\n    var beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    var endSumOffset = offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n    var sum = 0.0;\n\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      var z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n\n    return sum;\n  }\n\n  for (var offset = 0; offset < size; offset++) {\n    var sum = sumAcrossChannels(offset);\n    var val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\nexport var lRNConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN\n};","map":{"version":3,"sources":["../../src/kernels/LRN.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,GAAlC,EAAoF,IAApF,QAA+F,uBAA/F;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAU,GAAV,CACF,IADE,EACiE;AAAA,MAE9D,MAF8D,GAEpC,IAFoC,CAE9D,MAF8D;AAAA,MAEtD,OAFsD,GAEpC,IAFoC,CAEtD,OAFsD;AAAA,MAE7C,KAF6C,GAEpC,IAFoC,CAE7C,KAF6C;AAAA,MAG9D,CAH8D,GAGzD,MAHyD,CAG9D,CAH8D;AAAA,MAI9D,WAJ8D,GAI5B,KAJ4B,CAI9D,WAJ8D;AAAA,MAIjD,IAJiD,GAI5B,KAJ4B,CAIjD,IAJiD;AAAA,MAI3C,KAJ2C,GAI5B,KAJ4B,CAI3C,KAJ2C;AAAA,MAIpC,IAJoC,GAI5B,KAJ4B,CAIpC,IAJoC;AAMrE,EAAA,gBAAgB,CAAC,CAAD,EAAI,KAAJ,CAAhB;AAEA,MAAM,QAAQ,GAAG,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAjB;AACA,MAAM,IAAI,GAAG,QAAQ,GAAG,CAAxB;AACA,MAAM,OAAO,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAA3C;AACA,MAAM,IAAI,GAAG,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,CAAb;AACA,MAAM,MAAM,GAAG,IAAI,YAAJ,CAAiB,IAAjB,CAAf;;AAEA,WAAS,iBAAT,CAA2B,MAA3B,EAAyC;AACvC,QAAM,cAAc,GAAG,MAAM,GAAG,QAAhC;AACA,QAAI,cAAc,GACd,MAAM,GAAG,cAAT,GAA0B,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,cAAc,GAAG,WAA7B,CAD9B;AAEA,QAAM,YAAY,GACd,MAAM,GAAG,cAAT,GAA0B,IAAI,CAAC,GAAL,CAAS,cAAc,GAAG,WAA1B,EAAuC,IAAvC,CAD9B;AAGA,QAAI,GAAG,GAAG,GAAV;;AACA,WAAO,cAAc,IAAI,YAAzB,EAAuC,cAAc,EAArD,EAAyD;AACvD,UAAM,CAAC,GAAG,OAAO,CAAC,cAAD,CAAjB;AACA,MAAA,GAAG,IAAI,CAAC,GAAG,CAAX;AACD;;AACD,WAAO,GAAP;AACD;;AAED,OAAK,IAAI,MAAM,GAAG,CAAlB,EAAqB,MAAM,GAAG,IAA9B,EAAoC,MAAM,EAA1C,EAA8C;AAC5C,QAAM,GAAG,GAAG,iBAAiB,CAAC,MAAD,CAA7B;AACA,QAAM,GAAG,GAAG,OAAO,CAAC,MAAD,CAAP,GAAkB,IAAI,CAAC,GAAL,CAAS,IAAI,GAAG,KAAK,GAAG,GAAxB,EAA6B,CAAC,IAA9B,CAA9B;AACA,IAAA,MAAM,CAAC,MAAD,CAAN,GAAiB,GAAjB;AACD;;AAED,SAAO,OAAO,CAAC,cAAR,CAAuB,CAAC,CAAC,KAAzB,EAAgC,CAAC,CAAC,KAAlC,EAAyC,MAAzC,CAAP;AACD;AAED,OAAO,IAAM,SAAS,GAAiB;AACrC,EAAA,UAAU,EAAE,GADyB;AAErC,EAAA,WAAW,EAAE,KAFwB;AAGrC,EAAA,UAAU,EAAE;AAHyB,CAAhC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRN, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function lRN(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { depthRadius, bias, alpha, beta } = attrs;\n    assertNotComplex(x, 'LRN');\n    const channels = x.shape[3];\n    const maxD = channels - 1;\n    const xValues = backend.data.get(x.dataId).values;\n    const size = util.sizeFromShape(x.shape);\n    const result = new Float32Array(size);\n    function sumAcrossChannels(offset) {\n        const currentChannel = offset % channels;\n        let beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n        const endSumOffset = offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n        let sum = 0.0;\n        for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n            const z = xValues[beginSumOffset];\n            sum += z * z;\n        }\n        return sum;\n    }\n    for (let offset = 0; offset < size; offset++) {\n        const sum = sumAcrossChannels(offset);\n        const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n        result[offset] = val;\n    }\n    return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\nexport const lRNConfig = {\n    kernelName: LRN,\n    backendName: 'cpu',\n    kernelFunc: lRN\n};\n//# sourceMappingURL=LRN.js.map"]},"metadata":{},"sourceType":"module"}