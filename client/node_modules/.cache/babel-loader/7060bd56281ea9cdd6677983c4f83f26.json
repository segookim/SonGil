{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace, util } from '@tensorflow/tfjs-core';\nexport function depthToSpace(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var blockSize = attrs.blockSize,\n      dataFormat = attrs.dataFormat;\n  util.assert(dataFormat === 'NHWC', function () {\n    return \"Only NHWC dataFormat supported on CPU for depthToSpace. Got \".concat(dataFormat);\n  });\n  util.assert(blockSize > 1, function () {\n    return \"blockSize should be > 1 for depthToSpace, but was: \".concat(blockSize);\n  });\n  var batchSize = x.shape[0];\n  var inputHeight = x.shape[1];\n  var inputWidth = x.shape[2];\n  var inputDepth = x.shape[3];\n  var outputHeight = inputHeight * blockSize;\n  var outputWidth = inputWidth * blockSize;\n  var outputDepth = inputDepth / (blockSize * blockSize);\n  var xValues = backend.data.get(x.dataId).values;\n  var result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n  var outputIdx = 0;\n\n  for (var b = 0; b < batchSize; ++b) {\n    for (var h = 0; h < outputHeight; ++h) {\n      var inH = Math.floor(h / blockSize);\n      var offsetH = h % blockSize;\n\n      for (var w = 0; w < outputWidth; ++w) {\n        var inW = Math.floor(w / blockSize);\n        var offsetW = w % blockSize;\n        var offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n\n        for (var d = 0; d < outputDepth; ++d) {\n          var inD = d + offsetD;\n          var inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo([batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\nexport var depthToSpaceConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace\n};","map":{"version":3,"sources":["../../src/kernels/DepthToSpace.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace, util } from '@tensorflow/tfjs-core';\nexport function depthToSpace(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockSize, dataFormat } = attrs;\n    util.assert(dataFormat === 'NHWC', () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);\n    util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n    const batchSize = x.shape[0];\n    const inputHeight = x.shape[1];\n    const inputWidth = x.shape[2];\n    const inputDepth = x.shape[3];\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n    const xValues = backend.data.get(x.dataId).values;\n    const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n    let outputIdx = 0;\n    for (let b = 0; b < batchSize; ++b) {\n        for (let h = 0; h < outputHeight; ++h) {\n            const inH = Math.floor(h / blockSize);\n            const offsetH = (h % blockSize);\n            for (let w = 0; w < outputWidth; ++w) {\n                const inW = Math.floor(w / blockSize);\n                const offsetW = (w % blockSize);\n                const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n                for (let d = 0; d < outputDepth; ++d) {\n                    const inD = d + offsetD;\n                    const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n                    result[outputIdx++] = xValues[inputIdx];\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo([batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\nexport const depthToSpaceConfig = {\n    kernelName: DepthToSpace,\n    backendName: 'cpu',\n    kernelFunc: depthToSpace\n};\n//# sourceMappingURL=DepthToSpace.js.map"]},"metadata":{},"sourceType":"module"}