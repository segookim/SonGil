{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concat(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    axis\n  } = attrs;\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  } // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n\n\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n\n  if ($inputs.length === 1) {\n    return identity({\n      inputs: {\n        x: $inputs[0]\n      },\n      backend\n    });\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map(t => real({\n      inputs: {\n        input: t\n      },\n      backend\n    }));\n    const imags = $inputs.map(t => imag({\n      inputs: {\n        input: t\n      },\n      backend\n    }));\n    const realConcated = concat({\n      inputs: reals,\n      backend,\n      attrs: {\n        axis: $axis\n      }\n    });\n    const imagConcated = concat({\n      inputs: imags,\n      backend,\n      attrs: {\n        axis: $axis\n      }\n    });\n    const result = complex({\n      inputs: {\n        real: realConcated,\n        imag: imagConcated\n      },\n      backend\n    });\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n    return result;\n  } // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n\n\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({\n      inputs: {\n        x: t\n      },\n      backend,\n      attrs: {\n        shape\n      }\n    });\n  });\n  const inputsValShapes = inputs2D.map(t => {\n    return {\n      vals: backend.data.get(t.dataId).values,\n      shape: t.shape\n    };\n  }); // Concats 2d tensors along axis=1.\n\n  outShape = backend_util.computeOutShape(inputs2D.map(t => t.shape), 1\n  /* axis */\n  );\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals = concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n  const finalOutShape = backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n  const outInfo = backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return outInfo;\n}\nexport const concatConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat\n};","map":{"version":3,"sources":["../../src/kernels/Concat.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concat(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n    let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n    if (util.sizeFromShape(outShape) === 0) {\n        return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n    }\n    // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n    const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n    if ($inputs.length === 1) {\n        return identity({ inputs: { x: $inputs[0] }, backend });\n    }\n    const shapes = $inputs.map(t => t.shape);\n    backend_util.assertParamsConsistent(shapes, $axis);\n    if ($inputs[0].dtype === 'complex64') {\n        const reals = $inputs.map((t) => real({ inputs: { input: t }, backend }));\n        const imags = $inputs.map((t) => imag({ inputs: { input: t }, backend }));\n        const realConcated = concat({ inputs: reals, backend, attrs: { axis: $axis } });\n        const imagConcated = concat({ inputs: imags, backend, attrs: { axis: $axis } });\n        const result = complex({ inputs: { real: realConcated, imag: imagConcated }, backend });\n        reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n        imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n        backend.disposeIntermediateTensorInfo(realConcated);\n        backend.disposeIntermediateTensorInfo(imagConcated);\n        return result;\n    }\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const inputs2D = $inputs.map(t => {\n        const innerSize = util.sizeFromShape(t.shape.slice($axis));\n        const shape = [-1, innerSize];\n        return reshape({ inputs: { x: t }, backend, attrs: { shape } });\n    });\n    const inputsValShapes = inputs2D.map(t => {\n        return { vals: backend.data.get(t.dataId).values, shape: t.shape };\n    });\n    // Concats 2d tensors along axis=1.\n    outShape =\n        backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = inputs2D[0].shape[0] === 1;\n    const outVals = concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n    const finalOutShape = backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n    const outInfo = backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n    inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return outInfo;\n}\nexport const concatConfig = {\n    kernelName: Concat,\n    backendName: 'cpu',\n    kernelFunc: concat\n};\n//# sourceMappingURL=Concat.js.map"]},"metadata":{},"sourceType":"module"}