{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthwiseConv2dNative } from '../kernel_names';\nimport * as conv_util from '../ops/conv_util';\nimport { depthwiseConv2dNativeBackpropFilter } from '../ops/depthwise_conv2d_native_backprop_filter';\nimport { depthwiseConv2dNativeBackpropInput } from '../ops/depthwise_conv2d_native_backprop_input';\nimport * as util from '../util';\nexport const depthwiseConv2dNativeGradConfig = {\n  kernelName: DepthwiseConv2dNative,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy, saved, attrs) => {\n    const {\n      dilations,\n      strides,\n      pad,\n      dimRoundingMode\n    } = attrs;\n    const $dilations = dilations == null ? [1, 1] : dilations;\n    util.assert(conv_util.tupleValuesAreOne($dilations), () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' + `greater than 1 are not yet supported. Got dilations ` + `'${$dilations}'`);\n    const [x, filter] = saved;\n    util.assert(x.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be ` + `rank 4, but got rank ${x.rank}.`);\n    util.assert(filter.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be ` + `rank 4, but got rank ${filter.rank}.`);\n    util.assert(x.shape[3] === filter.shape[2], () => `Error in gradient of depthwiseConv2d: number of input ` + `channels (${x.shape[3]}) must match the inChannels dimension ` + `in filter ${filter.shape[2]}.`);\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in gradient of depthwiseConv2d: Either strides or ' + `dilations must be  1. Got strides ${strides} and dilations ` + `'${$dilations}'.`);\n\n    if (dimRoundingMode != null) {\n      util.assert(util.isInt(pad), () => `Error in depthwiseConv2d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n\n    return {\n      x: () => depthwiseConv2dNativeBackpropInput(x.shape, dy, filter, strides, pad, dilations, dimRoundingMode),\n      filter: () => depthwiseConv2dNativeBackpropFilter(x, dy, filter.shape, strides, pad, dilations, dimRoundingMode)\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/DepthwiseConv2dNative_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,qBAAR,QAAgE,iBAAhE;AAEA,OAAO,KAAK,SAAZ,MAA2B,kBAA3B;AACA,SAAQ,mCAAR,QAAkD,gDAAlD;AACA,SAAQ,kCAAR,QAAiD,+CAAjD;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,OAAO,MAAM,+BAA+B,GAAe;AACzD,EAAA,UAAU,EAAE,qBAD6C;AAEzD,EAAA,YAAY,EAAE,CAAC,GAAD,EAAM,QAAN,CAF2C;AAGzD,EAAA,QAAQ,EAAE,CAAC,EAAD,EAAe,KAAf,EAAgC,KAAhC,KAAuD;AAC/D,UAAM;AAAC,MAAA,SAAD;AAAY,MAAA,OAAZ;AAAqB,MAAA,GAArB;AAA0B,MAAA;AAA1B,QACF,KADJ;AAGA,UAAM,UAAU,GAAG,SAAS,IAAI,IAAb,GAAoB,CAAC,CAAD,EAAI,CAAJ,CAApB,GAA6B,SAAhD;AAEA,IAAA,IAAI,CAAC,MAAL,CACI,SAAS,CAAC,iBAAV,CAA4B,UAA5B,CADJ,EAEI,MAAM,gEACF,sDADE,GAEF,IAAI,UAAU,GAJtB;AAMA,UAAM,CAAC,CAAD,EAAI,MAAJ,IAAc,KAApB;AAEA,IAAA,IAAI,CAAC,MAAL,CACI,CAAC,CAAC,IAAF,KAAW,CADf,EAEI,MAAM,4DAAA,GACF,wBAAwB,CAAC,CAAC,IAAI,GAHtC;AAIA,IAAA,IAAI,CAAC,MAAL,CACI,MAAM,CAAC,IAAP,KAAgB,CADpB,EAEI,MAAM,6DAAA,GACF,wBAAwB,MAAM,CAAC,IAAI,GAH3C;AAIA,IAAA,IAAI,CAAC,MAAL,CACI,CAAC,CAAC,KAAF,CAAQ,CAAR,MAAe,MAAM,CAAC,KAAP,CAAa,CAAb,CADnB,EAEI,MAAM,wDAAA,GACF,aAAa,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAU,wCADrB,GAEF,aAAa,MAAM,CAAC,KAAP,CAAa,CAAb,CAAe,GAJpC;AAMA,IAAA,IAAI,CAAC,MAAL,CACI,SAAS,CAAC,8BAAV,CAAyC,OAAzC,EAAkD,UAAlD,CADJ,EAEI,MAAM,6DACF,qCAAqC,OAAO,iBAD1C,GAEF,IAAI,UAAU,IAJtB;;AAMA,QAAI,eAAe,IAAI,IAAvB,EAA6B;AAC3B,MAAA,IAAI,CAAC,MAAL,CACI,IAAI,CAAC,KAAL,CAAW,GAAX,CADJ,EAEI,MACI,+DAAA,GACA,mBAAmB,eAAe,gBAAgB,GAAG,GAJ7D;AAKD;;AAED,WAAO;AACL,MAAA,CAAC,EAAE,MAAM,kCAAkC,CACvC,CAAC,CAAC,KADqC,EAC9B,EAD8B,EAC1B,MAD0B,EAClB,OADkB,EACT,GADS,EACJ,SADI,EACO,eADP,CADtC;AAGL,MAAA,MAAM,EAAE,MAAM,mCAAmC,CAC7C,CAD6C,EAC1C,EAD0C,EACtC,MAAM,CAAC,KAD+B,EACxB,OADwB,EACf,GADe,EACV,SADU,EACC,eADD;AAH5C,KAAP;AAMD;AAnDwD,CAApD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthwiseConv2dNative } from '../kernel_names';\nimport * as conv_util from '../ops/conv_util';\nimport { depthwiseConv2dNativeBackpropFilter } from '../ops/depthwise_conv2d_native_backprop_filter';\nimport { depthwiseConv2dNativeBackpropInput } from '../ops/depthwise_conv2d_native_backprop_input';\nimport * as util from '../util';\nexport const depthwiseConv2dNativeGradConfig = {\n    kernelName: DepthwiseConv2dNative,\n    inputsToSave: ['x', 'filter'],\n    gradFunc: (dy, saved, attrs) => {\n        const { dilations, strides, pad, dimRoundingMode } = attrs;\n        const $dilations = dilations == null ? [1, 1] : dilations;\n        util.assert(conv_util.tupleValuesAreOne($dilations), () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${$dilations}'`);\n        const [x, filter] = saved;\n        util.assert(x.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be ` +\n            `rank 4, but got rank ${x.rank}.`);\n        util.assert(filter.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be ` +\n            `rank 4, but got rank ${filter.rank}.`);\n        util.assert(x.shape[3] === filter.shape[2], () => `Error in gradient of depthwiseConv2d: number of input ` +\n            `channels (${x.shape[3]}) must match the inChannels dimension ` +\n            `in filter ${filter.shape[2]}.`);\n        util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in gradient of depthwiseConv2d: Either strides or ' +\n            `dilations must be  1. Got strides ${strides} and dilations ` +\n            `'${$dilations}'.`);\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), () => `Error in depthwiseConv2d: pad must be an integer when using, ` +\n                `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n        }\n        return {\n            x: () => depthwiseConv2dNativeBackpropInput(x.shape, dy, filter, strides, pad, dilations, dimRoundingMode),\n            filter: () => depthwiseConv2dNativeBackpropFilter(x, dy, filter.shape, strides, pad, dilations, dimRoundingMode),\n        };\n    }\n};\n//# sourceMappingURL=DepthwiseConv2dNative_grad.js.map"]},"metadata":{},"sourceType":"module"}