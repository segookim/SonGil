{"ast":null,"code":"import _slicedToArray from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherNd, util } from '@tensorflow/tfjs-core';\nimport { GatherNDProgram } from '../gather_nd_gpu';\nimport { reshape } from './Reshape';\nexport function gatherNd(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var params = inputs.params,\n      indices = inputs.indices;\n  var indicesShape = indices.shape;\n  var sliceRank = indicesShape[indicesShape.length - 1];\n\n  var _backend_util$prepare = backend_util.prepareAndValidate(params, indices),\n      _backend_util$prepare2 = _slicedToArray(_backend_util$prepare, 4),\n      resultShape = _backend_util$prepare2[0],\n      numSlices = _backend_util$prepare2[1],\n      sliceSize = _backend_util$prepare2[2],\n      strides = _backend_util$prepare2[3];\n\n  var flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend: backend,\n    attrs: {\n      shape: [numSlices, sliceRank]\n    }\n  });\n  var flattenX = reshape({\n    inputs: {\n      x: params\n    },\n    backend: backend,\n    attrs: {\n      shape: [util.sizeFromShape(params.shape) / sliceSize, sliceSize]\n    }\n  });\n  var program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n  var res = backend.runWebGLProgram(program, [flattenX, flattenIndices], flattenX.dtype);\n  var reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend: backend,\n    attrs: {\n      shape: resultShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\nexport var gatherNdConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd\n};","map":{"version":3,"sources":["../../src/kernels/GatherNd.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsB,QAAtB,EAAsF,IAAtF,QAAiG,uBAAjG;AAGA,SAAQ,eAAR,QAA8B,kBAA9B;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAU,QAAV,CACF,IADE,EACuD;AAAA,MACpD,MADoD,GACjC,IADiC,CACpD,MADoD;AAAA,MAC5C,OAD4C,GACjC,IADiC,CAC5C,OAD4C;AAAA,MAEpD,MAFoD,GAEjC,MAFiC,CAEpD,MAFoD;AAAA,MAE5C,OAF4C,GAEjC,MAFiC,CAE5C,OAF4C;AAI3D,MAAM,YAAY,GAAG,OAAO,CAAC,KAA7B;AACA,MAAM,SAAS,GAAG,YAAY,CAAC,YAAY,CAAC,MAAb,GAAsB,CAAvB,CAA9B;;AAL2D,8BAQvD,YAAY,CAAC,kBAAb,CAAgC,MAAhC,EAAwC,OAAxC,CARuD;AAAA;AAAA,MAOpD,WAPoD;AAAA,MAOvC,SAPuC;AAAA,MAO5B,SAP4B;AAAA,MAOjB,OAPiB;;AAU3D,MAAM,cAAc,GAAG,OAAO,CAC1B;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAuB,IAAA,OAAO,EAAP,OAAvB;AAAgC,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE,CAAC,SAAD,EAAY,SAAZ;AAAR;AAAvC,GAD0B,CAA9B;AAEA,MAAM,QAAQ,GAAG,OAAO,CAAC;AACvB,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KADe;AAEvB,IAAA,OAAO,EAAP,OAFuB;AAGvB,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE,CAAE,IAAI,CAAC,aAAL,CAAmB,MAAM,CAAC,KAA1B,IAAmC,SAArC,EAAiD,SAAjD;AAAR;AAHgB,GAAD,CAAxB;AAMA,MAAM,OAAO,GACT,IAAI,eAAJ,CAAoB,SAApB,EAA+B,OAA/B,EAAwC,CAAC,SAAD,EAAY,SAAZ,CAAxC,CADJ;AAEA,MAAM,GAAG,GAAG,OAAO,CAAC,eAAR,CACR,OADQ,EACC,CAAC,QAAD,EAAW,cAAX,CADD,EAC6B,QAAQ,CAAC,KADtC,CAAZ;AAGA,MAAM,QAAQ,GACV,OAAO,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAmB,IAAA,OAAO,EAAP,OAAnB;AAA4B,IAAA,KAAK,EAAE;AAAC,MAAA,KAAK,EAAE;AAAR;AAAnC,GAAD,CADX;AAGA,EAAA,OAAO,CAAC,6BAAR,CAAsC,cAAtC;AACA,EAAA,OAAO,CAAC,6BAAR,CAAsC,QAAtC;AACA,EAAA,OAAO,CAAC,6BAAR,CAAsC,GAAtC;AAEA,SAAO,QAAP;AACD;AAED,OAAO,IAAM,cAAc,GAAiB;AAC1C,EAAA,UAAU,EAAE,QAD8B;AAE1C,EAAA,WAAW,EAAE,OAF6B;AAG1C,EAAA,UAAU,EAAE;AAH8B,CAArC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherNd, util } from '@tensorflow/tfjs-core';\nimport { GatherNDProgram } from '../gather_nd_gpu';\nimport { reshape } from './Reshape';\nexport function gatherNd(args) {\n    const { inputs, backend } = args;\n    const { params, indices } = inputs;\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n    const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(params, indices);\n    const flattenIndices = reshape({ inputs: { x: indices }, backend, attrs: { shape: [numSlices, sliceRank] } });\n    const flattenX = reshape({\n        inputs: { x: params },\n        backend,\n        attrs: { shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize] }\n    });\n    const program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n    const res = backend.runWebGLProgram(program, [flattenX, flattenIndices], flattenX.dtype);\n    const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape: resultShape } });\n    backend.disposeIntermediateTensorInfo(flattenIndices);\n    backend.disposeIntermediateTensorInfo(flattenX);\n    backend.disposeIntermediateTensorInfo(res);\n    return reshaped;\n}\nexport const gatherNdConfig = {\n    kernelName: GatherNd,\n    backendName: 'webgl',\n    kernelFunc: gatherNd\n};\n//# sourceMappingURL=GatherNd.js.map"]},"metadata":{},"sourceType":"module"}