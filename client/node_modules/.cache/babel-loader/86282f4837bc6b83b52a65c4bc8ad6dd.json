{"ast":null,"code":"import _slicedToArray from \"/Users/kimkiwoong/songil2/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2DBackpropInput(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var dy = inputs.dy,\n      filter = inputs.filter;\n  var inputShape = attrs.inputShape,\n      strides = attrs.strides,\n      pad = attrs.pad,\n      dataFormat = attrs.dataFormat,\n      dimRoundingMode = attrs.dimRoundingMode;\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n  var filterStrides = util.computeStrides(filter.shape);\n  var dyStrides = util.computeStrides(dy.shape);\n  var $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  var convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode, false, $dataFormat);\n  var dx = new TensorBuffer(convInfo.inShape, 'float32');\n  var dxValues = dx.values;\n  var dyValues = backend.data.get(dy.dataId).values;\n  var fltValues = backend.data.get(filter.dataId).values;\n\n  var _filterStrides = _slicedToArray(filterStrides, 3),\n      fltS0 = _filterStrides[0],\n      fltS1 = _filterStrides[1],\n      fltS2 = _filterStrides[2];\n\n  var batchSize = convInfo.batchSize,\n      filterHeight = convInfo.filterHeight,\n      filterWidth = convInfo.filterWidth,\n      inChannels = convInfo.inChannels,\n      inHeight = convInfo.inHeight,\n      inWidth = convInfo.inWidth,\n      outChannels = convInfo.outChannels,\n      outHeight = convInfo.outHeight,\n      outWidth = convInfo.outWidth,\n      strideHeight = convInfo.strideHeight,\n      strideWidth = convInfo.strideWidth;\n  $dataFormat = convInfo.dataFormat;\n  var topPad = filterHeight - 1 - convInfo.padInfo.top;\n  var leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  var isChannelsLast = $dataFormat === 'channelsLast';\n  var xBatchStride = dx.strides[0];\n  var xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  var xColStride = isChannelsLast ? dx.strides[2] : 1;\n  var xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  var yBatchStride = dyStrides[0];\n  var yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  var yColStride = isChannelsLast ? dyStrides[2] : 1;\n  var yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (var b = 0; b < batchSize; ++b) {\n    for (var d1 = 0; d1 < inChannels; ++d1) {\n      for (var xR = 0; xR < inHeight; ++xR) {\n        var xRCorner = xR - topPad;\n        var xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        var yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (var xC = 0; xC < inWidth; ++xC) {\n          var xCCorner = xC - leftPad;\n          var xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          var yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n          var dotProd = 0;\n\n          for (var yR = xRMin; yR < yRMax; ++yR) {\n            var wR = yR * strideHeight - xRCorner;\n\n            for (var yC = xCMin; yC < yCMax; ++yC) {\n              var wC = yC * strideWidth - xCCorner;\n              var dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;\n              var fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (var d2 = 0; d2 < outChannels; ++d2) {\n                var pixel = dyValues[dyOffset + yChannelStride * d2];\n                var weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n\n          var dxOffset = xBatchStride * b + xRowStride * xR + xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport var conv2DBackpropInputConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput\n};","map":{"version":3,"sources":["../../src/kernels/Conv2DBackpropInput.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2DBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { inputShape, strides, pad, dataFormat, dimRoundingMode } = attrs;\n    assertNotComplex([dy, filter], 'conv2dBackpropInput');\n    const filterStrides = util.computeStrides(filter.shape);\n    const dyStrides = util.computeStrides(dy.shape);\n    let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n    const dx = new TensorBuffer(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const dyValues = backend.data.get(dy.dataId).values;\n    const fltValues = backend.data.get(filter.dataId).values;\n    const [fltS0, fltS1, fltS2] = filterStrides;\n    const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;\n    $dataFormat = convInfo.dataFormat;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    const isChannelsLast = $dataFormat === 'channelsLast';\n    const xBatchStride = dx.strides[0];\n    const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n    const xColStride = isChannelsLast ? dx.strides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n    const yBatchStride = dyStrides[0];\n    const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n    const yColStride = isChannelsLast ? dyStrides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n    for (let b = 0; b < batchSize; ++b) {\n        for (let d1 = 0; d1 < inChannels; ++d1) {\n            for (let xR = 0; xR < inHeight; ++xR) {\n                const xRCorner = xR - topPad;\n                const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                for (let xC = 0; xC < inWidth; ++xC) {\n                    const xCCorner = xC - leftPad;\n                    const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                    const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                    let dotProd = 0;\n                    for (let yR = xRMin; yR < yRMax; ++yR) {\n                        const wR = yR * strideHeight - xRCorner;\n                        for (let yC = xCMin; yC < yCMax; ++yC) {\n                            const wC = yC * strideWidth - xCCorner;\n                            const dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;\n                            const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                                fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n                            for (let d2 = 0; d2 < outChannels; ++d2) {\n                                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                                const weight = fltValues[fltOffset + d2];\n                                dotProd += pixel * weight;\n                            }\n                        }\n                    }\n                    const dxOffset = xBatchStride * b + xRowStride * xR +\n                        xColStride * xC + xChannelStride * d1;\n                    dxValues[dxOffset] = dotProd;\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const conv2DBackpropInputConfig = {\n    kernelName: Conv2DBackpropInput,\n    backendName: 'cpu',\n    kernelFunc: conv2DBackpropInput\n};\n//# sourceMappingURL=Conv2DBackpropInput.js.map"]},"metadata":{},"sourceType":"module"}