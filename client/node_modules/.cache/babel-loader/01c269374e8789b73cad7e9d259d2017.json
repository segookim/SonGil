{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FloorDiv } from '../kernel_names';\nimport { assertAndGetBroadcastShape, getReductionAxes } from '../ops/broadcast_util';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { square } from '../ops/square';\nimport { sum } from '../ops/sum';\nexport const floorDivGradConfig = {\n  kernelName: FloorDiv,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      const res = div(dy, cast(b, 'float32'));\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), a.shape);\n      }\n\n      return res;\n    };\n\n    const derB = () => {\n      let res = mul(dy, cast(a, 'float32'));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = reshape(sum(res, reduceAxes), b.shape);\n      }\n\n      const tmp = square(b);\n      return neg(div(res, cast(tmp, 'float32')));\n    };\n\n    return {\n      a: derA,\n      b: derB\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/FloorDiv_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,QAAR,QAAuB,iBAAvB;AAEA,SAAQ,0BAAR,EAAoC,gBAApC,QAA2D,uBAA3D;AACA,SAAQ,IAAR,QAAmB,aAAnB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,OAAR,QAAsB,gBAAtB;AACA,SAAQ,MAAR,QAAqB,eAArB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AAGA,OAAO,MAAM,kBAAkB,GAAe;AAC5C,EAAA,UAAU,EAAE,QADgC;AAE5C,EAAA,YAAY,EAAE,CAAC,GAAD,EAAM,GAAN,CAF8B;AAG5C,EAAA,QAAQ,EAAE,CAAC,EAAD,EAAa,KAAb,KAAgC;AACxC,UAAM,CAAC,CAAD,EAAI,CAAJ,IAAS,KAAf;AACA,UAAM,QAAQ,GAAG,0BAA0B,CAAC,CAAC,CAAC,KAAH,EAAU,CAAC,CAAC,KAAZ,CAA3C;;AAEA,UAAM,IAAI,GAAG,MAAK;AAChB,YAAM,GAAG,GAAG,GAAG,CAAC,EAAD,EAAK,IAAI,CAAC,CAAD,EAAI,SAAJ,CAAT,CAAf;AACA,YAAM,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC,KAAH,EAAU,QAAV,CAAnC;;AACA,UAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;AACzB,eAAO,OAAO,CAAC,GAAG,CAAC,GAAD,EAAM,UAAN,CAAJ,EAAuB,CAAC,CAAC,KAAzB,CAAd;AACD;;AACD,aAAO,GAAP;AACD,KAPD;;AAQA,UAAM,IAAI,GAAG,MAAK;AAChB,UAAI,GAAG,GAAG,GAAG,CAAC,EAAD,EAAK,IAAI,CAAC,CAAD,EAAI,SAAJ,CAAT,CAAb;AACA,YAAM,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC,KAAH,EAAU,QAAV,CAAnC;;AACA,UAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;AACzB,QAAA,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAD,EAAM,UAAN,CAAJ,EAAuB,CAAC,CAAC,KAAzB,CAAb;AACD;;AACD,YAAM,GAAG,GAAG,MAAM,CAAC,CAAD,CAAlB;AACA,aAAO,GAAG,CAAC,GAAG,CAAC,GAAD,EAAM,IAAI,CAAC,GAAD,EAAM,SAAN,CAAV,CAAJ,CAAV;AACD,KARD;;AASA,WAAO;AAAC,MAAA,CAAC,EAAE,IAAJ;AAAU,MAAA,CAAC,EAAE;AAAb,KAAP;AACD;AAzB2C,CAAvC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FloorDiv } from '../kernel_names';\nimport { assertAndGetBroadcastShape, getReductionAxes } from '../ops/broadcast_util';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { square } from '../ops/square';\nimport { sum } from '../ops/sum';\nexport const floorDivGradConfig = {\n    kernelName: FloorDiv,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n        const derA = () => {\n            const res = div(dy, cast(b, 'float32'));\n            const reduceAxes = getReductionAxes(a.shape, outShape);\n            if (reduceAxes.length > 0) {\n                return reshape(sum(res, reduceAxes), a.shape);\n            }\n            return res;\n        };\n        const derB = () => {\n            let res = mul(dy, cast(a, 'float32'));\n            const reduceAxes = getReductionAxes(b.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = reshape(sum(res, reduceAxes), b.shape);\n            }\n            const tmp = square(b);\n            return neg(div(res, cast(tmp, 'float32')));\n        };\n        return { a: derA, b: derB };\n    }\n};\n//# sourceMappingURL=FloorDiv_grad.js.map"]},"metadata":{},"sourceType":"module"}