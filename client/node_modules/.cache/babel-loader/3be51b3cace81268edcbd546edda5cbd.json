{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\nimport { util } from '@tensorflow/tfjs-core';\nimport { AssertionError, ValueError } from '../errors'; // tslint:enable\n\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\n\nexport function pyListRepeat(value, numValues) {\n  if (Array.isArray(value)) {\n    // tslint:disable-next-line:no-any\n    let newArray = [];\n\n    for (let i = 0; i < numValues; i++) {\n      newArray = newArray.concat(value);\n    }\n\n    return newArray;\n  } else {\n    const newArray = new Array(numValues);\n    newArray.fill(value);\n    return newArray;\n  }\n}\nexport function assert(val, message) {\n  if (!val) {\n    throw new AssertionError(message);\n  }\n}\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\n\nexport function count(array, refernce) {\n  let counter = 0;\n\n  for (const item of array) {\n    if (item === refernce) {\n      counter++;\n    }\n  }\n\n  return counter;\n}\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\n\nexport function singletonOrArray(xs) {\n  if (xs.length === 1) {\n    return xs[0];\n  }\n\n  return xs;\n}\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\n\nexport function toList(x) {\n  if (Array.isArray(x)) {\n    return x;\n  }\n\n  return [x];\n}\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\n\nexport function objectListUid(objs) {\n  const objectList = toList(objs);\n  let retVal = '';\n\n  for (const obj of objectList) {\n    if (obj.id == null) {\n      throw new ValueError(`Object ${obj} passed to objectListUid without an id`);\n    }\n\n    if (retVal !== '') {\n      retVal = retVal + ', ';\n    }\n\n    retVal = `${retVal}${Math.abs(obj.id)}`;\n  }\n\n  return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\n\nexport function toSnakeCase(name) {\n  const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n  const insecure = intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  /*\n   If the class is private the name starts with \"_\" which is not secure\n   for creating scopes. We prefix the name with \"private\" in this case.\n   */\n\n  if (insecure[0] !== '_') {\n    return insecure;\n  }\n\n  return 'private' + insecure;\n}\nexport function toCamelCase(identifier) {\n  // quick return for empty string or single character strings\n  if (identifier.length <= 1) {\n    return identifier;\n  } // Check for the underscore indicating snake_case\n\n\n  if (identifier.indexOf('_') === -1) {\n    return identifier;\n  }\n\n  return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n} // tslint:disable-next-line:no-any\n\nlet _GLOBAL_CUSTOM_OBJECTS = {};\nexport function serializeKerasObject(instance) {\n  if (instance === null || instance === undefined) {\n    return null;\n  }\n\n  const dict = {};\n  dict['className'] = instance.getClassName();\n  dict['config'] = instance.getConfig();\n  return dict;\n}\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\n\nfunction convertNDArrayScalarsInConfig(config) {\n  if (config == null || typeof config !== 'object') {\n    return;\n  } else if (Array.isArray(config)) {\n    config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n  } else {\n    const fields = Object.keys(config);\n\n    for (const field of fields) {\n      const value = config[field];\n\n      if (value != null && typeof value === 'object') {\n        if (!Array.isArray(value) && value['type'] === 'ndarray' && typeof value['value'] === 'number') {\n          config[field] = value['value'];\n        } else {\n          convertNDArrayScalarsInConfig(value);\n        }\n      }\n    }\n  }\n}\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\n\n\nexport function deserializeKerasObject(identifier, moduleObjects = {}, customObjects = {}, printableModuleName = 'object', fastWeightInit = false) {\n  // tslint:enable\n  if (typeof identifier === 'string') {\n    const functionName = identifier;\n    let fn;\n\n    if (functionName in customObjects) {\n      fn = customObjects[functionName];\n    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n    } else {\n      fn = moduleObjects[functionName];\n\n      if (fn == null) {\n        throw new ValueError(`Unknown ${printableModuleName}: ${identifier}. ` + `This may be due to one of the following reasons:\\n` + `1. The ${printableModuleName} is defined in Python, in which ` + `case it needs to be ported to TensorFlow.js or your JavaScript ` + `code.\\n` + `2. The custom ${printableModuleName} is defined in JavaScript, ` + `but is not registered properly with ` + `tf.serialization.registerClass().`); // TODO(cais): Add link to tutorial page on custom layers.\n      }\n    }\n\n    return fn;\n  } else {\n    // In this case we are dealing with a Keras config dictionary.\n    const config = identifier;\n\n    if (config['className'] == null || config['config'] == null) {\n      throw new ValueError(`${printableModuleName}: Improper config format: ` + `${JSON.stringify(config)}.\\n` + `'className' and 'config' must set.`);\n    }\n\n    const className = config['className'];\n    let cls, fromConfig;\n\n    if (className in customObjects) {\n      [cls, fromConfig] = customObjects[className];\n    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n      [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];\n    } else if (className in moduleObjects) {\n      [cls, fromConfig] = moduleObjects[className];\n    }\n\n    if (cls == null) {\n      throw new ValueError(`Unknown ${printableModuleName}: ${className}. ` + `This may be due to one of the following reasons:\\n` + `1. The ${printableModuleName} is defined in Python, in which ` + `case it needs to be ported to TensorFlow.js or your JavaScript ` + `code.\\n` + `2. The custom ${printableModuleName} is defined in JavaScript, ` + `but is not registered properly with ` + `tf.serialization.registerClass().`); // TODO(cais): Add link to tutorial page on custom layers.\n    }\n\n    if (fromConfig != null) {\n      // Porting notes: Instead of checking to see whether fromConfig accepts\n      // customObjects, we create a customObjects dictionary and tack it on to\n      // config['config'] as config['config'].customObjects. Objects can use it,\n      // if they want.\n      // tslint:disable-next-line:no-any\n      const customObjectsCombined = {};\n\n      for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n      }\n\n      for (const key of Object.keys(customObjects)) {\n        customObjectsCombined[key] = customObjects[key];\n      } // Add the customObjects to config\n\n\n      const nestedConfig = config['config'];\n      nestedConfig['customObjects'] = customObjectsCombined;\n      const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n\n      convertNDArrayScalarsInConfig(config['config']);\n      const returnObj = fromConfig(cls, config['config'], customObjects, fastWeightInit);\n      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n      return returnObj;\n    } else {\n      // Then `cls` may be a function returning a class.\n      // In this case by convention `config` holds\n      // the kwargs of the function.\n      const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      } // In python this is **config['config'], for tfjs-layers we require\n      // classes that use this fall-through construction method to take\n      // a config interface that mimics the expansion of named parameters.\n\n\n      const returnObj = new cls(config['config']);\n      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n      return returnObj;\n    }\n  }\n}\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\n\nexport function numberCompare(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\n\nexport function reverseNumberCompare(a, b) {\n  return -1 * numberCompare(a, b);\n}\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\n\nexport function stringToDType(dtype) {\n  switch (dtype) {\n    case 'float32':\n      return 'float32';\n\n    default:\n      throw new ValueError(`Invalid dtype: ${dtype}`);\n  }\n}\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\n\nexport function stringsEqual(xs, ys) {\n  if (xs == null || ys == null) {\n    return xs === ys;\n  }\n\n  if (xs.length !== ys.length) {\n    return false;\n  }\n\n  for (let i = 0; i < xs.length; ++i) {\n    if (xs[i] !== ys[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\n\nexport function unique(xs) {\n  if (xs == null) {\n    return xs;\n  }\n\n  const out = []; // TODO(cais): Maybe improve performance by sorting.\n\n  for (const x of xs) {\n    if (out.indexOf(x) === -1) {\n      out.push(x);\n    }\n  }\n\n  return out;\n}\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\n\nexport function isObjectEmpty(obj) {\n  if (obj == null) {\n    throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n  }\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\n\nexport function checkStringTypeUnionValue(values, label, value) {\n  if (value == null) {\n    return;\n  }\n\n  if (values.indexOf(value) < 0) {\n    throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${values} or null/undefined.`);\n  }\n}\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\n\nexport function checkArrayTypeAndLength(x, expectedType, minLength = 0, maxLength = Infinity) {\n  assert(minLength >= 0);\n  assert(maxLength >= minLength);\n  return Array.isArray(x) && x.length >= minLength && x.length <= maxLength && x.every(e => typeof e === expectedType);\n} // tslint:enable:no-any\n\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\n\nexport function assertPositiveInteger(value, name) {\n  if (Array.isArray(value)) {\n    util.assert(value.length > 0, () => `${name} is unexpectedly an empty array.`);\n    value.forEach((v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n  } else {\n    util.assert(Number.isInteger(value) && value > 0, () => `Expected ${name} to be a positive integer, but got ` + `${formatAsFriendlyString(value)}.`);\n  }\n}\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\n\nexport function formatAsFriendlyString(value) {\n  if (value === null) {\n    return 'null';\n  } else if (Array.isArray(value)) {\n    return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n  } else if (typeof value === 'string') {\n    return `\"${value}\"`;\n  } else {\n    return `${value}`;\n  }\n}\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\n\nexport function debounce(f, waitMs) {\n  let lastTime = util.now();\n  let lastResult;\n\n  const f2 = (...args) => {\n    const now = util.now();\n\n    if (now - lastTime < waitMs) {\n      return lastResult;\n    }\n\n    lastTime = now;\n    lastResult = f(...args);\n    return lastResult;\n  };\n\n  return f2;\n}\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\n\nexport function mapActivationToFusedKernel(activationName) {\n  if (activationName === 'relu') {\n    return 'relu';\n  }\n\n  if (activationName === 'linear') {\n    return 'linear';\n  }\n\n  if (activationName === 'elu') {\n    return 'elu';\n  }\n\n  return null;\n}\n/**\n * Returns the cartesian product of sets of values.\n * This works the same as itertools.product in Python.\n *\n * Example:\n *\n * filters = [128, 256, 512]\n * paddings = ['same', 'valid']\n *\n * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n * [512, 'same'], [512, 'valid']]\n *\n * @param arrayOfValues List/array of values.\n * @return The cartesian product.\n */\n\nexport function getCartesianProductOfValues(...arrayOfValues) {\n  assert(arrayOfValues.length > 0, 'arrayOfValues is empty');\n\n  for (const values of arrayOfValues) {\n    assert(Array.isArray(values), 'one of the values is not an array');\n    assert(values.length > 0, 'one of the values is empty');\n  }\n\n  return arrayOfValues.reduce((products, values) => {\n    if (products.length === 0) {\n      return values.map(value => [value]);\n    }\n\n    return values.map(value => {\n      return products.map(prevValue => [...prevValue, value]);\n    }).reduce((flattenedProduct, unflattenedProduct) => {\n      return flattenedProduct.concat(unflattenedProduct);\n    }, []);\n  }, []);\n}","map":{"version":3,"sources":["../../src/utils/generic_utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: utils/generic_utils.py */\nimport { util } from '@tensorflow/tfjs-core';\nimport { AssertionError, ValueError } from '../errors';\n// tslint:enable\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\nexport function pyListRepeat(value, numValues) {\n    if (Array.isArray(value)) {\n        // tslint:disable-next-line:no-any\n        let newArray = [];\n        for (let i = 0; i < numValues; i++) {\n            newArray = newArray.concat(value);\n        }\n        return newArray;\n    }\n    else {\n        const newArray = new Array(numValues);\n        newArray.fill(value);\n        return newArray;\n    }\n}\nexport function assert(val, message) {\n    if (!val) {\n        throw new AssertionError(message);\n    }\n}\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\nexport function count(array, refernce) {\n    let counter = 0;\n    for (const item of array) {\n        if (item === refernce) {\n            counter++;\n        }\n    }\n    return counter;\n}\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\nexport function singletonOrArray(xs) {\n    if (xs.length === 1) {\n        return xs[0];\n    }\n    return xs;\n}\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\nexport function toList(x) {\n    if (Array.isArray(x)) {\n        return x;\n    }\n    return [x];\n}\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\nexport function objectListUid(objs) {\n    const objectList = toList(objs);\n    let retVal = '';\n    for (const obj of objectList) {\n        if (obj.id == null) {\n            throw new ValueError(`Object ${obj} passed to objectListUid without an id`);\n        }\n        if (retVal !== '') {\n            retVal = retVal + ', ';\n        }\n        retVal = `${retVal}${Math.abs(obj.id)}`;\n    }\n    return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\nexport function toSnakeCase(name) {\n    const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n    const insecure = intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n    /*\n     If the class is private the name starts with \"_\" which is not secure\n     for creating scopes. We prefix the name with \"private\" in this case.\n     */\n    if (insecure[0] !== '_') {\n        return insecure;\n    }\n    return 'private' + insecure;\n}\nexport function toCamelCase(identifier) {\n    // quick return for empty string or single character strings\n    if (identifier.length <= 1) {\n        return identifier;\n    }\n    // Check for the underscore indicating snake_case\n    if (identifier.indexOf('_') === -1) {\n        return identifier;\n    }\n    return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n}\n// tslint:disable-next-line:no-any\nlet _GLOBAL_CUSTOM_OBJECTS = {};\nexport function serializeKerasObject(instance) {\n    if (instance === null || instance === undefined) {\n        return null;\n    }\n    const dict = {};\n    dict['className'] = instance.getClassName();\n    dict['config'] = instance.getConfig();\n    return dict;\n}\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\nfunction convertNDArrayScalarsInConfig(config) {\n    if (config == null || typeof config !== 'object') {\n        return;\n    }\n    else if (Array.isArray(config)) {\n        config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n    }\n    else {\n        const fields = Object.keys(config);\n        for (const field of fields) {\n            const value = config[field];\n            if (value != null && typeof value === 'object') {\n                if (!Array.isArray(value) && value['type'] === 'ndarray' &&\n                    typeof value['value'] === 'number') {\n                    config[field] = value['value'];\n                }\n                else {\n                    convertNDArrayScalarsInConfig(value);\n                }\n            }\n        }\n    }\n}\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\nexport function deserializeKerasObject(identifier, moduleObjects = {}, customObjects = {}, printableModuleName = 'object', fastWeightInit = false) {\n    // tslint:enable\n    if (typeof identifier === 'string') {\n        const functionName = identifier;\n        let fn;\n        if (functionName in customObjects) {\n            fn = customObjects[functionName];\n        }\n        else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n            fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n        }\n        else {\n            fn = moduleObjects[functionName];\n            if (fn == null) {\n                throw new ValueError(`Unknown ${printableModuleName}: ${identifier}. ` +\n                    `This may be due to one of the following reasons:\\n` +\n                    `1. The ${printableModuleName} is defined in Python, in which ` +\n                    `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n                    `code.\\n` +\n                    `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n                    `but is not registered properly with ` +\n                    `tf.serialization.registerClass().`);\n                // TODO(cais): Add link to tutorial page on custom layers.\n            }\n        }\n        return fn;\n    }\n    else {\n        // In this case we are dealing with a Keras config dictionary.\n        const config = identifier;\n        if (config['className'] == null || config['config'] == null) {\n            throw new ValueError(`${printableModuleName}: Improper config format: ` +\n                `${JSON.stringify(config)}.\\n` +\n                `'className' and 'config' must set.`);\n        }\n        const className = config['className'];\n        let cls, fromConfig;\n        if (className in customObjects) {\n            [cls, fromConfig] = customObjects[className];\n        }\n        else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n            [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];\n        }\n        else if (className in moduleObjects) {\n            [cls, fromConfig] = moduleObjects[className];\n        }\n        if (cls == null) {\n            throw new ValueError(`Unknown ${printableModuleName}: ${className}. ` +\n                `This may be due to one of the following reasons:\\n` +\n                `1. The ${printableModuleName} is defined in Python, in which ` +\n                `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n                `code.\\n` +\n                `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n                `but is not registered properly with ` +\n                `tf.serialization.registerClass().`);\n            // TODO(cais): Add link to tutorial page on custom layers.\n        }\n        if (fromConfig != null) {\n            // Porting notes: Instead of checking to see whether fromConfig accepts\n            // customObjects, we create a customObjects dictionary and tack it on to\n            // config['config'] as config['config'].customObjects. Objects can use it,\n            // if they want.\n            // tslint:disable-next-line:no-any\n            const customObjectsCombined = {};\n            for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n                customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n            }\n            for (const key of Object.keys(customObjects)) {\n                customObjectsCombined[key] = customObjects[key];\n            }\n            // Add the customObjects to config\n            const nestedConfig = config['config'];\n            nestedConfig['customObjects'] = customObjectsCombined;\n            const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n            for (const key of Object.keys(customObjects)) {\n                _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n            }\n            convertNDArrayScalarsInConfig(config['config']);\n            const returnObj = fromConfig(cls, config['config'], customObjects, fastWeightInit);\n            _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n            return returnObj;\n        }\n        else {\n            // Then `cls` may be a function returning a class.\n            // In this case by convention `config` holds\n            // the kwargs of the function.\n            const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n            for (const key of Object.keys(customObjects)) {\n                _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n            }\n            // In python this is **config['config'], for tfjs-layers we require\n            // classes that use this fall-through construction method to take\n            // a config interface that mimics the expansion of named parameters.\n            const returnObj = new cls(config['config']);\n            _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n            return returnObj;\n        }\n    }\n}\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\nexport function numberCompare(a, b) {\n    return (a < b) ? -1 : ((a > b) ? 1 : 0);\n}\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\nexport function reverseNumberCompare(a, b) {\n    return -1 * numberCompare(a, b);\n}\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\nexport function stringToDType(dtype) {\n    switch (dtype) {\n        case 'float32':\n            return 'float32';\n        default:\n            throw new ValueError(`Invalid dtype: ${dtype}`);\n    }\n}\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\nexport function stringsEqual(xs, ys) {\n    if (xs == null || ys == null) {\n        return xs === ys;\n    }\n    if (xs.length !== ys.length) {\n        return false;\n    }\n    for (let i = 0; i < xs.length; ++i) {\n        if (xs[i] !== ys[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\nexport function unique(xs) {\n    if (xs == null) {\n        return xs;\n    }\n    const out = [];\n    // TODO(cais): Maybe improve performance by sorting.\n    for (const x of xs) {\n        if (out.indexOf(x) === -1) {\n            out.push(x);\n        }\n    }\n    return out;\n}\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\nexport function isObjectEmpty(obj) {\n    if (obj == null) {\n        throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n    }\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\nexport function checkStringTypeUnionValue(values, label, value) {\n    if (value == null) {\n        return;\n    }\n    if (values.indexOf(value) < 0) {\n        throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${values} or null/undefined.`);\n    }\n}\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\nexport function checkArrayTypeAndLength(x, expectedType, minLength = 0, maxLength = Infinity) {\n    assert(minLength >= 0);\n    assert(maxLength >= minLength);\n    return (Array.isArray(x) && x.length >= minLength && x.length <= maxLength &&\n        x.every(e => typeof e === expectedType));\n}\n// tslint:enable:no-any\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\nexport function assertPositiveInteger(value, name) {\n    if (Array.isArray(value)) {\n        util.assert(value.length > 0, () => `${name} is unexpectedly an empty array.`);\n        value.forEach((v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n    }\n    else {\n        util.assert(Number.isInteger(value) && value > 0, () => `Expected ${name} to be a positive integer, but got ` +\n            `${formatAsFriendlyString(value)}.`);\n    }\n}\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\nexport function formatAsFriendlyString(value) {\n    if (value === null) {\n        return 'null';\n    }\n    else if (Array.isArray(value)) {\n        return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n    }\n    else if (typeof value === 'string') {\n        return `\"${value}\"`;\n    }\n    else {\n        return `${value}`;\n    }\n}\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\nexport function debounce(f, waitMs) {\n    let lastTime = util.now();\n    let lastResult;\n    const f2 = (...args) => {\n        const now = util.now();\n        if (now - lastTime < waitMs) {\n            return lastResult;\n        }\n        lastTime = now;\n        lastResult = f(...args);\n        return lastResult;\n    };\n    return f2;\n}\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\nexport function mapActivationToFusedKernel(activationName) {\n    if (activationName === 'relu') {\n        return 'relu';\n    }\n    if (activationName === 'linear') {\n        return 'linear';\n    }\n    if (activationName === 'elu') {\n        return 'elu';\n    }\n    return null;\n}\n/**\n * Returns the cartesian product of sets of values.\n * This works the same as itertools.product in Python.\n *\n * Example:\n *\n * filters = [128, 256, 512]\n * paddings = ['same', 'valid']\n *\n * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n * [512, 'same'], [512, 'valid']]\n *\n * @param arrayOfValues List/array of values.\n * @return The cartesian product.\n */\nexport function getCartesianProductOfValues(...arrayOfValues) {\n    assert(arrayOfValues.length > 0, 'arrayOfValues is empty');\n    for (const values of arrayOfValues) {\n        assert(Array.isArray(values), 'one of the values is not an array');\n        assert(values.length > 0, 'one of the values is empty');\n    }\n    return arrayOfValues.reduce((products, values) => {\n        if (products.length === 0) {\n            return values.map(value => [value]);\n        }\n        return values\n            .map(value => {\n            return products.map((prevValue) => [...prevValue, value]);\n        })\n            .reduce((flattenedProduct, unflattenedProduct) => {\n            return flattenedProduct.concat(unflattenedProduct);\n        }, []);\n    }, []);\n}\n//# sourceMappingURL=generic_utils.js.map"]},"metadata":{},"sourceType":"module"}