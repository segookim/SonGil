{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'TopKV2':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const k = getParamValue('k', node, tensorMap, context);\n        const sorted = getParamValue('sorted', node, tensorMap, context);\n        const result = tfOps.topk(x, k, sorted);\n        return [result.values, result.indices];\n      }\n\n    case 'Unique':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const result = tfOps.unique(x);\n        return [result.values, result.indices];\n      }\n\n    case 'UniqueV2':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const result = tfOps.unique(x, axis);\n        return [result.values, result.indices];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'evaluation';","map":{"version":3,"sources":["../../../src/operations/executors/evaluation_executor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH;AACA,OAAO,KAAK,KAAZ,MAAuB,kDAAvB;AAMA,SAAQ,aAAR,QAA4B,SAA5B;AAEA,OAAO,MAAM,SAAS,GAClB,CAAC,IAAD,EAAa,SAAb,EAAyC,OAAzC,KACe;AACT,UAAQ,IAAI,CAAC,EAAb;AACE,SAAK,QAAL;AAAe;AACb,cAAM,CAAC,GAAG,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAAvB;AACA,cAAM,CAAC,GAAG,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAAvB;AACA,cAAM,MAAM,GACR,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;AAEA,cAAM,MAAM,GAAG,KAAK,CAAC,IAAN,CAAW,CAAX,EAAc,CAAd,EAAiB,MAAjB,CAAf;AACA,eAAO,CAAC,MAAM,CAAC,MAAR,EAAgB,MAAM,CAAC,OAAvB,CAAP;AACD;;AACD,SAAK,QAAL;AAAe;AACb,cAAM,CAAC,GAAG,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAAvB;AACA,cAAM,MAAM,GAAG,KAAK,CAAC,MAAN,CAAa,CAAb,CAAf;AACA,eAAO,CAAC,MAAM,CAAC,MAAR,EAAgB,MAAM,CAAC,OAAvB,CAAP;AACD;;AACD,SAAK,UAAL;AAAiB;AACf,cAAM,CAAC,GAAG,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAAvB;AACA,cAAM,IAAI,GACN,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CADjB;AAEA,cAAM,MAAM,GAAG,KAAK,CAAC,MAAN,CAAa,CAAb,EAAgB,IAAhB,CAAf;AACA,eAAO,CAAC,MAAM,CAAC,MAAR,EAAgB,MAAM,CAAC,OAAvB,CAAP;AACD;;AACD;AACE,YAAM,SAAS,CAAC,aAAa,IAAI,CAAC,EAAE,qBAArB,CAAf;AAtBJ;AAwBD,CA3BF;AA6BP,OAAO,MAAM,QAAQ,GAAG,YAAjB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'TopKV2': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const k = getParamValue('k', node, tensorMap, context);\n            const sorted = getParamValue('sorted', node, tensorMap, context);\n            const result = tfOps.topk(x, k, sorted);\n            return [result.values, result.indices];\n        }\n        case 'Unique': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const result = tfOps.unique(x);\n            return [result.values, result.indices];\n        }\n        case 'UniqueV2': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const result = tfOps.unique(x, axis);\n            return [result.values, result.indices];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'evaluation';\n//# sourceMappingURL=evaluation_executor.js.map"]},"metadata":{},"sourceType":"module"}