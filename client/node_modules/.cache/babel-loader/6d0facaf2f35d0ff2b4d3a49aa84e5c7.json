{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedDepthwiseConv2D } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { depthwiseConv2dNative } from './DepthwiseConv2dNative';\nexport function fusedDepthwiseConv2D(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      filter = inputs.filter,\n      bias = inputs.bias,\n      preluActivationWeights = inputs.preluActivationWeights;\n  var strides = attrs.strides,\n      pad = attrs.pad,\n      dataFormat = attrs.dataFormat,\n      dilations = attrs.dilations,\n      dimRoundingMode = attrs.dimRoundingMode,\n      activation = attrs.activation,\n      leakyreluAlpha = attrs.leakyreluAlpha;\n  var result = depthwiseConv2dNative({\n    inputs: {\n      x: x,\n      filter: filter\n    },\n    backend: backend,\n    attrs: {\n      strides: strides,\n      pad: pad,\n      dataFormat: dataFormat,\n      dilations: dilations,\n      dimRoundingMode: dimRoundingMode\n    }\n  });\n\n  if (bias) {\n    var oldResult = result;\n    result = add({\n      inputs: {\n        a: result,\n        b: bias\n      },\n      backend: backend\n    });\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  if (activation) {\n    var _oldResult = result;\n    result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(_oldResult);\n  }\n\n  return result;\n}\nexport var fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D\n};","map":{"version":3,"sources":["../../src/kernels/FusedDepthwiseConv2D.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,oBAAR,QAAgI,uBAAhI;AAGA,SAAQ,eAAR,QAA8B,sBAA9B;AACA,SAAQ,GAAR,QAAkB,OAAlB;AACA,SAAQ,qBAAR,QAAoC,yBAApC;AAEA,OAAM,SAAU,oBAAV,CAA+B,IAA/B,EAIL;AAAA,MACQ,MADR,GACkC,IADlC,CACQ,MADR;AAAA,MACgB,OADhB,GACkC,IADlC,CACgB,OADhB;AAAA,MACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,MAEQ,CAFR,GAEmD,MAFnD,CAEQ,CAFR;AAAA,MAEW,MAFX,GAEmD,MAFnD,CAEW,MAFX;AAAA,MAEmB,IAFnB,GAEmD,MAFnD,CAEmB,IAFnB;AAAA,MAEyB,sBAFzB,GAEmD,MAFnD,CAEyB,sBAFzB;AAAA,MAIG,OAJH,GAWK,KAXL,CAIG,OAJH;AAAA,MAKG,GALH,GAWK,KAXL,CAKG,GALH;AAAA,MAMG,UANH,GAWK,KAXL,CAMG,UANH;AAAA,MAOG,SAPH,GAWK,KAXL,CAOG,SAPH;AAAA,MAQG,eARH,GAWK,KAXL,CAQG,eARH;AAAA,MASG,UATH,GAWK,KAXL,CASG,UATH;AAAA,MAUG,cAVH,GAWK,KAXL,CAUG,cAVH;AAaC,MAAI,MAAM,GAAG,qBAAqB,CAAC;AACjC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAD,CAAD;AAAI,MAAA,MAAM,EAAN;AAAJ,KADyB;AAEjC,IAAA,OAAO,EAAP,OAFiC;AAGjC,IAAA,KAAK,EAAE;AAAC,MAAA,OAAO,EAAP,OAAD;AAAU,MAAA,GAAG,EAAH,GAAV;AAAe,MAAA,UAAU,EAAV,UAAf;AAA2B,MAAA,SAAS,EAAT,SAA3B;AAAsC,MAAA,eAAe,EAAf;AAAtC;AAH0B,GAAD,CAAlC;;AAMA,MAAI,IAAJ,EAAU;AACR,QAAM,SAAS,GAAG,MAAlB;AACA,IAAA,MAAM,GAAG,GAAG,CAAC;AAAC,MAAA,MAAM,EAAE;AAAC,QAAA,CAAC,EAAE,MAAJ;AAAY,QAAA,CAAC,EAAE;AAAf,OAAT;AAA+B,MAAA,OAAO,EAAP;AAA/B,KAAD,CAAZ;AACA,IAAA,OAAO,CAAC,6BAAR,CAAsC,SAAtC;AACD;;AACD,MAAI,UAAJ,EAAgB;AACd,QAAM,UAAS,GAAG,MAAlB;AACA,IAAA,MAAM,GAAG,eAAe,CACpB,OADoB,EACX,MADW,EACH,UADG,EACS,sBADT,EACiC,cADjC,CAAxB;AAEA,IAAA,OAAO,CAAC,6BAAR,CAAsC,UAAtC;AACD;;AAED,SAAO,MAAP;AACD;AAED,OAAO,IAAM,0BAA0B,GAAiB;AACtD,EAAA,UAAU,EAAE,oBAD0C;AAEtD,EAAA,WAAW,EAAE,KAFyC;AAGtD,EAAA,UAAU,EAAE;AAH0C,CAAjD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedDepthwiseConv2D } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { depthwiseConv2dNative } from './DepthwiseConv2dNative';\nexport function fusedDepthwiseConv2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    let result = depthwiseConv2dNative({\n        inputs: { x, filter },\n        backend,\n        attrs: { strides, pad, dataFormat, dilations, dimRoundingMode }\n    });\n    if (bias) {\n        const oldResult = result;\n        result = add({ inputs: { a: result, b: bias }, backend });\n        backend.disposeIntermediateTensorInfo(oldResult);\n    }\n    if (activation) {\n        const oldResult = result;\n        result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);\n        backend.disposeIntermediateTensorInfo(oldResult);\n    }\n    return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n    kernelName: FusedDepthwiseConv2D,\n    backendName: 'cpu',\n    kernelFunc: fusedDepthwiseConv2D\n};\n//# sourceMappingURL=FusedDepthwiseConv2D.js.map"]},"metadata":{},"sourceType":"module"}