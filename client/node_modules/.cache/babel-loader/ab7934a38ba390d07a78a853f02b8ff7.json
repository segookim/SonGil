{"ast":null,"code":"import _classCallCheck from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kimkiwoong/SonGil/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Pooling Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkPaddingMode, checkPoolMode } from '../common';\nimport { InputSpec } from '../engine/topology';\nimport { Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { preprocessConv2DInput, preprocessConv3DInput } from './convolutional';\n/**\n * 2D pooling.\n * @param x\n * @param poolSize\n * @param stridesdes strides. Defaults to [1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 2D pooling.\n */\n\nexport function pool2d(x, poolSize, strides, padding, dataFormat, poolMode) {\n  return tidy(function () {\n    checkDataFormat(dataFormat);\n    checkPoolMode(poolMode);\n    checkPaddingMode(padding);\n\n    if (strides == null) {\n      strides = [1, 1];\n    }\n\n    if (padding == null) {\n      padding = 'valid';\n    }\n\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    if (poolMode == null) {\n      poolMode = 'max';\n    } // TODO(cais): Remove the preprocessing step once deeplearn.js supports\n    // dataFormat as an input argument.\n\n\n    x = preprocessConv2DInput(x, dataFormat); // x is NHWC after preprocessing.\n\n    var y;\n    var paddingString = padding === 'same' ? 'same' : 'valid';\n\n    if (poolMode === 'max') {\n      // TODO(cais): Rank check?\n      y = tfc.maxPool(x, poolSize, strides, paddingString);\n    } else {\n      // 'avg'\n      // TODO(cais): Check the dtype and rank of x and give clear error message\n      //   if those are incorrect.\n      y = tfc.avgPool( // TODO(cais): Rank check?\n      x, poolSize, strides, paddingString);\n    }\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]); // NHWC -> NCHW.\n    }\n\n    return y;\n  });\n}\n/**\n * 3D pooling.\n * @param x\n * @param poolSize. Default to [1, 1, 1].\n * @param strides strides. Defaults to [1, 1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 3D pooling.\n */\n\nexport function pool3d(x, poolSize, strides, padding, dataFormat, poolMode) {\n  return tidy(function () {\n    checkDataFormat(dataFormat);\n    checkPoolMode(poolMode);\n    checkPaddingMode(padding);\n\n    if (strides == null) {\n      strides = [1, 1, 1];\n    }\n\n    if (padding == null) {\n      padding = 'valid';\n    }\n\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    if (poolMode == null) {\n      poolMode = 'max';\n    } // x is NDHWC after preprocessing.\n\n\n    x = preprocessConv3DInput(x, dataFormat);\n    var y;\n    var paddingString = padding === 'same' ? 'same' : 'valid';\n\n    if (poolMode === 'max') {\n      y = tfc.maxPool3d(x, poolSize, strides, paddingString);\n    } else {\n      // 'avg'\n      y = tfc.avgPool3d(x, poolSize, strides, paddingString);\n    }\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]); // NDHWC -> NCDHW.\n    }\n\n    return y;\n  });\n}\n/**\n * Abstract class for different pooling 1D layers.\n */\n\nexport var Pooling1D = /*#__PURE__*/function (_Layer) {\n  _inherits(Pooling1D, _Layer);\n\n  var _super = _createSuper(Pooling1D);\n\n  /**\n   *\n   * @param args Parameters for the Pooling layer.\n   *\n   * config.poolSize defaults to 2.\n   */\n  function Pooling1D(args) {\n    var _this;\n\n    _classCallCheck(this, Pooling1D);\n\n    if (args.poolSize == null) {\n      args.poolSize = 2;\n    }\n\n    _this = _super.call(this, args);\n\n    if (typeof args.poolSize === 'number') {\n      _this.poolSize = [args.poolSize];\n    } else if (Array.isArray(args.poolSize) && args.poolSize.length === 1 && typeof args.poolSize[0] === 'number') {\n      _this.poolSize = args.poolSize;\n    } else {\n      throw new ValueError(\"poolSize for 1D convolutional layer must be a number or an \" + \"Array of a single number, but received \" + \"\".concat(JSON.stringify(args.poolSize)));\n    }\n\n    assertPositiveInteger(_this.poolSize, 'poolSize');\n\n    if (args.strides == null) {\n      _this.strides = _this.poolSize;\n    } else {\n      if (typeof args.strides === 'number') {\n        _this.strides = [args.strides];\n      } else if (Array.isArray(args.strides) && args.strides.length === 1 && typeof args.strides[0] === 'number') {\n        _this.strides = args.strides;\n      } else {\n        throw new ValueError(\"strides for 1D convolutional layer must be a number or an \" + \"Array of a single number, but received \" + \"\".concat(JSON.stringify(args.strides)));\n      }\n    }\n\n    assertPositiveInteger(_this.strides, 'strides');\n    _this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(_this.padding);\n    _this.inputSpec = [new InputSpec({\n      ndim: 3\n    })];\n    return _this;\n  }\n\n  _createClass(Pooling1D, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var length = convOutputLength(inputShape[1], this.poolSize[0], this.padding, this.strides[0]);\n      return [inputShape[0], length, inputShape[2]];\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this2 = this;\n\n      return tidy(function () {\n        _this2.invokeCallHook(inputs, kwargs); // Add dummy last dimension.\n\n\n        inputs = K.expandDims(getExactlyOneTensor(inputs), 2);\n\n        var output = _this2.poolingFunction(getExactlyOneTensor(inputs), [_this2.poolSize[0], 1], [_this2.strides[0], 1], _this2.padding, 'channelsLast'); // Remove dummy last dimension.\n\n\n        return tfc.squeeze(output, [2]);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        poolSize: this.poolSize,\n        padding: this.padding,\n        strides: this.strides\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Pooling1D.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return Pooling1D;\n}(Layer);\nexport var MaxPooling1D = /*#__PURE__*/function (_Pooling1D) {\n  _inherits(MaxPooling1D, _Pooling1D);\n\n  var _super2 = _createSuper(MaxPooling1D);\n\n  function MaxPooling1D(args) {\n    _classCallCheck(this, MaxPooling1D);\n\n    return _super2.call(this, args);\n  }\n\n  _createClass(MaxPooling1D, [{\n    key: \"poolingFunction\",\n    value: function poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n      checkDataFormat(dataFormat);\n      checkPaddingMode(padding);\n      return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n  }]);\n\n  return MaxPooling1D;\n}(Pooling1D);\n/** @nocollapse */\n\nMaxPooling1D.className = 'MaxPooling1D';\nserialization.registerClass(MaxPooling1D);\nexport var AveragePooling1D = /*#__PURE__*/function (_Pooling1D2) {\n  _inherits(AveragePooling1D, _Pooling1D2);\n\n  var _super3 = _createSuper(AveragePooling1D);\n\n  function AveragePooling1D(args) {\n    _classCallCheck(this, AveragePooling1D);\n\n    return _super3.call(this, args);\n  }\n\n  _createClass(AveragePooling1D, [{\n    key: \"poolingFunction\",\n    value: function poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n      checkDataFormat(dataFormat);\n      checkPaddingMode(padding);\n      return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n  }]);\n\n  return AveragePooling1D;\n}(Pooling1D);\n/** @nocollapse */\n\nAveragePooling1D.className = 'AveragePooling1D';\nserialization.registerClass(AveragePooling1D);\n/**\n * Abstract class for different pooling 2D layers.\n */\n\nexport var Pooling2D = /*#__PURE__*/function (_Layer2) {\n  _inherits(Pooling2D, _Layer2);\n\n  var _super4 = _createSuper(Pooling2D);\n\n  function Pooling2D(args) {\n    var _this3;\n\n    _classCallCheck(this, Pooling2D);\n\n    if (args.poolSize == null) {\n      args.poolSize = [2, 2];\n    }\n\n    _this3 = _super4.call(this, args);\n    _this3.poolSize = Array.isArray(args.poolSize) ? args.poolSize : [args.poolSize, args.poolSize];\n\n    if (args.strides == null) {\n      _this3.strides = _this3.poolSize;\n    } else if (Array.isArray(args.strides)) {\n      if (args.strides.length !== 2) {\n        throw new ValueError(\"If the strides property of a 2D pooling layer is an Array, \" + \"it is expected to have a length of 2, but received length \" + \"\".concat(args.strides.length, \".\"));\n      }\n\n      _this3.strides = args.strides;\n    } else {\n      // `config.strides` is a number.\n      _this3.strides = [args.strides, args.strides];\n    }\n\n    assertPositiveInteger(_this3.poolSize, 'poolSize');\n    assertPositiveInteger(_this3.strides, 'strides');\n    _this3.padding = args.padding == null ? 'valid' : args.padding;\n    _this3.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(_this3.dataFormat);\n    checkPaddingMode(_this3.padding);\n    _this3.inputSpec = [new InputSpec({\n      ndim: 4\n    })];\n    return _this3;\n  }\n\n  _createClass(Pooling2D, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n      var cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n      rows = convOutputLength(rows, this.poolSize[0], this.padding, this.strides[0]);\n      cols = convOutputLength(cols, this.poolSize[1], this.padding, this.strides[1]);\n\n      if (this.dataFormat === 'channelsFirst') {\n        return [inputShape[0], inputShape[1], rows, cols];\n      } else {\n        return [inputShape[0], rows, cols, inputShape[3]];\n      }\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this4 = this;\n\n      return tidy(function () {\n        _this4.invokeCallHook(inputs, kwargs);\n\n        return _this4.poolingFunction(getExactlyOneTensor(inputs), _this4.poolSize, _this4.strides, _this4.padding, _this4.dataFormat);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        poolSize: this.poolSize,\n        padding: this.padding,\n        strides: this.strides,\n        dataFormat: this.dataFormat\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Pooling2D.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return Pooling2D;\n}(Layer);\nexport var MaxPooling2D = /*#__PURE__*/function (_Pooling2D) {\n  _inherits(MaxPooling2D, _Pooling2D);\n\n  var _super5 = _createSuper(MaxPooling2D);\n\n  function MaxPooling2D(args) {\n    _classCallCheck(this, MaxPooling2D);\n\n    return _super5.call(this, args);\n  }\n\n  _createClass(MaxPooling2D, [{\n    key: \"poolingFunction\",\n    value: function poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n      checkDataFormat(dataFormat);\n      checkPaddingMode(padding);\n      return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n  }]);\n\n  return MaxPooling2D;\n}(Pooling2D);\n/** @nocollapse */\n\nMaxPooling2D.className = 'MaxPooling2D';\nserialization.registerClass(MaxPooling2D);\nexport var AveragePooling2D = /*#__PURE__*/function (_Pooling2D2) {\n  _inherits(AveragePooling2D, _Pooling2D2);\n\n  var _super6 = _createSuper(AveragePooling2D);\n\n  function AveragePooling2D(args) {\n    _classCallCheck(this, AveragePooling2D);\n\n    return _super6.call(this, args);\n  }\n\n  _createClass(AveragePooling2D, [{\n    key: \"poolingFunction\",\n    value: function poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n      checkDataFormat(dataFormat);\n      checkPaddingMode(padding);\n      return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n  }]);\n\n  return AveragePooling2D;\n}(Pooling2D);\n/** @nocollapse */\n\nAveragePooling2D.className = 'AveragePooling2D';\nserialization.registerClass(AveragePooling2D);\n/**\n * Abstract class for different pooling 3D layers.\n */\n\nexport var Pooling3D = /*#__PURE__*/function (_Layer3) {\n  _inherits(Pooling3D, _Layer3);\n\n  var _super7 = _createSuper(Pooling3D);\n\n  function Pooling3D(args) {\n    var _this5;\n\n    _classCallCheck(this, Pooling3D);\n\n    if (args.poolSize == null) {\n      args.poolSize = [2, 2, 2];\n    }\n\n    _this5 = _super7.call(this, args);\n    _this5.poolSize = Array.isArray(args.poolSize) ? args.poolSize : [args.poolSize, args.poolSize, args.poolSize];\n\n    if (args.strides == null) {\n      _this5.strides = _this5.poolSize;\n    } else if (Array.isArray(args.strides)) {\n      if (args.strides.length !== 3) {\n        throw new ValueError(\"If the strides property of a 3D pooling layer is an Array, \" + \"it is expected to have a length of 3, but received length \" + \"\".concat(args.strides.length, \".\"));\n      }\n\n      _this5.strides = args.strides;\n    } else {\n      // `config.strides` is a number.\n      _this5.strides = [args.strides, args.strides, args.strides];\n    }\n\n    assertPositiveInteger(_this5.poolSize, 'poolSize');\n    assertPositiveInteger(_this5.strides, 'strides');\n    _this5.padding = args.padding == null ? 'valid' : args.padding;\n    _this5.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(_this5.dataFormat);\n    checkPaddingMode(_this5.padding);\n    _this5.inputSpec = [new InputSpec({\n      ndim: 5\n    })];\n    return _this5;\n  }\n\n  _createClass(Pooling3D, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var depths = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n      var rows = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n      var cols = this.dataFormat === 'channelsFirst' ? inputShape[4] : inputShape[3];\n      depths = convOutputLength(depths, this.poolSize[0], this.padding, this.strides[0]);\n      rows = convOutputLength(rows, this.poolSize[1], this.padding, this.strides[1]);\n      cols = convOutputLength(cols, this.poolSize[2], this.padding, this.strides[2]);\n\n      if (this.dataFormat === 'channelsFirst') {\n        return [inputShape[0], inputShape[1], depths, rows, cols];\n      } else {\n        return [inputShape[0], depths, rows, cols, inputShape[4]];\n      }\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this6 = this;\n\n      return tidy(function () {\n        _this6.invokeCallHook(inputs, kwargs);\n\n        return _this6.poolingFunction(getExactlyOneTensor(inputs), _this6.poolSize, _this6.strides, _this6.padding, _this6.dataFormat);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        poolSize: this.poolSize,\n        padding: this.padding,\n        strides: this.strides,\n        dataFormat: this.dataFormat\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Pooling3D.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return Pooling3D;\n}(Layer);\nexport var MaxPooling3D = /*#__PURE__*/function (_Pooling3D) {\n  _inherits(MaxPooling3D, _Pooling3D);\n\n  var _super8 = _createSuper(MaxPooling3D);\n\n  function MaxPooling3D(args) {\n    _classCallCheck(this, MaxPooling3D);\n\n    return _super8.call(this, args);\n  }\n\n  _createClass(MaxPooling3D, [{\n    key: \"poolingFunction\",\n    value: function poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n      checkDataFormat(dataFormat);\n      checkPaddingMode(padding);\n      return pool3d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n  }]);\n\n  return MaxPooling3D;\n}(Pooling3D);\n/** @nocollapse */\n\nMaxPooling3D.className = 'MaxPooling3D';\nserialization.registerClass(MaxPooling3D);\nexport var AveragePooling3D = /*#__PURE__*/function (_Pooling3D2) {\n  _inherits(AveragePooling3D, _Pooling3D2);\n\n  var _super9 = _createSuper(AveragePooling3D);\n\n  function AveragePooling3D(args) {\n    _classCallCheck(this, AveragePooling3D);\n\n    return _super9.call(this, args);\n  }\n\n  _createClass(AveragePooling3D, [{\n    key: \"poolingFunction\",\n    value: function poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n      checkDataFormat(dataFormat);\n      checkPaddingMode(padding);\n      return pool3d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n  }]);\n\n  return AveragePooling3D;\n}(Pooling3D);\n/** @nocollapse */\n\nAveragePooling3D.className = 'AveragePooling3D';\nserialization.registerClass(AveragePooling3D);\n/**\n * Abstract class for different global pooling 1D layers.\n */\n\nexport var GlobalPooling1D = /*#__PURE__*/function (_Layer4) {\n  _inherits(GlobalPooling1D, _Layer4);\n\n  var _super10 = _createSuper(GlobalPooling1D);\n\n  function GlobalPooling1D(args) {\n    var _this7;\n\n    _classCallCheck(this, GlobalPooling1D);\n\n    _this7 = _super10.call(this, args);\n    _this7.inputSpec = [new InputSpec({\n      ndim: 3\n    })];\n    return _this7;\n  }\n\n  _createClass(GlobalPooling1D, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      return [inputShape[0], inputShape[2]];\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      throw new NotImplementedError();\n    }\n  }]);\n\n  return GlobalPooling1D;\n}(Layer);\nexport var GlobalAveragePooling1D = /*#__PURE__*/function (_GlobalPooling1D) {\n  _inherits(GlobalAveragePooling1D, _GlobalPooling1D);\n\n  var _super11 = _createSuper(GlobalAveragePooling1D);\n\n  function GlobalAveragePooling1D(args) {\n    _classCallCheck(this, GlobalAveragePooling1D);\n\n    return _super11.call(this, args || {});\n  }\n\n  _createClass(GlobalAveragePooling1D, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      return tidy(function () {\n        var input = getExactlyOneTensor(inputs);\n        return tfc.mean(input, 1);\n      });\n    }\n  }]);\n\n  return GlobalAveragePooling1D;\n}(GlobalPooling1D);\n/** @nocollapse */\n\nGlobalAveragePooling1D.className = 'GlobalAveragePooling1D';\nserialization.registerClass(GlobalAveragePooling1D);\nexport var GlobalMaxPooling1D = /*#__PURE__*/function (_GlobalPooling1D2) {\n  _inherits(GlobalMaxPooling1D, _GlobalPooling1D2);\n\n  var _super12 = _createSuper(GlobalMaxPooling1D);\n\n  function GlobalMaxPooling1D(args) {\n    _classCallCheck(this, GlobalMaxPooling1D);\n\n    return _super12.call(this, args || {});\n  }\n\n  _createClass(GlobalMaxPooling1D, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      return tidy(function () {\n        var input = getExactlyOneTensor(inputs);\n        return tfc.max(input, 1);\n      });\n    }\n  }]);\n\n  return GlobalMaxPooling1D;\n}(GlobalPooling1D);\n/** @nocollapse */\n\nGlobalMaxPooling1D.className = 'GlobalMaxPooling1D';\nserialization.registerClass(GlobalMaxPooling1D);\n/**\n * Abstract class for different global pooling 2D layers.\n */\n\nexport var GlobalPooling2D = /*#__PURE__*/function (_Layer5) {\n  _inherits(GlobalPooling2D, _Layer5);\n\n  var _super13 = _createSuper(GlobalPooling2D);\n\n  function GlobalPooling2D(args) {\n    var _this8;\n\n    _classCallCheck(this, GlobalPooling2D);\n\n    _this8 = _super13.call(this, args);\n    _this8.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(_this8.dataFormat);\n    _this8.inputSpec = [new InputSpec({\n      ndim: 4\n    })];\n    return _this8;\n  }\n\n  _createClass(GlobalPooling2D, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = inputShape;\n\n      if (this.dataFormat === 'channelsLast') {\n        return [inputShape[0], inputShape[3]];\n      } else {\n        return [inputShape[0], inputShape[1]];\n      }\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      throw new NotImplementedError();\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        dataFormat: this.dataFormat\n      };\n\n      var baseConfig = _get(_getPrototypeOf(GlobalPooling2D.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return GlobalPooling2D;\n}(Layer);\nexport var GlobalAveragePooling2D = /*#__PURE__*/function (_GlobalPooling2D) {\n  _inherits(GlobalAveragePooling2D, _GlobalPooling2D);\n\n  var _super14 = _createSuper(GlobalAveragePooling2D);\n\n  function GlobalAveragePooling2D() {\n    _classCallCheck(this, GlobalAveragePooling2D);\n\n    return _super14.apply(this, arguments);\n  }\n\n  _createClass(GlobalAveragePooling2D, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this9 = this;\n\n      return tidy(function () {\n        var input = getExactlyOneTensor(inputs);\n\n        if (_this9.dataFormat === 'channelsLast') {\n          return tfc.mean(input, [1, 2]);\n        } else {\n          return tfc.mean(input, [2, 3]);\n        }\n      });\n    }\n  }]);\n\n  return GlobalAveragePooling2D;\n}(GlobalPooling2D);\n/** @nocollapse */\n\nGlobalAveragePooling2D.className = 'GlobalAveragePooling2D';\nserialization.registerClass(GlobalAveragePooling2D);\nexport var GlobalMaxPooling2D = /*#__PURE__*/function (_GlobalPooling2D2) {\n  _inherits(GlobalMaxPooling2D, _GlobalPooling2D2);\n\n  var _super15 = _createSuper(GlobalMaxPooling2D);\n\n  function GlobalMaxPooling2D() {\n    _classCallCheck(this, GlobalMaxPooling2D);\n\n    return _super15.apply(this, arguments);\n  }\n\n  _createClass(GlobalMaxPooling2D, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this10 = this;\n\n      return tidy(function () {\n        var input = getExactlyOneTensor(inputs);\n\n        if (_this10.dataFormat === 'channelsLast') {\n          return tfc.max(input, [1, 2]);\n        } else {\n          return tfc.max(input, [2, 3]);\n        }\n      });\n    }\n  }]);\n\n  return GlobalMaxPooling2D;\n}(GlobalPooling2D);\n/** @nocollapse */\n\nGlobalMaxPooling2D.className = 'GlobalMaxPooling2D';\nserialization.registerClass(GlobalMaxPooling2D);","map":{"version":3,"sources":["../../src/layers/pooling.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Pooling Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkPaddingMode, checkPoolMode } from '../common';\nimport { InputSpec } from '../engine/topology';\nimport { Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { preprocessConv2DInput, preprocessConv3DInput } from './convolutional';\n/**\n * 2D pooling.\n * @param x\n * @param poolSize\n * @param stridesdes strides. Defaults to [1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 2D pooling.\n */\nexport function pool2d(x, poolSize, strides, padding, dataFormat, poolMode) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        checkPoolMode(poolMode);\n        checkPaddingMode(padding);\n        if (strides == null) {\n            strides = [1, 1];\n        }\n        if (padding == null) {\n            padding = 'valid';\n        }\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        if (poolMode == null) {\n            poolMode = 'max';\n        }\n        // TODO(cais): Remove the preprocessing step once deeplearn.js supports\n        // dataFormat as an input argument.\n        x = preprocessConv2DInput(x, dataFormat); // x is NHWC after preprocessing.\n        let y;\n        const paddingString = (padding === 'same') ? 'same' : 'valid';\n        if (poolMode === 'max') {\n            // TODO(cais): Rank check?\n            y = tfc.maxPool(x, poolSize, strides, paddingString);\n        }\n        else { // 'avg'\n            // TODO(cais): Check the dtype and rank of x and give clear error message\n            //   if those are incorrect.\n            y = tfc.avgPool(\n            // TODO(cais): Rank check?\n            x, poolSize, strides, paddingString);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]); // NHWC -> NCHW.\n        }\n        return y;\n    });\n}\n/**\n * 3D pooling.\n * @param x\n * @param poolSize. Default to [1, 1, 1].\n * @param strides strides. Defaults to [1, 1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 3D pooling.\n */\nexport function pool3d(x, poolSize, strides, padding, dataFormat, poolMode) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        checkPoolMode(poolMode);\n        checkPaddingMode(padding);\n        if (strides == null) {\n            strides = [1, 1, 1];\n        }\n        if (padding == null) {\n            padding = 'valid';\n        }\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        if (poolMode == null) {\n            poolMode = 'max';\n        }\n        // x is NDHWC after preprocessing.\n        x = preprocessConv3DInput(x, dataFormat);\n        let y;\n        const paddingString = (padding === 'same') ? 'same' : 'valid';\n        if (poolMode === 'max') {\n            y = tfc.maxPool3d(x, poolSize, strides, paddingString);\n        }\n        else { // 'avg'\n            y = tfc.avgPool3d(x, poolSize, strides, paddingString);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 4, 1, 2, 3]); // NDHWC -> NCDHW.\n        }\n        return y;\n    });\n}\n/**\n * Abstract class for different pooling 1D layers.\n */\nexport class Pooling1D extends Layer {\n    /**\n     *\n     * @param args Parameters for the Pooling layer.\n     *\n     * config.poolSize defaults to 2.\n     */\n    constructor(args) {\n        if (args.poolSize == null) {\n            args.poolSize = 2;\n        }\n        super(args);\n        if (typeof args.poolSize === 'number') {\n            this.poolSize = [args.poolSize];\n        }\n        else if (Array.isArray(args.poolSize) &&\n            args.poolSize.length === 1 &&\n            typeof args.poolSize[0] === 'number') {\n            this.poolSize = args.poolSize;\n        }\n        else {\n            throw new ValueError(`poolSize for 1D convolutional layer must be a number or an ` +\n                `Array of a single number, but received ` +\n                `${JSON.stringify(args.poolSize)}`);\n        }\n        assertPositiveInteger(this.poolSize, 'poolSize');\n        if (args.strides == null) {\n            this.strides = this.poolSize;\n        }\n        else {\n            if (typeof args.strides === 'number') {\n                this.strides = [args.strides];\n            }\n            else if (Array.isArray(args.strides) &&\n                args.strides.length === 1 &&\n                typeof args.strides[0] === 'number') {\n                this.strides = args.strides;\n            }\n            else {\n                throw new ValueError(`strides for 1D convolutional layer must be a number or an ` +\n                    `Array of a single number, but received ` +\n                    `${JSON.stringify(args.strides)}`);\n            }\n        }\n        assertPositiveInteger(this.strides, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        checkPaddingMode(this.padding);\n        this.inputSpec = [new InputSpec({ ndim: 3 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const length = convOutputLength(inputShape[1], this.poolSize[0], this.padding, this.strides[0]);\n        return [inputShape[0], length, inputShape[2]];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            // Add dummy last dimension.\n            inputs = K.expandDims(getExactlyOneTensor(inputs), 2);\n            const output = this.poolingFunction(getExactlyOneTensor(inputs), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, 'channelsLast');\n            // Remove dummy last dimension.\n            return tfc.squeeze(output, [2]);\n        });\n    }\n    getConfig() {\n        const config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nexport class MaxPooling1D extends Pooling1D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n}\n/** @nocollapse */\nMaxPooling1D.className = 'MaxPooling1D';\nserialization.registerClass(MaxPooling1D);\nexport class AveragePooling1D extends Pooling1D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n}\n/** @nocollapse */\nAveragePooling1D.className = 'AveragePooling1D';\nserialization.registerClass(AveragePooling1D);\n/**\n * Abstract class for different pooling 2D layers.\n */\nexport class Pooling2D extends Layer {\n    constructor(args) {\n        if (args.poolSize == null) {\n            args.poolSize = [2, 2];\n        }\n        super(args);\n        this.poolSize = Array.isArray(args.poolSize) ?\n            args.poolSize :\n            [args.poolSize, args.poolSize];\n        if (args.strides == null) {\n            this.strides = this.poolSize;\n        }\n        else if (Array.isArray(args.strides)) {\n            if (args.strides.length !== 2) {\n                throw new ValueError(`If the strides property of a 2D pooling layer is an Array, ` +\n                    `it is expected to have a length of 2, but received length ` +\n                    `${args.strides.length}.`);\n            }\n            this.strides = args.strides;\n        }\n        else {\n            // `config.strides` is a number.\n            this.strides = [args.strides, args.strides];\n        }\n        assertPositiveInteger(this.poolSize, 'poolSize');\n        assertPositiveInteger(this.strides, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        checkPaddingMode(this.padding);\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        let rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        let cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        rows =\n            convOutputLength(rows, this.poolSize[0], this.padding, this.strides[0]);\n        cols =\n            convOutputLength(cols, this.poolSize[1], this.padding, this.strides[1]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], inputShape[1], rows, cols];\n        }\n        else {\n            return [inputShape[0], rows, cols, inputShape[3]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            return this.poolingFunction(getExactlyOneTensor(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);\n        });\n    }\n    getConfig() {\n        const config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n            dataFormat: this.dataFormat\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nexport class MaxPooling2D extends Pooling2D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n}\n/** @nocollapse */\nMaxPooling2D.className = 'MaxPooling2D';\nserialization.registerClass(MaxPooling2D);\nexport class AveragePooling2D extends Pooling2D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n}\n/** @nocollapse */\nAveragePooling2D.className = 'AveragePooling2D';\nserialization.registerClass(AveragePooling2D);\n/**\n * Abstract class for different pooling 3D layers.\n */\nexport class Pooling3D extends Layer {\n    constructor(args) {\n        if (args.poolSize == null) {\n            args.poolSize = [2, 2, 2];\n        }\n        super(args);\n        this.poolSize = Array.isArray(args.poolSize) ?\n            args.poolSize :\n            [args.poolSize, args.poolSize, args.poolSize];\n        if (args.strides == null) {\n            this.strides = this.poolSize;\n        }\n        else if (Array.isArray(args.strides)) {\n            if (args.strides.length !== 3) {\n                throw new ValueError(`If the strides property of a 3D pooling layer is an Array, ` +\n                    `it is expected to have a length of 3, but received length ` +\n                    `${args.strides.length}.`);\n            }\n            this.strides = args.strides;\n        }\n        else {\n            // `config.strides` is a number.\n            this.strides = [args.strides, args.strides, args.strides];\n        }\n        assertPositiveInteger(this.poolSize, 'poolSize');\n        assertPositiveInteger(this.strides, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        checkPaddingMode(this.padding);\n        this.inputSpec = [new InputSpec({ ndim: 5 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        let depths = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        let rows = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        let cols = this.dataFormat === 'channelsFirst' ? inputShape[4] : inputShape[3];\n        depths = convOutputLength(depths, this.poolSize[0], this.padding, this.strides[0]);\n        rows =\n            convOutputLength(rows, this.poolSize[1], this.padding, this.strides[1]);\n        cols =\n            convOutputLength(cols, this.poolSize[2], this.padding, this.strides[2]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], inputShape[1], depths, rows, cols];\n        }\n        else {\n            return [inputShape[0], depths, rows, cols, inputShape[4]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            return this.poolingFunction(getExactlyOneTensor(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);\n        });\n    }\n    getConfig() {\n        const config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n            dataFormat: this.dataFormat\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nexport class MaxPooling3D extends Pooling3D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool3d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n}\n/** @nocollapse */\nMaxPooling3D.className = 'MaxPooling3D';\nserialization.registerClass(MaxPooling3D);\nexport class AveragePooling3D extends Pooling3D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool3d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n}\n/** @nocollapse */\nAveragePooling3D.className = 'AveragePooling3D';\nserialization.registerClass(AveragePooling3D);\n/**\n * Abstract class for different global pooling 1D layers.\n */\nexport class GlobalPooling1D extends Layer {\n    constructor(args) {\n        super(args);\n        this.inputSpec = [new InputSpec({ ndim: 3 })];\n    }\n    computeOutputShape(inputShape) {\n        return [inputShape[0], inputShape[2]];\n    }\n    call(inputs, kwargs) {\n        throw new NotImplementedError();\n    }\n}\nexport class GlobalAveragePooling1D extends GlobalPooling1D {\n    constructor(args) {\n        super(args || {});\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            return tfc.mean(input, 1);\n        });\n    }\n}\n/** @nocollapse */\nGlobalAveragePooling1D.className = 'GlobalAveragePooling1D';\nserialization.registerClass(GlobalAveragePooling1D);\nexport class GlobalMaxPooling1D extends GlobalPooling1D {\n    constructor(args) {\n        super(args || {});\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            return tfc.max(input, 1);\n        });\n    }\n}\n/** @nocollapse */\nGlobalMaxPooling1D.className = 'GlobalMaxPooling1D';\nserialization.registerClass(GlobalMaxPooling1D);\n/**\n * Abstract class for different global pooling 2D layers.\n */\nexport class GlobalPooling2D extends Layer {\n    constructor(args) {\n        super(args);\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = inputShape;\n        if (this.dataFormat === 'channelsLast') {\n            return [inputShape[0], inputShape[3]];\n        }\n        else {\n            return [inputShape[0], inputShape[1]];\n        }\n    }\n    call(inputs, kwargs) {\n        throw new NotImplementedError();\n    }\n    getConfig() {\n        const config = { dataFormat: this.dataFormat };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nexport class GlobalAveragePooling2D extends GlobalPooling2D {\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsLast') {\n                return tfc.mean(input, [1, 2]);\n            }\n            else {\n                return tfc.mean(input, [2, 3]);\n            }\n        });\n    }\n}\n/** @nocollapse */\nGlobalAveragePooling2D.className = 'GlobalAveragePooling2D';\nserialization.registerClass(GlobalAveragePooling2D);\nexport class GlobalMaxPooling2D extends GlobalPooling2D {\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsLast') {\n                return tfc.max(input, [1, 2]);\n            }\n            else {\n                return tfc.max(input, [2, 3]);\n            }\n        });\n    }\n}\n/** @nocollapse */\nGlobalMaxPooling2D.className = 'GlobalMaxPooling2D';\nserialization.registerClass(GlobalMaxPooling2D);\n//# sourceMappingURL=pooling.js.map"]},"metadata":{},"sourceType":"module"}