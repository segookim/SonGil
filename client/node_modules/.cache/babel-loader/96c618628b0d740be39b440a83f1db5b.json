{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './engine';\nimport * as device_util from './device_util';\nimport { env } from './environment';\nvar ENV = env();\n/**\n * This file contains environment-related flag registrations.\n */\n\n/** Whether to enable debug mode. */\n\nENV.registerFlag('DEBUG', function () {\n  return false;\n}, function (debugValue) {\n  if (debugValue) {\n    console.warn('Debugging mode is ON. The output of every math call will ' + 'be downloaded to CPU and checked for NaNs. ' + 'This significantly impacts performance.');\n  }\n});\n/** Whether we are in a browser (as versus, say, node.js) environment. */\n\nENV.registerFlag('IS_BROWSER', function () {\n  return device_util.isBrowser();\n});\n/** Whether we are in a browser (as versus, say, node.js) environment. */\n\nENV.registerFlag('IS_NODE', function () {\n  return typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.node !== 'undefined';\n});\n/** Whether this browser is Chrome. */\n\nENV.registerFlag('IS_CHROME', function () {\n  return typeof navigator !== 'undefined' && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\n});\n/**\n * True when the environment is \"production\" where we disable safety checks\n * to gain performance.\n */\n\nENV.registerFlag('PROD', function () {\n  return false;\n});\n/**\n * Whether to do sanity checks when inferring a shape from user-provided\n * values, used when creating a new tensor.\n */\n\nENV.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', function () {\n  return ENV.getBool('DEBUG');\n});\n/** Whether deprecation warnings are enabled. */\n\nENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', function () {\n  return true;\n});\n/** True if running unit tests. */\n\nENV.registerFlag('IS_TEST', function () {\n  return false;\n});\n/** Whether to check computation result for errors. */\n\nENV.registerFlag('CHECK_COMPUTATION_FOR_ERRORS', function () {\n  return true;\n});","map":{"version":3,"sources":["../src/flags.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,OAAO,UAAP;AAEA,OAAO,KAAK,WAAZ,MAA6B,eAA7B;AACA,SAAQ,GAAR,QAAkB,eAAlB;AAEA,IAAM,GAAG,GAAG,GAAG,EAAf;AAEA;;AAEG;;AAEH;;AACA,GAAG,CAAC,YAAJ,CAAiB,OAAjB,EAA0B;AAAA,SAAM,KAAN;AAAA,CAA1B,EAAuC,UAAA,UAAU,EAAG;AAClD,MAAI,UAAJ,EAAgB;AACd,IAAA,OAAO,CAAC,IAAR,CACI,8DACA,6CADA,GAEA,yCAHJ;AAID;AACF,CAPD;AASA;;AACA,GAAG,CAAC,YAAJ,CAAiB,YAAjB,EAA+B;AAAA,SAAM,WAAW,CAAC,SAAZ,EAAN;AAAA,CAA/B;AAEA;;AACA,GAAG,CAAC,YAAJ,CACI,SADJ,EAEI;AAAA,SAAO,OAAO,OAAP,KAAmB,WAApB,IACD,OAAO,OAAO,CAAC,QAAf,KAA4B,WAD3B,IAED,OAAO,OAAO,CAAC,QAAR,CAAiB,IAAxB,KAAiC,WAFtC;AAAA,CAFJ;AAMA;;AACA,GAAG,CAAC,YAAJ,CACI,WADJ,EAEI;AAAA,SAAM,OAAO,SAAP,KAAqB,WAArB,IAAoC,SAAS,IAAI,IAAjD,IACF,SAAS,CAAC,SAAV,IAAuB,IADrB,IAC6B,SAAS,IAAT,CAAc,SAAS,CAAC,SAAxB,CAD7B,IAEF,aAAa,IAAb,CAAkB,SAAS,CAAC,MAA5B,CAFJ;AAAA,CAFJ;AAMA;;;AAGG;;AACH,GAAG,CAAC,YAAJ,CAAiB,MAAjB,EAAyB;AAAA,SAAM,KAAN;AAAA,CAAzB;AAEA;;;AAGG;;AACH,GAAG,CAAC,YAAJ,CACI,oCADJ,EAC0C;AAAA,SAAM,GAAG,CAAC,OAAJ,CAAY,OAAZ,CAAN;AAAA,CAD1C;AAGA;;AACA,GAAG,CAAC,YAAJ,CAAiB,8BAAjB,EAAiD;AAAA,SAAM,IAAN;AAAA,CAAjD;AAEA;;AACA,GAAG,CAAC,YAAJ,CAAiB,SAAjB,EAA4B;AAAA,SAAM,KAAN;AAAA,CAA5B;AAEA;;AACA,GAAG,CAAC,YAAJ,CAAiB,8BAAjB,EAAiD;AAAA,SAAM,IAAN;AAAA,CAAjD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './engine';\nimport * as device_util from './device_util';\nimport { env } from './environment';\nconst ENV = env();\n/**\n * This file contains environment-related flag registrations.\n */\n/** Whether to enable debug mode. */\nENV.registerFlag('DEBUG', () => false, debugValue => {\n    if (debugValue) {\n        console.warn('Debugging mode is ON. The output of every math call will ' +\n            'be downloaded to CPU and checked for NaNs. ' +\n            'This significantly impacts performance.');\n    }\n});\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag('IS_BROWSER', () => device_util.isBrowser());\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag('IS_NODE', () => (typeof process !== 'undefined') &&\n    (typeof process.versions !== 'undefined') &&\n    (typeof process.versions.node !== 'undefined'));\n/** Whether this browser is Chrome. */\nENV.registerFlag('IS_CHROME', () => typeof navigator !== 'undefined' && navigator != null &&\n    navigator.userAgent != null && /Chrome/.test(navigator.userAgent) &&\n    /Google Inc/.test(navigator.vendor));\n/**\n * True when the environment is \"production\" where we disable safety checks\n * to gain performance.\n */\nENV.registerFlag('PROD', () => false);\n/**\n * Whether to do sanity checks when inferring a shape from user-provided\n * values, used when creating a new tensor.\n */\nENV.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ENV.getBool('DEBUG'));\n/** Whether deprecation warnings are enabled. */\nENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => true);\n/** True if running unit tests. */\nENV.registerFlag('IS_TEST', () => false);\n/** Whether to check computation result for errors. */\nENV.registerFlag('CHECK_COMPUTATION_FOR_ERRORS', () => true);\n//# sourceMappingURL=flags.js.map"]},"metadata":{},"sourceType":"module"}