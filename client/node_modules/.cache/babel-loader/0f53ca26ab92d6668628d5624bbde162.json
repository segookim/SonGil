{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nexport var batchToSpaceND = function batchToSpaceND(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var blockShape = attrs.blockShape,\n      crops = attrs.crops;\n  util.assert(x.shape.length <= 4, function () {\n    return 'batchToSpaceND for rank > 4 with a WebGL backend not ' + 'implemented yet';\n  });\n  var prod = blockShape.reduce(function (a, b) {\n    return a * b;\n  });\n  var reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  var permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  var reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  var sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n  var sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n  var toDispose = [];\n  var reshapedIntermediate = reshape({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      shape: reshaped\n    }\n  });\n  var transposedIntermediate = transpose({\n    inputs: {\n      x: reshapedIntermediate\n    },\n    backend: backend,\n    attrs: {\n      perm: permuted\n    }\n  });\n  var reshapedIntermediate2 = reshape({\n    inputs: {\n      x: transposedIntermediate\n    },\n    backend: backend,\n    attrs: {\n      shape: reshapedPermuted\n    }\n  });\n  var sliced = slice({\n    inputs: {\n      x: reshapedIntermediate2\n    },\n    backend: backend,\n    attrs: {\n      begin: sliceBeginCoords,\n      size: sliceSize\n    }\n  });\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n  toDispose.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return sliced;\n};\nexport var batchToSpaceNDConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND\n};","map":{"version":3,"sources":["../../src/kernels/BatchToSpaceND.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nexport const batchToSpaceND = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockShape, crops } = attrs;\n    util.assert(x.shape.length <= 4, () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n        'implemented yet');\n    const prod = blockShape.reduce((a, b) => a * b);\n    const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n    const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n    const toDispose = [];\n    const reshapedIntermediate = reshape({ inputs: { x }, backend, attrs: { shape: reshaped } });\n    const transposedIntermediate = transpose({ inputs: { x: reshapedIntermediate }, backend, attrs: { perm: permuted } });\n    const reshapedIntermediate2 = reshape({\n        inputs: { x: transposedIntermediate },\n        backend,\n        attrs: { shape: reshapedPermuted }\n    });\n    const sliced = slice({\n        inputs: { x: reshapedIntermediate2 },\n        backend,\n        attrs: { begin: sliceBeginCoords, size: sliceSize }\n    });\n    toDispose.push(reshapedIntermediate);\n    toDispose.push(transposedIntermediate);\n    toDispose.push(reshapedIntermediate2);\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return sliced;\n};\nexport const batchToSpaceNDConfig = {\n    kernelName: BatchToSpaceND,\n    backendName: 'webgl',\n    kernelFunc: batchToSpaceND\n};\n//# sourceMappingURL=BatchToSpaceND.js.map"]},"metadata":{},"sourceType":"module"}