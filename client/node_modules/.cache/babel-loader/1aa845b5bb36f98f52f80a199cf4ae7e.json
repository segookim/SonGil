{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\n\nexport function createSimpleBinaryKernelImpl(op) {\n  return function (aShape, bShape, aVals, bVals, dtype) {\n    var newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    var resultRank = newShape.length;\n    var resultStrides = util.computeStrides(newShape);\n    var resultSize = util.sizeFromShape(newShape);\n    var result = util.getTypedArrayFromDType(dtype, resultSize);\n    var aRank = aShape.length;\n    var bRank = bShape.length;\n    var aStrides = util.computeStrides(aShape);\n    var bStrides = util.computeStrides(bShape);\n    var aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    var bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (var i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      var _loop = function _loop(_i) {\n        var loc = util.indexToLoc(_i, resultRank, resultStrides);\n        var aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(function (d) {\n          return aLoc[d] = 0;\n        });\n        var aIndex = util.locToIndex(aLoc, aRank, aStrides);\n        var bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(function (d) {\n          return bLoc[d] = 0;\n        });\n        var bIndex = util.locToIndex(bLoc, bRank, bStrides);\n        result[_i] = op(aVals[aIndex], bVals[bIndex]);\n      };\n\n      for (var _i = 0; _i < result.length; ++_i) {\n        _loop(_i);\n      }\n    }\n\n    return [result, newShape];\n  };\n}","map":{"version":3,"sources":["../../src/utils/binary_impl.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAA6D,IAA7D,QAAwE,uBAAxE;AAIA;;AAEG;;AACH,OAAM,SAAU,4BAAV,CAAuC,EAAvC,EAAgE;AAEpE,SAAO,UAAC,MAAD,EAAmB,MAAnB,EAAqC,KAArC,EACC,KADD,EACoB,KADpB,EAC+D;AACpE,QAAM,QAAQ,GAAG,YAAY,CAAC,0BAAb,CAAwC,MAAxC,EAAgD,MAAhD,CAAjB;AAEA,QAAM,UAAU,GAAG,QAAQ,CAAC,MAA5B;AACA,QAAM,aAAa,GAAG,IAAI,CAAC,cAAL,CAAoB,QAApB,CAAtB;AACA,QAAM,UAAU,GAAG,IAAI,CAAC,aAAL,CAAmB,QAAnB,CAAnB;AAEA,QAAM,MAAM,GACR,IAAI,CAAC,sBAAL,CAA4B,KAA5B,EAAsD,UAAtD,CADJ;AAGA,QAAM,KAAK,GAAG,MAAM,CAAC,MAArB;AACA,QAAM,KAAK,GAAG,MAAM,CAAC,MAArB;AAEA,QAAM,QAAQ,GAAG,IAAI,CAAC,cAAL,CAAoB,MAApB,CAAjB;AACA,QAAM,QAAQ,GAAG,IAAI,CAAC,cAAL,CAAoB,MAApB,CAAjB;AAEA,QAAM,cAAc,GAAG,YAAY,CAAC,gBAAb,CAA8B,MAA9B,EAAsC,QAAtC,CAAvB;AACA,QAAM,cAAc,GAAG,YAAY,CAAC,gBAAb,CAA8B,MAA9B,EAAsC,QAAtC,CAAvB;;AAEA,QAAI,cAAc,CAAC,MAAf,GAAwB,cAAc,CAAC,MAAvC,KAAkD,CAAtD,EAAyD;AACvD,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,EAAE,CAArC,EAAwC;AACtC,QAAA,MAAM,CAAC,CAAD,CAAN,GAAY,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAX,CAAN,EAA0B,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAX,CAA/B,CAAd;AACD;AACF,KAJD,MAIO;AAAA,iCACI,EADJ;AAEH,YAAM,GAAG,GAAG,IAAI,CAAC,UAAL,CAAgB,EAAhB,EAAmB,UAAnB,EAA+B,aAA/B,CAAZ;AAEA,YAAM,IAAI,GAAG,GAAG,CAAC,KAAJ,CAAU,CAAC,KAAX,CAAb;AACA,QAAA,cAAc,CAAC,OAAf,CAAuB,UAAA,CAAC;AAAA,iBAAI,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAd;AAAA,SAAxB;AACA,YAAM,MAAM,GAAG,IAAI,CAAC,UAAL,CAAgB,IAAhB,EAAsB,KAAtB,EAA6B,QAA7B,CAAf;AAEA,YAAM,IAAI,GAAG,GAAG,CAAC,KAAJ,CAAU,CAAC,KAAX,CAAb;AACA,QAAA,cAAc,CAAC,OAAf,CAAuB,UAAA,CAAC;AAAA,iBAAI,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAd;AAAA,SAAxB;AACA,YAAM,MAAM,GAAG,IAAI,CAAC,UAAL,CAAgB,IAAhB,EAAsB,KAAtB,EAA6B,QAA7B,CAAf;AAEA,QAAA,MAAM,CAAC,EAAD,CAAN,GAAY,EAAE,CAAC,KAAK,CAAC,MAAD,CAAN,EAAgB,KAAK,CAAC,MAAD,CAArB,CAAd;AAZG;;AACL,WAAK,IAAI,EAAC,GAAG,CAAb,EAAgB,EAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,EAAE,EAArC,EAAwC;AAAA,cAA/B,EAA+B;AAYvC;AACF;;AAED,WAAO,CAAC,MAAD,EAAS,QAAT,CAAP;AACD,GAzCD;AA0CD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op) {\n    return (aShape, bShape, aVals, bVals, dtype) => {\n        const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultRank = newShape.length;\n        const resultStrides = util.computeStrides(newShape);\n        const resultSize = util.sizeFromShape(newShape);\n        const result = util.getTypedArrayFromDType(dtype, resultSize);\n        const aRank = aShape.length;\n        const bRank = bShape.length;\n        const aStrides = util.computeStrides(aShape);\n        const bStrides = util.computeStrides(bShape);\n        const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < result.length; ++i) {\n                result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n            }\n        }\n        else {\n            for (let i = 0; i < result.length; ++i) {\n                const loc = util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n                result[i] = op(aVals[aIndex], bVals[bIndex]);\n            }\n        }\n        return [result, newShape];\n    };\n}\n//# sourceMappingURL=binary_impl.js.map"]},"metadata":{},"sourceType":"module"}